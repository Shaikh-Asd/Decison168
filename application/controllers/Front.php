<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Front extends MY_Controller {

public function __construct()
  {
    //call CodeIgniter's default Constructor
    parent::__construct();

    //load Model
    $this->load->model('Front_model');
    //load Helper
    $this->load->helper('cf_helper');

    //load Facebook library
    $this->load->library('facebook'); 
    
    //load zip  library    
    $this->load->library('zip');

    //load Google library
    require_once APPPATH.'third_party/src/Google_Client.php';
    require_once APPPATH.'third_party/src/contrib/Google_Oauth2Service.php';
    require_once APPPATH.'third_party/PhpOffice/PHPPresentation/src/PhpPresentation/Autoloader.php';
    \PhpOffice\PhpPresentation\Autoloader::register();

    require_once APPPATH.'third_party/PhpOffice/Common/src/Common/Autoloader.php';
    \PhpOffice\Common\Autoloader::register();

    // Load Stripe library & product model
    $this->load->library('stripe_lib');

    //Time Zone
    //date_default_timezone_set("Asia/kolkata");
    //date_default_timezone_set("US/Eastern"); // EST time zone
    date_default_timezone_set("America/New_York"); // EST time zone

    // $this->session->unset_userdata('created_tl_port_id');
    // $this->session->unset_userdata('created_tl_pid');
    // $this->session->unset_userdata('d168_id');
    // $this->session->sess_destroy();

    //$this->load->library('tcpdf');
  } 

  public function index()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function dashboard()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('d168_stripe_price_id');
      $student_id = $this->session->userdata('d168_id');
      $getEmail = $this->Front_model->getEmailID($student_id);
      $data['getMyPack'] = $getEmail;
      if($getEmail->package_coupon_id != '0')
      {
        if($getEmail->package_expiry <= date('Y-m-d H:i:s'))
        {
          if($getEmail->package_coupon_id != '0')
          {
            $used_coupons = $getEmail->used_package_coupon_id.','.$getEmail->package_coupon_id;
          }
          else
          {                          
            $used_coupons = $getEmail->used_package_coupon_id;
          }

          $upData = array(
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'package_coupon_id' =>  '',
                      'used_package_coupon_id' => $used_coupons,
                    );
              $upData = $this->security->xss_clean($upData); // xss filter
              $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
        }
      }
      elseif($getEmail->package_id != '1')
      {
        if(empty($getEmail->used_corporate_id))
        {
        $pack = $this->Front_model->getPackDetail($getEmail->package_id);
        $packVal = $pack->pack_validity;
        if(is_numeric($packVal))
        {
          // Set API key
          \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
          $check_subscription = \Stripe\Subscription::retrieve($getEmail->txn_id);
          if($check_subscription)
          {
            $sub_start = date("Y-m-d H:i:s", $check_subscription->current_period_start);
            $sub_end = date("Y-m-d H:i:s", $check_subscription->current_period_end);
            $sub_status = $check_subscription->status;
            if($sub_status == "active")
            {
              if(($getEmail->package_start != $sub_start) || ($getEmail->package_expiry != $sub_end))
              {
                  $upData = array(
                              'package_start' => $sub_start,
                              'package_expiry' => $sub_end,
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$student_id);
              }
            }
            elseif(($sub_status == "incomplete_expired") || ($sub_status == "past_due")  || ($sub_status == "canceled") || ($sub_status == "unpaid"))
            {
                $canceled_subscription = \Stripe\Subscription::update(
                  $getEmail->txn_id,
                  [
                    'cancel_at_period_end' => true,
                  ]
                );

                $upData = array(
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'balance_amount' => '',
                      'paid_amount' => '',
                      'card_number' => '0',
                      'card_exp_month' => '',
                      'card_exp_year' => '',
                      'card_cvc' => '',
                      'paid_amount_currency' => '',
                      'txn_id' => '',
                      'payment_status' => '',
                      'renew' => '',
                      'old_package' => $getEmail->package_id,
                      'refund_status' => 'no_refund',
                      'sub_cancel_reason' => 'card_expired',
                      'sub_cancel_reason_notify' => 'yes',
                    );
              $upData = $this->security->xss_clean($upData); // xss filter
              $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
            }
          }
        }
        }
      }
      //card expiring mail start
      // $mail_card_exp_month = $getEmail->card_exp_month;
      // $mail_card_exp_year = $getEmail->card_exp_year;
      // $mail_card_exp = $mail_card_exp_year.'-'.$mail_card_exp_month;
      // $checktodayDate = date('Y-m');
      // if((!empty($mail_card_exp_month)) && (!empty($mail_card_exp_year)))
      // {
      // if($mail_card_exp < $checktodayDate)
      // {
      //   $entertodayDate = date('Y-m-d');
      //   if($getEmail->card_exp_alert != $entertodayDate)
      //   {
      //     $upData = array(
      //               'card_exp_alert' => $entertodayDate
      //             );
      //       $upData = $this->security->xss_clean($upData); // xss filter
      //       $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));

      //       $email_to = $getEmail->email_address;
      //       $email_from = 'hello@decision168.com'; 
      //       //$email_from = 'saramaazkhan123@gmail.com'; 
      //       $email_name = 'Decision 168';

      //       $this->load->library('email');  
      //       $config=array(
      //         'charset'=>'utf-8',
      //         'wordwrap'=> TRUE,
      //         'mailtype' => 'html'
      //         );
      //       $this->email->initialize($config);
      //       $this->email->from($email_from, $email_name);
      //       $this->email->set_header('Reply-To', $email_from."\r\n");
      //       $this->email->set_header('Return-Path', $email_from."\r\n");
      //       $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      //       $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      //       $this->email->to($email_to);
      //       $this->email->set_mailtype('html');
      //       $this->email->subject('Card Expired Alert | Decision 168');
      //       $this->email->message('                 
      //           <!doctype html>
      //           <html lang="en-US">

      //           <head>
      //             <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
      //             <title>Package Expiration Alert</title>
      //             <meta name="description" content="Refund Request">
      //             <style type="text/css">
      //                 a:hover {text-decoration: underline !important;pointer:cursor !important;}
      //             </style>
      //           </head>

      //           <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
      //             <!--100% body table-->

      //             <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
      //                 style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
      //                 <tr>
      //                     <td>
      //                         <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
      //                             <tr>
      //                                 <td style="height:80px;">&nbsp;</td>
      //                             </tr>
      //                             <tr>
      //                                 <td style="text-align:center;">
      //                                   <a href="'.base_url().'" title="Decision 168" target="_blank">
      //                                     <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
      //                                   </a>
      //                                 </td>
      //                             </tr>
      //                             <tr>
      //                                 <td style="height:20px;">&nbsp;</td>
      //                             </tr>
      //                             <tr>
      //                                 <td>
      //                                     <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
      //                                         style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
      //                                         <tr>
      //                                             <td style="height:40px;">&nbsp;</td>
      //                                         </tr>
      //                                         <tr>
      //                                             <td style="padding:0 35px;">
      //                                                 <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Let\'s get you going!</h1>
      //                                                 <span
      //                                                     style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
      //                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
      //                                                 Hello '.$getEmail->first_name.' '.$getEmail->last_name.',<br><br>
      //                                                     Your Card is Expired! Please update your card detail! 
      //                                                     <br><br>
      //                                                 </p>
      //                                                 <a href="'.base_url('update-profile').'"
      //                                               style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Setting</a>
      //                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
      //                                                     Thanks,
      //                                                     <br>
      //                                                     The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
      //                                                     </p>
      //                                                     <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
      //                                                     <br>
      //                                                     <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
      //                                                     <br><span style="font-size:12px;">You received this email because you just signed up for an account. If it looks weird,<a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
      //                                                     </span>
      //                                                     </p>
      //                                             </td>
      //                                         </tr>
      //                                         <tr>
      //                                             <td style="height:40px;">&nbsp;</td>
      //                                         </tr>
      //                                     </table>
      //                                 </td>
      //                             <tr>
      //                                 <td style="height:20px;">&nbsp;</td>
      //                             </tr>
      //                             <tr>
      //                                 <td style="text-align:center;">
      //                                 <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
      //                                 <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
      //                                 <br>
      //                                     <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
      //                                 </td>
      //                             </tr>
      //                             <tr>
      //                                 <td style="height:80px;">&nbsp;</td>
      //                             </tr>
      //                         </table>
      //                     </td>
      //                 </tr>
      //             </table>
      //             <!--/100% body table-->
      //           </body>

      //           </html>' 
      //         );
      //           $this->email->send();
      //   }
      // }
      // }
      //card expiring mail end
      
        $data['packageExpired'] = "no";
        if(empty($getEmail->used_corporate_id))
        {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getEmail->package_expiry) !== false)
        {
          // if($getEmail->renew != "auto")
          // {
          // $expiry_alert1 = date('Y-m-d h:i', strtotime($getEmail->package_expiry. '-10 day'));
          // $expiry_alert2 = date('Y-m-d h:i', strtotime($getEmail->package_expiry. '-5 day'));
          // $expiry_alert3 = date('Y-m-d h:i', strtotime($getEmail->package_expiry. '-1 day'));
          
          // //echo $expiry_alert1;
          // //die();

          // if(($expiry_alert1 <= date('Y-m-d H:i')) && ($expiry_alert3 >= date('Y-m-d H:i')))
          // {

          //   $this->session->set_flashdata('ex_al_message','Your Package is going to Expire Soon!');
          //   // echo "yes";
          //   // die();
          // }

          // if(($expiry_alert1 == date('Y-m-d H:i')) || ($expiry_alert2 == date('Y-m-d H:i')))
          // {
          //   $email_to = $getEmail->email_address;
          //   $email_from = 'hello@decision168.com'; 
          //   //$email_from = 'saramaazkhan123@gmail.com'; 
          //   $email_name = 'Decision 168';

          //   $this->load->library('email');  
          //   $config=array(
          //     'charset'=>'utf-8',
          //     'wordwrap'=> TRUE,
          //     'mailtype' => 'html'
          //     );
          //   $this->email->initialize($config);
          //   $this->email->from($email_from, $email_name);
          //   $this->email->set_header('Reply-To', $email_from."\r\n");
          //   $this->email->set_header('Return-Path', $email_from."\r\n");
          //   $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          //   $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          //   $this->email->to($email_to);
          //   $this->email->set_mailtype('html');
          //   $this->email->subject('Package Expiration Alert | Decision 168');
          //   $this->email->message('                 
          //       <!doctype html>
          //       <html lang="en-US">

          //       <head>
          //         <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
          //         <title>Package Expiration Alert</title>
          //         <meta name="description" content="Refund Request">
          //         <style type="text/css">
          //             a:hover {text-decoration: underline !important;pointer:cursor !important;}
          //         </style>
          //       </head>

          //       <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
          //         <!--100% body table-->

          //         <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
          //             style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
          //             <tr>
          //                 <td>
          //                     <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
          //                         <tr>
          //                             <td style="height:80px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td style="text-align:center;">
          //                               <a href="'.base_url().'" title="Decision 168" target="_blank">
          //                                 <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
          //                               </a>
          //                             </td>
          //                         </tr>
          //                         <tr>
          //                             <td style="height:20px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td>
          //                                 <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
          //                                     style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
          //                                     <tr>
          //                                         <td style="height:40px;">&nbsp;</td>
          //                                     </tr>
          //                                     <tr>
          //                                         <td style="padding:0 35px;">
          //                                             <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Let\'s get you going!</h1>
          //                                             <span
          //                                                 style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
          //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
          //                                             Hello '.$getEmail->first_name.' '.$getEmail->last_name.',<br><br>
          //                                                 Your Package is going to expire in few Days. To keep using Decision 168 without interruption, choose a plan from packages! 
          //                                                 <br><br>
          //                                             </p>
          //                                             <a href="'.base_url('pricing-packages').'"
          //                                           style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Pricing</a>
          //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
          //                                                 Thanks,
          //                                                 <br>
          //                                                 The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
          //                                                 </p>
          //                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
          //                                                 <br>
          //                                                 <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
          //                                                 <br><span style="font-size:12px;">You received this email because you just signed up for an account. If it looks weird,<a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
          //                                                 </span>
          //                                                 </p>
          //                                         </td>
          //                                     </tr>
          //                                     <tr>
          //                                         <td style="height:40px;">&nbsp;</td>
          //                                     </tr>
          //                                 </table>
          //                             </td>
          //                         <tr>
          //                             <td style="height:20px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td style="text-align:center;">
          //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
          //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
          //                             <br>
          //                                 <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
          //                             </td>
          //                         </tr>
          //                         <tr>
          //                             <td style="height:80px;">&nbsp;</td>
          //                         </tr>
          //                     </table>
          //                 </td>
          //             </tr>
          //         </table>
          //         <!--/100% body table-->
          //       </body>

          //       </html>' 
          //     );
          //       $this->email->send(); 
          // }

          // if($expiry_alert3 == date('Y-m-d H:i'))
          // {
          //   $email_to = $getEmail->email_address;
          //   $email_from = 'hello@decision168.com'; 
          //   //$email_from = 'saramaazkhan123@gmail.com'; 
          //   $email_name = 'Decision 168';

          //   $this->load->library('email');  
          //   $config=array(
          //     'charset'=>'utf-8',
          //     'wordwrap'=> TRUE,
          //     'mailtype' => 'html'
          //     );
          //   $this->email->initialize($config);
          //   $this->email->from($email_from, $email_name);
          //   $this->email->set_header('Reply-To', $email_from."\r\n");
          //   $this->email->set_header('Return-Path', $email_from."\r\n");
          //   $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          //   $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          //   $this->email->to($email_to);
          //   $this->email->set_mailtype('html');
          //   $this->email->subject('Package Expiration Alert | Decision 168');
          //   $this->email->message('                 
          //       <!doctype html>
          //       <html lang="en-US">

          //       <head>
          //         <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
          //         <title>Package Expiration Alert</title>
          //         <meta name="description" content="Refund Request">
          //         <style type="text/css">
          //             a:hover {text-decoration: underline !important;pointer:cursor !important;}
          //         </style>
          //       </head>

          //       <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
          //         <!--100% body table-->

          //         <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
          //             style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
          //             <tr>
          //                 <td>
          //                     <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
          //                         <tr>
          //                             <td style="height:80px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td style="text-align:center;">
          //                               <a href="'.base_url().'" title="Decision 168" target="_blank">
          //                                 <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
          //                               </a>
          //                             </td>
          //                         </tr>
          //                         <tr>
          //                             <td style="height:20px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td>
          //                                 <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
          //                                     style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
          //                                     <tr>
          //                                         <td style="height:40px;">&nbsp;</td>
          //                                     </tr>
          //                                     <tr>
          //                                         <td style="padding:0 35px;">
          //                                             <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Aw shucks...</h1>
          //                                             <span
          //                                                 style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
          //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
          //                                             Hello '.$getEmail->first_name.' '.$getEmail->last_name.',<br><br>
          //                                                 Your Package is going to expire in a Day. To keep using Decision 168 without interruption, choose a plan from packages! 
          //                                                 <br><br>
          //                                             </p>
          //                                             <a href="'.base_url('pricing-packages').'"
          //                                           style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Pricing</a>
          //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
          //                                                 Thanks,
          //                                                 <br>
          //                                                 The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
          //                                                 </p>
          //                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
          //                                                 <br>
          //                                                 <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
          //                                                 <br><span style="font-size:12px;">You received this email because you just signed up for an account. If it looks weird,<a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
          //                                                 </span>
          //                                                 </p>
          //                                         </td>
          //                                     </tr>
          //                                     <tr>
          //                                         <td style="height:40px;">&nbsp;</td>
          //                                     </tr>
          //                                 </table>
          //                             </td>
          //                         <tr>
          //                             <td style="height:20px;">&nbsp;</td>
          //                         </tr>
          //                         <tr>
          //                             <td style="text-align:center;">
          //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
          //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
          //                             <br>
          //                                 <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
          //                             </td>
          //                         </tr>
          //                         <tr>
          //                             <td style="height:80px;">&nbsp;</td>
          //                         </tr>
          //                     </table>
          //                 </td>
          //             </tr>
          //         </table>
          //         <!--/100% body table-->
          //       </body>

          //       </html>' 
          //     );
          //       $this->email->send(); 
          // }
          // }

          if($getEmail->package_expiry <= date('Y-m-d H:i:s'))
              {
                //echo "yes_e";
                if($getEmail->renew == "auto")
                {
                  $data['packageExpired'] = "yes";
                  // $card_exp_month = $getEmail->card_exp_month;
                  // $card_exp_year = $getEmail->card_exp_year;
                  // $card_exp = $card_exp_year.'-'.$card_exp_month;
                  // $todayDate = date('Y-m');
                  // if($card_exp < $todayDate)
                  // {
                  //   $data['packageExpired'] = "yes";
                  // }
                  // else
                  // {
                  //   $renew_pack = $this->Front_model->getPackDetail($getEmail->package_id);
                  //   if($renew_pack)
                  //   {
                  //     if($renew_pack->pack_status == "active")
                  //     {
                  //       $package['pack_id'] = $renew_pack->pack_id;
                  //       $package['pack_price'] = $renew_pack->pack_price;
                  //       $package['pack_name'] = $renew_pack->pack_name; 
                  //       $package['pack_validity'] = $renew_pack->pack_validity;
                  //       $package['left_amt'] = "";
                  //       $package['name'] = $getEmail->first_name.' '.$getEmail->last_name;
                  //       $package['email'] = $getEmail->email_address;
                  //       $package['card_number'] = $getEmail->card_number;
                  //       $package['card_exp_month'] = $getEmail->card_exp_month;
                  //       $package['card_exp_year'] = $getEmail->card_exp_year;
                  //       $package['card_cvc'] = base64_decode($getEmail->card_cvc);
                  //       // Make payment
                  //       $successRenew = $this->renew_auto($package);
                  //       //print_r($package);
                  //       //die();
                  //       // If payment successful
                  //       // if($successRenew){
                  //       //   $data['packageExpired'] = "no";
                  //       // }
                  //       // else
                  //       // {
                  //       //   $data['packageExpired'] = "yes";
                  //       // }
                  //       //die();
                  //     }
                  //     else
                  //     {
                  //       $data['packageExpired'] = "yes";
                  //     }
                  //   }
                  //   else
                  //   {
                  //     $data['packageExpired'] = "yes";
                  //   }
                  // }
                }
                else
                {
                  $data['packageExpired'] = "yes";
                }                
              }
              else
              {
                //echo "no_e";
                $data['packageExpired'] = "no";
              }
        }
        else
        {
          $data['packageExpired'] = "no";
        }
        }
        //die();
      $data['count_total_portfolio'] = $this->Front_model->count_total_portfolio($getEmail->email_address);
      $data['view_member_project_count'] = $this->Front_model->view_member_project_count($student_id);
      $data['view_created_project_count'] = $this->Front_model->view_created_project_count($student_id);
      $data['view_member_project_content_count'] = $this->Front_model->view_member_project_content_count($student_id);
      $data['view_created_project_content_count'] = $this->Front_model->view_created_project_content_count($student_id);
      $data['view_left_task_counts'] = $this->Front_model->view_left_task_count($student_id);
      $data['view_left_subtask_counts'] = $this->Front_model->view_left_subtask_count($student_id);
      $data['view_done_task_counts'] = $this->Front_model->view_done_task_count($student_id);
      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      // Support functions ------//-----//----//----//----
      $data['msg_for_supporter'] = "";
      $check_approve = $this->Front_model->checkIfSupporterEmailApprove($data['stud_del']->email_address);
      $check_deny = $this->Front_model->checkIfSupporterEmailDeny($data['stud_del']->email_address);
      if($check_approve){
        if($data['stud_del']->supporter_approve != 'yes'){
          $data_arr = array(  'role' => 'supporter',
                              'supporter_mail' => '1',
                              'supporter_approve' => 'yes',
                              'supporter_status' => 'active',
                           );
          $data_arr = $this->security->xss_clean($data_arr); // xss filter
          $this->Front_model->updateRegistration($data_arr,$data['stud_del']->reg_id);
          $data['msg_for_supporter'] = "Congratulations, you've accepted the invitation to be a Supporter for Decision168 platform. You can now view your assigned tickets. <a target='_blank' href='".base_url('support-list')."'>Support</a>";
        }
      }
      if($check_deny){
        if($data['stud_del']->supporter_approve != 'no'){
          $data_arr = array(  'role' => '',
                              'supporter_mail' => '1',
                              'supporter_approve' => 'no',
                           );
          $data_arr = $this->security->xss_clean($data_arr); // xss filter
          $this->Front_model->updateRegistration($data_arr,$data['stud_del']->reg_id);
          $data['msg_for_supporter'] = "You've denied the invitation to be a Supporter for Decision168 platform. If this was by mistake, reach out to the person that invited you.";
        }
      }
      // End Support functions ------//-----//----//----//----
      $data['motivator'] = $this->Front_model->Motivator();
      //$data['ad_logo'] = $this->Front_model->ad_logo();
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();
      //reminder mail to portfolio team member
      $get_Portfolio_To_Remind = $this->Front_model->get_Portfolio_To_Remind();
      if($get_Portfolio_To_Remind)
      {
        $current_Remind_Date = date('Y-m-d H:i:s');
        $today_reminder = strtotime($current_Remind_Date);
        foreach($get_Portfolio_To_Remind as $port_reminder)
        {
          $reminder_date = $port_reminder->reminder_date;
          $send_reminder = strtotime($reminder_date);
          if($send_reminder < $today_reminder)
          {
            $email_to = $port_reminder->sent_to;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';
            $this->load->library('email');  
            $config=array(
                         'charset'=>'utf-8',
                         'wordwrap'=> TRUE,
                         'mailtype' => 'html'
                         );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Reminder of Portfolio Team Member Request | Decision 168');
          $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Portfolio Request</title>
            <meta name="description" content="Portfolio Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Portfolio...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($getEmail->first_name).' '.ucfirst($getEmail->last_name).' has invited you to join '.$port_reminder->portfolio_name.' '.$port_reminder->portfolio_lname.' portfolio as a team member. Just click the appropriate button below to join the portfolio or request more information.
                                                    <br><br>
                                                    Portfolio Short Description: '.substr($port_reminder->about_portfolio,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('portfolio-invite-accept-request/'.$port_reminder->portfolio_id.'/'.$port_reminder->pim_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join The Team</a>
                                                <a href="'.base_url('portfolio-invite-reject-request/'.$port_reminder->portfolio_id.'/'.$port_reminder->pim_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
              );
              $this->email->send();
              $rdata = array(  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day")));
              $rdata = $this->security->xss_clean($rdata); // xss filter
              $this->Front_model->update_portfolio_reminder_date($rdata,$port_reminder->pim_id);
          }
        }
      }
      if(!empty($data['packageExpired']))
      {
        $data['myPack_id'] = "";
        if($getEmail)
        {
          $data['myPack_id'] = $getEmail->package_id;
        }        
        $this->load->view('user/dashboard',$data); 
      }
         
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function renew_auto($package)
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(!empty($package))
      {
        $content['package'] = $package;
        $this->load->view('user/renew-package',$content);
        //die();
        return TRUE;
      }
      else
      {
        return false; 
      } 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function renew_payment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $postData = $this->input->post();
    // If post data is not empty
    if(!empty($postData)){
      // Retrieve stripe token, card and user info from the submitted form data
      $token  = $postData['stripeToken'];
      $name = $postData['name'];
      $email = $postData['email'];
      $card_number = $postData['card_number'];
      $card_number = preg_replace('/\s+/', '', $card_number);
      $card_exp_month = $postData['card_exp_month'];
      $card_exp_year = $postData['card_exp_year'];
      $card_cvc = $postData['card_cvc'];
      

      // Unique order ID
      $orderID = strtoupper(str_replace('.','',uniqid('', true)));
      
      // Add customer to stripe
      $customer = $this->stripe_lib->addCustomer($email, $token);
      
      if($customer){
        // Charge a credit or a debit card
        $charge = $this->stripe_lib->createCharge($customer->id, $postData['pack_name'], $postData['pack_price'], $orderID);
        
        if($charge){
          // Check whether the charge is successful
          if($charge['amount_refunded'] == 0 && empty($charge['failure_code']) && $charge['paid'] == 1 && $charge['captured'] == 1){
            // Transaction details 
            $transactionID = $charge['balance_transaction'];
            $paidAmount = $charge['amount'];
            $paidAmount = ($paidAmount/100);
            $paidCurrency = $charge['currency'];
            $payment_status = $charge['status'];
            
            $check_type = is_numeric(trim($postData['pack_validity']));
              if($check_type == 'true')
              {
                $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($postData['pack_validity']).' day'));
              }
              else
              {
                $pack_expire = "";
              }
            // Insert tansaction data into the database
            $upData = array(
              'package_id' => $postData['pack_id'],
              'package_start' => date('Y-m-d H:i:s'),
              'package_expiry' => $pack_expire,
              'card_number' => $card_number,
              'card_exp_month' => $card_exp_month,
              'card_exp_year' => $card_exp_year,
              'card_cvc' =>  base64_encode($card_cvc),
              'balance_amount' => $postData['left_amt'],
              'paid_amount' => $paidAmount,
              'paid_amount_currency' => $paidCurrency,
              'txn_id' => $transactionID,
              'payment_status' => $payment_status,
            );
            $upData = $this->security->xss_clean($upData); // xss filter
            $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
            
            // If the order is successful
            if($payment_status == 'succeeded'){
              redirect(base_url('dashboard'));
              return TRUE;
            }
          }
        }
      }
    }
    return false;
    }
    else
    {      
      redirect(base_url('login'));
    }
  }

  // public function manage_renew_plan()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $sel_opt = $this->input->post('opt');
  //     $upData = array(
  //             'renew' => $sel_opt,
  //           );
  //     $upData = $this->security->xss_clean($upData); // xss filter
  //     $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));  
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function downgrade_plan()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $getEmail = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
      if($getEmail)
      {
        $pack = $this->Front_model->getPackDetail($getEmail->package_id);
        $packVal = $pack->pack_validity;
        // if(is_numeric($packVal))
        // {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getEmail->package_start) !== false)
          {
            $pack_duration = date('Y-m-d h:i:s', strtotime($getEmail->package_start. '+30 day'));
            // echo $pack_duration;
            // die();
            if(date('Y-m-d H:i:s') <= $pack_duration)
            {
              // Set API key
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

              $subscription = \Stripe\Subscription::retrieve($getEmail->txn_id);
              $subscription->cancel();
              // echo "<pre>";
              // print_r($subscription);
              // die();
              if($subscription->status == "canceled")
              {
              $upData = array(
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'balance_amount' => '',
                      'paid_amount' => '',
                      'card_number' => '0',
                      'card_exp_month' => '',
                      'card_exp_year' => '',
                      'card_cvc' => '',
                      'paid_amount_currency' => '',
                      'txn_id' => '',
                      'payment_status' => '',
                      'renew' => '',
                      'refund_status' => 'refund',
                      'refund_main_txn_id' => $getEmail->txn_id,
                      'refund_txn_id' => $subscription->latest_invoice,
                      'old_package' => $getEmail->package_id,
                      'refund_amount' => ''
                    );
              $upData = $this->security->xss_clean($upData); // xss filter
              $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id')); 

          $email_to = 'don@z2squared.com';
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Refund Request | Decision 168');
          $this->email->message('                 
              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Refund Request</title>
                <meta name="description" content="Refund Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Refund Request</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello SuperAdmin,<br><br>
                                                       '.ucfirst($getEmail->first_name).' '.ucfirst($getEmail->last_name).' has downgraded the package and requested you a Refund. Please go to Stripe and Refund by using Invoice ID.
                                                        <br><br>
                                                        Invoice ID: '.$subscription->latest_invoice.'
                                                        <br><br>
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
            );
             $this->email->send(); 

              $this->session->set_flashdata('message', 'Downgrade Successful ! Refund initiated and will credit in your account within 5 Working Days!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            }
            else
            {
              // Set API key
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

              $subscription = \Stripe\Subscription::retrieve($getEmail->txn_id);
              $subscription->cancel();
              if($subscription->status == "canceled")
              {
              $upData = array(
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'balance_amount' => '',
                      'paid_amount' => '',
                      'card_number' => '0',
                      'card_exp_month' => '',
                      'card_exp_year' => '',
                      'card_cvc' => '',
                      'paid_amount_currency' => '',
                      'txn_id' => '',
                      'payment_status' => '',
                      'renew' => '',
                      'old_package' => $getEmail->package_id,
                      'refund_status' => 'no_refund',
                    );
              $upData = $this->security->xss_clean($upData); // xss filter
              $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));

              $this->session->set_flashdata('message', 'Downgrade Successful ! No Refund!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
              }
            }
          }
        //}
        // else
        // {
        //   if(DateTime::createFromFormat('Y-m-d H:i:s', $getEmail->package_start) !== false)
        //   {
        //     $pack_duration = date('Y-m-d h:i:s', strtotime($getEmail->package_start. '+30 day'));
        //     // echo $pack_duration;
        //     // die();
        //     if(date('Y-m-d H:i:s') <= $pack_duration)
        //     {
        //       // Set API key
        //       \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

        //       $subscription = \Stripe\PaymentIntent::retrieve($getEmail->txn_id);
              
        //       $upData = array(
        //               'package_id' => '1',
        //               'package_start' => date('Y-m-d H:i:s'),
        //               'package_expiry' => 'free_forever',
        //               'balance_amount' => '',
        //               'paid_amount' => '',
        //               'card_number' => '0',
        //               'card_exp_month' => '',
        //               'card_exp_year' => '',
        //               'card_cvc' => '',
        //               'paid_amount_currency' => '',
        //               'txn_id' => '',
        //               'payment_status' => '',
        //               'renew' => '',
        //               'refund_status' => 'refund',
        //               'refund_main_txn_id' => $getEmail->txn_id,
        //               'refund_txn_id' => $subscription->id,
        //               'old_package' => $getEmail->package_id,
        //               'refund_amount' => ''
        //             );
        //       $upData = $this->security->xss_clean($upData); // xss filter
        //       $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id')); 

        //   $email_to = 'don@z2squared.com';
        //   $email_from = 'hello@decision168.com'; 
        //   //$email_from = 'saramaazkhan123@gmail.com'; 
        //   $email_name = 'Decision 168';

        //   $this->load->library('email');  
        //   $config=array(
        //     'charset'=>'utf-8',
        //     'wordwrap'=> TRUE,
        //     'mailtype' => 'html'
        //     );
        //   $this->email->initialize($config);
        //   $this->email->from($email_from, $email_name);
        //   $this->email->set_header('Reply-To', $email_from."\r\n");
        //   $this->email->set_header('Return-Path', $email_from."\r\n");
        //   $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        //   $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        //   $this->email->to($email_to);
        //   $this->email->set_mailtype('html');
        //   $this->email->subject('Refund Request | Decision 168');
        //   $this->email->message('                 
        //       <!doctype html>
        //       <html lang="en-US">

        //       <head>
        //         <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        //         <title>Refund Request</title>
        //         <meta name="description" content="Refund Request">
        //         <style type="text/css">
        //             a:hover {text-decoration: underline !important;pointer:cursor !important;}
        //         </style>
        //       </head>

        //       <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
        //         <!--100% body table-->

        //         <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
        //             style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
        //             <tr>
        //                 <td>
        //                     <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
        //                         <tr>
        //                             <td style="height:80px;">&nbsp;</td>
        //                         </tr>
        //                         <tr>
        //                             <td style="text-align:center;">
        //                               <a href="'.base_url().'" title="Decision 168" target="_blank">
        //                                 <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
        //                               </a>
        //                             </td>
        //                         </tr>
        //                         <tr>
        //                             <td style="height:20px;">&nbsp;</td>
        //                         </tr>
        //                         <tr>
        //                             <td>
        //                                 <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
        //                                     style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
        //                                     <tr>
        //                                         <td style="height:40px;">&nbsp;</td>
        //                                     </tr>
        //                                     <tr>
        //                                         <td style="padding:0 35px;">
        //                                             <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Refund Request</h1>
        //                                             <span
        //                                                 style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
        //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
        //                                             Hello SuperAdmin,<br><br>
        //                                                '.$getEmail->first_name.' '.$getEmail->last_name.' has downgraded the package and requested you a Refund. Please go to Stripe and Refund by using Invoice ID.
        //                                                 <br><br>
        //                                                 Invoice ID: '.$subscription->id.'
        //                                                 <br><br>
        //                                             </p>
        //                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
        //                                                 Thanks,
        //                                                 <br>
        //                                                 The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
        //                                                 </p>
        //                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
        //                                                 <br>
        //                                                 <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
        //                                                 <br><span style="font-size:12px;">You received this email because you just signed up for an account. If it looks weird,<a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
        //                                                 </span>
        //                                                 </p>
        //                                         </td>
        //                                     </tr>
        //                                     <tr>
        //                                         <td style="height:40px;">&nbsp;</td>
        //                                     </tr>
        //                                 </table>
        //                             </td>
        //                         <tr>
        //                             <td style="height:20px;">&nbsp;</td>
        //                         </tr>
        //                         <tr>
        //                             <td style="text-align:center;">
        //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
        //                             <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
        //                             <br>
        //                                 <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
        //                             </td>
        //                         </tr>
        //                         <tr>
        //                             <td style="height:80px;">&nbsp;</td>
        //                         </tr>
        //                     </table>
        //                 </td>
        //             </tr>
        //         </table>
        //         <!--/100% body table-->
        //       </body>

        //       </html>' 
        //     );
        //      $this->email->send(); 

        //       $this->session->set_flashdata('message', 'Downgrade Successful ! Refund initiated and will credit in your account within 5 Working Days!');
        //       $response['status'] = TRUE;
        //       header('Content-type: application/json');
        //       echo json_encode($response);
        //     }
        //     else
        //     {
        //       // Set API key
        //       \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

        //       $subscription = \Stripe\PaymentIntent::retrieve($getEmail->txn_id);
              
        //       $upData = array(
        //               'package_id' => '1',
        //               'package_start' => date('Y-m-d H:i:s'),
        //               'package_expiry' => 'free_forever',
        //               'balance_amount' => '',
        //               'paid_amount' => '',
        //               'card_number' => '0',
        //               'card_exp_month' => '',
        //               'card_exp_year' => '',
        //               'card_cvc' => '',
        //               'paid_amount_currency' => '',
        //               'txn_id' => '',
        //               'payment_status' => '',
        //               'renew' => '',
        //               'old_package' => $getEmail->package_id,
        //               'refund_status' => 'no_refund',
        //             );
        //       $upData = $this->security->xss_clean($upData); // xss filter
        //       $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));

        //       $this->session->set_flashdata('message', 'Downgrade Successful ! No Refund!');
        //       $response['status'] = TRUE;
        //       header('Content-type: application/json');
        //       echo json_encode($response);
        //     }
        //   }
        // }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }
  
  public function my_alerts()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/my_alerts');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function Profile_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $getEmail = $this->Front_model->getEmailID($student_id);
      $data['count_total_portfolio'] = $this->Front_model->count_total_portfolio($getEmail->email_address);
      $data['view_member_project_count'] = $this->Front_model->view_member_project_count($student_id);
      $data['view_created_project_count'] = $this->Front_model->view_created_project_count($student_id);
      $data['view_member_project_content_count'] = $this->Front_model->view_member_project_content_count($student_id);
      $data['view_created_project_content_count'] = $this->Front_model->view_created_project_content_count($student_id);
      $data['view_left_task_counts'] = $this->Front_model->view_left_task_count($student_id);
      $data['view_left_subtask_counts'] = $this->Front_model->view_left_subtask_count($student_id);
      $data['view_done_task_counts'] = $this->Front_model->view_done_task_count($student_id);
      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProfileModalLabel">Profile</h5>
                    &nbsp;&nbsp;<a href="'.base_url('profile').'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/profile-modal',$data);                                       
      echo '</div>';   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function profile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $getEmail = $this->Front_model->getEmailID($student_id);
      $data['count_total_portfolio'] = $this->Front_model->count_total_portfolio($getEmail->email_address);
      $data['view_member_project_count'] = $this->Front_model->view_member_project_count($student_id);
      $data['view_created_project_count'] = $this->Front_model->view_created_project_count($student_id);
      $data['view_member_project_content_count'] = $this->Front_model->view_member_project_content_count($student_id);
      $data['view_created_project_content_count'] = $this->Front_model->view_created_project_content_count($student_id);
      $data['view_left_task_counts'] = $this->Front_model->view_left_task_count($student_id);
      $data['view_left_subtask_counts'] = $this->Front_model->view_left_subtask_count($student_id);
      $data['view_done_task_counts'] = $this->Front_model->view_done_task_count($student_id);
      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      $this->load->view('user/profile',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_profile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      $data['country'] = $this->Front_model->getCountries();
      $this->load->view('user/update-profile',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_profile() //Update Student Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {     
    $this->form_validation->set_rules('first_name','First Name','trim|required|callback_alpha_space|max_length[20]',array('max_length' => 'First Name is too long!'));
    $this->form_validation->set_rules('middle_name','Middle Name','trim|max_length[20]',array('max_length' => 'Middle Name is too long!'));
    $this->form_validation->set_rules('last_name','Last Name','trim|required|callback_alpha_space|max_length[25]',array('max_length' => 'Last Name is too long!'));
    $this->form_validation->set_rules('email_address','Email Address','valid_email|trim|required');
    $this->form_validation->set_rules('designation','Designation','trim');
    $this->form_validation->set_rules('company','Company','trim');
    $this->form_validation->set_rules('phone_number','Phone Number','trim|numeric');
    $this->form_validation->set_rules('country','Country','trim');
    $this->form_validation->set_rules('gender','Gender','trim');
    $this->form_validation->set_rules('dob','DOB','trim');
    $this->form_validation->set_rules('photo','Photo','trim');
    $this->form_validation->set_rules('cover','Cover Photo','trim');
    
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();

        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
          // Add the error message for this field
          $errors[$key] = form_error($key);
        }
      
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
    }
    else
    {
      if(!empty($this->input->post('dob')))
      {
        $dobdate = date('Y-m-d', strtotime($this->input->post('dob')));
        $today = date('Y-m-d');
        $date1=date_create($dobdate);
        $date2=date_create($today);
        $diff=date_diff($date1,$date2);

        $age = $diff->format("%y");
        //echo $age;
        if($age < 18)   
        {
            $response['status'] = 'dob_error';
            header('Content-type: application/json');
            //echo json_encode($response);
            exit(json_encode($response));
        }
        else
        {
          $dob = date('Y-m-d', strtotime($this->input->post('dob')));
        }        
      }
      else
      {
        $dob = "";
      }

      $student_id = $this->session->userdata('d168_id');
      $studdel = $this->Front_model->getStudentById($student_id);
      $photo = $studdel->photo;
      $this->load->library('upload');
      if(!empty($_POST['photo']))
      {          
          //////////////---------Upload Image-------///////////////////////   
          // $this->upload->initialize($this->photo_upload());
          // if($this->upload->do_upload('photo'))
          // {
          //   $fileData = $this->upload->data();
          //   $uploadImage['image'] = $fileData['file_name'];
          //   $photo = $uploadImage['image'];
          // }
          // else
          // {
          //     $response['status'] = 'photoErr';
          //     $response['photoerr'] = $this->upload->display_errors();;
          //     // You can use the Output class here too
          //   header('Content-type: application/json');
          //   //echo json_encode($response);
          //   exit(json_encode($response));
          // }
        $data = $_POST['photo'];
          list($type, $data) = explode(';', $data);
          list(, $data)      = explode(',', $data);
          $data = base64_decode($data);
          $imageName = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/student_photos/'.$imageName, $data))
          {
           $photo = $imageName;
          }
      }
      
      $cover_photo = $studdel->cover_photo;
      if(!empty($_POST['cover_photo']))
      {
          //////////////---------Upload Image-------///////////////////////   
          // $this->upload->initialize($this->cover_photo_upload());
          // if($this->upload->do_upload('cover_photo'))
          // {
          //   $fileData1 = $this->upload->data();
          //   $uploadImage1['image'] = $fileData1['file_name'];
          //   $cover_photo = $uploadImage1['image'];
          // }
          // else
          // {
          //   $response['status'] = 'cover_photoErr';
          //   $response['photoerr'] = $this->upload->display_errors();;
          //     // You can use the Output class here too
          //   header('Content-type: application/json');
          //   //echo json_encode($response);
          //   exit(json_encode($response));
          // }
        $data1 = $_POST['cover_photo'];
          list($type, $data1) = explode(';', $data1);
          list(, $data1)      = explode(',', $data1);
          $data1 = base64_decode($data1);
          $imageName1 = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/student_cover_photos/'.$imageName1, $data1))
          {
           $cover_photo = $imageName1;
          }
      }

      $social_media_icon="";
      $social_media="";
      if($this->input->post('social_media')){
        $social_media_icon = implode(',',$this->input->post('social_media_icon'));
        $social_media = implode(',',$this->input->post('social_media'));
      }      
      
      $student_id = $this->session->userdata('d168_id');
      $data = array(  'first_name' => $this->input->post('first_name'),
                      'middle_name' => $this->input->post('middle_name'),
                      'last_name' => $this->input->post('last_name'),
                      'about_me' => $this->input->post('about_me'),
                      'designation' => $this->input->post('designation'),
                      'company' => $this->input->post('company'),
                      'phone_number' => $this->input->post('phone_number'),
                      'gender' => $this->input->post('gender'),
                      'gender_other' => $this->input->post('gender_other'),
                      'dob' => $dob,
                      'social_media_icon' => $social_media_icon,
                      'social_media' => $social_media,
                      'country' => $this->input->post('country'),
                      'photo' => $photo,
                      'cover_photo' => $cover_photo,  
                      'expertise' => $this->input->post('expertise'),
                   );
      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->updateRegistration($data,$student_id);
      $this->session->set_flashdata('message', 'Profile Updated Successfully');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);  
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  private function photo_upload()
  { 
    $config = array();
    $config['upload_path']    = './assets/student_photos/';
    $config['allowed_types']  = 'jpg|png|jpeg|gif|JPG|PNG|JPEG|GIF';
    $config['max_size']       = 100000;
    $config['overwrite']      = FALSE;
    return $config;
  }

  private function cover_photo_upload()
  { 
    $config = array();
    $config['upload_path']    = './assets/student_cover_photos/';
    $config['allowed_types']  = 'jpg|png|jpeg|gif|JPG|PNG|JPEG|GIF';
    $config['max_size']       = 100000;
    $config['overwrite']      = FALSE;
    return $config;
  }

  public function chat()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/chat');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function file_manager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/filemanager');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function crypto_kyc_application()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/crypto-kyc-application');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  //public function crypto_ico_landing()
  //{
    //$this->load->view('user/crypto-ico-landing');
  //}

  // public function email_template_basic()
  // {
  //     //$this->load->view('user/email-template-basic');    
  //         $email_to = 'uzmakarjikar@gmail.com';
  //         $email_from = 'hello@decision168.com'; 
  //         //$email_from = 'saramaazkhan123@gmail.com'; 
  //         $email_name = 'Decision 168';

  //         $this->load->library('email');  
  //         $config=array(
  //           'charset'=>'utf-8',
  //           'wordwrap'=> TRUE,
  //           'mailtype' => 'html'
  //           );
  //         $this->email->initialize($config);
  //         $this->email->from($email_from, $email_name);
  //         $this->email->set_header('Reply-To', $email_from."\r\n");
  //         $this->email->set_header('Return-Path', $email_from."\r\n");
  //         $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
  //         $this->email->set_header('MIME-Version', '1.0' . "\r\n");
  //         $this->email->to($email_to);
  //         $this->email->set_mailtype('html');
  //         $this->email->subject('Demo Reminder | Decision 168');
  //         $this->email->message('                 
  //             <!doctype html>
  //             <html lang="en-US">

  //             <head>
  //               <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  //               <title>Demo Reminder</title>
  //               <meta name="description" content="Demo Reminder">
  //               <style type="text/css">
  //                   a:hover {text-decoration: underline !important;pointer:cursor !important;}
  //               </style>
  //             </head>

  //             <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
  //               <!--100% body table-->

  //               <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
  //                   style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
  //                   <tr>
  //                       <td>
  //                           <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
  //                               <tr>
  //                                   <td style="height:80px;">&nbsp;</td>
  //                               </tr>
  //                               <tr>
  //                                   <td style="text-align:center;">
  //                                     <a href="'.base_url().'" title="Decision 168" target="_blank">
  //                                       <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
  //                                     </a>
  //                                   </td>
  //                               </tr>
  //                               <tr>
  //                                   <td style="height:20px;">&nbsp;</td>
  //                               </tr>
  //                               <tr>
  //                                   <td>
  //                                       <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
  //                                           style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
  //                                           <tr>
  //                                               <td style="height:40px;">&nbsp;</td>
  //                                           </tr>
  //                                           <tr>
  //                                               <td style="padding:0 35px;">
  //                                                   <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Demo Reminder</h1>
  //                                                   <span
  //                                                       style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
  //                                                   <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
  //                                                   Hello,<br><br>
  //                                                      Demo implementation of reminder mail through cron job
  //                                                       <br><br>
  //                                                   </p>
  //                                                   <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
  //                                                       Thanks,
  //                                                       <br>
  //                                                       The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
  //                                                       </p>
  //                                                       <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
  //                                                       <br>
  //                                                       <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
  //                                                       <br><span style="font-size:12px;">You received this email because you just signed up for an account. If it looks weird,<a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
  //                                                       </span>
  //                                                       </p>
  //                                               </td>
  //                                           </tr>
  //                                           <tr>
  //                                               <td style="height:40px;">&nbsp;</td>
  //                                           </tr>
  //                                       </table>
  //                                   </td>
  //                               <tr>
  //                                   <td style="height:20px;">&nbsp;</td>
  //                               </tr>
  //                               <tr>
  //                                   <td style="text-align:center;">
  //                                   <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
  //                                   <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
  //                                   <br>
  //                                       <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
  //                                   </td>
  //                               </tr>
  //                               <tr>
  //                                   <td style="height:80px;">&nbsp;</td>
  //                               </tr>
  //                           </table>
  //                       </td>
  //                   </tr>
  //               </table>
  //               <!--/100% body table-->
  //             </body>

  //             </html>' 
  //           );
  //            $this->email->send(); 
  // }

  public function email_template_alert()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/email-template-alert');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function email_template_billing()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/email-template-billing');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function projects_grid()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/projects-grid');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_projects_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $get_port_id = $this->uri->segment(2);
      $data['check_port_id'] = $this->uri->segment(2);
      $data['plist'] = $this->Front_model->ProjectListByPortfolioRegular($get_port_id);
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectListByPortfolioRegular($get_port_id);
      $data['pending_plist'] = $this->Front_model->PendingProjectListByPortfolioRegular($get_port_id);
      $data['readmore_plist'] = $this->Front_model->ReadMoreProjectListByPortfolioRegular($get_port_id);
      $this->load->view('user/portfolio-projects-list',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function projects_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['plist'] = $this->Front_model->ProjectListRegular();
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectListRegular();
      $data['pending_plist'] = $this->Front_model->PendingProjectListRegular();
      $data['readmore_plist'] = $this->Front_model->ReadMoreProjectListRegular();
      $this->load->view('user/projects-list',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function my_created_projects()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['plist'] = $this->Front_model->ProjectList();
      $this->load->view('user/my-created-projects',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function my_accepted_projects()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
      $this->load->view('user/my-accepted-projects',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function pending_projects_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['pending_plist'] = $this->Front_model->PendingProjectList();
      $this->load->view('user/pending-projects-request',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function readmore_projects_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['readmore_plist'] = $this->Front_model->ReadMoreProjectList();
      $this->load->view('user/readmore-projects-request',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function projects_overview()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['pdetail'] = $this->Front_model->ProjectDetail($id);
      //$data['t_members'] = $this->Front_model->Edit_Team_Members($id);
      $data['p_tasks'] = $this->Front_model->p_tasks($id);
      $data['p_subtasks'] = $this->Front_model->p_subtasks($id);
      $data['p_planned_content_project'] = $this->Front_model->Project_Planned_Content($id);
      $data['comments'] = $this->Front_model->getProjectComments($id);
      $data['view_history_date'] = $this->Front_model->view_history_date($id);
      $this->load->view('user/projects-overview',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectOverview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $previous_url = $_SERVER['HTTP_REFERER'];
      $previous_url_array = explode('/', $previous_url);
      $previous_page_name = end($previous_url_array);
      $data['previous_page_name'] = $previous_page_name;

      if($previous_page_name == 'file-cabinet'){
        $privilege_only_view = 'no';
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
        $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
        if($getCompPackInfo)
        {
          $privilege = "no";
          if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
          {
            $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
            if($getCompRolesInfo)
            {
              if($getCompRolesInfo->privilege != 'all')
              {
                $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                if(in_array('view', $cus_privilege))
                {
                  $privilege_only_view = 'yes';
                }
              }
            }      
          }
        }
        }
        $data['pdetail'] = $this->Front_model->file_itProjectDetail2($id);
        $pcreated_by = $data['pdetail']->pcreated_by;
        $data['t_members'] = $this->Front_model->file_itEdit_Team_Members($id);
        $data['p_tasks'] = $this->Front_model->file_itp_tasks($id);
        $data['p_subtasks'] = $this->Front_model->file_itp_subtasks($id);
        echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="ProjectOverviewModalLabel">'.$data['pdetail']->pname.'</h5>';

        if($pcreated_by == $this->session->userdata('d168_id')){
          if($privilege_only_view == 'no')
          {
          echo '&nbsp;&nbsp;<a href="javascript:void(0);" onclick="reopenProject('.$id.');" class="btn btn-sm btn-d text-white">Reopen</a>';
          }
        }

        echo '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">';
        $this->load->view('user/projects-overview-modal',$data);                                       
        echo '</div>';  
      }else{
        
        $data['pdetail'] = $this->Front_model->ProjectDetail($id);
        $data['t_members'] = $this->Front_model->Edit_Team_Members($id);
        $data['p_tasks'] = $this->Front_model->p_tasks($id);
        $data['p_subtasks'] = $this->Front_model->p_subtasks($id);
        echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="ProjectOverviewModalLabel">'.$data['pdetail']->pname.'</h5>
                      &nbsp;&nbsp;<a href="'.base_url('projects-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">';
                    $this->load->view('user/projects-overview-modal',$data);                                       
        echo '</div>';  
      } 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function projects_overview_accepted()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['pdetail'] = $this->Front_model->ProjectDetailAccepted($id);
      //$data['t_members'] = $this->Front_model->suggest_Team_Members($id);
      $data['p_tasks'] = $this->Front_model->p_tasks($id);
      $data['p_subtasks'] = $this->Front_model->p_subtasks($id);
      $data['p_planned_content_project'] = $this->Front_model->Project_Planned_Content($id);
      $data['comments'] = $this->Front_model->getProjectComments($id);
      $data['view_history_date'] = $this->Front_model->view_history_date($id);
      $this->load->view('user/projects-overview-accepted',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectOverviewAccepted_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['pdetail'] = $this->Front_model->ProjectDetailAccepted($id);
      $data['t_members'] = $this->Front_model->suggest_Team_Members($id);
      $data['p_tasks'] = $this->Front_model->p_tasks($id);
      $data['p_subtasks'] = $this->Front_model->p_subtasks($id);
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewAcceptedModalLabel">'.$data['pdetail']->pname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('projects-overview-accepted/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/projects-overview-accepted-modal',$data);                                       
      echo '</div>';   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function projects_overview_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['pdetail'] = $this->Front_model->ProjectDetailRequest($id);
      $this->load->view('user/projects-overview-request',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectOverviewRequest_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['pdetail'] = $this->Front_model->ProjectDetailRequest($id);
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewRequestModalLabel">'.$data['pdetail']->pname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('projects-overview-request/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/projects-overview-request-modal',$data);                                        
      echo '</div>';   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectOverviewFile_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $pfile_id = $this->input->post('pfile_id');
      $pdetail = $this->Front_model->getProjectById($id);
      $pfile_detail = $this->Front_model->pfile_detail($pfile_id);
      if($pdetail)
      {
        if($pdetail->pcreated_by == $this->session->userdata('d168_id'))
        {
          $p_files = explode(',', $pfile_detail->pfnotify); 
          $index = array_search($this->session->userdata('d168_id'),$p_files);
                      if($index !== FALSE){
                          unset($p_files[$index]);
                      }
                      $final_mem = implode(',', $p_files); 
                      $data2 = array(
                                      'pfnotify' => $final_mem,
                                      'pfnotify_clear' => $final_mem,
                                      'pfnotify_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files_by_pfileId($data2,$pfile_id);
          echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewRequestModalLabel">'.$pdetail->pname.'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body"><b>'.substr(trim($pfile_detail->pfile), strpos(trim($pfile_detail->pfile), '_') + 1).'</b> File Added in Project '.$pdetail->pname.'&nbsp;&nbsp;<a href="'.base_url('projects-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a></div>';  
        }
        else
        {
          $p_files = explode(',', $pfile_detail->pfnotify); 
          $index = array_search($this->session->userdata('d168_id'),$p_files);
                      if($index !== FALSE){
                          unset($p_files[$index]);
                      }
                      $final_mem = implode(',', $p_files); 
                      $data2 = array(
                                      'pfnotify' => $final_mem,
                                      'pfnotify_clear' => $final_mem,
                                      'pfnotify_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files_by_pfileId($data2,$pfile_id);
          echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewRequestModalLabel">'.$pdetail->pname.'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body"><b>'.substr(trim($pfile_detail->pfile), strpos(trim($pfile_detail->pfile), '_') + 1).'</b> File Added in Project '.$pdetail->pname.'&nbsp;&nbsp;<a href="'.base_url('projects-overview-accepted/'.$id).'" class="btn btn-sm btn-d text-white">Open</a></div>';
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function TaskFileNotification_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $tid = $this->input->post('tid');
      $tdetail = $this->Front_model->getTasksDetail($tid);
      if($tdetail)
      {        
            $t_files = explode(',', $tdetail->tfnotify); 
            $all_new_tfile = explode(',', $tdetail->new_file);
            $count_new_tfile = count($all_new_tfile);
            $index = array_search($this->session->userdata('d168_id'),$t_files);
                        if($index !== FALSE){
                            unset($t_files[$index]);
                        }
                        $final_mem = implode(',', $t_files); 
                        $data = array(
                                        'tfnotify' => $final_mem,
                                        'tfnotify_clear' => $final_mem,
                                        'tfnotify_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
            echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="ProjectOverviewRequestModalLabel">'.$tdetail->tname.'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b>';
                    for ($it=0; $it<$count_new_tfile; $it++)
                      {
                        $tnew_file = substr(trim($all_new_tfile[$it]), strpos(trim($all_new_tfile[$it]), '_') + 1); 
                        echo $tnew_file;
                        echo "<br>";
                      }
            echo '</b> File Added in Task '.$tdetail->tname.'&nbsp;&nbsp;<a href="'.base_url('tasks-overview/'.$tid).'" class="btn btn-sm btn-d text-white">Open</a></div>';         
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function SubtaskFileNotification_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $stid = $this->input->post('stid');
      $tdetail = $this->Front_model->getSubtasksDetail($stid);
      if($tdetail)
      {        
            $t_files = explode(',', $tdetail->stfnotify); 
            $all_new_tfile = explode(',', $tdetail->snew_file);
            $count_new_tfile = count($all_new_tfile);
            $index = array_search($this->session->userdata('d168_id'),$t_files);
                        if($index !== FALSE){
                            unset($t_files[$index]);
                        }
                        $final_mem = implode(',', $t_files); 
                        $data = array(
                                        'stfnotify' => $final_mem,
                                        'stfnotify_clear' => $final_mem,
                                        'stfnotify_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewSubtask($data,$stid);
            echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="ProjectOverviewRequestModalLabel">'.$tdetail->stname.'</h5>
                      &nbsp;&nbsp;<a href="'.base_url('subtasks-overview/'.$stid).'" class="btn btn-sm btn-d text-white">Open</a>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b>';
                    for ($it=0; $it<$count_new_tfile; $it++)
                      {
                        $tnew_file = substr(trim($all_new_tfile[$it]), strpos(trim($all_new_tfile[$it]), '_') + 1); 
                        echo $tnew_file;
                        echo "<br>";
                      }
            echo '</b> File Added in Subtask '.$tdetail->stname.'</div>';         
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectOverviewOther_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $check_pro = $this->Front_model->project_request_status2($id);

      if($check_pro)
      {
        if($check_pro->status == 'accepted')
        {
          $data['pdetail'] = $this->Front_model->ProjectDetailAccepted($id);
          $data['t_members'] = $this->Front_model->suggest_Team_Members($id);
          $data['p_tasks'] = $this->Front_model->p_tasks($id);
          $data['p_subtasks'] = $this->Front_model->p_subtasks($id);
          echo '<div class="modal-header">
                        <h5 class="modal-title mt-0" id="ProjectOverviewOtherModalLabel">'.$data['pdetail']->pname.'</h5>
                        &nbsp;&nbsp;<a href="'.base_url('projects-overview-accepted/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">';
          $this->load->view('user/projects-overview-accepted-modal',$data);                                       
          echo '</div>';  
        }
        elseif(($check_pro->status == 'send') ||($check_pro->status == 'read_more'))
        {        
          $data['pdetail'] = $this->Front_model->ProjectDetailRequest($id);
          echo '<div class="modal-header">
                        <h5 class="modal-title mt-0" id="ProjectOverviewOtherModalLabel">'.$data['pdetail']->pname.'</h5>
                        &nbsp;&nbsp;<a href="'.base_url('projects-overview-request/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">';
          $this->load->view('user/projects-overview-request-modal',$data);                                        
          echo '</div>'; 
        }
      }
      else
      {
        echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="ProjectOverviewOtherModalLabel"></h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">Not Allowed to View Project</div>'; 
      }
  
    }
    else
    {
      redirect(base_url('login'));
    }
  }


  public function portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $page_email = "";
      $get_page_email = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
      if($get_page_email)
      {
      $page_email = $get_page_email->email_address;
      }
      $data['Portfolio'] = $this->Front_model->get_SideBar_Portfolio($page_email);
      $data['AllPortfolio'] = $this->Front_model->get_SideBar_ALLPortfolio($page_email);
      //$data['AcceptedProjectList'] = $this->Front_model->AcceptedProjectListPortfolio();  
      $this->load->view('user/portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_projects()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['c_id'] = $this->uri->segment(2);
      $data['portfolio_projects'] = $this->Front_model->portfolio_projectsRegular($data['c_id']);
      $this->load->view('user/portfolio_projects',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');
      $c_id = $this->uri->segment(2);
      $data['port_id_tl'] = $c_id;
      if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
          {
            $this->session->unset_userdata('searched_page_name');
            $this->session->unset_userdata('searched_pid_list');
            $this->session->unset_userdata('searched_Port_TL');
            $this->session->unset_userdata('searched_taskFilter');
          }
          if(!empty($this->session->unset_userdata('searched_taskFilter')))
          {
            $this->session->unset_userdata('searched_taskFilter');
          }
      $data['portfolio_tasks'] = $this->Front_model->portfolio_tasksNew($c_id);
      //$data['portfolio_subtasks'] = $this->Front_model->portfolio_subtasks($c_id);
      //$data['plist'] = $this->Front_model->ProjectListByPortfolio($c_id);
      //$data['accepted_plist'] = $this->Front_model->AcceptedProjectListByPortfolio($c_id); 
      $this->load->view('user/portfolio_tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function my_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['Portfolio'] = $this->Front_model->Portfolio(); 
      $this->load->view('user/my_portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function company_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id')))
    {
      $data['Portfolio'] = $this->Front_model->CompanyPortfolio();
      $data['AcceptedProjectList'] = $this->Front_model->AcceptedProjectListCompanyPortfolio(); 
      $this->load->view('user/company_portfolio',$data); 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function my_company_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id')))
    {
      $data['Portfolio'] = $this->Front_model->CompanyPortfolio();
      $this->load->view('user/my_company_portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function individual_portfolio()
  {
    if(($this->session->userdata('d168_id')) || $this->session->userdata('d168_id'))
    {
      $data['Portfolio'] = $this->Front_model->IndividualPortfolio();
      $data['AcceptedProjectList'] = $this->Front_model->AcceptedProjectListIndividualPortfolio();
      $this->load->view('user/individual_portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function my_individual_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id')))
    {
      $data['Portfolio'] = $this->Front_model->IndividualPortfolio();
      $this->load->view('user/my_individual_portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function preview_file()
  {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
          $privilege_only_view = 'no';
          if(!empty($this->session->userdata('d168_user_cor_id')))
          {
          $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getCompPackInfo)
          {
            $privilege = "no";
            if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
            {
              $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
              if($getCompRolesInfo)
              {
                if($getCompRolesInfo->privilege != 'all')
                {
                  $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                  if(in_array('view', $cus_privilege))
                  {
                    $privilege_only_view = 'yes';
                  }
                }
              }      
            }
          }
          }
            $id = $this->input->post('id');
            $previous_url = $_SERVER['HTTP_REFERER']; 
            $previous_url_array = explode('/', $previous_url);  
            $previous_page_name = end($previous_url_array); 
            $data['previous_page_name'] = $previous_page_name;  
            if($previous_page_name == 'file-cabinet'){  
              $pd = $this->Front_model->pfile_detailfile_it($id); 
            }else{  
              $pd = $this->Front_model->pfile_detail($id);  
            }

            $getExt = pathinfo($pd->pfile, PATHINFO_EXTENSION);            
            $this->filename = 'assets/project_files/'.$pd->pfile;

            if($privilege_only_view == 'no')
            {
              $preview_download = '<a href="'.base_url().'front/download_PFileAttachment/'.$pd->pid.'/'.$pd->pfile_id.'" class="btn btn-sm btn-d text-white">Download</a>';
            }
            else
            {
              $preview_download = '';
            }

            //echo $getExt;
            if($getExt == 'jpg' || $getExt == 'JPG' || $getExt == 'jpeg' || $getExt == 'JPEG' || $getExt == 'png' || $getExt == 'PNG' || $getExt == 'svg' || $getExt == 'SVG' || $getExt == 'webp' || $getExt == 'WEBP')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($pd->pfile, strpos($pd->pfile, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <img src="'.base_url().'assets/project_files/'.$pd->pfile .'" height="100%" width="100%">                          
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'pdf' || $getExt == 'PDF' || $getExt == 'gif' || $getExt == 'GIF' || $getExt == 'txt' || $getExt == 'TXT')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($pd->pfile, strpos($pd->pfile, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <iframe src="'.base_url().'assets/project_files/'.$pd->pfile .'" height="100%" width="100%"></iframe>                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'mp4' || $getExt == 'MP4' || $getExt == 'mov' || $getExt == 'MOV' || $getExt == 'webm' || $getExt == 'WEBM' || $getExt == 'mkv'  || $getExt == 'MKV')
            {
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($pd->pfile, strpos($pd->pfile, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                      <video height="100%" width="100%" controls autoplay>
                        <source src="'.base_url().'assets/project_files/'.$pd->pfile .'">
                      </video>                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'csv' || $getExt == 'CSV')
            {
              $url = base_url().'assets/project_files/'.$pd->pfile;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($pd->pfile, strpos($pd->pfile, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://docs.google.com/viewer?embedded=true&url=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                      ".$preview_download."
                  </div>";
            } 
            else
            {
              $url = base_url().'assets/project_files/'.$pd->pfile;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($pd->pfile, strpos($pd->pfile, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                      ".$preview_download."
                  </div>";
            }          
        } 
        else 
        {
            redirect(base_url('login'));
        }
  }

  public function download_PFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {     
      $id = $this->uri->segment(3);
      $pfile_id = $this->uri->segment(4);
      $previous_url = $_SERVER['HTTP_REFERER']; 
      $previous_url_array = explode('/', $previous_url);  
      $previous_page_name = end($previous_url_array); 
      $data['previous_page_name'] = $previous_page_name;  
      if($previous_page_name == 'file-cabinet'){  
        $fileInfo = $this->Front_model->download_PFileAttachmentfile_it($id,$pfile_id); 
      }else{  
        $fileInfo = $this->Front_model->download_PFileAttachment($id,$pfile_id);  
      }

      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $get_gs_pid = $this->Front_model->getProjectById($id);
          $hdata = array(
                                    'pid' => $id,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($fileInfo->pfile), strpos(trim($fileInfo->pfile), '_') + 1).' File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                    'pfile_id' =>$pfile_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
      $file = 'assets/project_files/'.$fileInfo->pfile;
      //print_r($file);
      //force download
      force_download($file,NULL);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function projects_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $sid = "";
      if(!empty($this->input->post('sid')))
      {
        $sid = $this->input->post('sid');
      }
        if(empty($sid))//regular project limitation
        {
if(empty($this->session->userdata('d168_user_cor_id')))
{
          if($getMydetail)
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
            {
              if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
                $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
                if($getPackDetail)
                {
                  $total_projects = trim($getPackDetail->pack_projects);
                  $used_projects = trim($getProjectCount['project_count_rows']);
                  $check_type = is_numeric($total_projects);
                  if($check_type == 'true')
                  {
                    if($used_projects < $total_projects)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $this->load->view('user/projects-create');
                      }
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $this->load->view('user/projects-create');
                      }
                  }
                }
              }
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
              if($getPackDetail)
              {
                $total_projects = trim($getPackDetail->pack_projects);
                $used_projects = trim($getProjectCount['project_count_rows']);
                $check_type = is_numeric($total_projects);
                if($check_type == 'true')
                {
                  if($used_projects < $total_projects)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $this->load->view('user/projects-create');
                    }
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $this->load->view('user/projects-create');
                    }
                }
              }
            }          
          }
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('projects', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getProjectCount = $this->Front_model->getProjectCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_projects = trim($getPackDetail->pack_projects);
              $used_projects = trim($getProjectCount['project_count_rows']);
              $check_type = is_numeric($total_projects);
              if($check_type == 'true')
              {
                if($used_projects < $total_projects)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/projects-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/projects-create');
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
} 
        }
        elseif(!empty($sid)) //goal strategy project limitations
        {
if(empty($this->session->userdata('d168_user_cor_id')))
{
          if($getMydetail)
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
            {
              if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
                $getStrategiesProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
                if($getPackDetail)
                {
                  $total_projects = trim($getPackDetail->pack_projects);
                  $used_projects = trim($getStrategiesProjectCount['project_count_rows']);
                  $check_type = is_numeric($total_projects);
                  if($check_type == 'true')
                  {
                    if($used_projects < $total_projects)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $this->load->view('user/projects-create');
                      }
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $this->load->view('user/projects-create');
                      }
                  }
                }
              }
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getStrategiesProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
              if($getPackDetail)
              {
                $total_projects = trim($getPackDetail->pack_projects);
                $used_projects = trim($getStrategiesProjectCount['project_count_rows']);
                $check_type = is_numeric($total_projects);
                if($check_type == 'true')
                {
                  if($used_projects < $total_projects)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $this->load->view('user/projects-create');
                    }
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $this->load->view('user/projects-create');
                    }
                }
              }
            }          
          }
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('projects', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getStrategiesProjectCount = $this->Front_model->getProjectCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_projects = trim($getPackDetail->pack_projects);
              $used_projects = trim($getStrategiesProjectCount['project_count_rows']);
              $check_type = is_numeric($total_projects);
              if($check_type == 'true')
              {
                if($used_projects < $total_projects)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/projects-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/projects-create');
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
} 
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function content_project_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
if(empty($this->session->userdata('d168_user_cor_id')))
{
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($getMydetail)
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
        {
          if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            if($getPackDetail)
            {
              $total_content_planner = trim($getPackDetail->pack_content_planner);
              $check_type = is_numeric($total_content_planner);
              if($check_type == 'true')
              {
                $current_month = date('m');
                $current_year = date('Y');
                $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                $used_content = trim($getMonthWiseContent['content_count_rows']);
                if($used_content < $total_content_planner)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $this->load->view('user/content-project-create'); 
                  }              
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $this->load->view('user/content-project-create'); 
                  } 
              }
            }
          }
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          if($getPackDetail)
          {
            $total_content_planner = trim($getPackDetail->pack_content_planner);
            $check_type = is_numeric($total_content_planner);
            if($check_type == 'true')
            {
              $current_month = date('m');
              $current_year = date('Y');
              $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
              $used_content = trim($getMonthWiseContent['content_count_rows']);
              if($used_content < $total_content_planner)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                 $this->load->view('user/content-project-create'); 
                }              
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                 $this->load->view('user/content-project-create'); 
                } 
            }
          }
        }
      } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('content planner', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            if($getPackDetail)
            {
              $total_content_planner = trim($getPackDetail->pack_content_planner);
              $check_type = is_numeric($total_content_planner);
              if($check_type == 'true')
              {
                $current_month = date('m');
                $current_year = date('Y');
                $getMonthWiseContent = $this->Front_model->getMonthWiseContentCorp($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                $used_content = trim($getMonthWiseContent['content_count_rows']);
                if($used_content < $total_content_planner)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $this->load->view('user/content-project-create'); 
                  }              
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $this->load->view('user/content-project-create'); 
                  } 
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
if(empty($this->session->userdata('d168_user_cor_id')))
{
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($getMydetail)
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
        {
          if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getPortfolioCount = $this->Front_model->getPortfolioCount();
            if($getPackDetail)
            {
              $total_portfolio = trim($getPackDetail->pack_portfolio);
              $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
              //echo $total_portfolio;
              //echo $used_portfolio;
              $check_type = is_numeric($total_portfolio);
              if($check_type == 'true')
              {
                if($used_portfolio < $total_portfolio)
                {
                  $data['country'] = $this->Front_model->getCountries();
                  $this->load->view('user/portfolio-create',$data);
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                $data['country'] = $this->Front_model->getCountries();
                $this->load->view('user/portfolio-create',$data);
              }
            }
          }
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getPortfolioCount = $this->Front_model->getPortfolioCount();
          if($getPackDetail)
          {
            $total_portfolio = trim($getPackDetail->pack_portfolio);
            $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
            //echo $total_portfolio;
            //echo $used_portfolio;
            $check_type = is_numeric($total_portfolio);
            if($check_type == 'true')
            {
              if($used_portfolio < $total_portfolio)
              {
                $data['country'] = $this->Front_model->getCountries();
                $this->load->view('user/portfolio-create',$data);
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              $data['country'] = $this->Front_model->getCountries();
              $this->load->view('user/portfolio-create',$data);
            }
          }
        }
      }    
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('portfolio', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getPortfolioCount = $this->Front_model->getPortfolioCountCorp();
            if($getPackDetail)
            {
              $total_portfolio = trim($getPackDetail->pack_portfolio);
              $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
              //echo $total_portfolio;
              //echo $used_portfolio;
              $check_type = is_numeric($total_portfolio);
              if($check_type == 'true')
              {
                if($used_portfolio < $total_portfolio)
                {
                  $data['country'] = $this->Front_model->getCountries();
                  $this->load->view('user/portfolio-create',$data);
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                $data['country'] = $this->Front_model->getCountries();
                $this->load->view('user/portfolio-create',$data);
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function AddPortfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {     
    $this->form_validation->set_rules('portfolio_name','Portfolio Name','trim|required|max_length[30]',array('max_length' => 'Portfolio Name is too long!'));

    if ($this->form_validation->run() == FALSE)
    {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
         $data = array(
                                    'portfolio_name' => $this->input->post('portfolio_name'),
                                    'portfolio_createdby' => $this->session->userdata('d168_id'),
                                    'portfolio_createddate' => date('Y-m-d H:i:s'),
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_NewPortfolio($data);
                                $inserted_port_id = $this->db->insert_id();
        setcookie("d168_selectedportfolio",$inserted_port_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
        $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));                         
        $data = array(
                                      'portfolio_id' => $inserted_port_id,
                                      'sent_to' => $P_Owner->email_address,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'status' => 'accepted',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s')
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function CreatePortfolio() //Update Student Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    if($this->input->post('portfolio_user') == 'company')
    {
      $this->form_validation->set_rules('portfolio_name','Company Name','trim|required|max_length[30]',array('max_length' => 'Portfolio Name is too long!'));
      $this->form_validation->set_rules('email_address','Company Email Address','valid_email|trim|required');
      $this->form_validation->set_rules('portfolio_user','Portfolio User Type','trim|required');
      $this->form_validation->set_rules('phone_number','Company Phone Number','trim|numeric|required');
      $this->form_validation->set_rules('company_website','Company Website','trim|required|required');
      $this->form_validation->set_rules('contact_fname','Contact Person First Name','trim|callback_alpha_space|required|max_length[20]',array('max_length' => 'First Name is too long!'));
      $this->form_validation->set_rules('contact_lname','Contact Person Last Name','trim|callback_alpha_space|required|max_length[25]',array('max_length' => 'Last Name is too long!'));
      $this->form_validation->set_rules('contact_phone_number','Contact Person Phone Number','trim|numeric|required');

      $pattern = "/^(http[s]?\:\/\/)?((\w+)\.)?(([\w-]+)?)(\.[\w-]+){1,2}$/";
      if (!preg_match($pattern, $this->input->post('company_website')))
      {
          $response['status'] = 'website_valid';
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }

      if((empty($this->input->post('department'))) && (empty($this->input->post('cus_department'))))
      {
        $this->form_validation->set_rules('department','Department','trim|required');        
      }

      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $student_id = $this->session->userdata('d168_id');
        $photo = "";
        if(!empty($_POST['photo']))
        {          
            //           $config['file_name'] = time().'_'.$_FILES['photo']['name'];
            //           $config['upload_path'] = 'assets/portfolio_photos/';
            //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
            //           //Load upload library and initialize configuration
            //           $this->load->library('upload',$config);
            //           $this->upload->initialize($config);
            // if($this->upload->do_upload('photo'))
            // {
            //   $fileData = $this->upload->data();
            //   $uploadImage['image'] = $fileData['file_name'];
            //   $photo = $uploadImage['image'];
            // }
            // else
            // {
            //     $response['status'] = 'photoErr';
            //     $response['photoerr'] = $this->upload->display_errors();;
            //     // You can use the Output class here too
            //   header('Content-type: application/json');
            //   //echo json_encode($response);
            //   exit(json_encode($response));
            // }
          $data = $_POST['photo'];
          list($type, $data) = explode(';', $data);
          list(, $data)      = explode(',', $data);
          $data = base64_decode($data);
          $imageName = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/portfolio_photos/'.$imageName, $data))
          {
           $photo = $imageName;
          }
        }

        $cover_photo = "";
        if(!empty($_POST['cover_photo']))
        {
            // $config['file_name'] = time().'_'.$_FILES['cover_photo']['name'];
            //           $config['upload_path'] = 'assets/portfolio_cover_photos/';
            //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
            //           //Load upload library and initialize configuration
            //           $this->load->library('upload',$config);
            //           $this->upload->initialize($config);
            // if($this->upload->do_upload('cover_photo'))
            // {
            //   $fileData1 = $this->upload->data();
            //   $uploadImage1['image'] = $fileData1['file_name'];
            //   $cover_photo = $uploadImage1['image'];
            // }
            // else
            // {
            //   $response['status'] = 'cover_photoErr';
            //   $response['cover_photoErr'] = $this->upload->display_errors();;
            //     // You can use the Output class here too
            //   header('Content-type: application/json');
            //   //echo json_encode($response);
            //   exit(json_encode($response));
            // }
          $data1 = $_POST['cover_photo'];
          list($type, $data1) = explode(';', $data1);
          list(, $data1)      = explode(',', $data1);
          $data1 = base64_decode($data1);
          $imageName1 = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/portfolio_cover_photos/'.$imageName1, $data1))
          {
           $cover_photo = $imageName1;
          }
        }
        
        $social_media_icon="";
        $social_media="";
        if($this->input->post('social_media')){
          $social_media_icon = implode(',',$this->input->post('social_media_icon'));
          $social_media = implode(',',$this->input->post('social_media'));
        }
        
        $data = array(  'portfolio_name' => $this->input->post('portfolio_name'),
                        'about_portfolio' => $this->input->post('about_portfolio'),
                        'email_address' => $this->input->post('email_address'),
                        'portfolio_user' => $this->input->post('portfolio_user'),
                        'country' => $this->input->post('country'),
                        'phone_number' => $this->input->post('phone_number'),
                        'social_media_icon' => $social_media_icon,
                        'social_media' => $social_media,
                        'photo' => $photo,
                        'cover_photo' => $cover_photo,
                        'contact_fname' => $this->input->post('contact_fname'),
                        'contact_mname' => $this->input->post('contact_mname'),
                        'contact_lname' => $this->input->post('contact_lname'),
                        'contact_phone_number' => $this->input->post('contact_phone_number'),
                        'company_website' => $this->input->post('company_website'),
                        'street' => $this->input->post('street'),
                        'city' => $this->input->post('city'),
                        'state' => $this->input->post('state'),
                        'portfolio_createdby' => $this->session->userdata('d168_id'),
                        'portfolio_createddate' => date('Y-m-d H:i:s'),
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insert_NewPortfolio($data);
        $inserted_id = $this->db->insert_id();
        setcookie("d168_selectedportfolio",$inserted_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
        $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));                         
        $data = array(
                                      'portfolio_id' => $inserted_id,
                                      'sent_to' => $P_Owner->email_address,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'status' => 'accepted',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s')
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);

        if((!empty($this->input->post('department'))) || (!empty($this->input->post('cus_department'))))
        {
          if(empty($this->input->post('department')))
          {
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept2;
          }
          elseif(empty($this->input->post('cus_department')))
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept = $dept1;            
          }
          else
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept1.','.$dept2;            
          }
          $extract_dept = explode(',',$dept);
          $cnt_dept = count($extract_dept);
          for ($dpt=0; $dpt<$cnt_dept; $dpt++)
          {
            $ddata = array(
                                      'portfolio_id' => $inserted_id,
                                      'department' => $extract_dept[$dpt],
                                      'createdby' => $this->session->userdata('d168_id'),
                                      'dstatus' => 'active',
                                      'createddate' => date('Y-m-d H:i:s')
                                    );
            $ddata = $this->security->xss_clean($ddata); // xss filter
            $this->Front_model->insert_PortfolioDepartment($ddata);
          }
        }

        $this->session->set_flashdata('message', 'Portfolio Added Successfully');
        $response['id'] = $inserted_id;
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);  
      }
    }
    else
    {
      $this->form_validation->set_rules('portfolio_name2','First Name','trim|required|max_length[30]',array('max_length' => 'Portfolio Name is too long!'));
      $this->form_validation->set_rules('portfolio_lname2','Last Name','trim|required|max_length[30]',array('max_length' => 'Name is too long!'));
      $this->form_validation->set_rules('email_address2','Email Address','valid_email|trim|required');
      $this->form_validation->set_rules('portfolio_user','Portfolio User Type','trim|required');
      $this->form_validation->set_rules('phone_number2','Phone Number','trim|numeric|required');
      
      if((empty($this->input->post('department'))) && (empty($this->input->post('cus_department'))))
      {
        $this->form_validation->set_rules('department','Department','trim|required');        
      }

      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $student_id = $this->session->userdata('d168_id');
        $photo = "";

        if(!empty($_POST['photo2']))
        {          
            //           $config['file_name'] = time().'_'.$_FILES['photo2']['name'];
            //           $config['upload_path'] = 'assets/portfolio_photos/';
            //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
            //           //Load upload library and initialize configuration
            //           $this->load->library('upload',$config);
            //           $this->upload->initialize($config);
            // if($this->upload->do_upload('photo2'))
            // {
            //   $fileData = $this->upload->data();
            //   $uploadImage['image'] = $fileData['file_name'];
            //   $photo = $uploadImage['image'];
            // }
            // else
            // {
            //     $response['status'] = 'photo2Err';
            //     $response['photo2err'] = $this->upload->display_errors();;
            //     // You can use the Output class here too
            //   header('Content-type: application/json');
            //   //echo json_encode($response);
            //   exit(json_encode($response));
            // }
          $data = $_POST['photo2'];
          list($type, $data) = explode(';', $data);
          list(, $data)      = explode(',', $data);
          $data = base64_decode($data);
          $imageName = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/portfolio_photos/'.$imageName, $data))
          {
           $photo = $imageName;
          }
        }

        $cover_photo = "";
        if(!empty($_POST['cover_photo2']))
        {
            // $config['file_name'] = time().'_'.$_FILES['cover_photo2']['name'];
            //           $config['upload_path'] = 'assets/portfolio_cover_photos/';
            //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
            //           //Load upload library and initialize configuration
            //           $this->load->library('upload',$config);
            //           $this->upload->initialize($config);
            // if($this->upload->do_upload('cover_photo2'))
            // {
            //   $fileData1 = $this->upload->data();
            //   $uploadImage1['image'] = $fileData1['file_name'];
            //   $cover_photo = $uploadImage1['image'];
            // }
            // else
            // {
            //   $response['status'] = 'cover_photo2Err';
            //   $response['cover_photo2Err'] = $this->upload->display_errors();;
            //     // You can use the Output class here too
            //   header('Content-type: application/json');
            //   //echo json_encode($response);
            //   exit(json_encode($response));
            // }
          $data1 = $_POST['cover_photo2'];
          list($type, $data1) = explode(';', $data1);
          list(, $data1)      = explode(',', $data1);
          $data1 = base64_decode($data1);
          $imageName1 = time().'_'.$student_id.'.png';
          if(file_put_contents('./assets/portfolio_cover_photos/'.$imageName1, $data1))
          {
           $cover_photo = $imageName1;
          }
        }
        
        $social_media_icon="";
        $social_media="";
        if($this->input->post('social_media')){
          $social_media_icon = implode(',',$this->input->post('social_media_icon'));
          $social_media = implode(',',$this->input->post('social_media'));
        }
        
        $data = array(  'portfolio_name' => $this->input->post('portfolio_name2'),
                        'portfolio_mname' => $this->input->post('portfolio_mname2'),
                        'portfolio_lname' => $this->input->post('portfolio_lname2'),
                        'about_portfolio' => $this->input->post('about_portfolio2'),
                        'email_address' => $this->input->post('email_address2'),
                        'designation' => $this->input->post('designation2'),
                        'company_individual' => $this->input->post('company_individual2'),
                        'portfolio_user' => $this->input->post('portfolio_user'),
                        'gender' => $this->input->post('gender'),
                        'gender_other' => $this->input->post('gender_other'),
                        'country' => $this->input->post('country2'),
                        'phone_number' => $this->input->post('phone_number2'),
                        'social_media_icon' => $social_media_icon,
                        'social_media' => $social_media,
                        'photo' => $photo,
                        'cover_photo' => $cover_photo,
                        'street' => $this->input->post('street2'),
                        'city' => $this->input->post('city2'),
                        'state' => $this->input->post('state2'),
                        'portfolio_createdby' => $this->session->userdata('d168_id'),
                        'portfolio_createddate' => date('Y-m-d H:i:s'),
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insert_NewPortfolio($data);
        $inserted_id = $this->db->insert_id();
        setcookie("d168_selectedportfolio",$inserted_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
        $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));                         
        $data = array(
                                      'portfolio_id' => $inserted_id,
                                      'sent_to' => $P_Owner->email_address,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'status' => 'accepted',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s')
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);

        if((!empty($this->input->post('department'))) || (!empty($this->input->post('cus_department'))))
        {
          if(empty($this->input->post('department')))
          {
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept2;
          }
          elseif(empty($this->input->post('cus_department')))
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept = $dept1;            
          }
          else
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept1.','.$dept2;            
          }
          $extract_dept = explode(',',$dept);
          $cnt_dept = count($extract_dept);
          for ($dpt=0; $dpt<$cnt_dept; $dpt++)
          {
            $ddata = array(
                                      'portfolio_id' => $inserted_id,
                                      'department' => $extract_dept[$dpt],
                                      'createdby' => $this->session->userdata('d168_id'),
                                      'dstatus' => 'active',
                                      'createddate' => date('Y-m-d H:i:s')
                                    );
            $ddata = $this->security->xss_clean($ddata); // xss filter
            $this->Front_model->insert_PortfolioDepartment($ddata);
          }
        }

        $this->session->set_flashdata('message', 'Portfolio Added Successfully');
        $response['id'] = $inserted_id;
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);  
      }
    }    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function portfolio_edit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $c_id = $this->uri->segment(2);
      $data['getp'] = $this->Front_model->getPortfolio($c_id);
      $data['country'] = $this->Front_model->getCountries();
      $this->load->view('user/portfolio-edit',$data);         
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function UpdatePortfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $c_id = $this->input->post('c_id');
    $photo = $this->input->post('old_photo');
    $cover_photo = $this->input->post('cover_old_photo');
    $student_id = $this->session->userdata('d168_id');
    if($this->input->post('portfolio_user') == 'company')
    {
      $this->form_validation->set_rules('portfolio_name','Company Name','trim|required|max_length[30]',array('max_length' => 'Portfolio Name is too long!'));
      $this->form_validation->set_rules('email_address','Company Email Address','valid_email|trim|required');
      $this->form_validation->set_rules('portfolio_user','Portfolio User Type','trim|required');
      $this->form_validation->set_rules('phone_number','Company Phone Number','trim|numeric|required');
      $this->form_validation->set_rules('company_website','Company Website','trim|required');
      $this->form_validation->set_rules('contact_fname','Contact Person First Name','trim|callback_alpha_space|required|max_length[20]',array('max_length' => 'First Name is too long!'));
      $this->form_validation->set_rules('contact_lname','Contact Person Last Name','trim|callback_alpha_space|required|max_length[25]',array('max_length' => 'Last Name is too long!'));
      $this->form_validation->set_rules('contact_phone_number','Contact Person Phone Number','trim|numeric|required');

      $pattern = "/^(http[s]?\:\/\/)?((\w+)\.)?(([\w-]+)?)(\.[\w-]+){1,2}$/";
      if (!preg_match($pattern, $this->input->post('company_website')))
      {
          $response['status'] = 'website_valid';
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }

      if ($this->form_validation->run() == FALSE)
      {
            //$errors = array();
            $errors = $this->form_validation->error_array();
            // Loop through $_POST and get the keys
            foreach ($errors as $key => $value)
            {
            // Add the error message for this field
            $errors[$key] = form_error($key);
            }
                    
            $response['errors'] = array_filter($errors); // Some might be empty
            $response['status'] = FALSE;
            // You can use the Output class here too
            header('Content-type: application/json');
            //echo json_encode($response);
            exit(json_encode($response));
        }
        else
        {
          if(!empty($_POST['photo']))
          {          
              //           $config['file_name'] = time().'_'.$_FILES['photo']['name'];
              //           $config['upload_path'] = 'assets/portfolio_photos/';
              //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
              //           //Load upload library and initialize configuration
              //           $this->load->library('upload',$config);
              //           $this->upload->initialize($config);
              // if($this->upload->do_upload('photo'))
              // {
              //   $fileData = $this->upload->data();
              //   $uploadImage['image'] = $fileData['file_name'];
              //   $photo = $uploadImage['image'];
              // }
              // else
              // {
              //     $response['status'] = 'photoErr';
              //     $response['photoerr'] = $this->upload->display_errors();;
              //     // You can use the Output class here too
              //   header('Content-type: application/json');
              //   //echo json_encode($response);
              //   exit(json_encode($response));
              // }
            $data = $_POST['photo'];
            list($type, $data) = explode(';', $data);
            list(, $data)      = explode(',', $data);
            $data = base64_decode($data);
            $imageName = time().'_'.$student_id.'.png';
            if(file_put_contents('./assets/portfolio_photos/'.$imageName, $data))
            {
             $photo = $imageName;
            }
          }

          if(!empty($_POST['cover_photo']))
          {
              // $config['file_name'] = time().'_'.$_FILES['cover_photo']['name'];
              //           $config['upload_path'] = 'assets/portfolio_cover_photos/';
              //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
              //           //Load upload library and initialize configuration
              //           $this->load->library('upload',$config);
              //           $this->upload->initialize($config);
              // if($this->upload->do_upload('cover_photo'))
              // {
              //   $fileData1 = $this->upload->data();
              //   $uploadImage1['image'] = $fileData1['file_name'];
              //   $cover_photo = $uploadImage1['image'];
              // }
              // else
              // {
              //   $response['status'] = 'cover_photoErr';
              //   $response['cover_photoErr'] = $this->upload->display_errors();;
              //     // You can use the Output class here too
              //   header('Content-type: application/json');
              //   //echo json_encode($response);
              //   exit(json_encode($response));
              // }
            $data1 = $_POST['cover_photo'];
            list($type, $data1) = explode(';', $data1);
            list(, $data1)      = explode(',', $data1);
            $data1 = base64_decode($data1);
            $imageName1 = time().'_'.$student_id.'.png';
            if(file_put_contents('./assets/portfolio_cover_photos/'.$imageName1, $data1))
            {
             $cover_photo = $imageName1;
            }
          }

          $social_media_icon="";
          $social_media="";
          if($this->input->post('social_media')){
            $social_media_icon = implode(',',$this->input->post('social_media_icon'));
            $social_media = implode(',',$this->input->post('social_media'));
          }

           $data = array(  'portfolio_name' => $this->input->post('portfolio_name'),
                        'portfolio_mname' => '',
                        'portfolio_lname' => '',
                        'about_portfolio' => $this->input->post('about_portfolio'),
                        'email_address' => $this->input->post('email_address'),
                        'designation' => '',
                        'company_individual' => '',
                        'portfolio_user' => $this->input->post('portfolio_user'),
                        'gender' => '',
                        'gender_other' => '',
                        'country' => $this->input->post('country'),
                        'phone_number' => $this->input->post('phone_number'),
                        'social_media_icon' => $social_media_icon,
                        'social_media' => $social_media,
                        'photo' => $photo,   
                        'cover_photo' => $cover_photo,                     
                        'contact_fname' => $this->input->post('contact_fname'),
                        'contact_mname' => $this->input->post('contact_mname'),
                        'contact_lname' => $this->input->post('contact_lname'),
                        'contact_phone_number' => $this->input->post('contact_phone_number'),
                        'company_website' => $this->input->post('company_website'),
                        'street' => $this->input->post('street'),
                        'city' => $this->input->post('city'),
                        'state' => $this->input->post('state')
                     );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->UpdatePortfolio($data,$c_id);
                                
              // if(!empty($this->input->post('department')))
              // {
              //   $dept = implode(',',$this->input->post('department'));
              //   $extract_dept = explode(',',$dept);
              //   $cnt_dept = count($extract_dept);
              //   for ($dpt=0; $dpt<$cnt_dept; $dpt++)
              //   {
              //     $ddata = array(
              //                               'portfolio_id' => $c_id,
              //                               'department' => $extract_dept[$dpt],
              //                               'createdby' => $this->session->userdata('d168_id'),
              //                               'dstatus' => 'active',
              //                               'createddate' => date('Y-m-d H:i:s')
              //                             );
              //     $ddata = $this->security->xss_clean($ddata); // xss filter
              //     $this->Front_model->insert_PortfolioDepartment($ddata);
              //   }
              // }

                                $this->session->set_flashdata('message', 'portfolio Edited Successfully!');
                                $response['id'] = $c_id;
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response); 
        }
    }
    else
    {
      $this->form_validation->set_rules('portfolio_name2','First Name','trim|required|max_length[30]',array('max_length' => 'Portfolio Name is too long!'));
      $this->form_validation->set_rules('portfolio_lname2','Last Name','trim|required|max_length[30]',array('max_length' => 'Name is too long!'));
      $this->form_validation->set_rules('email_address2','Email Address','valid_email|trim|required');
      $this->form_validation->set_rules('portfolio_user','Portfolio User Type','trim|required');
      $this->form_validation->set_rules('phone_number2','Phone Number','trim|numeric|required');

      if ($this->form_validation->run() == FALSE)
      {
            //$errors = array();
            $errors = $this->form_validation->error_array();
            // Loop through $_POST and get the keys
            foreach ($errors as $key => $value)
            {
            // Add the error message for this field
            $errors[$key] = form_error($key);
            }
                    
            $response['errors'] = array_filter($errors); // Some might be empty
            $response['status'] = FALSE;
            // You can use the Output class here too
            header('Content-type: application/json');
            //echo json_encode($response);
            exit(json_encode($response));
        }
        else
        {
          if(!empty($_POST['photo2']))
          {          
              //           $config['file_name'] = time().'_'.$_FILES['photo2']['name'];
              //           $config['upload_path'] = 'assets/portfolio_photos/';
              //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
              //           //Load upload library and initialize configuration
              //           $this->load->library('upload',$config);
              //           $this->upload->initialize($config);
              // if($this->upload->do_upload('photo2'))
              // {
              //   $fileData = $this->upload->data();
              //   $uploadImage['image'] = $fileData['file_name'];
              //   $photo = $uploadImage['image'];
              // }
              // else
              // {
              //     $response['status'] = 'photo2Err';
              //     $response['photo2err'] = $this->upload->display_errors();;
              //     // You can use the Output class here too
              //   header('Content-type: application/json');
              //   //echo json_encode($response);
              //   exit(json_encode($response));
              // }
            $data = $_POST['photo2'];
            list($type, $data) = explode(';', $data);
            list(, $data)      = explode(',', $data);
            $data = base64_decode($data);
            $imageName = time().'_'.$student_id.'.png';
            if(file_put_contents('./assets/portfolio_photos/'.$imageName, $data))
            {
             $photo = $imageName;
            }
          }

          if(!empty($_POST['cover_photo2']))
          {
              // $config['file_name'] = time().'_'.$_FILES['cover_photo2']['name'];
              //           $config['upload_path'] = 'assets/portfolio_cover_photos/';
              //           $config['allowed_types'] = 'png|PNG|jpg|JPG|jpeg|JPEG|webp|WEBP';
              //           //Load upload library and initialize configuration
              //           $this->load->library('upload',$config);
              //           $this->upload->initialize($config);
              // if($this->upload->do_upload('cover_photo2'))
              // {
              //   $fileData1 = $this->upload->data();
              //   $uploadImage1['image'] = $fileData1['file_name'];
              //   $cover_photo = $uploadImage1['image'];
              // }
              // else
              // {
              //   $response['status'] = 'cover_photo2Err';
              //   $response['cover_photo2Err'] = $this->upload->display_errors();;
              //     // You can use the Output class here too
              //   header('Content-type: application/json');
              //   //echo json_encode($response);
              //   exit(json_encode($response));
              // }
            $data1 = $_POST['cover_photo2'];
            list($type, $data1) = explode(';', $data1);
            list(, $data1)      = explode(',', $data1);
            $data1 = base64_decode($data1);
            $imageName1 = time().'_'.$student_id.'.png';
            if(file_put_contents('./assets/portfolio_cover_photos/'.$imageName1, $data1))
            {
             $cover_photo = $imageName1;
            }
          }

          $social_media_icon="";
          $social_media="";
          if($this->input->post('social_media')){
            $social_media_icon = implode(',',$this->input->post('social_media_icon'));
            $social_media = implode(',',$this->input->post('social_media'));
          }

          $data = array(  'portfolio_name' => $this->input->post('portfolio_name2'),
                        'portfolio_mname' => $this->input->post('portfolio_mname2'),
                        'portfolio_lname' => $this->input->post('portfolio_lname2'),
                        'about_portfolio' => $this->input->post('about_portfolio2'),
                        'email_address' => $this->input->post('email_address2'),
                        'designation' => $this->input->post('designation2'),
                        'company_individual' => $this->input->post('company_individual2'),
                        'portfolio_user' => $this->input->post('portfolio_user'),
                        'gender' => $this->input->post('gender'),
                        'gender_other' => $this->input->post('gender_other'),
                        'country' => $this->input->post('country2'),
                        'phone_number' => $this->input->post('phone_number2'),
                        'social_media_icon' => $social_media_icon,
                        'social_media' => $social_media,
                        'photo' => $photo,   
                        'cover_photo' => $cover_photo,                     
                        'contact_fname' => '',
                        'contact_mname' => '',
                        'contact_lname' => '',
                        'contact_phone_number' => '',
                        'company_website' => '',
                        'street' => $this->input->post('street2'),
                        'city' => $this->input->post('city2'),
                        'state' => $this->input->post('state2'),
                     );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->UpdatePortfolio($data,$c_id);

                  // if(!empty($this->input->post('department')))
                  //   {
                  //     $dept = implode(',',$this->input->post('department'));
                  //     $extract_dept = explode(',',$dept);
                  //     $cnt_dept = count($extract_dept);
                  //     for ($dpt=0; $dpt<$cnt_dept; $dpt++)
                  //     {
                  //       $ddata = array(
                  //                                 'portfolio_id' => $c_id,
                  //                                 'department' => $extract_dept[$dpt],
                  //                                 'createdby' => $this->session->userdata('d168_id'),
                  //                                 'dstatus' => 'active',
                  //                                 'createddate' => date('Y-m-d H:i:s')
                  //                               );
                  //       $ddata = $this->security->xss_clean($ddata); // xss filter
                  //       $this->Front_model->insert_PortfolioDepartment($ddata);
                  //     }
                  //   }

                                $this->session->set_flashdata('message', 'portfolio Edited Successfully!');
                                $response['id'] = $c_id;
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response); 
        }
    }    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function portfolio_view()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        $c_id = $_COOKIE["d168_selectedportfolio"];
        $data['getp'] = $this->Front_model->getPortfolio3($c_id);
        $this->load->view('user/portfolio-view',$data); 
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function DeletePortfolioModal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $port_id = $this->input->post('id');
      $getportfolio = $this->Front_model->getPortfolio($port_id);
      if($getportfolio)
      {
        $port_name = "";
        if($getportfolio->portfolio_user == 'company')
          { 
            $port_name = $getportfolio->portfolio_name;
          }
        elseif($getportfolio->portfolio_user == 'individual')
          { 
            $port_name = $getportfolio->portfolio_name.' '.$getportfolio->portfolio_lname;
          }
        else
          { 
            $port_name = $getportfolio->portfolio_name;
          }

        echo '
        <div class="modal-body m-3">
            <h3 class="text-d"><strong>Are you sure you want to delete this Portfolio?</strong></h3>
            <p>You are about to delete the '.$port_name.' Portfolio.</p>
            <p>Note: Deleting this Portfolio is permanent. You will not have access to this Portfolio and its contents.</p>
            <ul>
            <li>All Goals & KPIs</li>
            <li>All Projects</li>
            <li>All Contents</li>
            <li>All Task & Subtasks</li>
            <li>All uploaded files</li>
            <li>Everything else</li>
            </ul>
            <div class="form-check form-checkbox-outline form-check-success mb-3">
                <input class="form-check-input" type="checkbox" id="delete_portfolio_agree'.$port_id.'" name="delete_portfolio_agree'.$port_id.'">
                <label class="form-check-label" for="customCheckcolor2">
                    I understand that all data will be deleted permanently after 30 days!
                </label>
                <span class="text-danger" id="delete_portfolio_agreeERR'.$port_id.'"></span>
            </div>
            <div class="text-center">
              <button type="button" class="btn btn-sm bg-d text-white m-2" data-bs-dismiss="modal" aria-label="Close">Close</button>
              <button type="button" class="btn btn-sm btn-d m-2" onclick="return DeletePortfolio('.$port_id.');">Delete Portfolio</button>
            </div>
        </div>';  
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function DeletePortfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $port_id = $this->input->post('port_id');
    if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        if($_COOKIE["d168_selectedportfolio"] == $port_id)
        {          
          delete_cookie('d168_selectedportfolio');
        }
      }
    $getportfolio = $this->Front_model->getPortfolio($port_id);
    $portfolio_projects = $this->Front_model->portfolio_projectsTrash($port_id);
    $getPortfolioAllTask = $this->Front_model->getPortfolioAllTaskTrash($port_id);
    $getPortfolioAllSubtask = $this->Front_model->getPortfolioAllSubtaskTrash($port_id);
    $getPortfolioAllCP = $this->Front_model->getPortfolioAllCPTrash($port_id);
    $portfolio_goals = $this->Front_model->portfolio_goalsTrash($port_id);
    $portfolio_strategies = $this->Front_model->portfolio_strategiesTrash($port_id);

    if($getportfolio)
    {
                $data = array(
                                        'portfolio_trash' => 'yes',
                                        'portfolio_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'delete_agree' => 'yes',
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->UpdatePortfolio($data,$port_id);
                if($portfolio_goals)
                {
                  //goal
                  $gdata = array(
                                                'g_trash' => 'yes',
                                                'g_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $gdata = $this->security->xss_clean($gdata); // xss filter
                                            $this->Front_model->UpdatePortfolioGoal($gdata,$port_id);  
                }
                if($portfolio_strategies)
                {
                  //strategies
                  $sdata = array(
                                              's_trash' => 'yes',
                                              's_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                                          $sdata = $this->security->xss_clean($sdata); // xss filter
                                          $this->Front_model->UpdatePortfolioStrategies($sdata,$port_id);  
                }                
                $data3 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                    $data3 = $this->security->xss_clean($data3); // xss filter
                    $pro_res = $this->Front_model->UpdatePortfolioProjectArchive($data3,$port_id);
                if($portfolio_projects)
                {
                  foreach($portfolio_projects as $portpro)
                      {
                        $data4 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data4 = $this->security->xss_clean($data4); // xss filter
                        $this->Front_model->edit_project_files($data4,$portpro->pid);

                        $data5 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data5 = $this->security->xss_clean($data5); // xss filter
                        $this->Front_model->edit_project_invited_members($data5,$portpro->pid);

                        $data6 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data6 = $this->security->xss_clean($data6); // xss filter
                        $this->Front_model->edit_project_management($data6,$portpro->pid);

                        $data7 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data7 = $this->security->xss_clean($data7); // xss filter
                        $this->Front_model->edit_project_management_fields($data7,$portpro->pid);

                        $data8 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_members($data8,$portpro->pid);

                        $data9 = array(
                                              'ptrash' => 'yes',
                                              'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                          );
                        $data9 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_suggested_members($data9,$portpro->pid);
                      }
                }

                if($getPortfolioAllTask)
                {
                    $data10 = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        );
                    $data10 = $this->security->xss_clean($data10); // xss filter
                    $this->Front_model->UpdatePortfolioTaskArchive($data10,$port_id);
                }

                if($getPortfolioAllSubtask)
                {
                    $data11 = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        );
                    $data11 = $this->security->xss_clean($data11); // xss filter
                    $this->Front_model->UpdatePortfolioSubtaskArchive($data11,$port_id);
                }

                if($getPortfolioAllCP)
                {
                    $data12 = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                    $data12 = $this->security->xss_clean($data12); // xss filter
                    $this->Front_model->UpdatePortfolioCPArchive($data12,$port_id);
                }

            $this->session->set_flashdata('message','Portfolio Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function ArchivePortfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $port_id = $this->input->post('port_id');
    $getportfolio = $this->Front_model->getPortfolioNotArc($port_id);
    $portfolio_projects = $this->Front_model->portfolio_projectsNotArc($port_id);
    $getPortfolioAllTask = $this->Front_model->getPortfolioAllTaskNotArc($port_id);
    $getPortfolioAllSubtask = $this->Front_model->getPortfolioAllSubtaskNotArc($port_id);
    $getPortfolioAllCP = $this->Front_model->getPortfolioAllCPNotArc($port_id);
    $portfolio_goals = $this->Front_model->portfolio_goalsTrash($port_id);
    $portfolio_strategies = $this->Front_model->portfolio_strategiesTrash($port_id);
    if($getportfolio)
    {
      if($portfolio_projects)
      {        
        if($getPortfolioAllTask || $getPortfolioAllSubtask)
        {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getPortfolioAllTask)
          {
            foreach($getPortfolioAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getPortfolioAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getPortfolioAllSubtask)
          {
            foreach($getPortfolioAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getPortfolioAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask;      
          if($total_all == $total_done)
          {
                    $data = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->UpdatePortfolio($data,$port_id);
                    //goal
                    if($portfolio_goals)
                    {
                    $gdata = array(
                                                'g_archive' => 'yes',
                                                'g_archive_date' => date('Y-m-d H:i:s'),
                                            );
                                            $gdata = $this->security->xss_clean($gdata); // xss filter
                                            $this->Front_model->UpdatePortfolioGoal($gdata,$port_id);
                    }
                    //strategies
                    if($portfolio_strategies)
                    {
                    $sdata = array(
                                              's_archive' => 'yes',
                                              's_archive_date' => date('Y-m-d H:i:s'),
                                          );
                                          $sdata = $this->security->xss_clean($sdata); // xss filter
                                          $this->Front_model->UpdatePortfolioStrategies($sdata,$port_id);
                    }
                    $data2 = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->UpdatePortfolioMemberArchive($data2,$port_id);

                    $data3 = array(
                                            'project_archive' => 'yes',
                                            'project_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data3 = $this->security->xss_clean($data3); // xss filter
                    $pro_res = $this->Front_model->UpdatePortfolioProjectArchive($data3,$port_id);
                    if($pro_res)
                    {
                      foreach($portfolio_projects as $portpro)
                      {
                        $data4 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data4 = $this->security->xss_clean($data4); // xss filter
                        $this->Front_model->edit_project_files($data4,$portpro->pid);

                        $data5 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data5 = $this->security->xss_clean($data5); // xss filter
                        $this->Front_model->edit_project_invited_members($data5,$portpro->pid);

                        $data6 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data6 = $this->security->xss_clean($data6); // xss filter
                        $this->Front_model->edit_project_management($data6,$portpro->pid);

                        $data7 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data7 = $this->security->xss_clean($data7); // xss filter
                        $this->Front_model->edit_project_management_fields($data7,$portpro->pid);

                        $data8 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_members($data8,$portpro->pid);

                        $data9 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data9 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_suggested_members($data9,$portpro->pid);
                      }
                    }    

                    $data10 = array(
                                            'task_archive' => 'yes',
                                            'task_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data10 = $this->security->xss_clean($data10); // xss filter
                    $this->Front_model->UpdatePortfolioTaskArchive($data10,$port_id);

                    $data11 = array(
                                            'subtask_archive' => 'yes',
                                            'subtask_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data11 = $this->security->xss_clean($data11); // xss filter
                    $this->Front_model->UpdatePortfolioSubtaskArchive($data11,$port_id);

                    $data12 = array(
                                            'cp_archive' => 'yes',
                                            'cp_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data12 = $this->security->xss_clean($data12); // xss filter
                    $this->Front_model->UpdatePortfolioCPArchive($data12,$port_id);

                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    if($_COOKIE["d168_selectedportfolio"] == $port_id)
                    {          
                      delete_cookie('d168_selectedportfolio');
                    }
                  }

                $this->session->set_flashdata('message','Portfolio Archived Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);            
          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to Archive Portfolio!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }

        }
        else
        {
                    $data = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->UpdatePortfolio($data,$port_id);
                    //goal
                    if($portfolio_goals)
                    {
                    $gdata = array(
                                                'g_archive' => 'yes',
                                                'g_archive_date' => date('Y-m-d H:i:s'),
                                            );
                                            $gdata = $this->security->xss_clean($gdata); // xss filter
                                            $this->Front_model->UpdatePortfolioGoal($gdata,$port_id);
                    }
                    //strategies
                    if($portfolio_strategies)
                    {
                    $sdata = array(
                                              's_archive' => 'yes',
                                              's_archive_date' => date('Y-m-d H:i:s'),
                                          );
                                          $sdata = $this->security->xss_clean($sdata); // xss filter
                                          $this->Front_model->UpdatePortfolioStrategies($sdata,$port_id);
                    }
                    $data2 = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->UpdatePortfolioMemberArchive($data2,$port_id);

                    $data3 = array(
                                            'project_archive' => 'yes',
                                            'project_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data3 = $this->security->xss_clean($data3); // xss filter
                    $pro_res = $this->Front_model->UpdatePortfolioProjectArchive($data3,$port_id);
                    if($pro_res)
                    {
                      foreach($portfolio_projects as $portpro)
                      {
                        $data4 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data4 = $this->security->xss_clean($data4); // xss filter
                        $this->Front_model->edit_project_files($data4,$portpro->pid);

                        $data5 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data5 = $this->security->xss_clean($data5); // xss filter
                        $this->Front_model->edit_project_invited_members($data5,$portpro->pid);

                        $data6 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data6 = $this->security->xss_clean($data6); // xss filter
                        $this->Front_model->edit_project_management($data6,$portpro->pid);

                        $data7 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data7 = $this->security->xss_clean($data7); // xss filter
                        $this->Front_model->edit_project_management_fields($data7,$portpro->pid);

                        $data8 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_members($data8,$portpro->pid);

                        $data9 = array(
                                              'project_archive' => 'yes',
                                              'project_archive_date' => date('Y-m-d H:i:s'),
                                          );
                        $data9 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_suggested_members($data9,$portpro->pid);
                      }
                    } 

                    $data12 = array(
                                            'cp_archive' => 'yes',
                                            'cp_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data12 = $this->security->xss_clean($data12); // xss filter
                    $this->Front_model->UpdatePortfolioCPArchive($data12,$port_id);                   

                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    if($_COOKIE["d168_selectedportfolio"] == $port_id)
                    {          
                      delete_cookie('d168_selectedportfolio');
                    }
                  }

                $this->session->set_flashdata('message','Portfolio Archived Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
        }
      }
      else
      {
                    $data = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->UpdatePortfolio($data,$port_id);
                    //goal
                    if($portfolio_goals)
                    {
                    $gdata = array(
                                                'g_archive' => 'yes',
                                                'g_archive_date' => date('Y-m-d H:i:s'),
                                            );
                                            $gdata = $this->security->xss_clean($gdata); // xss filter
                                            $this->Front_model->UpdatePortfolioGoal($gdata,$port_id);
                    }
                    //strategies
                    if($portfolio_strategies)
                    {
                    $sdata = array(
                                              's_archive' => 'yes',
                                              's_archive_date' => date('Y-m-d H:i:s'),
                                          );
                                          $sdata = $this->security->xss_clean($sdata); // xss filter
                                          $this->Front_model->UpdatePortfolioStrategies($sdata,$port_id);
                    }
                    $data2 = array(
                                            'portfolio_archive' => 'yes',
                                            'portfolio_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->UpdatePortfolioMemberArchive($data2,$port_id);

                    $data12 = array(
                                            'cp_archive' => 'yes',
                                            'cp_archive_date' => date('Y-m-d H:i:s'),
                                        );
                    $data12 = $this->security->xss_clean($data12); // xss filter
                    $this->Front_model->UpdatePortfolioCPArchive($data12,$port_id);

                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    if($_COOKIE["d168_selectedportfolio"] == $port_id)
                    {          
                      delete_cookie('d168_selectedportfolio');
                    }
                  }

                $this->session->set_flashdata('message','Portfolio Archived Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        $port_id = $_COOKIE["d168_selectedportfolio"];
        $data['ArchiveProjects'] = $this->Front_model->ArchiveProjects($port_id);
        $data['ArchiveTasks'] = $this->Front_model->ArchiveTasks($port_id);
        $data['ArchiveSingleTasks'] = $this->Front_model->ArchiveSingleTasks($port_id);
        $data['ArchiveSubtasks'] = $this->Front_model->ArchiveSubtasks($port_id);
        $data['ArchiveSingleSubtasks'] = $this->Front_model->ArchiveSingleSubtasks($port_id);
        $data['ArchivePlatform'] = $this->Front_model->ArchivePlatform($port_id);
        $data['ArchiveGoals'] = $this->Front_model->ArchiveGoals($port_id);
        $data['ArchiveStrategies'] = $this->Front_model->ArchiveStrategies($port_id);
        $this->load->view('user/archive',$data);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function unarchived_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getPortfolioCount = $this->Front_model->getPortfolioCount();
          if($getPackDetail)
          {
            $total_portfolio = trim($getPackDetail->pack_portfolio);
            $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
            //echo $total_portfolio;
            //echo $used_portfolio;
            $check_type = is_numeric($total_portfolio);
            if($check_type == 'true')
            {
              if($used_portfolio < $total_portfolio)
              {
                $limitation = 'in_limit';
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              $limitation = 'in_limit';
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getPortfolioCount = $this->Front_model->getPortfolioCount();
        if($getPackDetail)
        {
          $total_portfolio = trim($getPackDetail->pack_portfolio);
          $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
          //echo $total_portfolio;
          //echo $used_portfolio;
          $check_type = is_numeric($total_portfolio);
          if($check_type == 'true')
          {
            if($used_portfolio < $total_portfolio)
            {
              $limitation = 'in_limit';
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            $limitation = 'in_limit';
          }
        }
      }
    }  
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('portfolio', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getPortfolioCount = $this->Front_model->getPortfolioCountCorp();
            if($getPackDetail)
            {
              $total_portfolio = trim($getPackDetail->pack_portfolio);
              $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
              //echo $total_portfolio;
              //echo $used_portfolio;
              $check_type = is_numeric($total_portfolio);
              if($check_type == 'true')
              {
                if($used_portfolio < $total_portfolio)
                {
                  $limitation = 'in_limit';
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                $limitation = 'in_limit';
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')  
    {
      $port_id = $this->input->post('port_id');
      $getportfolio = $this->Front_model->getPortfolioNotArc($port_id);
      $portfolio_projects = $this->Front_model->portfolio_projectsNotArc($port_id);

      if($getportfolio)
      {

        setcookie("d168_selectedportfolio",$port_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
                      $data = array(
                                              'portfolio_archive' => '',
                                              'portfolio_archive_date' => '',
                                              'portfolio_file_it' => '',
                                              'portfolio_file_it_date' => '',
                                          );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->UpdatePortfolio($data,$port_id);

                      $gdata = array(
                                                  'g_archive' => '',
                                                  'g_archive_date' => '',
                                                  'g_file_it' => '',
                                                  'g_file_it_date' => '',
                                              );
                                              $gdata = $this->security->xss_clean($gdata); // xss filter
                                              $this->Front_model->UpdatePortfolioGoal($gdata,$port_id);

                      $sdata = array(
                                                's_archive' => '',
                                                's_archive_date' => '',
                                                's_file_it' => '',
                                                's_file_it_date' => '',
                                            );
                                            $sdata = $this->security->xss_clean($sdata); // xss filter
                                            $this->Front_model->UpdatePortfolioStrategies($sdata,$port_id);

                      $data2 = array(
                                              'portfolio_archive' => '',
                                              'portfolio_archive_date' => '',
                                              'portfolio_file_it' => '',
                                              'portfolio_file_it_date' => '',
                                          );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->UpdatePortfolioMemberArchive($data2,$port_id);

                      $data3 = array(
                                              'project_archive' => '',
                                              'project_archive_date' => '',
                                              'project_file_it' => '',
                                              'project_file_it_date' => '',
                                          );
                      $data3 = $this->security->xss_clean($data3); // xss filter
                      $pro_res = $this->Front_model->UpdatePortfolioProjectArchive($data3,$port_id);
                      if($pro_res)
                      {
                        foreach($portfolio_projects as $portpro)
                        {
                          $data4 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data4 = $this->security->xss_clean($data4); // xss filter
                          $this->Front_model->edit_project_files($data4,$portpro->pid);

                          $data5 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data5 = $this->security->xss_clean($data5); // xss filter
                          $this->Front_model->edit_project_invited_members($data5,$portpro->pid);

                          $data6 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data6 = $this->security->xss_clean($data6); // xss filter
                          $this->Front_model->edit_project_management($data6,$portpro->pid);

                          $data7 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data7 = $this->security->xss_clean($data7); // xss filter
                          $this->Front_model->edit_project_management_fields($data7,$portpro->pid);

                          $data8 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_members($data8,$portpro->pid);

                          $data9 = array(
                                                'project_archive' => '',
                                                'project_archive_date' => '',
                                                'project_file_it' => '',
                                                'project_file_it_date' => '',
                                            );
                          $data9 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_suggested_members($data9,$portpro->pid);
                        }
                      }    

                      $data10 = array(
                                              'task_archive' => '',
                                              'task_archive_date' => '',
                                              'task_file_it' => '',
                                              'task_file_it_date' => '',
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->UpdatePortfolioTaskArchive($data10,$port_id);

                      $data11 = array(
                                              'subtask_archive' => '',
                                              'subtask_archive_date' => '',
                                              'subtask_file_it' => '',
                                              'subtask_file_it_date' => '',
                                          );
                      $data11 = $this->security->xss_clean($data11); // xss filter
                      $this->Front_model->UpdatePortfolioSubtaskArchive($data11,$port_id);

                      $data12 = array(
                                              'cp_archive' => '',
                                              'cp_archive_date' => '',
                                              'cp_file_it' => '',
                                              'cp_file_it_date' => '',
                                          );
                      $data12 = $this->security->xss_clean($data12); // xss filter
                      $this->Front_model->UpdatePortfolioCPArchive($data12,$port_id);

              $this->session->set_flashdata('message','Portfolio Reopened Successfully!');
              //$link = anchor(base_url('portfolio-view/'.$port_id), 'View Reopened Portfolio!');
              //$message = 'Portfolio Reopened Successfully!' .' '. $link;
              //$this->session->set_flashdata('message',$message);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function trash_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['TrashPortfolio'] = $this->Front_model->TrashPortfolio();
      $this->load->view('user/trash-portfolio',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function retrieve_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getPortfolioCount = $this->Front_model->getPortfolioCount();
          if($getPackDetail)
          {
            $total_portfolio = trim($getPackDetail->pack_portfolio);
            $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
            //echo $total_portfolio;
            //echo $used_portfolio;
            $check_type = is_numeric($total_portfolio);
            if($check_type == 'true')
            {
              if($used_portfolio < $total_portfolio)
              {
                $limitation = 'in_limit';
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              $limitation = 'in_limit';
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getPortfolioCount = $this->Front_model->getPortfolioCount();
        if($getPackDetail)
        {
          $total_portfolio = trim($getPackDetail->pack_portfolio);
          $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
          //echo $total_portfolio;
          //echo $used_portfolio;
          $check_type = is_numeric($total_portfolio);
          if($check_type == 'true')
          {
            if($used_portfolio < $total_portfolio)
            {
              $limitation = 'in_limit';
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            $limitation = 'in_limit';
          }
        }
      }
    }  
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('portfolio', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getPortfolioCount = $this->Front_model->getPortfolioCountCorp();
            if($getPackDetail)
            {
              $total_portfolio = trim($getPackDetail->pack_portfolio);
              $used_portfolio = trim($getPortfolioCount['portfolio_count_rows']);
              //echo $total_portfolio;
              //echo $used_portfolio;
              $check_type = is_numeric($total_portfolio);
              if($check_type == 'true')
              {
                if($used_portfolio < $total_portfolio)
                {
                  $limitation = 'in_limit';
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                $limitation = 'in_limit';
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $port_id = $this->input->post('port_id');
      $getportfolio = $this->Front_model->getPortfolio($port_id);
      $portfolio_projects = $this->Front_model->portfolio_projectsRetriveTrash($port_id);

      if($getportfolio)
      {

        setcookie("d168_selectedportfolio",$port_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
                  $data = array(
                                          'portfolio_trash' => '',
                                          'portfolio_trash_date' => '',
                                          'delete_agree' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->UpdatePortfolio($data,$port_id);

                  //goal
                  $gdata = array(
                                            'g_trash' => '',
                                            'g_trash_date' => '',
                                        );
                                        $gdata = $this->security->xss_clean($gdata); // xss filter
                                        $this->Front_model->UpdatePortfolioGoalArchiveRetrieve($gdata,$port_id);
                  //strategies
                  $sdata = array(
                                          's_trash' => '',
                                          's_trash_date' => '',
                                      );
                                      $sdata = $this->security->xss_clean($sdata); // xss filter
                                      $this->Front_model->UpdatePortfolioStrategiesArchiveRetrieve($sdata,$port_id);

                  $data3 = array(
                                      'ptrash' => '',
                                      'ptrash_date' => '',
                                          );
                  $data3 = $this->security->xss_clean($data3); // xss filter
                  $this->Front_model->UpdatePortfolioProjectRetrieveArchive($data3,$port_id);

                  foreach($portfolio_projects as $portpro)
                        {
                          $data4 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data4 = $this->security->xss_clean($data4); // xss filter
                          $this->Front_model->edit_project_files($data4,$portpro->pid);

                          $data5 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data5 = $this->security->xss_clean($data5); // xss filter
                          $this->Front_model->edit_project_invited_members($data5,$portpro->pid);

                          $data6 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data6 = $this->security->xss_clean($data6); // xss filter
                          $this->Front_model->edit_project_management($data6,$portpro->pid);

                          $data7 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data7 = $this->security->xss_clean($data7); // xss filter
                          $this->Front_model->edit_project_management_fields($data7,$portpro->pid);

                          $data8 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_members($data8,$portpro->pid);

                          $data9 = array(
                                                'ptrash' => '',
                                                'ptrash_date' => '',
                                            );
                          $data9 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_suggested_members($data9,$portpro->pid);
                        }

                      $data10 = array(
                                          'trash' => '',
                                          'trash_date' => '',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->UpdatePortfolioTaskArchiveRetrive($data10,$port_id);

                      $data11 = array(
                                          'strash' => '',
                                          'strash_date' => '',
                                          'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                      $data11 = $this->security->xss_clean($data11); // xss filter
                      $this->Front_model->UpdatePortfolioSubtaskArchiveRetrieve($data11,$port_id);

                      $data12 = array(
                                          'trash' => '',
                                          'trash_date' => '',
                                          );
                      $data12 = $this->security->xss_clean($data12); // xss filter
                      $this->Front_model->UpdatePortfolioCPArchiveRetrive($data12,$port_id);

              $this->session->set_flashdata('message','Portfolio Restored Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function request_as_member()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $reg_id = $this->input->post('reg_id');
      $P_Owner = $this->Front_model->getStudentById($reg_id);
      $check = $this->Front_model->check_request_member($pid,$reg_id);
      if($check > 0)
      {
        $this->session->set_flashdata('message', 'Request Already Sent!');
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
      }
      else
      {
        $data = array(
                                    'pid' => $pid,
                                    'member' => $reg_id,
                                    'status' => 'sent',
                                    'mreq_notify' => 'yes',
                                    'mreq_notify_clear' => 'no',
                                    'date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_project_request_member($data);
                                $inserted_id = $this->db->insert_id();

        $get_gs_pid = $this->Front_model->getProjectById($pid);
        $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Request As Team Member from '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'preqm_id' => $inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                              $this->session->set_flashdata('message', 'Request Sent Successfully!');
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_project()//create new project
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('pname','Project Name','trim|required');
    $this->form_validation->set_rules('portfolio_id','Portfolio','trim|required');
    $this->form_validation->set_rules('dept','Department','trim|required');

    if($this->input->post('ptype') == "content")
    {
      $this->form_validation->set_rules('p_publish','Publish Date','trim|required'); 
    }
     
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $pro_manager = $this->input->post('project_manager');
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
           $index1 = array_search($pro_manager,$myTMArray);
            if($index1 !== FALSE){
                unset($myTMArray[$index1]);
            }
          //plink array
          $plink_array="";
          $plink_comment_array="";
          if(!empty($_POST['plink'][0])){
            $plink_array = implode(',',$this->input->post('plink'));
            $plink_comment_array = implode(',',$this->input->post('plink_comment'));
            $plink_exarray = explode(',', $plink_array);
            $count_extlink = count($plink_exarray);
            if($count_extlink >= 0)
            {
               for ($i=0; $i<$count_extlink; $i++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $plink_exarray[$i]))
                    {
                        $response['status'] = 'link_valid';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }
          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
              } 
          }
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          
          if(!empty($_FILES['pfile']['name'][0]))
          {
            $cpt = count($_FILES['pfile']['name']);
            $files = $_FILES;
            //$config['file_name'] = time().'_'.$_FILES['pfile']['name'];
            $config['upload_path'] = 'assets/project_files/';
            $config['allowed_types'] = '*';
            $maxsize=2000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);
            
            for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['pfile']['name']= time().'_'.$files['pfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pfile']['name'][$i]))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['pfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['pfile']['type']= $files['pfile']['type'][$i];
                  $_FILES['pfile']['tmp_name']= $files['pfile']['tmp_name'][$i];
                  $_FILES['pfile']['error']= $files['pfile']['error'][$i];
                  $_FILES['pfile']['size']= $files['pfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['pfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('pfile'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['pfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }
               if(is_array($uploadData))
                    {
                        $pfile2 = implode(', ', array_column($uploadData, 'pfile2'));
                        $myFArray = explode(',', $pfile2);//file array

                        if($this->input->post('ptype') == "content")
                        {
                          $publish_date = $this->input->post('p_publish'); 
                        }
                        else
                        {
                          $publish_date = "";
                        }

                        if($this->input->post('ptype') == "goal_strategy")
                        {
                          $gid = $this->input->post('gid');
                          $sid = $this->input->post('sid');
                        }
                        else
                        {
                          $gid = "";
                          $sid = "";
                        }

                        if(!empty($this->input->post('regular_pid_conv')))
                        {
                          $regular_pid_conv = $this->input->post('regular_pid_conv'); 
                          $gid = $this->input->post('gid');
                          $sid = $this->input->post('sid');
                        }
                        else
                        {
                          $regular_pid_conv = "";
                        }

                        if($this->input->post('ptype') == 'content')
                        {
                          if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
                          {
                            $gid = $this->input->post('gid');
                            $sid = $this->input->post('sid');
                          }
                          else
                          {
                            $gid = "";
                            $sid = "";
                          }
                        }

                      $data = array(
                                    'ptype' => $this->input->post('ptype'),
                                    'p_publish' => $publish_date,
                                    'regularproj_to_contentproj' => $regular_pid_conv,
                                    'pname' => $this->input->post('pname'),
                                    'pdes' => $this->input->post('pdes'),
                                    'plink' => $plink_array,
                                    'plink_comment' => $plink_comment_array,
                                    'pmanager' => $pro_manager,
                                    'pcreated_by' => $this->session->userdata('d168_id'),
                                    'pcreated_date' => date('Y-m-d H:i:s'),
                                    'portfolio_id' => $this->input->post('portfolio_id'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'dept_id' => $this->input->post('dept'),
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_NewProject($data);
                                //recent inserted id
                                $inserted_id = $this->db->insert_id();

                      $hdata = array(
                                    'pid' => $inserted_id,
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                if(!empty($pro_manager))
                                {
                                  if($pro_manager != $this->session->userdata('d168_id'))
                                  {
                                    $data2 = array(
                                        'pid' => $inserted_id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($pro_manager),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($pro_manager);
                                    $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent project manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a project manager. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($pro_manager).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($pro_manager).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                }

                                foreach($myFArray as $f)
                                {
                                  $data1 = array(
                                      'pid' => $inserted_id,
                                      'pfile' => trim($f),
                                      'pcreated_by' => $this->session->userdata('d168_id'),
                                      'pfile_date' => date('Y-m-d H:i:s')
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->insert_ProjectFile($data1);
                                  $pfile_inserted_id = $this->db->insert_id();
                                  $hdata = array(
                                    'pid' => $inserted_id,
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' =>  substr(trim($f), strpos(trim($f), '_') + 1).' File Uploaded By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pfile_id' =>$pfile_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                }

                                if(!empty($myTMArray[0]))
                                {
                                  foreach($myTMArray as $t)
                                  {
                                    $data2 = array(
                                        'pid' => $inserted_id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($t),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                }

                                if(!empty($imemail_array[0]))
                                {
                                    $myIM_Array = explode(',', $imemail_array);//invite team member array
                                    foreach($myIM_Array as $im)
                                    {
                                      $check_if_registered = $this->Front_model->selectLogin($im);
                                      $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$inserted_id);
                                      if($check_project_members > 0)
                                        {
                                            $response['status'] = 'registered_email';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                        }
                                        else
                                        {
                                          if($check_if_registered)
                                          {
                                            if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data2 = array(
                                                'pid' => $inserted_id,
                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                            $hdata = array(
                                                              'pid' => $inserted_id,
                                                              'gid' => $gid,
                                                              'sid' => $sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $P_Owner->reg_id,
                                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                              'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                              'pmember_id' =>$inserted_pm_id
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Project Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                                                $this->email->send();
                                            }
                                          }
                                          else
                                          {
                                          $check_email = $this->Front_model->check_invited_email($im,$inserted_id);
                                          if($check_email)
                                          {
                                            if($check_email->status != 'pending')
                                            {
                                                $data4 = array(
                                                              'pid' => $inserted_id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);   
                                                }
                                                $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

          $reg_link = base_url('register');
          if(!empty($this->session->userdata('d168_user_cor_id')))
          {
              $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
              if($getComp)
              {
                  $reg_link = $getComp->cc_link;
              }
          }
          $email_to = $im;
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Project Request | Decision 168');
          $this->email->message('                 
              <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$inserted_id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                            }
                                            else
                                            {
                                                      $response['status'] = 'Invited_email';
                                                      header('Content-type: application/json');
                                                      //echo json_encode($response);
                                                      exit(json_encode($response));
                                            }
                                          }
                                          else
                                          {
                                            $data4 = array(
                                                              'pid' => $inserted_id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                                'sent_to' => $im,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

      $reg_link = base_url('register');
      if(!empty($this->session->userdata('d168_user_cor_id')))
      {
          $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getComp)
          {
              $reg_link = $getComp->cc_link;
          }
      }

      $email_to = $im;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$inserted_id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                          }
                                        }
                                      }
                                    }         
                                }

                                  //pass <a> link in set_flashdata
                                  //$link = anchor(base_url('projects-overview/'.$inserted_id), 'View Created Project Details!');
                                  //$message = 'Project Created Successfully!' .' '. $link;
                                  $this->session->set_flashdata('message', 'Project Created Successfully!');
                              $response['status'] = TRUE;
                              $response['pid'] = $inserted_id;
                              header('Content-type: application/json');
                              echo json_encode($response);
                    }                  
          }
          else
          {
                    if($this->input->post('ptype') == "content")
                        {
                          $publish_date = $this->input->post('p_publish');
                        }
                        else
                        {
                          $publish_date = "";
                        }

                    if($this->input->post('ptype') == "goal_strategy")
                        {
                          $gid = $this->input->post('gid');
                          $sid = $this->input->post('sid');
                        }
                        else
                        {
                          $gid = "";
                          $sid = "";
                        }

                    if(!empty($this->input->post('regular_pid_conv')))
                        {
                          $regular_pid_conv = $this->input->post('regular_pid_conv'); 
                          $gid = $this->input->post('gid');
                          $sid = $this->input->post('sid');
                        }
                        else
                        {
                          $regular_pid_conv = "";
                        }

                    if($this->input->post('ptype') == 'content')
                        {
                          if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
                          {
                            $gid = $this->input->post('gid');
                            $sid = $this->input->post('sid');
                          }
                          else
                          {
                            $gid = "";
                            $sid = "";
                          }
                        }

                    $data = array(
                                    'ptype' => $this->input->post('ptype'),
                                    'p_publish' => $publish_date,
                                    'regularproj_to_contentproj' => $regular_pid_conv,
                                    'pname' => $this->input->post('pname'),
                                    'pdes' => $this->input->post('pdes'),
                                    'plink' => $plink_array,
                                    'plink_comment' => $plink_comment_array,
                                    'pmanager' => $pro_manager,
                                    'pcreated_by' => $this->session->userdata('d168_id'),
                                    'pcreated_date' => date('Y-m-d H:i:s'),
                                    'portfolio_id' => $this->input->post('portfolio_id'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'dept_id' => $this->input->post('dept'),
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_NewProject($data);
                                //recent inserted id
                                $inserted_id = $this->db->insert_id();
                    $hdata = array(
                                    'pid' => $inserted_id,
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                if(!empty($pro_manager))
                                {
                                  if($pro_manager != $this->session->userdata('d168_id'))
                                  {
                                    $data2 = array(
                                        'pid' => $inserted_id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($pro_manager),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($pro_manager);
                                    $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent project manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a project manager. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($pro_manager).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($pro_manager).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                }

                                if(!empty($myTMArray[0]))
                                {
                                  //$RequestEmailID = array();
                                  //$inserted_pm_id = array();
                                  foreach($myTMArray as $t)
                                  {
                                    $data2 = array(
                                        'pid' => $inserted_id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($t),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                      //$SendRequestTo = implode(',',$RequestEmailID);
                                      //print_r($RequestEmailID);
                                      //echo "<br>";
                                      //print_r($inserted_pm_id);
                                      //die();
                                      
                                }

                                if(!empty($imemail_array[0]))
                                {
                                    $myIM_Array = explode(',', $imemail_array);//invite team member array
                                    foreach($myIM_Array as $im)
                                    {
                                      $check_if_registered = $this->Front_model->selectLogin($im);
                                      $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$inserted_id);
                                      if($check_project_members > 0)
                                        {
                                            $response['status'] = 'registered_email';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                        }
                                        else
                                        {
                                          if($check_if_registered)
                                          {
                                            if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data2 = array(
                                                'pid' => $inserted_id,
                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                            $hdata = array(
                                                              'pid' => $inserted_id,
                                                              'gid' => $gid,
                                                              'sid' => $sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $P_Owner->reg_id,
                                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                              'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                              'pmember_id' =>$inserted_pm_id
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Project Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                                                $this->email->send();
                                            }
                                          }
                                          else
                                          {
                                          $check_email = $this->Front_model->check_invited_email($im,$inserted_id);
                                          if($check_email)
                                          {
                                            if($check_email->status != 'pending')
                                            {
                                                $data4 = array(
                                                              'pid' => $inserted_id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                                'sent_to' => $im,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Project Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$inserted_id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                            }
                                            else
                                            {
                                                      $response['status'] = 'Invited_email';
                                                      header('Content-type: application/json');
                                                      //echo json_encode($response);
                                                      exit(json_encode($response));
                                            }
                                          }
                                          else
                                          {
                                            $data4 = array(
                                                              'pid' => $inserted_id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                                'sent_to' => $im,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Project Request | Decision 168');
        $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$inserted_id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                          }
                                      }
                                      }
                                    }         
                                }
                                  //pass <a> link in set_flashdata
                                  //$link = anchor(base_url('projects-overview/'.$inserted_id), 'View Created Project Details!');
                                  //$message = 'Project Created Successfully!' .' '. $link;
                                  $this->session->set_flashdata('message', 'Project Created Successfully!');
                              $response['status'] = TRUE;
                              $response['pid'] = $inserted_id;
                              header('Content-type: application/json');
                              echo json_encode($response);
          }
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_pfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    if(!empty($_FILES['add_pfile']['name'][0]))
          {            
            $student_id = $this->session->userdata('d168_id');
            $P_Owner = $this->Front_model->getStudentById($student_id);

            $cpt = count($_FILES['add_pfile']['name']);
            $files = $_FILES;
            //$config['file_name'] = time().'_'.$_FILES['pfile']['name'];
            $config['upload_path'] = 'assets/project_files/';
            $config['allowed_types'] = '*';
            $maxsize=2000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);
            
            for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['add_pfile']['name']= time().'_'.$files['add_pfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['add_pfile']['name'][$i])));
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name)); 
                  $_FILES['add_pfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['add_pfile']['type']= $files['add_pfile']['type'][$i];
                  $_FILES['add_pfile']['tmp_name']= $files['add_pfile']['tmp_name'][$i];
                  $_FILES['add_pfile']['error']= $files['add_pfile']['error'][$i];
                  $_FILES['add_pfile']['size']= $files['add_pfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['add_pfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                          if($this->upload->do_upload('add_pfile'))
                          {
                            $fileData = $this->upload->data();
                            $uploadData[$i]['add_pfile2'] = $fileData['file_name'];
                          }
                          else 
                          {
                            $response['status'] = 'Error_Uploading';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                          } 
                        }                                  
                }
               if(is_array($uploadData))
                    {
                      $pdetail = $this->Front_model->getProjectById($this->input->post('pid'));
                      $pdetail_member = $this->Front_model->getMemberProject($this->input->post('pid'));
                        $add_pfile2 = implode(', ', array_column($uploadData, 'add_pfile2'));
                        $myFArray = explode(',', $add_pfile2);//file array

                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                                foreach($myFArray as $f)
                                {
                                  $data1 = array(
                                      'pid' => $this->input->post('pid'),
                                      'pfile' => trim($f),
                                      'pcreated_by' => $this->session->userdata('d168_id'),
                                      'pfile_date' => date('Y-m-d H:i:s'),
                                      'pfnotify' => $final_mem,
                                      'pfnotify_clear' => $final_mem,
                                      'pfnotify_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->insert_ProjectFile($data1);
                                  $pfile_inserted_id = $this->db->insert_id();
                                  $hdata = array(
                                    'pid' => $this->input->post('pid'),
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' =>  substr(trim($f), strpos(trim($f), '_') + 1).' File Uploaded By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pfile_id' =>$pfile_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                // if($pdetail)
                                //   {
                                //     if($pdetail->pcreated_by != $this->session->userdata('d168_id'))
                                //     {
                                //       $studdel = $this->Front_model->getStudentById($pdetail->pcreated_by);
                                //       $email_to = $studdel->email_address;
                                //                   //$email_from = 'hello@decision168.com'; 
                                //                   $email_from = 'saramaazkhan123@gmail.com'; 
                                //                   $email_name = 'Decision 168';

                                //                   $this->load->library('email');  
                                //                   $config=array(
                                //                     'charset'=>'utf-8',
                                //                     'wordwrap'=> TRUE,
                                //                     'mailtype' => 'html'
                                //                     );
                                //                   $this->email->initialize($config);
                                //                   $this->email->from($email_from, $email_name);
                                //                   $this->email->set_header('Reply-To', $email_from."\r\n");
                                //                   $this->email->set_header('Return-Path', $email_from."\r\n");
                                //                   $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                //                   $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                //                   $this->email->to($email_to);
                                //                   $this->email->set_mailtype('html');
                                //                   $this->email->subject('Project File Attachment | Decision 168');
                                //                   $this->email->message('                 
                                //                       <!doctype html>
                                //                       <html lang="en-US">

                                //                       <head>
                                //                         <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                                //                         <title>Project File Attachment</title>
                                //                         <meta name="description" content="Project Request">
                                //                         <style type="text/css">
                                //                             a:hover {text-decoration: underline !important;pointer:cursor !important;}
                                //                         </style>
                                //                       </head>

                                //                       <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                                //                         <!--100% body table-->
                                //                         <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                //                             style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                //                             <tr>
                                //                                 <td>
                                //                                     <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                //                                         <tr>
                                //                                             <td style="height:80px;">&nbsp;</td>
                                //                                         </tr>
                                //                                         <tr>
                                //                                             <td style="text-align:center;">
                                //                                               <a href="'.base_url().'" title="Decision 168" target="_blank">
                                //                                                 <img width="10%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                //                                               </a>
                                //                                             </td>
                                //                                         </tr>
                                //                                         <tr>
                                //                                             <td style="height:20px;">&nbsp;</td>
                                //                                         </tr>
                                //                                         <tr>
                                //                                             <td>
                                //                                                 <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                //                                                     style="max-width:670px;background:#666666; border-radius:3px; text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                //                                                     <tr>
                                //                                                         <td style="height:30px;">&nbsp;</td>
                                //                                                     </tr>
                                //                                                     <tr>
                                //                                                         <td style="padding:0 35px;">
                                //                                                             <h1 style="color:#c7df19; font-weight:500; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Project File Attachment!</h1>
                                //                                                             <span
                                //                                                                 style="display:inline-block; vertical-align:middle; margin:29px 0 26px; border-bottom:1px solid #cecece; width:100px;"></span>
                                //                                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                //                                                             Hello !<br><br>
                                //                                                                 New File Attach to <span style="color:#c7df19"><b>'.$pdetail->pname.'</b></span> Project.
                                //                                                                 <br><br>
                                //                                                                 File Name: '.substr(trim($f), strpos(trim($f), '_') + 1).'
                                //                                                             </p>
                                //                                                             <a href="'.base_url('projects-overview/').$pdetail->pid.'"
                                //                                                                 style="background:#c7df19;text-decoration:none !important; font-weight:500; margin:20px; color:#fff;text-transform:uppercase; font-size:15px;padding:7px 30px;display:inline-block;border-radius:10px;">Go To Project</a>
                                //                                                             <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                //                                                                 Thanks,
                                //                                                                 <br>
                                //                                                                 The Decision 168 Team
                                //                                                             </p>
                                //                                                             <br><br>
                                //                                                             <p style="color:#fff; font-size:11px;line-height:24px;text-align:left;margin:0;">
                                //                                                             You received this email because you just signed up for a new account. If it looks weird, <a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;">view it in your browser</a>
                                //                                                             </p>
                                                                                            
                                //                                                         </td>
                                //                                                     </tr>
                                //                                                     <tr>
                                //                                                         <td style="height:30px;">&nbsp;</td>
                                //                                                     </tr>
                                //                                                 </table>
                                //                                             </td>
                                //                                         <tr>
                                //                                             <td style="height:20px;">&nbsp;</td>
                                //                                         </tr>
                                //                                         <tr>
                                //                                             <td style="text-align:center;">
                                //                                             <p style="color:#455056;font-size:10px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.  You can’t unsubscribe from important emails about your account like this one.</p>
                                //                                             <br><br>
                                //                                                 <p style="font-size:14px; color:rgba(69, 80, 86, 0.7411764705882353); line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2012 – 2021  |  Decision 168, LLC  |  All Rights Reserved </strong></p>
                                //                                             </td>
                                //                                         </tr>
                                //                                         <tr>
                                //                                             <td style="height:80px;">&nbsp;</td>
                                //                                         </tr>
                                //                                     </table>
                                //                                 </td>
                                //                             </tr>
                                //                         </table>
                                //                         <!--/100% body table-->
                                //                       </body>

                                //                       </html>' 
                                //                                   );
                                //                     $this->email->send();
                                //     }
                                //   }
                                  // if($pdetail_member)
                                  // {
                                  //   foreach($pdetail_member as $pm)
                                  //   {
                                  //     if($pm->pmember != $this->session->userdata('d168_id'))
                                  //     {
                                  //       if($pm->status == 'accepted')
                                  //       {
                                  //         $studdel2 = $this->Front_model->getStudentById($pm->pmember);
                                  //         $email_to = $studdel2->email_address;
                                  //                 //$email_from = 'hello@decision168.com'; 
                                  //                 $email_from = 'saramaazkhan123@gmail.com'; 
                                  //                 $email_name = 'Decision 168';

                                  //                 $this->load->library('email');  
                                  //                 $config=array(
                                  //                   'charset'=>'utf-8',
                                  //                   'wordwrap'=> TRUE,
                                  //                   'mailtype' => 'html'
                                  //                   );
                                  //                 $this->email->initialize($config);
                                  //                 $this->email->from($email_from, $email_name);
                                  //                 $this->email->set_header('Reply-To', $email_from."\r\n");
                                  //                 $this->email->set_header('Return-Path', $email_from."\r\n");
                                  //                 $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                  //                 $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                  //                 $this->email->to($email_to);
                                  //                 $this->email->set_mailtype('html');
                                  //                 $this->email->subject('Project File Attachment | Decision 168');
                                  //                 $this->email->message('                 
                                  //                     <!doctype html>
                                  //                     <html lang="en-US">

                                  //                     <head>
                                  //                       <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                                  //                       <title>Project File Attachment</title>
                                  //                       <meta name="description" content="Project Request">
                                  //                       <style type="text/css">
                                  //                           a:hover {text-decoration: underline !important;pointer:cursor !important;}
                                  //                       </style>
                                  //                     </head>

                                  //                     <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                                  //                       <!--100% body table-->
                                  //                       <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                  //                           style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                  //                           <tr>
                                  //                               <td>
                                  //                                   <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  //                                       <tr>
                                  //                                           <td style="height:80px;">&nbsp;</td>
                                  //                                       </tr>
                                  //                                       <tr>
                                  //                                           <td style="text-align:center;">
                                  //                                             <a href="'.base_url().'" title="Decision 168" target="_blank">
                                  //                                               <img width="10%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                  //                                             </a>
                                  //                                           </td>
                                  //                                       </tr>
                                  //                                       <tr>
                                  //                                           <td style="height:20px;">&nbsp;</td>
                                  //                                       </tr>
                                  //                                       <tr>
                                  //                                           <td>
                                  //                                               <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                  //                                                   style="max-width:670px;background:#666666; border-radius:3px; text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                  //                                                   <tr>
                                  //                                                       <td style="height:30px;">&nbsp;</td>
                                  //                                                   </tr>
                                  //                                                   <tr>
                                  //                                                       <td style="padding:0 35px;">
                                  //                                                           <h1 style="color:#c7df19; font-weight:500; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Project File Attachment!</h1>
                                  //                                                           <span
                                  //                                                               style="display:inline-block; vertical-align:middle; margin:29px 0 26px; border-bottom:1px solid #cecece; width:100px;"></span>
                                  //                                                           <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                  //                                                           Hello !<br><br>
                                  //                                                               New File Attach to <span style="color:#c7df19"><b>'.$pdetail->pname.'</b></span> Project.
                                  //                                                               <br><br>
                                  //                                                               File Name: '.substr(trim($f), strpos(trim($f), '_') + 1).'
                                  //                                                           </p>
                                  //                                                           <a href="'.base_url('projects-overview-accepted/').$pdetail->pid.'"
                                  //                                                               style="background:#c7df19;text-decoration:none !important; font-weight:500; margin:20px; color:#fff;text-transform:uppercase; font-size:15px;padding:7px 30px;display:inline-block;border-radius:10px;">Go To Project</a>
                                  //                                                           <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                  //                                                               Thanks,
                                  //                                                               <br>
                                  //                                                               The Decision 168 Team
                                  //                                                           </p>
                                  //                                                           <br><br>
                                  //                                                           <p style="color:#fff; font-size:11px;line-height:24px;text-align:left;margin:0;">
                                  //                                                           You received this email because you just signed up for a new account. If it looks weird, <a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;">view it in your browser</a>
                                  //                                                           </p>
                                                                                            
                                  //                                                       </td>
                                  //                                                   </tr>
                                  //                                                   <tr>
                                  //                                                       <td style="height:30px;">&nbsp;</td>
                                  //                                                   </tr>
                                  //                                               </table>
                                  //                                           </td>
                                  //                                       <tr>
                                  //                                           <td style="height:20px;">&nbsp;</td>
                                  //                                       </tr>
                                  //                                       <tr>
                                  //                                           <td style="text-align:center;">
                                  //                                           <p style="color:#455056;font-size:10px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.  You can’t unsubscribe from important emails about your account like this one.</p>
                                  //                                           <br><br>
                                  //                                               <p style="font-size:14px; color:rgba(69, 80, 86, 0.7411764705882353); line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2012 – 2021  |  Decision 168, LLC  |  All Rights Reserved </strong></p>
                                  //                                           </td>
                                  //                                       </tr>
                                  //                                       <tr>
                                  //                                           <td style="height:80px;">&nbsp;</td>
                                  //                                       </tr>
                                  //                                   </table>
                                  //                               </td>
                                  //                           </tr>
                                  //                       </table>
                                  //                       <!--/100% body table-->
                                  //                     </body>

                                  //                     </html>' 
                                  //                                 );
                                  //                 $this->email->send();
                                  //       }
                                  //     }
                                  //   }
                                  // }
                                }
                              $this->session->set_flashdata('message', 'File Uploaded Successfully!');
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
                    }                  
          }
          else
          {
                    $response['status'] = 'Error_Uploading';
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function delete_pfile()
  // {
  //   $pid = $this->input->post('pid');
  //   $pfile_id = $this->input->post('pfile_id');
  //   $pfile = $this->input->post('pfile');

  //         $powner_id = $this->input->post('pcreated_by');        
  //         $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
  //         $hdata = array(
  //                                   'pid' => $pid,
  //                                   'h_date' => date('Y-m-d H:i:s'),
  //                                   'h_resource' => $powner->first_name.' '.$powner->last_name,
  //                                   'h_description' =>  substr(trim($pfile), strpos(trim($pfile), '_') + 1).' Deleted By '.$powner->first_name.' '.$powner->last_name,
  //                                   'pfile_id' =>$pfile_id
  //                               );
  //                               $hdata = $this->security->xss_clean($hdata); // xss filter
  //                               $this->Front_model->insert_ProjectHistory($hdata);
  //   $res = $this->Front_model->delete_pfile($pid,$pfile_id);
  //   if ($res == true) 
  //   {
  //       unlink("assets/project_files/".$pfile);
  //   }
  //     $this->session->set_flashdata('message','File Deleted Successfully!');
  //     $response['status'] = TRUE;
  //     header('Content-type: application/json');
  //     echo json_encode($response);
  // }

  public function delete_pfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $pfile_id = $this->input->post('pfile_id');
    $pfile = $this->input->post('pfile');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      //project files                          
      $data2 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files_by_pfileId($data2,$pfile_id);        
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $get_gs_pid = $this->Front_model->file_itgetProjectById($pid);
          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($pfile), strpos(trim($pfile), '_') + 1).' Moved to Trash by '.$powner->first_name.' '.$powner->last_name,
                                    'pfile_id' =>$pfile_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project File Moved To Trash!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function trash()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        $port_id = $_COOKIE["d168_selectedportfolio"];
        $data['TrashProjectFiles'] = $this->Front_model->TrashProjectFiles($port_id);
        $data['TrashTaskFiles'] = $this->Front_model->TrashTaskFiles($port_id);
        $data['TrashProjects'] = $this->Front_model->TrashProjects($port_id);
        $data['TrashTasks'] = $this->Front_model->TrashTasks($port_id);
        $data['TrashSingleTasks'] = $this->Front_model->TrashSingleTasks($port_id);
        $data['TrashSubtasks'] = $this->Front_model->TrashSubtasks($port_id);
        $data['TrashSingleSubtasks'] = $this->Front_model->TrashSingleSubtasks($port_id);
        $data['TrashSubtaskFiles'] = $this->Front_model->TrashSubtaskFiles($port_id);
        $data['TrashPlatform'] = $this->Front_model->TrashPlatform($port_id);
        $data['TrashGoals'] = $this->Front_model->TrashGoals($port_id);
        $data['TrashStrategies'] = $this->Front_model->TrashStrategies($port_id);
        $this->load->view('user/trash',$data);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function retrieve_pfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pfile_id = $this->input->post('pfile_id');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_pfile_trash($pfile_id); 

    if($res)
    {
      $checkFileProjectTrash = $this->Front_model->checkFileProjectTrash($res->pid);
            if($checkFileProjectTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Project is in Trash! To Restore File please Restore Project!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
                //project files                          
                $data2 = array(
                                      'ptrash' => '',
                                      'ptrash_date' => '',
                                  );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files_by_pfileId($data2,$pfile_id);
        
                $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pid);
                $hdata = array(
                                          'pid' => $res->pid,
                                          'gid' => $get_gs_pid->gid,
                                          'sid' => $get_gs_pid->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $powner->reg_id,
                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                          'h_description' => substr($res->pfile, strpos($res->pfile, '_') + 1).' Project File Restored by '.$powner->first_name.' '.$powner->last_name,
                                          'pfile_id' =>$pfile_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
            
            $this->session->set_flashdata('message','Project file Restored Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);   
            }      
    }
    }
    else
    {
      redirect(base_url('login'));
    }   
  }

  public function pfile_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pfile_id = $this->input->post('pfile_id');
    $res = $this->Front_model->check_pfile_trash($pfile_id); 
      if($res)
      {
          $res2 = $this->Front_model->delete_pfile($pfile_id);
          if ($res2 == true) 
          {
              unlink("assets/project_files/".$res->pfile);
          }
              
          $this->session->set_flashdata('message','Project file deleted permanently!');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    }   
  }

  public function pdetail_AddTeamMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $pid = $this->input->post('pid');
          $pdetail = $this->Front_model->ProjectDetail2($pid);
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
              }            
          }
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          if((!empty($myTMArray[0])) || (!empty($imemail_array[0])))
          {
          if(!empty($myTMArray[0]))
            {
              foreach($myTMArray as $t)
                  {
                    $check = $this->Front_model->check_TeamRequestSend($t,$pid);
                    if($check == 0)
                    {
                      $data2 = array(
                          'pid' => $pid,
                          'portfolio_id' => $pdetail->portfolio_id,
                          'pmember' => trim($t),
                          'status' => 'send',
                          'pcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_TeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    $hdata = array(
                                                      'pid' => $pid,
                                                      'gid' => $pdetail->gid,
                                                      'sid' => $pdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                      $this->email->send();
                    }
                  }
              }

              if(!empty($imemail_array[0]))
                                {
                                    $myIM_Array = explode(',', $imemail_array);//invite team member array
                                    foreach($myIM_Array as $im)
                                    {
                                      $check_if_registered = $this->Front_model->selectLogin($im);
                                                                                                                  
                                          if($check_if_registered)
                                          {
                                            $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$pid);
                                            if($check_project_members > 0)
                                            {
                                                $response['status'] = 'registered_email';
                                                    header('Content-type: application/json');
                                                    //echo json_encode($response);
                                                    exit(json_encode($response));
                                            }
                                            else
                                            {
                                            if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data2 = array(
                                                'pid' => $pid,
                                                'portfolio_id' => $pdetail->portfolio_id,
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $pdetail->portfolio_id,
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                                          $hdata = array(
                                                              'pid' => $pid,
                                                              'gid' => $pdetail->gid,
                                                              'sid' => $pdetail->sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $P_Owner->reg_id,
                                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                              'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                              'pmember_id' =>$inserted_pm_id
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                                          $RequestEmailID = $getEmailID->email_address;

                                                          $email_to = $RequestEmailID;
                                                            $email_from = 'hello@decision168.com'; 
                                                            //$email_from = 'saramaazkhan123@gmail.com'; 
                                                            $email_name = 'Decision 168';

                                                            $this->load->library('email');  
                                                            $config=array(
                                                              'charset'=>'utf-8',
                                                              'wordwrap'=> TRUE,
                                                              'mailtype' => 'html'
                                                              );
                                                            $this->email->initialize($config);
                                                            $this->email->from($email_from, $email_name);
                                                            $this->email->set_header('Reply-To', $email_from."\r\n");
                                                            $this->email->set_header('Return-Path', $email_from."\r\n");
                                                            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                                            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                                            $this->email->to($email_to);
                                                            $this->email->set_mailtype('html');
                                                            $this->email->subject('Project Request | Decision 168');
                                                            $this->email->message('                 
                                                                <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                            );
                                                            $this->email->send();
                                            } 
                                            }
                                          }
                                          else
                                          {
                                            $check_email = $this->Front_model->check_invited_email($im,$pid);
                                            if($check_email)
                                            {
                                              if($check_email->status != 'pending')
                                              {
                                                  $data4 = array(
                                                                'pid' => $pid,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'sent_to' => $im,
                                                                'status' => 'pending',
                                                                'invite_date' => date('Y-m-d H:i:s')
                                                                  );
                                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                                  $this->Front_model->insert_InviteMember($data4);
                                                  $inserted_im_id = $this->db->insert_id();
                                                  $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$im);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $pdetail->portfolio_id,
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                                  $hdata = array(
                                                        'pid' => $pid,
                                                        'gid' => $pdetail->gid,
                                                        'sid' => $pdetail->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                        'pinvited_id' =>$inserted_im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}
        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Project Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$pid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                    );
                                                      $this->email->send();
                                              }
                                              else
                                              {
                                                        $response['status'] = 'Invited_email';
                                                        header('Content-type: application/json');
                                                        //echo json_encode($response);
                                                        exit(json_encode($response));
                                              }
                                            }
                                            else
                                            {
                                              $data4 = array(
                                                                'pid' => $pid,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'sent_to' => $im,
                                                                'status' => 'pending',
                                                                'invite_date' => date('Y-m-d H:i:s')
                                                                  );
                                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                                  $this->Front_model->insert_InviteMember($data4);
                                                  $inserted_im_id = $this->db->insert_id();
                                                  $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$im);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $pdetail->portfolio_id,
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                                  $hdata = array(
                                                        'pid' => $pid,
                                                        'gid' => $pdetail->gid,
                                                        'sid' => $pdetail->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                        'pinvited_id' =>$inserted_im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

      $reg_link = base_url('register');
      if(!empty($this->session->userdata('d168_user_cor_id')))
      {
          $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getComp)
          {
              $reg_link = $getComp->cc_link;
          }
      }

      $email_to = $im;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$pid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                    );
                                                      $this->email->send(); 
                                            }
                                          }
                                      
                                    }         
                                }

            $this->session->set_flashdata('message','Team Member Added Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
              }
            else
              {
                      $response['status'] = 'Empty_TMember';
                      header('Content-type: application/json');
                      echo json_encode($response);
              }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_pMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $pm_id = $this->input->post('pm_id');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');
          $powner_id = $this->input->post('pcreated_by');        
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $mem_id = "";
    $manager_id = "";
          $check_mem_id = $this->Front_model->check_ProPMToClear($pm_id);
          if($check_mem_id)
          {
            $mem_id = $check_mem_id->pmember;
          }
          $check_manager_id = $this->Front_model->Front_model->file_itgetProjectById($pid);
          if($check_manager_id)
          {
            $manager_id = $check_manager_id->pmanager;
          }
            if($manager_id == $mem_id)
            {              
              $data2 = array(
                                    'pmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->edit_Project($data2,$pid);
            }

          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $check_manager_id->gid,
                                    'sid' => $check_manager_id->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' from project',
                                    'pmember_id' =>$pm_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
      $this->Front_model->delete_pMember($pid,$pm_id);
        $this->session->set_flashdata('message','Team Member Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_iMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $im_id = $this->input->post('im_id');
    $sent_to = $this->input->post('sent_to');
          $powner_id = $this->input->post('pcreated_by');        
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

          $get_gs_pid = $this->Front_model->file_itgetProjectById($pid);
          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$sent_to.' from project',
                                    'pinvited_id' =>$im_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
      $this->Front_model->delete_iMember($pid,$im_id);
        $this->session->set_flashdata('message','Invited Member Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function projects_edit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['pdetail'] = $this->Front_model->ProjectDetailCheck($id);
      //$data['t_members'] = $this->Front_model->Edit_Team_Members($id);
      $this->load->view('user/projects-edit',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_project()//edit project
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('pname','Project Name','trim|required');
    $this->form_validation->set_rules('portfolio_id','Portfolio','trim|required');
    $this->form_validation->set_rules('dept','Department','trim|required');
    if($this->input->post('ptype') == "content")
    {
      $this->form_validation->set_rules('p_publish','Publish Date','trim|required'); 
    }

      if ($this->form_validation->run() == FALSE)
        {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
          //plink array
          $plink_array="";
          $plink_comment_array="";
          if(!empty($_POST['plink'][0])){
            $plink_array = implode(',',$this->input->post('plink'));
            $plink_comment_array = implode(',',$this->input->post('plink_comment'));
            $plink_exarray = explode(',', $plink_array);
            $count_extlink = count($plink_exarray);
            if($count_extlink >= 0)
            {
               for ($i=0; $i<$count_extlink; $i++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $plink_exarray[$i]))
                    {
                        $response['status'] = 'link_valid';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }

          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
              } 
          }
          $id = $this->input->post('id');
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);

          $getTasks = $this->Front_model->getTasksProject($id);
          if($getTasks)
          {

          //project tasks
          $data8 = array(
                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                  'dept_id' => $this->input->post('dept'),
                                    );
                $data8 = $this->security->xss_clean($data8); // xss filter
                $this->Front_model->edit_project_tasks($data8,$id);
          }

          $getSubtasks = $this->Front_model->getSubtasksProject($id);
          if($getSubtasks)
          {

          //project tasks
          $data9 = array(
                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                  'dept_id' => $this->input->post('dept'),
                                    );
                $data9 = $this->security->xss_clean($data9); // xss filter
                $this->Front_model->edit_project_subtasks($data9,$id);
          }

          $getMember = $this->Front_model->getMemberProject($id);
          if($getMember)
          {

          //project team member
          $data6 = array(
                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                    );
                $data8 = $this->security->xss_clean($data6); // xss filter
                $this->Front_model->edit_project_members($data6,$id);
          }

          //project cp
          $data10 = array(
                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                  'dept_id' => $this->input->post('dept'),
                        );
                    $data10 = $this->security->xss_clean($data10); // xss filter
                    $this->Front_model->edit_project_cp($data10,$id);

          $pdetail2 = $this->Front_model->getProjectById($id);
          $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($pdetail2->portfolio_id);
          $portfolio_owner_id = "";
          if($check_Portfolio_owner_id)
          {
              $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
          }

          if(!empty($_FILES['pfile']['name'][0]))
          {
            $cpt = count($_FILES['pfile']['name']);
            $files = $_FILES;
            //$config['file_name'] = time().'_'.$_FILES['pfile']['name'];
            $config['upload_path'] = 'assets/project_files/';
            $config['allowed_types'] = '*';
            $maxsize=2000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);
            
            for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['pfile']['name']= time().'_'.$files['pfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pfile']['name'][$i]))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['pfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['pfile']['type']= $files['pfile']['type'][$i];
                  $_FILES['pfile']['tmp_name']= $files['pfile']['tmp_name'][$i];
                  $_FILES['pfile']['error']= $files['pfile']['error'][$i];
                  $_FILES['pfile']['size']= $files['pfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['pfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('pfile'))
                            {
                              $fileData = $this->upload->data();
                              $uploadData[$i]['pfile2'] = $fileData['file_name'];
                            }
                            else 
                            {
                              $response['status'] = 'Error_Uploading';
                              header('Content-type: application/json');
                              //echo json_encode($response);
                              exit(json_encode($response));
                            } 
                        }                                  
                }
               if(is_array($uploadData))
                    {
                        $pfile2 = implode(', ', array_column($uploadData, 'pfile2'));
                        $myFArray = explode(',', $pfile2);//file array

                        if($this->input->post('ptype') == "content")
                        {
                          $publish_date = $this->input->post('p_publish');
                        }
                        else
                        {
                          $publish_date = "";
                        }

                      $data = array(
                                    'p_publish' => $publish_date,
                                    'pname' => $this->input->post('pname'),
                                    'pdes' => $this->input->post('pdes'),
                                    'plink' => $plink_array,
                                    'plink_comment' => $plink_comment_array,
                                    'portfolio_id' => $this->input->post('portfolio_id'),
                                    'dept_id' => $this->input->post('dept'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$id);
                      $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail2->gid,
                                    'sid' => $pdetail2->sid,                                    
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                $pdetail = $this->Front_model->getProjectById($id);
                                $pdetail_member = $this->Front_model->getMemberProject($id);

                                  $pro_member = "";
                                  $pro_member2[] = "";
                                  if($pdetail || $pdetail_member)
                                  {
                                    if($pdetail)
                                    {
                                      $pro_member1 = $pdetail->pcreated_by;
                                    }
                                    if($pdetail_member)
                                    {
                                      foreach($pdetail_member as $pm)
                                      {
                                        $pro_member2[] = $pm->pmember;
                                      }
                                    }
                                  }
                                $new_pro_member1 = explode(', ', $pro_member1);
                                $pro_member = array_merge($pro_member2,$new_pro_member1);
                                $implode_pro_member = implode(',', $pro_member);
                                $check_mem = explode(',', $implode_pro_member);        
                                $index = array_search($this->session->userdata('d168_id'),$check_mem);
                                if($index !== FALSE){
                                    unset($check_mem[$index]);
                                }
                                $final_mem = implode(',', $check_mem); 
                                foreach($myFArray as $f)
                                {  
                                  $data1 = array(
                                      'pid' => $id,
                                      'pfile' => trim($f),
                                      'pcreated_by' => $this->session->userdata('d168_id'),
                                      'pfile_date' => date('Y-m-d H:i:s'),
                                      'pfnotify' => $final_mem,
                                      'pfnotify_clear' => $final_mem,
                                      'pfnotify_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->insert_ProjectFile($data1);
                                  $pfile_inserted_id = $this->db->insert_id();

                                  $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail2->gid,
                                    'sid' => $pdetail2->sid, 
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' =>  substr(trim($f), strpos(trim($f), '_') + 1).' File Uploaded By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pfile_id' =>$pfile_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                }

                                if(!empty($myTMArray[0]))
                                { 
                                    $ptm = $this->Front_model->ProjectTeamMember($id); 
                                    $all_ptm = array();
                                    if($ptm)
                                    {
                                      foreach($ptm as $all_tm)
                                      {
                                        $all_ptm[] = $all_tm->pmember;
                                      }
                                    }
                                  $no_more_mem = array_diff($all_ptm,$myTMArray);
                                  foreach($no_more_mem as $no_mem)
                                  {
                                    if(($pdetail2->pcreated_by == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
                                      {
                                        if($portfolio_owner_id != $this->session->userdata('d168_id'))
                                        {
                                          if($pdetail2->pmanager == $no_mem)
                                          {              
                                            $data2 = array(
                                                                  'pmanager' => '',
                                                              );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->edit_Project($data2,$id);
                                          }
                                          $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                        }                                        
                                      }
                                      else
                                      {
                                        if($pdetail2->pmanager != $no_mem)
                                        {
                                          if($portfolio_owner_id != $no_mem)
                                          {
                                            $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                          }
                                        }
                                      }
                                  }
                                  foreach($myTMArray as $t)
                                  {
                                    $check = $this->Front_model->check_TeamRequestSend($t,$id);
                                    if($check == 0)
                                    {
                                    $data2 = array(
                                        'pid' => $id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($t),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    // $hdata = array(
                                    //                   'pid' => $id,
                                    //                   'h_date' => date('Y-m-d H:i:s'),
                                    //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    //                   'pmember_id' =>$inserted_pm_id
                                    //               );
                                    //               $hdata = $this->security->xss_clean($hdata); // xss filter
                                    //               $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                  }
                                }
                                else
                                {
                                  $ptm = $this->Front_model->ProjectTeamMember($id); 
                                    $all_ptm = array();
                                    if($ptm)
                                    {
                                      foreach($ptm as $all_tm)
                                      {
                                        $all_ptm[] = $all_tm->pmember;
                                      }
                                    }
                                  $no_more_mem = array_diff($all_ptm,$myTMArray);
                                  foreach($no_more_mem as $no_mem)
                                  {
                                    if(($pdetail2->pcreated_by == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
                                      {
                                        if($portfolio_owner_id != $this->session->userdata('d168_id'))
                                        {
                                          if($pdetail2->pmanager == $no_mem)
                                          {              
                                            $data2 = array(
                                                                  'pmanager' => '',
                                                              );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->edit_Project($data2,$id);
                                          }
                                          $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                        } 
                                      }
                                      else
                                      {
                                        if($pdetail2->pmanager != $no_mem)
                                        {
                                          if($portfolio_owner_id != $no_mem)
                                          {
                                            $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                          }
                                        }
                                      }
                                  }
                                }

                                if(!empty($imemail_array[0]))
                                {
                                    $myIM_Array = explode(',', $imemail_array);//invite team member array
                                    foreach($myIM_Array as $im)
                                    {
                                      $check_if_registered = $this->Front_model->selectLogin($im);
                                      $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$id);
                                      if($check_project_members > 0)
                                        {
                                            $response['status'] = 'registered_email';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                        }
                                        else
                                        {
                                          if($check_if_registered)
                                          {
                                            if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data2 = array(
                                                'pid' => $id,
                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                            // $hdata = array(
                                            //                   'pid' => $id,
                                            //                   'h_date' => date('Y-m-d H:i:s'),
                                            //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                            //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                            //                   'pmember_id' =>$inserted_pm_id
                                            //               );
                                            //               $hdata = $this->security->xss_clean($hdata); // xss filter
                                            //               $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Project Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                                                $this->email->send();
                                            }
                                          }
                                          else
                                          {
                                            $check_email = $this->Front_model->check_invited_email($im,$id);
                                            if($check_email)
                                            {
                                              if($check_email->status != 'pending')
                                              {
                                                  $data4 = array(
                                                                'pid' => $id,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'sent_to' => $im,
                                                                'status' => 'pending',
                                                                'invite_date' => date('Y-m-d H:i:s')
                                                                  );
                                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                                  $this->Front_model->insert_InviteMember($data4);
                                                  $inserted_im_id = $this->db->insert_id();
                                                  $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                                  $hdata = array(
                                                        'pid' => $id,
                                                        'gid' => $pdetail2->gid,
                                                        'sid' => $pdetail2->sid, 
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                        'pinvited_id' =>$inserted_im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

      $reg_link = base_url('register');
      if(!empty($this->session->userdata('d168_user_cor_id')))
      {
          $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getComp)
          {
              $reg_link = $getComp->cc_link;
          }
      }

      $email_to = $im;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                    );
                                                      $this->email->send();
                                              }
                                              else
                                              {
                                                        $response['status'] = 'Invited_email';
                                                        header('Content-type: application/json');
                                                        //echo json_encode($response);
                                                        exit(json_encode($response));
                                              }
                                            }
                                            else
                                            {
                                              $data4 = array(
                                                                'pid' => $id,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'sent_to' => $im,
                                                                'status' => 'pending',
                                                                'invite_date' => date('Y-m-d H:i:s')
                                                                  );
                                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                                  $this->Front_model->insert_InviteMember($data4);
                                                  $inserted_im_id = $this->db->insert_id();
                                                  $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                                  $hdata = array(
                                                        'pid' => $id,
                                                        'gid' => $pdetail2->gid,
                                                        'sid' => $pdetail2->sid, 
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                        'pinvited_id' =>$inserted_im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Project Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                    );
                                                      $this->email->send();
                                            }
                                          }                                         
                                      }
                                    }         
                                }

                                //pass <a> link in set_flashdata
                                  //$link = anchor(base_url('projects-overview/'.$id), 'View Edited Project Details!');
                                  //$message = 'Project Edited Successfully!' .' '. $link;
                              $this->session->set_flashdata('message', 'Project Edited Successfully!');
                              $response['status'] = TRUE;
                              if($pdetail2->pcreated_by == $this->session->userdata('d168_id')) 
                              {
                                $response['page'] = 'created';
                              }
                              else
                              {
                                $response['page'] = 'accepted';
                              }
                              $response['pid'] = $id;
                              header('Content-type: application/json');
                              echo json_encode($response);
                  } 
                  else 
                  {
                    $response['status'] = 'Error_Uploading';
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
                  }
          }
          else
          {
                    if($this->input->post('ptype') == "content")
                        {
                          $publish_date = $this->input->post('p_publish');
                        }
                        else
                        {
                          $publish_date = "";
                        }

                    $data = array(
                                    'p_publish' => $publish_date,
                                    'pname' => $this->input->post('pname'),
                                    'pdes' => $this->input->post('pdes'),
                                    'plink' => $plink_array,
                                    'plink_comment' => $plink_comment_array,
                                    'portfolio_id' => $this->input->post('portfolio_id'),
                                    'dept_id' => $this->input->post('dept'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$id);
                    $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail2->gid,
                                    'sid' => $pdetail2->sid, 
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                if(!empty($myTMArray[0]))
                                { 
                                    $ptm = $this->Front_model->ProjectTeamMember($id); 
                                    $all_ptm = array();
                                    if($ptm)
                                    {
                                      foreach($ptm as $all_tm)
                                      {
                                        $all_ptm[] = $all_tm->pmember;
                                      }
                                    }
                                  $no_more_mem = array_diff($all_ptm,$myTMArray);
                                  foreach($no_more_mem as $no_mem)
                                  {
                                    if(($pdetail2->pcreated_by == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
                                      {
                                        if($portfolio_owner_id != $this->session->userdata('d168_id'))
                                        {
                                          if($pdetail2->pmanager == $no_mem)
                                          {              
                                            $data2 = array(
                                                                  'pmanager' => '',
                                                              );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->edit_Project($data2,$id);
                                          }
                                          $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                        } 
                                      }
                                      else
                                      {
                                        if($pdetail2->pmanager != $no_mem)
                                        {
                                          if($portfolio_owner_id != $no_mem)
                                          {
                                            $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                          }
                                        }
                                      }
                                  }
                                  foreach($myTMArray as $t)
                                  {
                                    $check = $this->Front_model->check_TeamRequestSend($t,$id);
                                    if($check == 0)
                                    {
                                    $data2 = array(
                                        'pid' => $id,
                                        'portfolio_id' => $this->input->post('portfolio_id'),
                                        'pmember' => trim($t),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    // $hdata = array(
                                    //                   'pid' => $id,
                                    //                   'h_date' => date('Y-m-d H:i:s'),
                                    //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    //                   'pmember_id' =>$inserted_pm_id
                                    //               );
                                    //               $hdata = $this->security->xss_clean($hdata); // xss filter
                                    //               $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                        $this->email->send();
                                  }
                                  }
                                }
                                else
                                {
                                  $ptm = $this->Front_model->ProjectTeamMember($id); 
                                    $all_ptm = array();
                                    if($ptm)
                                    {
                                      foreach($ptm as $all_tm)
                                      {
                                        $all_ptm[] = $all_tm->pmember;
                                      }
                                    }
                                  $no_more_mem = array_diff($all_ptm,$myTMArray);
                                  foreach($no_more_mem as $no_mem)
                                  {
                                    if(($pdetail2->pcreated_by == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
                                      {
                                        if($portfolio_owner_id != $this->session->userdata('d168_id'))
                                        {
                                          if($pdetail2->pmanager == $no_mem)
                                          {              
                                            $data2 = array(
                                                                  'pmanager' => '',
                                                              );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->edit_Project($data2,$id);
                                          }
                                          $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                        } 
                                      }
                                      else
                                      {
                                        if($pdetail2->pmanager != $no_mem)
                                        {
                                          if($portfolio_owner_id != $no_mem)
                                          {
                                            $this->Front_model->delete_pMember_mem_id($id,$no_mem);
                                          }
                                        }
                                      }
                                  }
                                }

                                if(!empty($imemail_array[0]))
                                {
                                    $myIM_Array = explode(',', $imemail_array);//invite team member array
                                    foreach($myIM_Array as $im)
                                    {
                                      $check_if_registered = $this->Front_model->selectLogin($im);
                                      $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$id);
                                      if($check_project_members > 0)
                                        {
                                            $response['status'] = 'registered_email';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                        }
                                        else
                                        {
                                          if($check_if_registered)
                                          {
                                            if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data2 = array(
                                                'pid' => $id,
                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                                                  'sent_to' => $im,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                            // $hdata = array(
                                            //                   'pid' => $id,
                                            //                   'h_date' => date('Y-m-d H:i:s'),
                                            //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                            //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                            //                   'pmember_id' =>$inserted_pm_id
                                            //               );
                                            //               $hdata = $this->security->xss_clean($hdata); // xss filter
                                            //               $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Project Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                                                $this->email->send();
                                            }  
                                          }
                                          else
                                          {
                                          $check_email = $this->Front_model->check_invited_email($im,$id);
                                          if($check_email)
                                          {
                                            //echo $check_email->status;
                                            if($check_email->status != 'pending')
                                            {
                                                $data4 = array(
                                                              'pid' => $id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                                'sent_to' => $im,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $id,
                                                      'gid' => $pdetail2->gid,
                                                      'sid' => $pdetail2->sid, 
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}
        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Project Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                            }
                                            else
                                            {
                                                      $response['status'] = 'Invited_email';
                                                      header('Content-type: application/json');
                                                      //echo json_encode($response);
                                                      exit(json_encode($response));
                                            }
                                          }
                                          else
                                          {
                                            $data4 = array(
                                                              'pid' => $id,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $im,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($this->input->post('portfolio_id'),$im);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $this->input->post('portfolio_id'),
                                                                'sent_to' => $im,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $id,
                                                      'gid' => $pdetail2->gid,
                                                      'sid' => $pdetail2->sid, 
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($this->input->post('portfolio_id'));
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

      $email_to = $im;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$this->input->post('pname').' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($this->input->post('pdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                                          }
                                        }
                                      }
                                    }         
                                }
                                //$link = anchor(base_url('projects-overview/'.$id), 'View Edited Project Details!');
                                  //$message = 'Project Edited Successfully!' .' '. $link;
                              $this->session->set_flashdata('message', 'Project Edited Successfully!');
                              $response['status'] = TRUE;
                              if($pdetail2->pcreated_by == $this->session->userdata('d168_id')) 
                              {
                                $response['page'] = 'created';
                              }
                              else
                              {
                                $response['page'] = 'accepted';
                              }
                              $response['pid'] = $id;
                              header('Content-type: application/json');
                              echo json_encode($response);
          }                                             
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function project_request()//accept or readmore request through email id
  {
    $p_id = $this->uri->segment(2);
    $reg_id = $this->uri->segment(3);
    $pmember_id = $this->uri->segment(4);
    $data['flag_num'] = $this->uri->segment(5);
          $getEmailID = $this->Front_model->getEmailID($reg_id);
          $pdetail = $this->Front_model->getProjectById($p_id);
        $res = $this->Front_model->project_request($p_id,$reg_id,$pmember_id);
    if($data['flag_num'] == '1')
    {
        if($res > 0) 
        {
          $res2 = $this->Front_model->project_request_status($p_id,$reg_id,$pmember_id);
          $check_status = $res2->status;
          if($check_status == 'send')
          {
            $data['status'] = 'accepted';
            $data['pid'] = $p_id;
            $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_request($data3,$p_id,$reg_id,$pmember_id);
            $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
            $hdata = array(
                            'pid' => $p_id,
                            'gid' => $pdetail->gid,
                            'sid' => $pdetail->sid, 
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'pmember_id' =>$pmember_id
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $reg_id,
                            'edit_allow' => 'no',                            
                          );
          $data4 = $this->security->xss_clean($data4);
          $this->Front_model->insert_projectManagement($data4);
          $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/prequest_accept',$data);
          }
          elseif($check_status == 'accepted')
          {
            $data['status'] = 'already_accepted';
            $data['pid'] = $p_id;
            $this->load->view('user/prequest_accept',$data);
          }
          elseif($check_status == 'read_more')
          {            
            $data['status'] = 'accepted';
            $data['pid'] = $p_id;
            $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_request($data3,$p_id,$reg_id,$pmember_id);
            $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
            $hdata = array(
                            'pid' => $p_id,
                            'gid' => $pdetail->gid,
                            'sid' => $pdetail->sid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'pmember_id' =>$pmember_id
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $reg_id,
                            'edit_allow' => 'no',                            
                          );
            $data4 = $this->security->xss_clean($data4);
            $this->Front_model->insert_projectManagement($data4);
            $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/prequest_accept',$data);
          }
        }
        else
        {
          $this->load->view('user/prequest_invalid');
        }
    }
    elseif($data['flag_num'] == '2')
    {
        if($res > 0)
        {
          $res2 = $this->Front_model->project_request_status($p_id,$reg_id,$pmember_id);
          $check_status = $res2->status;
          if($check_status == 'send')
          {
            $data['status'] = 'read_more';
            $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_request($data3,$p_id,$reg_id,$pmember_id);
            // $data2 = array(    'status' => 'pending',
            //                   'status_date' => date('Y-m-d H:i:s')
            //              );
            //               $data2 = $this->security->xss_clean($data2); // xss filter
            //               $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
            $hdata = array(
                            'pid' => $p_id,
                            'gid' => $pdetail->gid,
                            'sid' => $pdetail->sid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'pmember_id' =>$pmember_id
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/prequest_readmore',$data);
          }
          elseif($check_status == 'read_more')
          {
            $data['status'] = 'already_read_more';
            $this->load->view('user/prequest_readmore',$data);
          }
          elseif($check_status == 'accepted')
          {
            $data['status'] = 'already_accepted';
            $data['pid'] = $p_id;
            $this->load->view('user/prequest_accept',$data);
          }
        }
        else
        {
          $this->load->view('user/prequest_invalid');
        }
    }
    else
    {
      $this->load->view('user/prequest_invalid');
    }
  }

  public function projects_request2()//accept or readmore request through site
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $p_id = $this->uri->segment(2);
    $data['flag_num'] = $this->uri->segment(3);
    $getEmailID = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    $pdetail = $this->Front_model->getProjectById($p_id);
    $res = $this->Front_model->project_request2($p_id);
     if($data['flag_num'] == '1')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->project_request_status2($p_id);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $this->session->userdata('d168_id'),
                            'edit_allow' => 'no',                            
                          );
          $data4 = $this->security->xss_clean($data4);
          $this->Front_model->insert_projectManagement($data4);
          $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Project Request Successfully Accepted!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Project Request Already Accepted!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $this->session->userdata('d168_id'),
                            'edit_allow' => 'no',                            
                          );
          $data4 = $this->security->xss_clean($data4);
          $this->Front_model->insert_projectManagement($data4);
          $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Project Request Successfully Accepted!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
      }
     }
     elseif($data['flag_num'] == '2')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->project_request_status2($p_id);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          // $data2 = array(    'status' => 'pending',
          //                     'status_date' => date('Y-m-d H:i:s')
          //                );
          //                 $data2 = $this->security->xss_clean($data2); // xss filter
          //                 $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Read More Project Request Sent!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $this->session->set_flashdata('message', 'Read More Project Request Already Sent!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Project Request Already Accepted!');
          //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
      }
     }
     else
     {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        //redirect($_SERVER['HTTP_REFERER']);
          echo "<script>window.history.go(-2);</script>";
     }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function projectsModal_request2()//accept or readmore request through site (Modal Preview)
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $p_id = $this->uri->segment(2);
    $data['flag_num'] = $this->uri->segment(3);
    $getEmailID = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    $pdetail = $this->Front_model->getProjectById($p_id);
    $res = $this->Front_model->project_request2($p_id);
     if($data['flag_num'] == '1')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->project_request_status2($p_id);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $this->session->userdata('d168_id'),
                            'edit_allow' => 'no',                            
                          );
          $data4 = $this->security->xss_clean($data4);
          $this->Front_model->insert_projectManagement($data4);
          $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Project Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Project Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        elseif($check == 'read_more')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $data4 = array(
                            'pid' => $p_id,
                            'powner' => $res2->pcreated_by,
                            'pmember' => $this->session->userdata('d168_id'),
                            'edit_allow' => 'no',                            
                          );
          $data4 = $this->security->xss_clean($data4);
          $this->Front_model->insert_projectManagement($data4);
          $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Project Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        redirect($_SERVER['HTTP_REFERER']);
      }
     }
     elseif($data['flag_num'] == '2')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->project_request_status2($p_id);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_project_request2($data3,$p_id);
          // $data2 = array(    'status' => 'pending',
          //                     'status_date' => date('Y-m-d H:i:s')
          //                );
          //                 $data2 = $this->security->xss_clean($data2); // xss filter
          //                 $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$pdetail->portfolio_id);
          $hdata = array(
                          'pid' => $p_id,
                          'gid' => $pdetail->gid,
                          'sid' => $pdetail->sid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'pmember_id' =>$res2->pm_id
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Read More Project Request Sent!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        elseif($check == 'read_more')
        {
          $this->session->set_flashdata('message', 'Read More Project Request Already Sent!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Project Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        redirect($_SERVER['HTTP_REFERER']);
      }
     }
     else
     {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Project!');
        redirect($_SERVER['HTTP_REFERER']);
     }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function project_invite_reject_request()
  {
    $p_id = $this->uri->segment(2);
    $imember_id = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
        $r = $this->Front_model->check_invite_request($p_id,$imember_id);
        if($r > 0)
        {
          if($data['flag_num'] == '2')
            {
              $res = $this->Front_model->check_invite_reject_request($p_id,$imember_id);
              $check_status = $res->status;
                if($check_status == 'pending')
                {
                  $pdetail = $this->Front_model->getProjectById($p_id);
                  $idetail = $this->Front_model->getProjectInviteById($p_id,$imember_id);
                    $data['status'] = 'rejected';
                    $data['pid'] = $p_id;
                    $data = array(
                                    'status' => 'rejected',
                                    'accept_date' => date('Y-m-d H:i:s')
                                  );
                    $data = $this->security->xss_clean($data);
                    $this->Front_model->update_invite_reject_request($data,$p_id,$imember_id);
                    $data2 = array(    'status' => 'pending',
                              'status_date' => date('Y-m-d H:i:s')
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$idetail->sent_to,$pdetail->portfolio_id);
                    $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource' => $res->sent_to,
                                    'h_description' => 'Invite Rejected By'.$res->sent_to,
                                    'pinvited_id' =>$res->im_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    $this->load->view('user/invite_request_reject',$data);
                }
                elseif($check_status == 'rejected')
                {
                  $data['status'] = 'already_rejected';
                  $data['pid'] = $p_id;
                  $this->load->view('user/invite_request_reject',$data);
                }
                elseif($check_status == 'accepted')
                {
                  $data['status'] = 'accepted';
                  $data['pid'] = $p_id;
                  $this->load->view('user/invite_request_reject',$data);          
                }
            }
            else
            {      
                $this->load->view('user/prequest_invalid');
            }
        }
        else
        {
          $this->load->view('user/prequest_invalid');
        }    
  }

  public function pdetail_SuggestTMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $pid = $this->input->post('pid');
          $pro_detail = $this->Front_model->getProjectById2($pid);
          $getProCreatedBY = $this->Front_model->getEmailID($pro_detail->pcreated_by);
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
          if($this->input->post('ismemail'))
          {
            $this->form_validation->set_rules('ismemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('ismemail'));
              }             
          }
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          if((!empty($myTMArray[0])) || (!empty($imemail_array[0])))
          {
            if(!empty($myTMArray[0]))
            {
              foreach($myTMArray as $t)
                  {
                    $check = $this->Front_model->check_suggested2($pid,$t);
                    if($check == 0)
                    {
                      $data2 = array(
                          'pid' => $pid,
                          'suggest_id' => trim($t),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_SuggestTeamMember($data2);
                      $pmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($t);
                      $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $pro_detail->gid,
                                    'sid' => $pro_detail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$pmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                      $this->session->set_flashdata('message','Team Member Suggested Successfully!');
                      $response['status'] = TRUE;
                      header('Content-type: application/json');
                      echo json_encode($response);
                    }
                    else
                    {
                      $response['status'] = 'Already_suggested';
                      header('Content-type: application/json');
                      exit(json_encode($response));
                    }
                  }                      
              }

              if(!empty($imemail_array[0]))
              {
                $myIM_Array = explode(',', $imemail_array);//invite team member array
                $status_show = 'no';
                foreach($myIM_Array as $im)
                {
                  if($getProCreatedBY->email_address == trim($im))
                        {
                            $response['status'] = 'err_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                        else
                        {
                            $check_if_registered = $this->Front_model->selectLogin($im);
                            $check_project_members = 0;
                            if($check_if_registered)
                            {
                              $check_project_members = $this->Front_model->check_TeamRequestSend($check_if_registered->reg_id,$pid);
                            }
                            if($check_project_members > 0)
                              {
                                  $response['status'] = 'registered_email';
                                      header('Content-type: application/json');
                                      //echo json_encode($response);
                                      exit(json_encode($response));
                              }
                              else
                              {
                                $check = $this->Front_model->check_suggested2($pid,$im);
                                if($check == 0)
                                {
                                  $check_email = $this->Front_model->check_invited_suggestemail($im,$pid);
                                  if($check_email)
                                  {
                                    $response['status'] = 'already_invited';
                                        header('Content-type: application/json');
                                        //echo json_encode($response);
                                        exit(json_encode($response));
                                  }
                                  else
                                  {
                                    $data2 = array(
                                        'pid' => $pid,
                                        'suggest_id' => trim($im),
                                        'status' => 'suggested',
                                        'already_register' => 'no',
                                        'suggested_by' => $this->session->userdata('d168_id'),
                                        'suggested_date' => date('Y-m-d H:i:s')
                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_SuggestTeamMember($data2);
                                    $pmsuggested_inserted_id = $this->db->insert_id();
                                    $hdata = array(
                                                  'pid' => $pid,
                                                  'gid' => $pro_detail->gid,
                                                  'sid' => $pro_detail->sid,
                                                  'h_date' => date('Y-m-d H:i:s'),
                                                  'h_resource_id' => $P_Owner->reg_id,
                                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                  'h_description' => $im.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                  'pmsuggested_id' =>$pmsuggested_inserted_id
                                              );
                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                              $this->Front_model->insert_ProjectHistory($hdata);
                                    $status_show = 'yes';
                                  }
                                }
                                else
                                {
                                    $response['status'] = 'Already_suggested';
                                    header('Content-type: application/json');
                                    exit(json_encode($response));
                                }
                              } 
                        }
                }
                  if($status_show = 'yes')
                  {
                    $this->session->set_flashdata('message','Team Member Suggested Successfully!');
                                      $response['status'] = TRUE;
                                      header('Content-type: application/json');
                                      echo json_encode($response);
                  }
              }
          }
          else
          {
                      $response['status'] = 'Empty_Member';
                      header('Content-type: application/json');
                      echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_SuggestedPMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $suggest_id = $this->input->post('suggest_id');
    $pdetail = $this->Front_model->ProjectDetail2($pid);
    $student_id = $this->session->userdata('d168_id');
    $P_Owner = $this->Front_model->getStudentById($student_id);
            $suggest = $this->Front_model->check_suggested($pid,$suggest_id);
            $getEmailID = $this->Front_model->getEmailID($suggest_id);
      $check = $this->Front_model->check_TeamRequestSend($suggest_id,$pid);
        if($check == 0)
          {
                      $data = array(
                   'status' => 'approved',
                   'approve_date' => date('Y-m-d H:i:s')
                            );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                      $hdata = array(
                                    'pid' => $suggest->pid,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$suggest->s_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                      $data2 = array(
                          'pid' => $pid,
                          'portfolio_id' => $pdetail->portfolio_id,
                          'pmember' => $suggest_id,
                          'status' => 'send',
                          'pcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_TeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $hdata = array(
                                                      'pid' => $pid,
                                                      'gid' => $pdetail->gid,
                                                      'sid' => $pdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
          
          $check_if_requested = $this->Front_model->RequestAsProjectMember($pid,$suggest_id);
              if($check_if_requested)
              {
                $data = array(
                                    'status' => 'added',
                                );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_project_request_member($data,$pid,$suggest_id);
              }
                                      if($this->email->send())
                                      {
                                        $this->session->set_flashdata('message', 'Team Member Added Successfully!');
                                        $response['status'] = TRUE;
                                        header('Content-type: application/json');
                                        echo json_encode($response);
                                      }else{
                                        echo $this->email->print_debugger();
                                      }  
          }
          else
          {
             $data = array(
                   'status' => 'approved',
                   'approve_date' => date('Y-m-d H:i:s')
                            );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                      $hdata = array(
                                    'pid' => $suggest->pid,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$suggest->s_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            $check_if_requested = $this->Front_model->RequestAsProjectMember($pid,$suggest_id);
              if($check_if_requested)
              {
                $data = array(
                                    'status' => 'added',
                                );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_project_request_member($data,$pid,$suggest_id);
              }
                      $this->session->set_flashdata('message', 'Team Member Request Already Sent!');
                                        $response['status'] = TRUE;
                                        header('Content-type: application/json');
                                        echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_Suggested_IPMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $suggest_id = $this->input->post('suggest_id');
    $pdetail = $this->Front_model->ProjectDetail2($pid);
    $student_id = $this->session->userdata('d168_id');
    $P_Owner = $this->Front_model->getStudentById($student_id);
    $suggest = $this->Front_model->check_suggested($pid,$suggest_id);
            $getEmailID = $this->Front_model->getEmailID($suggest_id);
            if($getEmailID)
            {
              $s_first_name = $getEmailID->first_name;
              $s_last_name = $getEmailID->last_name;
            }
            else
            {
              $s_first_name = $suggest_id;
              $s_last_name = "";
            }
    $check_if_registered = $this->Front_model->selectLogin($suggest_id);
    $check_if_requested = $this->Front_model->RequestAsProjectMember($pid,$suggest_id);
              if($check_if_requested)
              {
                $data = array(
                                    'status' => 'added',
                                );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_project_request_member($data,$pid,$suggest_id);
              }

            if($check_if_registered)
            {
                    if($this->session->userdata('d168_id') == $check_if_registered->reg_id)
                                            {
                                                $response['status'] = 'err_valid';
                                                header('Content-type: application/json');
                                                //echo json_encode($response);
                                                exit(json_encode($response));
                                            }
                                            else
                                            {
                                              $data = array(
                                                           'status' => 'approved',
                                                           'approve_date' => date('Y-m-d H:i:s')
                                                                    );
                                              $data = $this->security->xss_clean($data); // xss filter
                                              $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                                              $data2 = array(
                                                'pid' => $pid,
                                                'portfolio_id' => $pdetail->portfolio_id,
                                                'pmember' => trim($check_if_registered->reg_id),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                            //get email id from member id
                                            $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                                            $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$getEmailID->email_address);
                                                  if(empty($getportfolio))
                                                  {
                                                  $data = array(
                                                                  'portfolio_id' => $pdetail->portfolio_id,
                                                                  'sent_to' => $getEmailID->email_address,
                                                                  'sent_from' => $this->session->userdata('d168_id'),
                                                                  'status' => 'pending',
                                                                  'working_status' => 'active',
                                                                  'status_date' => date('Y-m-d H:i:s'),
                                                                  'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                                );
                                                  $data = $this->security->xss_clean($data); // xss filter
                                                  $this->Front_model->insert_PortfolioMember($data);
                                                  }
                                            $hdata = array(
                                                              'pid' => $pid,
                                                              'gid' => $pdetail->gid,
                                                              'sid' => $pdetail->sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $P_Owner->reg_id,
                                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                              'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                              'pmember_id' =>$inserted_pm_id
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Project Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                                                if($this->email->send())
                                                    {
                                                      $this->session->set_flashdata('message', 'Invited Successfully!');
                                                      $response['status'] = TRUE;
                                                      header('Content-type: application/json');
                                                      echo json_encode($response);
                                                    }
                                                    else{
                                                      echo $this->email->print_debugger();
                                                    }
                                            }
            }
            else
            {
                $check_email = $this->Front_model->check_invited_suggestemail($suggest_id,$pid);
                if($check_email)
                {
                  if($check_email->status != 'pending')
                                            {
                                              $data = array(
                                                           'status' => 'approved',
                                                           'approve_date' => date('Y-m-d H:i:s')
                                                                    );
                                              $data = $this->security->xss_clean($data); // xss filter
                                              $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                                              $hdata = array(
                                                'pid' => $suggest->pid,
                                                'gid' => $pdetail->gid,
                                                'sid' => $pdetail->sid,
                                                'h_date' => date('Y-m-d H:i:s'),
                                                'h_resource_id' => $P_Owner->reg_id,
                                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                'pmsuggested_id' =>$suggest->s_id
                                            );
                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                            $this->Front_model->insert_ProjectHistory($hdata);
                                                $data4 = array(
                                                              'pid' => $pid,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $suggest_id,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$suggest_id);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $pdetail->portfolio_id,
                                                                'sent_to' => $suggest_id,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $pid,
                                                      'gid' => $pdetail->gid,
                                                      'sid' => $pdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$suggest_id,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}
      $reg_link = base_url('register');
      if(!empty($this->session->userdata('d168_user_cor_id')))
      {
          $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getComp)
          {
              $reg_link = $getComp->cc_link;
          }
      }

      $email_to = $suggest_id;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$pid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    if($this->email->send())
                                                    {
                                                      $this->session->set_flashdata('message', 'Invited Successfully!');
                                                      $response['status'] = TRUE;
                                                      header('Content-type: application/json');
                                                      echo json_encode($response);
                                                    }
                                                    else{
                                                      echo $this->email->print_debugger();
                                                    }
                                                    
                                            }
                                            else
                                            {
                                              $data = array(
                                                           'status' => 'approved',
                                                           'approve_date' => date('Y-m-d H:i:s')
                                                                    );
                                              $data = $this->security->xss_clean($data); // xss filter
                                              $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                                              $hdata = array(
                                                'pid' => $suggest->pid,
                                                'gid' => $pdetail->gid,
                                                'sid' => $pdetail->sid,
                                                'h_date' => date('Y-m-d H:i:s'),
                                                'h_resource_id' => $P_Owner->reg_id,
                                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                'pmsuggested_id' =>$suggest->s_id
                                            );
                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                            $this->Front_model->insert_ProjectHistory($hdata);
                                                    $this->session->set_flashdata('message', 'Already Invited!');
                                                    $response['status'] = TRUE;
                                                    header('Content-type: application/json');
                                                    echo json_encode($response);
                                            }
                }
                else
                {
                                              $data = array(
                                                           'status' => 'approved',
                                                           'approve_date' => date('Y-m-d H:i:s')
                                                                    );
                                              $data = $this->security->xss_clean($data); // xss filter
                                              $this->Front_model->update_SuggestTeamMember($data,$pid,$suggest_id);
                                              $hdata = array(
                                                    'pid' => $suggest->pid,
                                                    'gid' => $pdetail->gid,
                                                    'sid' => $pdetail->sid,
                                                    'h_date' => date('Y-m-d H:i:s'),
                                                    'h_resource_id' => $P_Owner->reg_id,
                                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'pmsuggested_id' =>$suggest->s_id
                                                );
                                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                                $this->Front_model->insert_ProjectHistory($hdata);
                                                $data4 = array(
                                                              'pid' => $pid,
                                                              'sent_from' => $this->session->userdata('d168_id'),
                                                              'sent_to' => $suggest_id,
                                                              'status' => 'pending',
                                                              'invite_date' => date('Y-m-d H:i:s')
                                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->insert_InviteMember($data4);
                                                $inserted_im_id = $this->db->insert_id();
                                                $getportfolio = $this->Front_model->check_PortfolioMember($pdetail->portfolio_id,$suggest_id);
                                                if(empty($getportfolio))
                                                {
                                                $data = array(
                                                                'portfolio_id' => $pdetail->portfolio_id,
                                                                'sent_to' => $suggest_id,
                                                                'sent_from' => $this->session->userdata('d168_id'),
                                                                'status' => 'pending',
                                                                'working_status' => 'active',
                                                                'status_date' => date('Y-m-d H:i:s'),
                                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                                              );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->insert_PortfolioMember($data);
                                                }
                                                $hdata = array(
                                                      'pid' => $pid,
                                                      'gid' => $pdetail->gid,
                                                      'sid' => $pdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$suggest_id,
                                                      'pinvited_id' =>$inserted_im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

      $email_to = $suggest_id;
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Project Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-invite-reject-request/'.$pid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    if($this->email->send())
                                                    {
                                                      $this->session->set_flashdata('message', 'Invited Successfully!');
                                                      $response['status'] = TRUE;
                                                      header('Content-type: application/json');
                                                      echo json_encode($response);
                                                    }
                                                    else{
                                                      echo $this->email->print_debugger();
                                                    }
                }
            }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_RequestedPMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $member = $this->input->post('member');
    $getEmailID = $this->Front_model->getEmailID($member);
    $student_id = $this->session->userdata('d168_id');
    $P_Owner = $this->Front_model->getStudentById($student_id);
    $pdetail = $this->Front_model->ProjectDetailPortfolio($pid);
    $check = $this->Front_model->check_TeamRequestSend($member,$pid);
    if($check > 0)
    {
      $this->session->set_flashdata('message', 'Already Added in Team!');
                                                      $response['status'] = TRUE;
                                                      header('Content-type: application/json');
                                                      echo json_encode($response);
    }
    else
    {
      $data2 = array(
                                            'pid' => $pid,
                                            'portfolio_id' => $pdetail->portfolio_id,
                                            'pmember' => $member,
                                            'status' => 'accepted',
                                            'pcreated_by' => $student_id,
                                            'status_date' => date('Y-m-d H:i:s')
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        $hdata = array(
                                                      'pid' => $pid,
                                                      'gid' => $pdetail->gid,
                                                      'sid' => $pdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' Added in Team',
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
      $data = array(
                                    'status' => 'added',
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_project_request_member($data,$pid,$member);

      $check_if_suggested = $this->Front_model->check_if_suggested($pid,$member);
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$pid,$member);
              }

          $data4 = array(
                            'pid' => $pid,
                            'powner' => $this->session->userdata('d168_id'),
                            'pmember' => $member,
                            'edit_allow' => 'no',                            
                          );
                      $data4 = $this->security->xss_clean($data4);
                      $this->Front_model->insert_projectManagement($data4);
                      $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission not allowed to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                          $this->session->set_flashdata('message', 'Added in Team!');
                                                      $response['status'] = TRUE;
                                                      header('Content-type: application/json');
                                                      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function projects_accepted_edit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(!empty($this->input->post('id')))
      {
        $p_id = $this->input->post('id');
      }
      else
      {
        $p_id = $this->uri->segment(2);
      }
    $check_edit = $this->Front_model->check_edit_permission($p_id);
    if($check_edit)
    {
      $pdetail = $this->Front_model->ProjectDetailAccepted($p_id);
      if($check_edit->edit_allow == 'no')
      {
        $Edit_Request_From = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($pdetail->pcreated_by);
                                    $RequestEmailID = $getEmailID->email_address;
                    $hdata = array(
                                    'pid' => $check_edit->pid,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $Edit_Request_From->reg_id,
                                    'h_resource' => $Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'h_description' => 'Request for Edit Permission From '.$Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'pmanage_id' => $check_edit->m_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Edit Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Edit Request</title>
            <meta name="description" content="Project Edit Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Sometimes changes are needed...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($Edit_Request_From->first_name).' '.ucfirst($Edit_Request_From->last_name).' has requested to be able to makes edits to '.$pdetail->pname.' project. Not to worry, you\'ll be able to view and approve any changes to be applied.
                                                </p>
                                                <a href="'.base_url('project-edit-request/'.$p_id.'/'.$check_edit->m_id.'/'.$this->session->userdata('d168_id').'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept Edit Request</a>
                                                <a href="'.base_url('project-edit-request/'.$p_id.'/'.$check_edit->m_id.'/'.$this->session->userdata('d168_id').'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Edit Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                      if($this->email->send())
                                      {
                                        $this->session->set_flashdata('message', 'Edit Request Sent To Project Owner!');
                                        $response['status'] = TRUE;
                                        header('Content-type: application/json');
                                        echo json_encode($response);
                                      }else{
                                        echo $this->email->print_debugger();
                                      }
      }
      elseif($check_edit->edit_allow == 'yes')
      { 
        $data['mid'] = $check_edit->m_id;
        $data['check_status'] = $check_edit->status;      
        $data['pdetail'] = $this->Front_model->ProjectDetailAccepted($p_id);
        $this->load->view('user/projects-accepted-edit',$data);  
      }
    }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function project_edit_request()
  {
    $p_id = $this->uri->segment(2);
    $m_id = $this->uri->segment(3);
    $pmember_id = $this->uri->segment(4);
    $data['flag_num'] = $this->uri->segment(5);      
      $res = $this->Front_model->check_project_management($p_id,$m_id,$pmember_id);
      $getEmailID = $this->Front_model->getEmailID($pmember_id);
            $get_gs_pid = $this->Front_model->getProjectById($p_id);
    if($data['flag_num'] == '1')
    {
        if($res) 
        {
          $check_edit_allow = $res->edit_allow;
          if($check_edit_allow == 'no')
          {
            $data['status'] = 'yes';
            $data['pid'] = $p_id;
            $data3 = array(
                            'edit_allow' => 'yes',
                            'permission_date' => date('Y-m-d H:i:s')
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_management_request($data3,$p_id,$m_id,$pmember_id);
            
            $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission Request Allowed for user '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$res->m_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/pedit_request_accept',$data);
          }
          elseif($check_edit_allow == 'yes')
          {
            $data['status'] = 'already_yes';
            $data['pid'] = $p_id;
            $this->load->view('user/pedit_request_accept',$data);
          }
        }
    }
    elseif($data['flag_num'] == '2')
    {
        if($res) 
        {
          $check_edit_allow = $res->edit_allow;
          if($check_edit_allow == 'no')
          {
            $data['status'] = 'no';
            $data3 = array(
                            'edit_allow' => 'no'
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_management_request($data3,$p_id,$m_id,$pmember_id);
            $hdata = array(
                                    'pid' => $p_id,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Permission Request Denied for user '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmanage_id' =>$res->m_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/pedit_request_deny',$data);
          }
          elseif($check_edit_allow == 'no') 
          {
            $data['status'] = 'already_no';
            $this->load->view('user/pedit_request_deny',$data);
          }
          elseif($check_edit_allow == 'yes')
          {
            $data['status'] = 'already_yes';
            $data['pid'] = $p_id;
            $this->load->view('user/pedit_request_accept',$data);
          }
        }
    }
  }

  public function edit_accepted_project()//edit project
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('pname','Project Name','trim|required');
    
      if ($this->form_validation->run() == FALSE)
        {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $id = $this->input->post('id');
          $powner_id = $this->input->post('pcreated_by');
          $mid = $this->input->post('mid');          
          $Edit_Request_From = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          if(!empty($_FILES['pfile']['name'][0]))
          {
            $cpt = count($_FILES['pfile']['name']);
            $files = $_FILES;
            //$config['file_name'] = time().'_'.$_FILES['pfile']['name'];
            $config['upload_path'] = 'assets/project_files/';
            $config['allowed_types'] = '*';
            $maxsize=2000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);
            
            for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['pfile']['name']= time().'_'.$files['pfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pfile']['name'][$i])));
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name)); 
                  $_FILES['pfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['pfile']['type']= $files['pfile']['type'][$i];
                  $_FILES['pfile']['tmp_name']= $files['pfile']['tmp_name'][$i];
                  $_FILES['pfile']['error']= $files['pfile']['error'][$i];
                  $_FILES['pfile']['size']= $files['pfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['pfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                          if($this->upload->do_upload('pfile'))
                          {
                            $fileData = $this->upload->data();
                            $uploadData[$i]['pfile2'] = $fileData['file_name'];
                          }
                          else 
                          {
                            $response['status'] = 'Error_Uploading';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                          } 
                        }                
                }
               if(is_array($uploadData))
                    {
                        $pfile2 = implode(', ', array_column($uploadData, 'pfile2'));
                        $myFArray = explode(',', $pfile2);//file array
                        $pdetail = $this->Front_model->getProjectById($id);
                        $pdetail_member = $this->Front_model->getMemberProject($id);
                        $pro_member = "";
                        $pro_member2[] = "";
                          if($pdetail || $pdetail_member)
                          {
                            if($pdetail)
                            {
                              $pro_member1 = $pdetail->pcreated_by;
                            }
                            if($pdetail_member)
                            {
                              foreach($pdetail_member as $pm)
                              {
                                $pro_member2[] = $pm->pmember;
                              }
                            }
                          }
                        $new_pro_member1 = explode(', ', $pro_member1);
                        $pro_member = array_merge($pro_member2,$new_pro_member1);
                        $implode_pro_member = implode(',', $pro_member);
                        $check_mem = explode(',', $implode_pro_member);        
                        $index = array_search($this->session->userdata('d168_id'),$check_mem);
                        if($index !== FALSE){
                            unset($check_mem[$index]);
                        }
                        $final_mem = implode(',', $check_mem); 
                                foreach($myFArray as $f)
                                {
                                  $data1 = array(
                                      'pid' => $id,
                                      'pfile' => trim($f),
                                      'pcreated_by' => $this->session->userdata('d168_id'),
                                      'pfile_date' => date('Y-m-d H:i:s'),
                                      'pfnotify' => $final_mem,
                                      'pfnotify_clear' => $final_mem,
                                      'pfnotify_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->insert_ProjectFile($data1);
                                  $pfile_inserted_id = $this->db->insert_id();

                                  $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $Edit_Request_From->reg_id,
                                    'h_resource' => $Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'h_description' =>  substr(trim($f), strpos(trim($f), '_') + 1).' File Uploaded By '.$Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'pfile_id' =>$pfile_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                                }

                                //pass <a> link in set_flashdata
                                  $link = anchor(base_url('projects-overview-accepted/'.$id), 'View Edited Project Details!');
                                  $message = 'Project Edited Successfully!' .' '. $link;
                                  $this->session->set_flashdata('message', $message);
                                    $response['status'] = TRUE;
                                    header('Content-type: application/json');
                                    echo json_encode($response);
                  } 
                  else 
                  {
                    $response['status'] = 'Error_Uploading';
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
                  }
          }
          if((empty($_FILES['pfile']['name'][0])) && ((!empty($this->input->post('pname'))) || (!empty($this->input->post('pdes')))))
          {
            $pdetail = $this->Front_model->ProjectDetailAccepted($id);

            if($pdetail->pname != $this->input->post('pname'))
            {
              $data = array(
                                      'm_id' => $mid,
                                      'pid' => $id,
                                      'powner' => $powner_id,
                                      'pmember' => $this->session->userdata('d168_id'),
                                      'r_pname' => $this->input->post('pname'),
                                      'r_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_ProjectMFields($data);
                                  $pmfield_inserted_id = $this->db->insert_id();
                                  $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $Edit_Request_From->reg_id,
                                    'h_resource' => $Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'h_description' => 'Edit Field Request for Project Name from '.$Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'pmfield_id' =>$pmfield_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            }
            if($pdetail->pdes != $this->input->post('pdes'))
            {
              $data = array(
                                      'm_id' => $mid,
                                      'pid' => $id,
                                      'powner' => $powner_id,
                                      'pmember' => $this->session->userdata('d168_id'),
                                      'r_pdes' => $this->input->post('pdes'),
                                      'r_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_ProjectMFields($data);
                                  $pmfield_inserted_id = $this->db->insert_id();
                                  $hdata = array(
                                    'pid' => $id,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $Edit_Request_From->reg_id,
                                    'h_resource' => $Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'h_description' => 'Edit Field Request for Project Description from '.$Edit_Request_From->first_name.' '.$Edit_Request_From->last_name,
                                    'pmfield_id' =>$pmfield_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            }
            
            $data3 = array(
                                'status' => 'sent'
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_project_management($data3,$id,$this->session->userdata('d168_id'));

            $getEmailID = $this->Front_model->getEmailID($powner_id);
                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $message = ('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Edit Fields Request</title>
            <meta name="description" content="Project Edit Fields Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Here are the changes requested...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($Edit_Request_From->first_name).' '.ucfirst($Edit_Request_From->last_name).' has requested the following changes to '.$pdetail->pname.' project. 
                                                </p>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;"><br>
                                                Requested Changes :- ');
                                                  if($pdetail->pname != $this->input->post('pname'))
                                                    {
                                                     $message .=('<br> Project Name :- '.$this->input->post('pname'));
                                                    }
                                                    if($pdetail->pdes != $this->input->post('pdes'))
                                                    {
                                                      $message .=('<br> Project Description :- '.$this->input->post('pdes'));
                                                    }
                                  $message .=('</p>
                                                <a href="'.base_url('project-approved-edit-details/'.'1'.'/'.$id.'/'.$powner_id.'/'.$this->session->userdata('d168_id')).'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Launch Project</a>
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Edit Fields Request | Decision 168');
                                      $this->email->message($message);
                                      $this->email->send();                                        
                                        $this->session->set_flashdata('message', 'Edited Details Send To Project Owner! If Project Owner Approved Details then Only Details Edited!');
                                        $response['status'] = TRUE;
                                        header('Content-type: application/json');
                                        echo json_encode($response);
          }                                             
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function update_approve_edit_field()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $m_id = $this->input->post('m_id');
    $pid = $this->input->post('pid');
    $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
    $get_project_management_fields = $this->Front_model->get_project_management_fields($id);
    $getEmailID = $this->Front_model->getEmailID($get_project_management_fields->pmember);
    $get_gs_pid = $this->Front_model->getProjectById($pid);
          if(!empty($get_project_management_fields->r_pname))
          {
                                $data = array(
                                    'pname' => $get_project_management_fields->r_pname
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$pid);

                                  $data1 = array(
                                      'status' => '',
                                      'approved_edited_on' => date('Y-m-d H:i:s'),
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->update_project_management_field1($data1,$m_id);

                                  $data2 = array(
                                      'ap_date' => date('Y-m-d H:i:s'),
                                      'ap_fields' => 'approved'
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->update_project_management_field2($data2,$id); 

                                  $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Field Request Approved for Project Name from '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmfield_id' =>$id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                  $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name.' on request of '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
              $this->session->set_flashdata('message', 'Updated Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
          }

          if(!empty($get_project_management_fields->r_pdes))
          {
                                $data = array(
                                    'pdes' => $get_project_management_fields->r_pdes
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$pid);

                                  $data1 = array(
                                      'status' => '',
                                      'approved_edited_on' => date('Y-m-d H:i:s'),
                                                        );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->update_project_management_field1($data1,$m_id);

                                  $data2 = array(
                                      'ap_date' => date('Y-m-d H:i:s'),
                                      'ap_fields' => 'approved'
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->update_project_management_field2($data2,$id); 
                                  $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Field Request Approved for Project Description from '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmfield_id' =>$id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                  $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name.' on request of '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
              $this->session->set_flashdata('message', 'Updated Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function update_deny_edit_field()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $m_id = $this->input->post('m_id');
    $pid = $this->input->post('pid');
    $get_project_management_fields = $this->Front_model->get_project_management_fields($id);
    $get_gs_pid = $this->Front_model->getProjectById($pid);
    $getEmailID = $this->Front_model->getEmailID($get_project_management_fields->pmember);
                                  $data1 = array(
                                      'status' => '',
                                                );
                                  $data1 = $this->security->xss_clean($data1); // xss filter
                                  $this->Front_model->update_project_management_field1($data1,$m_id);

                                  $data2 = array(
                                      'ap_date' => date('Y-m-d H:i:s'),
                                      'ap_fields' => 'deny'
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->update_project_management_field2($data2,$id); 
                                  $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $getEmailID->reg_id,
                                    'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                                    'h_description' => 'Edit Field Request Denied from '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                    'pmfield_id' =>$id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
              $this->session->set_flashdata('message', 'Denied Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response); 
    }
    else
    {
      redirect(base_url('login'));
    }        
  }

  public function project_approved_edit_details()
  {
    $flag = $this->uri->segment(2);
    $pid = $this->uri->segment(3);
    $powner_id = $this->uri->segment(4);
    $member_id = $this->uri->segment(5);
      $check_project_members = $this->Front_model->check_project_members($pid,$powner_id,$member_id);
      if(!empty($check_project_members))
      {
        if($flag == '1')
        {
          $data['pid'] = $pid;
          $this->load->view('user/pedit_field_request_accept',$data);
        }
        else
        {
          $this->load->view('user/prequest_invalid');
        }
      }
      else
      {
        $this->load->view('user/prequest_invalid');
      }
  }

  public function team_view_profile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $reg_id = $this->input->post('tid');      
      $getEmail = $this->Front_model->getEmailID($reg_id);      
      $data['count_total_portfolios'] = $this->Front_model->count_total_portfolio($getEmail->email_address);
      $data['view_member_project_counts'] = $this->Front_model->view_member_project_count($reg_id);
      $data['view_created_project_counts'] = $this->Front_model->view_created_project_count($reg_id);
      $data['view_member_project_content_count'] = $this->Front_model->view_member_project_content_count($reg_id);
      $data['view_created_project_content_count'] = $this->Front_model->view_created_project_content_count($reg_id);
      $data['view_left_task_counts'] = $this->Front_model->view_left_task_count($reg_id);  
      $data['view_left_subtask_counts'] = $this->Front_model->view_left_subtask_count($reg_id);    
      $data['view_done_task_counts'] = $this->Front_model->view_done_task_count($reg_id);
      $data['stud_del'] = $this->Front_model->getStudentById($reg_id);
      //$this->load->view('user/team-view-profile',$data);    
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="TeamProfileModalLabel">Team Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/team-view-profile',$data);                                       
      echo '</div>'; 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_project_history()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['pid'] = $this->input->post('pid');
      $data['pname'] = $this->input->post('pname');
      $data['pagename'] = $this->input->post('pagename');
      $data['view_history_date'] = $this->Front_model->view_history_date($data['pid']);
      $this->load->view('user/view-project-history',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_history_date_wise()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history($pid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding-bottom: 7px;padding-top: 2px;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3">
                        <h5 class="font-size-14"><?php echo date("H:i:s", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
              </div>
              <div class="me-3"><?php echo ucwords($vh->h_resource);?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i>
              </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            }           
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function view_pro_history_date_wise()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history($pid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding: 0 0 10px 15px !important;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3" style="padding-top: 2px;">
                        <h5 class="font-size-14"><?php echo date("H:i", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
                  </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            } 
    }
    else
    {
      redirect(base_url('login'));
    }           
  }

  public function history_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $pname = $this->session->set_userdata('pname_history',ucwords($this->input->post('pname')));

    if(!empty($this->input->post('only_date')))
    {
      $view_history = $this->Front_model->view_history_only_date($pid,date("Y-m-d", strtotime($this->input->post('only_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('only_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);       
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif((!empty($this->input->post('start_date'))) && (!empty($this->input->post('end_date'))))
    {
      $view_history = $this->Front_model->view_history_date_range($pid,date("Y-m-d", strtotime($this->input->post('start_date'))),date("Y-m-d", strtotime($this->input->post('end_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('start_date'))).' - '.date("F d, Y", strtotime($this->input->post('end_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);     
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif($this->input->post('all_history') == '1')
    {
      $view_history = $this->Front_model->view_all_history($pid);
      if($view_history)
      { 
           $this->session->set_userdata('view_history',$view_history);

            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response); 
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    else
    {
      $response['status'] = 'empty_option';
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  function export_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pname = $this->session->userdata('pname_history');
        $this->load->library("excel");
        $object = new PHPExcel();
        $object->setActiveSheetIndex(0);

        $view_history = $this->session->userdata('view_history');

          $column = 0;
          if(!empty($this->session->userdata('dateSelected')))
          {
            $name = $pname.' History ( '.$this->session->userdata('dateSelected').' ) ';
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $name);
          }
          else
          {            
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $pname.' History');
          }
          $object->getActiveSheet()->getRowDimension('1')->setRowHeight(30);
          $object->getActiveSheet()->getStyle('A1')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 18,
          )));

          $table_columns = array("Date", "Time", "Resource", "Activity");    

          foreach($table_columns as $field)
          {
           $object->getActiveSheet()->setCellValueByColumnAndRow($column, 2, $field);
           $object->getActiveSheet()->getRowDimension('2')->setRowHeight(22);
           $object->getActiveSheet()->getStyle('A2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $object->getActiveSheet()->getStyle('2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $column++;
          }

         $excel_row = 3;
         
         //print_r($view_history);
         $total = count($view_history) + 3;

         for ($i = 3; $i < $total; $i++) {
              if ($i % 2 == 0) {
                  $object->getActiveSheet()->getStyle('A' . $i . ':D' . $i)->applyFromArray(
                      array(
                          'fill' => array(
                              'type' => \PHPExcel_Style_Fill::FILL_SOLID,
                              'color' => array('rgb' => 'ebf5a3')
                          ),
                      )
                  );
              }
          }

          $styleArray = array(
        'borders' => array(
          'allborders' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN
          )
        )
      );

      $border_total = count($view_history) + 2;
      $object->getActiveSheet()->getStyle('A2:D'. $border_total)->applyFromArray($styleArray);
                                                  foreach($view_history as $v)
                                                  {
                                                      $object->getActiveSheet()->getColumnDimension('A')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(0, $excel_row, date("D, F d, Y", strtotime($v->h_date)));                 
                                                      $object->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(1, $excel_row, date("H:i:s", strtotime($v->h_date)));
                                                      $object->getActiveSheet()->getColumnDimension('C')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(2, $excel_row, ucwords($v->h_resource));
                                                      $object->getActiveSheet()->getColumnDimension('D')->setWidth(90);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(3, $excel_row, ucwords($v->h_description));
                                                      $object->getActiveSheet()->getRowDimension($excel_row)->setRowHeight(18);
                                                          $excel_row++;
                                                  }

          $object_writer = PHPExcel_IOFactory::createWriter($object, 'Excel5'); 
          header('Content-Type: application/vnd.ms-excel');
          header('Content-Disposition: attachment;filename='.$pname.' History.xls');
          $object_writer->save('php://output'); 
          $this->session->unset_userdata('pname_history');
          $this->session->unset_userdata('view_history');
          $this->session->unset_userdata('dateSelected');
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itProjectDetail($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      //project
      $data = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                    'psingle_trash' => 'yes'
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$id);
      //project files                          
      $data2 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$id);
      //project invited members
      $data3 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$id);
      //project management
      $data4 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$id);
      //project management fields
      $data5 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$id);
      //project members
      $data6 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$id);
      //project suggested members
      $data7 = array(
                                    'ptrash' => 'yes',
                                    'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$id);
      //project tasks
      $data8 = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tsingle_trash' => 'p_yes'
                                    );
                $data8 = $this->security->xss_clean($data8); // xss filter
                $this->Front_model->edit_project_tasksSentTrash($data8,$id);
      //project subtasks
      $data9 = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => 'p_yes'
                                    );
                $data8 = $this->security->xss_clean($data9); // xss filter
                $this->Front_model->edit_project_subtasksSentTrash($data9,$id);
      //project cp
      $data10 = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'cpsingle_trash' => 'p_yes'
                                    );
                $data10 = $this->security->xss_clean($data10); // xss filter
                $this->Front_model->edit_project_cpSentTrash($data10,$id);
      //save history
      $hdata = array(
                                    'pid' => $id,
                                    'gid' => $res->gid,
                                    'sid' => $res->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Moved To Trash By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project Moved To Trash!');
             $response['portid'] = "";
             if(isset($_COOKIE["d168_selectedportfolio"]))
             {
             $response['portid'] = $_COOKIE["d168_selectedportfolio"];
             }
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->archiveProjectDetail($id);
    $getProjectAllTask = $this->Front_model->archivegetProjectAllTaskNotArc($id);
    $getProjectAllSubtask = $this->Front_model->archivegetProjectAllSubtaskNotArc($id);
    $getProjectAllCP = $this->Front_model->archivegetProjectAllCPNotArc($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getProjectAllTask || $getProjectAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getProjectAllTask)
          {
            foreach($getProjectAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getProjectAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getProjectAllSubtask)
          {
            foreach($getProjectAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getProjectAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {
            //project
            $data = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$id);
            //project files                          
            $data2 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$id);
            //project invited members
            $data3 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$id);
            //project management
            $data4 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$id);
            //project management fields
            $data5 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$id);
            //project members
            $data6 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$id);
            //project suggested members
            $data7 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$id);
            //project tasks
            $data8 = array(
                                            'task_archive' => 'yes',
                                            'task_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data8); // xss filter
                      $this->Front_model->edit_project_tasks($data8,$id);
            //project subtasks
            $data9 = array(
                                            'subtask_archive' => 'yes',
                                            'subtask_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data9); // xss filter
                      $this->Front_model->edit_project_subtasks($data9,$id);
            //project cp
            $data10 = array(
                                            'cp_archive' => 'yes',
                                            'cp_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->edit_project_cp($data10,$id);
            //save history
            $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Archived By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to Archive Project!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //project
        $data = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->edit_Project($data,$id);
        //project files                          
        $data2 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files($data2,$id);
        //project invited members
        $data3 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data3 = $this->security->xss_clean($data3); // xss filter
                                  $this->Front_model->edit_project_invited_members($data3,$id);
        //project management
        $data4 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                  $this->Front_model->edit_project_management($data4,$id);
        //project management fields
        $data5 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data5 = $this->security->xss_clean($data5); // xss filter
                                  $this->Front_model->edit_project_management_fields($data5,$id);
        //project members
        $data6 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data6 = $this->security->xss_clean($data6); // xss filter
                                  $this->Front_model->edit_project_members($data6,$id);
        //project suggested members
        $data7 = array(
                                      'project_archive' => 'yes',
                                      'project_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data7 = $this->security->xss_clean($data7); // xss filter
                                  $this->Front_model->edit_project_suggested_members($data7,$id);
        //project cp
        $data10 = array(
                                        'cp_archive' => 'yes',
                                        'cp_archive_date' => date('Y-m-d H:i:s'),
                                      );
                  $data10 = $this->security->xss_clean($data10); // xss filter
                  $this->Front_model->edit_project_cp($data10,$id);
        //save history
        $hdata = array(
                                    'pid' => $id,
                                    'gid' => $res->gid,
                                    'sid' => $res->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Archived By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  } 

  public function trash_projects()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['TrashProjects'] = $this->Front_model->TrashProjects();
      $this->load->view('user/trash-projects',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function unarchived_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
    $get_ptype = $this->Front_model->getProjectDetailID($this->input->post('pid'));
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($get_ptype)
    {
      if($get_ptype->ptype == 'content')
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              if($getPackDetail)
              {
                $total_content_planner = trim($getPackDetail->pack_content_planner);
                $check_type = is_numeric($total_content_planner);
                if($check_type == 'true')
                {
                  $current_month = date('m');
                  $current_year = date('Y');
                  $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                  $used_content = trim($getMonthWiseContent['content_count_rows']);
                  if($used_content < $total_content_planner)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit'; 
                    }              
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit';
                    } 
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            if($getPackDetail)
            {
              $total_content_planner = trim($getPackDetail->pack_content_planner);
              $check_type = is_numeric($total_content_planner);
              if($check_type == 'true')
              {
                $current_month = date('m');
                $current_year = date('Y');
                $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                $used_content = trim($getMonthWiseContent['content_count_rows']);
                if($used_content < $total_content_planner)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit'; 
                  }              
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit';
                  } 
              }
            }
          }
        } 
      }
      else
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
              if($getPackDetail)
              {
                $total_projects = trim($getPackDetail->pack_projects);
                $used_projects = trim($getProjectCount['project_count_rows']);
                $check_type = is_numeric($total_projects);
                if($check_type == 'true')
                {
                  if($used_projects < $total_projects)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_projects = trim($getPackDetail->pack_projects);
              $used_projects = trim($getProjectCount['project_count_rows']);
              $check_type = is_numeric($total_projects);
              if($check_type == 'true')
              {
                if($used_projects < $total_projects)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }          
        } 
      }
    }  
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('projects', $cus_privilege))
            {
              $privilege = "yes";
            }
            if(in_array('content planner', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if($get_ptype)
        {
          if($get_ptype->ptype == 'content')
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                if($getPackDetail)
                {
                  $total_content_planner = trim($getPackDetail->pack_content_planner);
                  $check_type = is_numeric($total_content_planner);
                  if($check_type == 'true')
                  {
                    $current_month = date('m');
                    $current_year = date('Y');
                    $getMonthWiseContent = $this->Front_model->getMonthWiseContentCorp($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                    $used_content = trim($getMonthWiseContent['content_count_rows']);
                    if($used_content < $total_content_planner)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit'; 
                      }              
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit';
                      } 
                  }
                }
              }
            }
          }
          else
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                $getProjectCount = $this->Front_model->getProjectCountCorp($_COOKIE["d168_selectedportfolio"]);
                if($getPackDetail)
                {
                  $total_projects = trim($getPackDetail->pack_projects);
                  $used_projects = trim($getProjectCount['project_count_rows']);
                  $check_type = is_numeric($total_projects);
                  if($check_type == 'true')
                  {
                    if($used_projects < $total_projects)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                  }
                }
              }
            }         
          }
        } 
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
} 

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('pid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_project_archive($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          if($res->sid == 0)
          {
            $checkProjectPorfolioArchive = $this->Front_model->checkProjectPorfolioArchive($res->portfolio_id);
            if($checkProjectPorfolioArchive > 0)
            {
                 $this->session->set_flashdata('al_message','Portfolio is Archived! To Reopen Project please Reopen Portfolio!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                            'task_archive' => '',
                                            'task_archive_date' => '',
                                            'task_file_it' => '',
                                            'task_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data8); // xss filter
                                        $this->Front_model->edit_project_tasks($data8,$id);
              //project subtasks
              $data9 = array(
                                            'subtask_archive' => '',
                                            'subtask_archive_date' => '',
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data9); // xss filter
                                        $this->Front_model->edit_project_subtasks($data9,$id);
              //project cp
              $data10 = array(
                                            'cp_archive' => '',
                                            'cp_archive_date' => '',
                                            'cp_file_it' => '',
                                            'cp_file_it_date' => '',
                                        );
                                        $data10 = $this->security->xss_clean($data10); // xss filter
                                        $this->Front_model->edit_project_cp($data10,$id);
              //save history
              $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Reopened By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                   //$this->session->set_flashdata('message','Project Reopened Successfully!');
                   $link = anchor(base_url('projects-overview/'.$id), 'View Reopened Project!');
                   $message = 'Project Reopened Successfully!' .' '. $link;
                   $this->session->set_flashdata('message',$message);
                   $response['status'] = TRUE;
                   header('Content-type: application/json');
                   echo json_encode($response);
            }
          }
          else
          {
            $strat_del = $this->Front_model->getStrategyById($res->sid);
            $file_it = '';
            $file_it_date = '';
            if($strat_del){
              if($strat_del->s_file_it == "yes"){
                $file_it = 'yes';
                $file_it_date = $strat_del->s_file_it_date;
              }
            }
            $checkProjectStrategyArchive = $this->Front_model->checkProjectStrategyArchive($res->sid);
            if($checkProjectStrategyArchive > 0)
            {
                 $this->session->set_flashdata('al_message','KPI is Archived! To Reopen Project please Reopen KPI!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'project_archive' => '',
                                            'project_archive_date' => '',
                                            'project_file_it' => $file_it,
                                            'project_file_it_date' => $file_it_date,
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                            'task_archive' => '',
                                            'task_archive_date' => '',
                                            'task_file_it' => $file_it,
                                            'task_file_it_date' => $file_it_date,
                                        );
                                        $data8 = $this->security->xss_clean($data8); // xss filter
                                        $this->Front_model->edit_project_tasks($data8,$id);
              //project subtasks
              $data9 = array(
                                            'subtask_archive' => '',
                                            'subtask_archive_date' => '',
                                            'subtask_file_it' => $file_it,
                                            'subtask_file_it_date' => $file_it_date,
                                        );
                                        $data8 = $this->security->xss_clean($data9); // xss filter
                                        $this->Front_model->edit_project_subtasks($data9,$id);
              //project cp
              $data10 = array(
                                            'cp_archive' => '',
                                            'cp_archive_date' => '',
                                            'cp_file_it' => $file_it,
                                            'cp_file_it_date' => $file_it_date,
                                        );
                                        $data10 = $this->security->xss_clean($data10); // xss filter
                                        $this->Front_model->edit_project_cp($data10,$id);
              //save history
              $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Reopened By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                   //$this->session->set_flashdata('message','Project Reopened Successfully!');
                   $link = anchor(base_url('projects-overview/'.$id), 'View Reopened Project!');
                   $message = 'Project Reopened Successfully!' .' '. $link;
                   $this->session->set_flashdata('message',$message);
                   $response['status'] = TRUE;
                   header('Content-type: application/json');
                   echo json_encode($response);
            }
          }
        }      
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
    $get_ptype = $this->Front_model->getProjectDetailID($this->input->post('pid'));
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($get_ptype)
    {
      if($get_ptype->ptype == 'content')
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              if($getPackDetail)
              {
                $total_content_planner = trim($getPackDetail->pack_content_planner);
                $check_type = is_numeric($total_content_planner);
                if($check_type == 'true')
                {
                  $current_month = date('m');
                  $current_year = date('Y');
                  $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                  $used_content = trim($getMonthWiseContent['content_count_rows']);
                  if($used_content < $total_content_planner)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit'; 
                    }              
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit';
                    } 
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            if($getPackDetail)
            {
              $total_content_planner = trim($getPackDetail->pack_content_planner);
              $check_type = is_numeric($total_content_planner);
              if($check_type == 'true')
              {
                $current_month = date('m');
                $current_year = date('Y');
                $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                $used_content = trim($getMonthWiseContent['content_count_rows']);
                if($used_content < $total_content_planner)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit'; 
                  }              
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit';
                  } 
              }
            }
          }
        } 
      }
      else
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
              if($getPackDetail)
              {
                $total_projects = trim($getPackDetail->pack_projects);
                $used_projects = trim($getProjectCount['project_count_rows']);
                $check_type = is_numeric($total_projects);
                if($check_type == 'true')
                {
                  if($used_projects < $total_projects)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_projects = trim($getPackDetail->pack_projects);
              $used_projects = trim($getProjectCount['project_count_rows']);
              $check_type = is_numeric($total_projects);
              if($check_type == 'true')
              {
                if($used_projects < $total_projects)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }          
        } 
      }
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('projects', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if($get_ptype)
        {
          if($get_ptype->ptype == 'content')
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                if($getPackDetail)
                {
                  $total_content_planner = trim($getPackDetail->pack_content_planner);
                  $check_type = is_numeric($total_content_planner);
                  if($check_type == 'true')
                  {
                    $current_month = date('m');
                    $current_year = date('Y');
                    $getMonthWiseContent = $this->Front_model->getMonthWiseContentCorp($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                    $used_content = trim($getMonthWiseContent['content_count_rows']);
                    if($used_content < $total_content_planner)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit'; 
                      }              
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit';
                      } 
                  }
                }
              }
            }         
          }
          else
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                $getProjectCount = $this->Front_model->getProjectCountCorp($_COOKIE["d168_selectedportfolio"]);
                if($getPackDetail)
                {
                  $total_projects = trim($getPackDetail->pack_projects);
                  $used_projects = trim($getProjectCount['project_count_rows']);
                  $check_type = is_numeric($total_projects);
                  if($check_type == 'true')
                  {
                    if($used_projects < $total_projects)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                  }
                }
              }
            }
          }
        } 
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}   

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('pid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_project_trash($id); 

      if($res)
      {
        if($res->portfolio_id != 0)
        {
          if($res->sid == 0)
          {
            $checkProjectPorfolioTrash = $this->Front_model->checkProjectPorfolioTrash($res->portfolio_id);
            if($checkProjectPorfolioTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Portfolio is in Trash! To Restore Project please Restore Portfolio!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                            'psingle_trash' => ''
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                                'trash' => '',
                                                'trash_date' => '',
                                                'tsingle_trash' => ''
                                            );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_tasksRetrieve($data8,$id);
              //project subtasks
              $data9 = array(
                                                'strash' => '',
                                                'strash_date' => '',
                                                'stsingle_trash' => ''
                                            );
                        $data8 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_subtasksRetrieve($data9,$id);
              //project cp
              $data10 = array(
                                                'trash' => '',
                                                'trash_date' => '',
                                                'cpsingle_trash' => ''
                                            );
                        $data10 = $this->security->xss_clean($data10); // xss filter
                        $this->Front_model->edit_project_cpRetrieve($data10,$id);

              $hdata = array(
                                            'pid' => $id,
                                            'gid' => $res->gid,
                                            'sid' => $res->sid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $powner->reg_id,
                                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                                            'h_description' => $res->pname.' Project Restored by '.$powner->first_name.' '.$powner->last_name,
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Project Restored Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
          }
          else
          {
            $checkProjectStrategyTrash = $this->Front_model->checkProjectStrategyTrash($res->sid);
            if($checkProjectStrategyTrash > 0)
            {
                 $this->session->set_flashdata('al_message','KPI is in Trash! To Restore Project please Restore KPI!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                            'psingle_trash' => ''
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'ptrash' => '',
                                            'ptrash_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                                'trash' => '',
                                                'trash_date' => '',
                                                'tsingle_trash' => ''
                                            );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_tasksRetrieve($data8,$id);
              //project subtasks
              $data9 = array(
                                                'strash' => '',
                                                'strash_date' => '',
                                                'stsingle_trash' => ''
                                            );
                        $data8 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_subtasksRetrieve($data9,$id);
              //project cp
              $data10 = array(
                                                'trash' => '',
                                                'trash_date' => '',
                                                'cpsingle_trash' => ''
                                            );
                        $data10 = $this->security->xss_clean($data10); // xss filter
                        $this->Front_model->edit_project_cpRetrieve($data10,$id);

              $hdata = array(
                                            'pid' => $id,
                                            'gid' => $res->gid,
                                            'sid' => $res->sid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $powner->reg_id,
                                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                                            'h_description' => $res->pname.' Project Restored by '.$powner->first_name.' '.$powner->last_name,
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Project Restored Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
          }          
        }     
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }  
  }

  public function project_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {   
      $get_pid = $this->input->post('pid');
      $res = $this->Front_model->check_project_trash($get_pid); 
      if($res)
      {
          $get_pro_task_trash = $this->Front_model->getProjectAllTaskTrash($get_pid);
          $get_pro_subtask_trash = $this->Front_model->getProjectAllSubtaskTrash($get_pid);
          $get_pro_cp_trash = $this->Front_model->getProjectAllCPTrash($get_pid);

            $this->Front_model->delete_project_files($get_pid);
            $this->Front_model->delete_project_invited_members($get_pid);
            $this->Front_model->delete_project_management($get_pid);
            $this->Front_model->delete_project_management_fields($get_pid);
            $this->Front_model->delete_project_members($get_pid);
            $this->Front_model->delete_project_suggested_members($get_pid);
            $this->Front_model->delete_project_history($get_pid);
            $this->Front_model->delete_project_request_member($get_pid);
          if($get_pro_task_trash)
          {
            foreach($get_pro_task_trash as $pro_task_trash)
            {
                $get_tid = $pro_task_trash->tid;
                $this->Front_model->delete_task_t_trash($get_tid);
            }
            $this->Front_model->delete_project_tasks($get_pid);
          }
          if($get_pro_subtask_trash)
          {
            foreach($get_pro_subtask_trash as $pro_stask_trash)
            {
                $get_stid = $pro_stask_trash->stid;
                $this->Front_model->delete_task_st_trash($get_stid);
            }
            $this->Front_model->delete_project_subtasks($get_pid);
          }
          if($get_pro_cp_trash)
          {
            foreach($get_pro_cp_trash as $pro_cp_trash)
            {
                $get_pc_id = $pro_cp_trash->pc_id;
                $this->Front_model->delete_cp_t_trash($get_pc_id);
            }
            $this->Front_model->delete_project_cp($get_pid);
          }
            $this->Front_model->delete_project($get_pid);   

        $this->session->set_flashdata('message','Project deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    }  
  }

  public function tasks_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {      
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');
      if(!empty($this->session->unset_userdata('searched_taskFilter')))
          {
            $this->session->unset_userdata('searched_taskFilter');
          }
        if(isset($_COOKIE["d168_selectedportfolio"]))
        {
          $get_port_id = $_COOKIE["d168_selectedportfolio"];
          $data['CreatedTaskList'] = $this->Front_model->CreatedTaskList($get_port_id);
          $data['CreatedSubTaskList'] = $this->Front_model->CreatedSubTaskList($get_port_id);
          //$data['plist'] = $this->Front_model->ProjectListgetPortfolio($get_port_id);
          //$data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($get_port_id);  
          $this->load->view('user/tasks-list',$data);
        }        
      // if((!empty($this->session->userdata('created_tl_port_id'))) && (empty($this->session->userdata('created_tl_pid'))))
      // {
      //   $get_port_id = $this->session->userdata('created_tl_port_id');
      //   $data['CreatedTaskList'] = $this->Front_model->CreatedTaskList($get_port_id);
      //   $data['CreatedSubTaskList'] = $this->Front_model->CreatedSubTaskList($get_port_id);
      //   //$data['plist'] = $this->Front_model->ProjectListgetPortfolio($get_port_id);
      //   //$data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($get_port_id);  
      //   $this->load->view('user/tasks-list',$data);
      // }
      // elseif((!empty($this->session->userdata('created_tl_port_id'))) && (!empty($this->session->userdata('created_tl_pid'))))
      // {
      //   $get_port_id = $this->session->userdata('created_tl_port_id');
      //   $get_pid = $this->session->userdata('created_tl_pid');
      //   $data['CreatedTaskList'] = $this->Front_model->CreatedTaskList_Project($get_port_id,$get_pid);
      //   $data['CreatedSubTaskList'] = $this->Front_model->CreatedSubTaskList_Project($get_port_id,$get_pid);
      //   //$data['plist'] = $this->Front_model->ProjectListgetPortfolio($get_port_id);
      //   //$data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($get_port_id);  
      //   $this->load->view('user/tasks-list',$data);
      // }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function all_tasks()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');
      $this->session->unset_userdata('searched_port_id');
      if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
          {
            $this->session->unset_userdata('searched_page_name');
            $this->session->unset_userdata('searched_pid_list');
            $this->session->unset_userdata('searched_Port_TL');
          }
      $data['AssignedTasklist'] = $this->Front_model->AssignedTasklist();
      $data['AssignedSubtasklist_Task'] = $this->Front_model->AssignedSubtasklist_Task();
      //$data['AssignedTaskTrashlist'] = $this->Front_model->AssignedTaskTrashlist();
      $data['AssignedSubtasklist'] = $this->Front_model->AssignedSubtasklist();
      //$data['AssignedSubtaskTrashlist'] = $this->Front_model->AssignedSubtaskTrashlist();
      //$data['plist'] = $this->Front_model->ProjectList();
      //$data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
      $this->load->view('user/all-tasks',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function today_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
          {
            $this->session->unset_userdata('searched_page_name');
            $this->session->unset_userdata('searched_pid_list');
            $this->session->unset_userdata('searched_Port_TL');
          }
      $today = date('Y-m-d');
      $data['TodayTasks'] = $this->Front_model->TodayTasks($today);
      $data['TodaySubtasklist_Task'] = $this->Front_model->TodaySubtasklist_Task($today);
      //$data['TodayTasksTrashlist'] = $this->Front_model->TodayTasksTrashlist($today);
      $data['TodaySubtasks'] = $this->Front_model->TodaySubtasks($today);
      //$data['TodaySubtasksTrashlist'] = $this->Front_model->TodaySubtasksTrashlist($today);
      //$data['plist'] = $this->Front_model->ProjectList();
      //$data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
      $this->load->view('user/today-tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function tomorrow_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $tomorrow = date('Y-m-d', strtotime('+1 day'));
      $data['TomorrowTasks'] = $this->Front_model->TomorrowTasks($tomorrow);
      $data['TomorrowTasksTrashlist'] = $this->Front_model->TomorrowTasksTrashlist($tomorrow);
      $data['TomorrowSubtasks'] = $this->Front_model->TomorrowSubtasks($tomorrow);
      $data['TomorrowSubtasksTrashlist'] = $this->Front_model->TomorrowSubtasksTrashlist($tomorrow);
      $this->load->view('user/tomorrow-tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function week_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
          {
            $this->session->unset_userdata('searched_page_name');
            $this->session->unset_userdata('searched_pid_list');
            $this->session->unset_userdata('searched_Port_TL');
          }
      // $FirstDay = date("Y-m-d", strtotime('sunday last week'));  
      // $LastDay = date("Y-m-d", strtotime('saturday this week'));
      $FirstDay = date('Y-m-d', strtotime('+1 day'));
      $LastDay = date('Y-m-d', strtotime($FirstDay .' +6 days'));
      $data['WeekTasks'] = $this->Front_model->WeekTasks($FirstDay,$LastDay);
      $data['WeekSubtaskslist_Task'] = $this->Front_model->WeekSubtaskslist_Task($FirstDay,$LastDay);
      //$data['WeekTasksTrashlist'] = $this->Front_model->WeekTasksTrashlist($FirstDay,$LastDay);
      $data['WeekSubtasks'] = $this->Front_model->WeekSubtasks($FirstDay,$LastDay);
      //$data['WeekSubtasksTrashlist'] = $this->Front_model->WeekSubtasksTrashlist($FirstDay,$LastDay);
      //$data['plist'] = $this->Front_model->ProjectList();
      //$data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
      $this->load->view('user/week-tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function overdue_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $currentDate = date("Y-m-d");
      $data['OverdueTasks'] = $this->Front_model->OverdueTasks($currentDate);
      $data['OverdueTasksTrashlist'] = $this->Front_model->OverdueTasksTrashlist($currentDate);
      $data['OverdueSubtasks'] = $this->Front_model->OverdueSubtasks($currentDate);
      $data['OverdueSubtasksTrashlist'] = $this->Front_model->OverdueSubtasksTrashlist($currentDate);
      $this->load->view('user/overdue-tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function trash_tasks()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['TrashTasks'] = $this->Front_model->TrashTasks();
      $this->load->view('user/trash-tasks',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // public function get_CreatedTaskList()
  // {
  //   $data = $this->Front_model->CreatedTaskList();
  //   header('Content-type: application/json');
  //   echo json_encode($data);  
  // }

  public function tasks_kanban()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {

      $data['AssignedTasklist'] = $this->Front_model->AssignedTasklist();
      $this->load->view('user/tasks-kanban',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function tasks_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
if(empty($this->session->userdata('d168_user_cor_id')))
{
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($getMydetail)
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
        {
          if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_tasks = trim($getPackDetail->pack_tasks);
              $used_tasks = trim($getTaskCount['task_count_rows']);
              $check_type = is_numeric($total_tasks);

              if($check_type == 'true')
              {
                $total_all_pro = trim($getPackDetail->pack_projects);
                $total_all_task = $total_tasks;
                if(is_numeric($total_all_pro))
                {
                  $total_all_task = $total_tasks * $total_all_pro;
                }
                if($used_tasks < $total_all_task)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                  $port_id = $_COOKIE["d168_selectedportfolio"];
                  $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
                  $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
                  $this->load->view('user/tasks-create',$data);   
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                $port_id = $_COOKIE["d168_selectedportfolio"];
                $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
                $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
                $this->load->view('user/tasks-create',$data);   
                }
              }
            }
          }
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_tasks = trim($getPackDetail->pack_tasks);
            $used_tasks = trim($getTaskCount['task_count_rows']);
            $check_type = is_numeric($total_tasks);
            if($check_type == 'true')
            {
              $total_all_pro = trim($getPackDetail->pack_projects);
              $total_all_task = $total_tasks;
              if(is_numeric($total_all_pro))
              {
                $total_all_task = $total_tasks * $total_all_pro;
              }
              if($used_tasks < $total_all_task)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                $port_id = $_COOKIE["d168_selectedportfolio"];
                $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
                $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
                $this->load->view('user/tasks-create',$data);   
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
              $port_id = $_COOKIE["d168_selectedportfolio"];
              $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
              $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
              $this->load->view('user/tasks-create',$data);   
              }
            }
          }
        }
      } 
}
else
{
  
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('task', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'employee') || ($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getTaskCount = $this->Front_model->getTaskCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_tasks = trim($getPackDetail->pack_tasks);
              $used_tasks = trim($getTaskCount['task_count_rows']);
              $check_type = is_numeric($total_tasks);

              if($check_type == 'true')
              {
                $total_all_pro = trim($getPackDetail->pack_projects);
                $total_all_task = $total_tasks;
                if(is_numeric($total_all_pro))
                {
                  $total_all_task = $total_tasks * $total_all_pro;
                }
                if($used_tasks < $total_all_task)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                  $port_id = $_COOKIE["d168_selectedportfolio"];
                  $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
                  $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
                  $this->load->view('user/tasks-create',$data);   
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                $port_id = $_COOKIE["d168_selectedportfolio"];
                $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
                $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
                $this->load->view('user/tasks-create',$data);   
                }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  
}
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function select_project_tm()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $get_pdetail = $this->Front_model->getProjectById($this->input->post('pid'));
    $porttm = $this->Front_model->getAccepted_PortTM($get_pdetail->portfolio_id);
      if($porttm){
        foreach ($porttm as $ptm) {
            $m = $this->Front_model->selectLogin($ptm->sent_to);
            if($m)
            {
            if($m->reg_id != $this->session->userdata('d168_id'))
              {
            ?>
            <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
            <?php
              }
            if($m->reg_id == $this->session->userdata('d168_id'))
              {
            ?>
            <option value="<?php echo $this->session->userdata('d168_id');?>"><span>Assign To Me</span></option>
            <?php
              }
            }
          }
        }
        else
        {
          ?>
            <option value="<?php echo $this->session->userdata('d168_id');?>"><span>Assign To Me</span></option>
          <?php
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_project_portfolio()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
     $pid = implode(',',$this->input->post('project_id'));
     if(!empty($pid))
     {
       $pro = $this->Front_model->getProjectById($pid);
       $get_portfolio = $this->Front_model->getPortfolio2($pro->portfolio_id);
       if(!empty($get_portfolio))
       {
        echo $get_portfolio->portfolio_name.' '.$get_portfolio->portfolio_lname;
       }
       else
       {
        echo "";
       }
     }
     else
     {
      $port = $this->Front_model->getAllPortfolio($_COOKIE["d168_selectedportfolio"]);
      echo $port->portfolio_name.' '.$port->portfolio_lname;
     }     
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_project_publish()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
     $pid = implode(',',$this->input->post('project_id'));
     if(!empty($pid))
     {
       $pro = $this->Front_model->getProjectById($pid);
       if(!empty($pro))
       {
        if($pro->ptype == "content")
        {          
          echo $pro->p_publish;
        }
        else
        {
          echo "";
        }
       }
       else
       {
        echo "";
       }
     }
     else
     {
      echo "";
     }     
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_project_gid_sid()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
     $pid = implode(',',$this->input->post('project_id'));
     if(!empty($pid))
     {
       $pro = $this->Front_model->getProjectById($pid);
       $response['check_pid'] = $pid;
       if(!empty($pro))
       {
        $response['gid'] = $pro->gid;
        $response['sid'] = $pro->sid;
        $response['depts'] = "";
        if(isset($_COOKIE["d168_selectedportfolio"]))
        {
        $check_port_dept = $this->Front_model->get_PortfolioDepartment($_COOKIE["d168_selectedportfolio"]);
        if($check_port_dept) 
        {
            foreach($check_port_dept as $p_dept)
            {
                if($p_dept->portfolio_dept_id == $pro->dept_id)
                {
            $response['depts'] .= '<option value="'.$p_dept->portfolio_dept_id.'" selected>'.$p_dept->department.'</option>';
                }
            }         
        }
        }
        $gdetail = $this->Front_model->GoalDetail($pro->gid);
        if($gdetail)
        {
          $response['gstart_date'] = $gdetail->gstart_date;
          $response['gend_date'] = $gdetail->gend_date;
        }
        else
        {
          $response['gstart_date'] = "";
          $response['gend_date'] = "";
        }
        header('Content-type: application/json');
        echo json_encode($response);
       }
       else
       {
        $response['gid'] = "";
        $response['sid'] = "";
        $response['gstart_date'] = "";
        $response['gend_date'] = "";
        $response['depts'] = "<option value=''>Select Department</option>";        
        if(isset($_COOKIE["d168_selectedportfolio"]))
        {
        $check_port_dept = $this->Front_model->get_PortfolioDepartment($_COOKIE["d168_selectedportfolio"]);
        if($check_port_dept) 
        {
            foreach($check_port_dept as $p_dept)
            {
              $response['depts'] .= '<option value="'.$p_dept->portfolio_dept_id.'">'.$p_dept->department.'</option>'; 
            }         
        }
        }
        header('Content-type: application/json');
        echo json_encode($response);
       }
     }
     else
     {
        $response['gid'] = "";
        $response['sid'] = "";
        $response['check_pid'] = "";
        $response['depts'] = "<option value=''>Select Department</option>";        
        if(isset($_COOKIE["d168_selectedportfolio"]))
        {
        $check_port_dept = $this->Front_model->get_PortfolioDepartment($_COOKIE["d168_selectedportfolio"]);
        if($check_port_dept) 
        {
            foreach($check_port_dept as $p_dept)
            {
              $response['depts'] .= '<option value="'.$p_dept->portfolio_dept_id.'">'.$p_dept->department.'</option>'; 
            }         
        }
        }
        header('Content-type: application/json');
        echo json_encode($response);
     }     
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('tname','Task Name','trim|required');
    $this->form_validation->set_rules('tpriority','Task Priority','trim|required');
    $this->form_validation->set_rules('team_member2','Assignee','trim|required');
    $this->form_validation->set_rules('tdue_date','Due Date','trim|required');
    $this->form_validation->set_rules('portfolio_name','Portfolio','trim|required');
    $this->form_validation->set_rules('dept','Department','trim|required');
    $this->form_validation->set_rules('estimated_time','Estimated Time','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {          
          $get_gs_pid = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
if(empty($this->session->userdata('d168_user_cor_id')))
{
          $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          if($getMydetail)
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
            {
              if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
                $getTaskCount = $this->Front_model->getProject_TaskCount($this->input->post('tproject_assign'));
                if($getPackDetail)
                {
                  $total_tasks = trim($getPackDetail->pack_tasks);
                  $used_tasks = trim($getTaskCount['task_count_rows']);
                  $check_type = is_numeric($total_tasks);
                  if($check_type == 'true')
                  {
                    if($used_tasks < $total_tasks)
                    {
                      $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
              $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
              //tlink array
              $tlink_array="";
              $tlink_comment_array="";
              if(!empty($_POST['tlink'][0])){
                $tlink_array = implode(',',$this->input->post('tlink'));
                $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
                $tlink_exarray = explode(',', $tlink_array);
                $count_extlink = count($tlink_exarray);
                if($count_extlink >= 0)
                {
                   for ($i=0; $i<$count_extlink; $i++)
                    {
                       $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                        if (!preg_match($pattern, $tlink_exarray[$i]))
                        {
                            $response['status'] = 'link_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                    }
                }           
              }
               if(!empty($this->input->post('tproject_assign')))
               {
                  $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                  $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                  $random_num = rand(1, 10000);
                  $get_tcode = $letter.'-'.$random_num;            
               }
               else
               {
                  $random_num = rand(1, 10000);
                  $get_tcode = 'T-'.$random_num; 
               }

               $portfolio_id = "";
               if(!empty($this->input->post('tproject_assign')))
               {
                $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                if($portfolio->portfolio_id != 0)
                {
                  $portfolio_id = $portfolio->portfolio_id;
                }
                else
                {
                  $portfolio_id = "";
                }
               }
               else
               {
                $portfolio_id = $_COOKIE["d168_selectedportfolio"];
               }


                $tfile_upload="";
                if(!empty($_FILES['tfile']['name'][0]))
                {
                  $cpt = count($_FILES['tfile']['name']);
                  $files = $_FILES;
                  $config['upload_path'] = 'assets/task_files/';
                  $config['allowed_types'] = '*';
                  $maxsize=2000000;
                  //Load upload library and initialize configuration
                  $this->load->library('upload', $config);

                  for($i=0; $i<$cpt; $i++)
                    {          
                      //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                      $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                      $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                      $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                      $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                      $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                      $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                      $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                      $this->upload->initialize($config);
                      if($_FILES['tfile']['size'] >= $maxsize)
                            {
                                    $response['status'] = 'file_uploadSizeErr';
                                    header('Content-type: application/json');
                                    exit(json_encode($response));
                            }
                      else
                            {
                                if($this->upload->do_upload('tfile'))
                                  {
                                    $fileData = $this->upload->data();
                                    $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                  }
                                  else 
                                  {
                                    $response['status'] = 'Error_Uploading';
                                    header('Content-type: application/json');
                                    //echo json_encode($response);
                                    exit(json_encode($response));
                                  } 
                            }                                  
                    }

                    if(is_array($uploadData))
                        {
                            $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                        }
                }


              $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              $pro_owner = "";
              $pro_manager = "";
              $pname = "";
              $pdes = "";
              $portfolio_owner_id = "";
              if($check_Pro_Owner)
              {
                $pro_owner = $check_Pro_Owner->pcreated_by;
                $pro_manager = $check_Pro_Owner->pmanager;
                $pname = $check_Pro_Owner->pname;
                $pdes = $check_Pro_Owner->pdes;

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
              }


            if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

            if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                  $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  if($check_if_suggested > 0)
                  {
                    $data = array(
                         'status' => 'approved',
                         'approve_date' => date('Y-m-d H:i:s')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  }
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                        $data2 = array(
                                            'pid' => $this->input->post('tproject_assign'),
                                            'portfolio_id' => $portfolio_id,
                                            'pmember' => $this->input->post('team_member2'),
                                            'status' => 'send',
                                            'pcreated_by' => $this->session->userdata('d168_id'),
                                            'sent_date' => date('Y-m-d H:i:s'),
                                            'sent_notify_clear' => 'no',
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        //get email id from member id
                                        $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                        $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $P_Owner->reg_id,
                                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                          'pmember_id' =>$inserted_pm_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                        $RequestEmailID = $getEmailID->email_address;

                                        $email_to = $RequestEmailID;
                                          $email_from = 'hello@decision168.com'; 
                                          //$email_from = 'saramaazkhan123@gmail.com'; 
                                          $email_name = 'Decision 168';

                                          $this->load->library('email');  
                                          $config=array(
                                            'charset'=>'utf-8',
                                            'wordwrap'=> TRUE,
                                            'mailtype' => 'html'
                                            );
                                          $this->email->initialize($config);
                                          $this->email->from($email_from, $email_name);
                                          $this->email->set_header('Reply-To', $email_from."\r\n");
                                          $this->email->set_header('Return-Path', $email_from."\r\n");
                                          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                          $this->email->to($email_to);
                                          $this->email->set_mailtype('html');
                                          $this->email->subject('Project Request | Decision 168');
                                          $this->email->message('                 
                                              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Project Request</title>
                <meta name="description" content="Project Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Project Short Description: '.substr($pdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                          );
                  $this->email->send();
                }
              }
            }
            else
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                    $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                    if($check == 0 && $check_pmem == 0)
                    {
                      $data2 = array(
                          'pid' => $this->input->post('tproject_assign'),
                          'suggest_id' => trim($this->input->post('team_member2')),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_SuggestTeamMember($data2);
                      $pmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                      $hdata = array(
                                    'pid' => $this->input->post('tproject_assign'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$pmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                }
              }
            }  

                      $data = array(
                                        'tcode' => $get_tcode,
                                        'tname' => $this->input->post('tname'),
                                        'tdes' => $this->input->post('tdes'),
                                        'tlink' => $tlink_array,
                                        'tlink_comment' => $tlink_comment_array,
                                        'tnote' => $this->input->post('tnote'),
                                        'tfile' => $tfile_upload,
                                        'tpriority' => $this->input->post('tpriority'),
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $this->input->post('tproject_assign'),
                                        'portfolio_id' => $portfolio_id,
                                        'tassignee' => $this->input->post('team_member2'),
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'yes',
                                        'tnotify_clear' => 'no',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                        'tdue_date_clear' => 'no',
                                        'gid' => $gid,
                                        'sid' => $sid,
                                        'dept_id' => $this->input->post('dept'),
                                        'estimated_time' => $this->input->post('estimated_time'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                    );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_NewTask($data);
                                    //recent inserted id
                                    $inserted_id = $this->db->insert_id();
                                    if(!empty($this->input->post('tproject_assign')))
                                    {
                                      $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $powner->reg_id,
                                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                          'task_id' =>$inserted_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                                    }  
                                  $message = 'Task Created Successfully!';
                                  $this->session->set_flashdata('message', $message);
                                  $response['tid'] = $inserted_id;
                                  $response['status'] = TRUE;
                                  header('Content-type: application/json');
                                  echo json_encode($response);
                    }
                    else
                    {
                      $response['status'] = 'limit_task';
                      header('Content-type: application/json');
                      //echo json_encode($response);
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
              $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
              //tlink array
              $tlink_array="";
              $tlink_comment_array="";
              if(!empty($_POST['tlink'][0])){
                $tlink_array = implode(',',$this->input->post('tlink'));
                $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
                $tlink_exarray = explode(',', $tlink_array);
                $count_extlink = count($tlink_exarray);
                if($count_extlink >= 0)
                {
                   for ($i=0; $i<$count_extlink; $i++)
                    {
                       $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                        if (!preg_match($pattern, $tlink_exarray[$i]))
                        {
                            $response['status'] = 'link_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                    }
                }           
              }
               if(!empty($this->input->post('tproject_assign')))
               {
                  $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                  $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                  $random_num = rand(1, 10000);
                  $get_tcode = $letter.'-'.$random_num;            
               }
               else
               {
                  $random_num = rand(1, 10000);
                  $get_tcode = 'T-'.$random_num; 
               }

               $portfolio_id = "";
               if(!empty($this->input->post('tproject_assign')))
               {
                $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                if($portfolio->portfolio_id != 0)
                {
                  $portfolio_id = $portfolio->portfolio_id;
                }
                else
                {
                  $portfolio_id = "";
                }
               }
               else
               {
                $portfolio_id = $_COOKIE["d168_selectedportfolio"];
               }


                $tfile_upload="";
                if(!empty($_FILES['tfile']['name'][0]))
                {
                  $cpt = count($_FILES['tfile']['name']);
                  $files = $_FILES;
                  $config['upload_path'] = 'assets/task_files/';
                  $config['allowed_types'] = '*';
                  $maxsize=2000000;
                  //Load upload library and initialize configuration
                  $this->load->library('upload', $config);

                  for($i=0; $i<$cpt; $i++)
                    {          
                      //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                      $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                      $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                      $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                      $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                      $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                      $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                      $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                      $this->upload->initialize($config);
                      if($_FILES['tfile']['size'] >= $maxsize)
                            {
                                    $response['status'] = 'file_uploadSizeErr';
                                    header('Content-type: application/json');
                                    exit(json_encode($response));
                            }
                      else
                            {
                                if($this->upload->do_upload('tfile'))
                                  {
                                    $fileData = $this->upload->data();
                                    $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                  }
                                  else 
                                  {
                                    $response['status'] = 'Error_Uploading';
                                    header('Content-type: application/json');
                                    //echo json_encode($response);
                                    exit(json_encode($response));
                                  } 
                            }                                  
                    }

                    if(is_array($uploadData))
                        {
                            $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                        }
                }


              $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              $pro_owner = "";
              $pro_manager = "";
              $pname = "";
              $pdes = "";
              $portfolio_owner_id = "";
              if($check_Pro_Owner)
              {
                $pro_owner = $check_Pro_Owner->pcreated_by;
                $pro_manager = $check_Pro_Owner->pmanager;
                $pname = $check_Pro_Owner->pname;
                $pdes = $check_Pro_Owner->pdes;

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
              }

            if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

            if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                  $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  if($check_if_suggested > 0)
                  {
                    $data = array(
                         'status' => 'approved',
                         'approve_date' => date('Y-m-d H:i:s')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  }
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                        $data2 = array(
                                            'pid' => $this->input->post('tproject_assign'),
                                            'portfolio_id' => $portfolio_id,
                                            'pmember' => $this->input->post('team_member2'),
                                            'status' => 'send',
                                            'pcreated_by' => $this->session->userdata('d168_id'),
                                            'sent_date' => date('Y-m-d H:i:s'),
                                            'sent_notify_clear' => 'no',
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        //get email id from member id
                                        $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                        $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $P_Owner->reg_id,
                                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                          'pmember_id' =>$inserted_pm_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                        $RequestEmailID = $getEmailID->email_address;

                                        $email_to = $RequestEmailID;
                                          $email_from = 'hello@decision168.com'; 
                                          //$email_from = 'saramaazkhan123@gmail.com'; 
                                          $email_name = 'Decision 168';

                                          $this->load->library('email');  
                                          $config=array(
                                            'charset'=>'utf-8',
                                            'wordwrap'=> TRUE,
                                            'mailtype' => 'html'
                                            );
                                          $this->email->initialize($config);
                                          $this->email->from($email_from, $email_name);
                                          $this->email->set_header('Reply-To', $email_from."\r\n");
                                          $this->email->set_header('Return-Path', $email_from."\r\n");
                                          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                          $this->email->to($email_to);
                                          $this->email->set_mailtype('html');
                                          $this->email->subject('Project Request | Decision 168');
                                          $this->email->message('                 
                                              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Project Request</title>
                <meta name="description" content="Project Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Project Short Description: '.substr($pdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                          );
                  $this->email->send();
                }
              }
            }
            else
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                    $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                    if($check == 0 && $check_pmem == 0)
                    {
                      $data2 = array(
                          'pid' => $this->input->post('tproject_assign'),
                          'suggest_id' => trim($this->input->post('team_member2')),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_SuggestTeamMember($data2);
                      $pmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                      $hdata = array(
                                    'pid' => $this->input->post('tproject_assign'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$pmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                }
              }
            }  

                      $data = array(
                                        'tcode' => $get_tcode,
                                        'tname' => $this->input->post('tname'),
                                        'tdes' => $this->input->post('tdes'),
                                        'tlink' => $tlink_array,
                                        'tlink_comment' => $tlink_comment_array,
                                        'tnote' => $this->input->post('tnote'),
                                        'tfile' => $tfile_upload,
                                        'tpriority' => $this->input->post('tpriority'),
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $this->input->post('tproject_assign'),
                                        'portfolio_id' => $portfolio_id,
                                        'tassignee' => $this->input->post('team_member2'),
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'yes',
                                        'tnotify_clear' => 'no',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                        'tdue_date_clear' => 'no',
                                        'gid' => $gid,
                                        'sid' => $sid,
                                        'dept_id' => $this->input->post('dept'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                    );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_NewTask($data);
                                    //recent inserted id
                                    $inserted_id = $this->db->insert_id();
                                    if(!empty($this->input->post('tproject_assign')))
                                    {
                                      $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $powner->reg_id,
                                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                          'task_id' =>$inserted_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                                    }  
                                  $message = 'Task Created Successfully!';
                                  $this->session->set_flashdata('message', $message);
                                  $response['tid'] = $inserted_id;
                                  $response['status'] = TRUE;
                                  header('Content-type: application/json');
                                  echo json_encode($response);
                  }
                }
              }
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getTaskCount = $this->Front_model->getProject_TaskCount($this->input->post('tproject_assign'));
              if($getPackDetail)
              {
                $total_tasks = trim($getPackDetail->pack_tasks);
                $used_tasks = trim($getTaskCount['task_count_rows']);
                $check_type = is_numeric($total_tasks);
                if($check_type == 'true')
                {
                  if($used_tasks < $total_tasks)
                  {
                    $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
            $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
            //tlink array
            $tlink_array="";
            $tlink_comment_array="";
            if(!empty($_POST['tlink'][0])){
              $tlink_array = implode(',',$this->input->post('tlink'));
              $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
              $tlink_exarray = explode(',', $tlink_array);
              $count_extlink = count($tlink_exarray);
              if($count_extlink >= 0)
              {
                 for ($i=0; $i<$count_extlink; $i++)
                  {
                     $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                      if (!preg_match($pattern, $tlink_exarray[$i]))
                      {
                          $response['status'] = 'link_valid';
                          header('Content-type: application/json');
                          //echo json_encode($response);
                          exit(json_encode($response));
                      }
                  }
              }           
            }
             if(!empty($this->input->post('tproject_assign')))
             {
                $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                $random_num = rand(1, 10000);
                $get_tcode = $letter.'-'.$random_num;            
             }
             else
             {
                $random_num = rand(1, 10000);
                $get_tcode = 'T-'.$random_num; 
             }

             $portfolio_id = "";
             if(!empty($this->input->post('tproject_assign')))
             {
              $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              if($portfolio->portfolio_id != 0)
              {
                $portfolio_id = $portfolio->portfolio_id;
              }
              else
              {
                $portfolio_id = "";
              }
             }
             else
             {
              $portfolio_id = $_COOKIE["d168_selectedportfolio"];
             }


              $tfile_upload="";
              if(!empty($_FILES['tfile']['name'][0]))
              {
                $cpt = count($_FILES['tfile']['name']);
                $files = $_FILES;
                $config['upload_path'] = 'assets/task_files/';
                $config['allowed_types'] = '*';
                $maxsize=2000000;
                //Load upload library and initialize configuration
                $this->load->library('upload', $config);

                for($i=0; $i<$cpt; $i++)
                  {          
                    //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                    $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                    $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                    $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                    $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                    $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                    $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                    $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                    $this->upload->initialize($config);
                    if($_FILES['tfile']['size'] >= $maxsize)
                          {
                                  $response['status'] = 'file_uploadSizeErr';
                                  header('Content-type: application/json');
                                  exit(json_encode($response));
                          }
                    else
                          {
                              if($this->upload->do_upload('tfile'))
                                {
                                  $fileData = $this->upload->data();
                                  $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                }
                                else 
                                {
                                  $response['status'] = 'Error_Uploading';
                                  header('Content-type: application/json');
                                  //echo json_encode($response);
                                  exit(json_encode($response));
                                } 
                          }                                  
                  }

                  if(is_array($uploadData))
                      {
                          $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                      }
              }


            $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
            $pro_owner = "";
            $pro_manager = "";
            $pname = "";
            $pdes = "";
            $portfolio_owner_id = "";
            if($check_Pro_Owner)
            {
              $pro_owner = $check_Pro_Owner->pcreated_by;
              $pro_manager = $check_Pro_Owner->pmanager;
              $pname = $check_Pro_Owner->pname;
              $pdes = $check_Pro_Owner->pdes;

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
            }

          if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

          if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
          {
            if($pro_owner != $this->input->post('team_member2'))
            {
              $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
              $pro_member = array();
              if($pdetail_member)
              {
                  foreach($pdetail_member as $pm)
                    {
                      $pro_member[] = $pm->pmember;
                    }
              }
              $implode_pro_member = implode(',', $pro_member);
              $check_mem = explode(',', $implode_pro_member);        
              $index = array_search($this->input->post('team_member2'),$check_mem);
              if($index === FALSE)
              {
                $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                if($check_if_suggested > 0)
                {
                  $data = array(
                       'status' => 'approved',
                       'approve_date' => date('Y-m-d H:i:s')
                                );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                }
                  $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                      $data2 = array(
                                          'pid' => $this->input->post('tproject_assign'),
                                          'portfolio_id' => $portfolio_id,
                                          'pmember' => $this->input->post('team_member2'),
                                          'status' => 'send',
                                          'pcreated_by' => $this->session->userdata('d168_id'),
                                          'sent_date' => date('Y-m-d H:i:s'),
                                          'sent_notify_clear' => 'no',
                                                            );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->insert_TeamMember($data2);
                                      $inserted_pm_id = $this->db->insert_id();
                                      //get email id from member id
                                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                      $hdata = array(
                                                        'pid' => $this->input->post('tproject_assign'),
                                                        'gid' => $gid,
                                                        'sid' => $sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                        'pmember_id' =>$inserted_pm_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                      $RequestEmailID = $getEmailID->email_address;

                                      $email_to = $RequestEmailID;
                                        $email_from = 'hello@decision168.com'; 
                                        //$email_from = 'saramaazkhan123@gmail.com'; 
                                        $email_name = 'Decision 168';

                                        $this->load->library('email');  
                                        $config=array(
                                          'charset'=>'utf-8',
                                          'wordwrap'=> TRUE,
                                          'mailtype' => 'html'
                                          );
                                        $this->email->initialize($config);
                                        $this->email->from($email_from, $email_name);
                                        $this->email->set_header('Reply-To', $email_from."\r\n");
                                        $this->email->set_header('Return-Path', $email_from."\r\n");
                                        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                        $this->email->to($email_to);
                                        $this->email->set_mailtype('html');
                                        $this->email->subject('Project Request | Decision 168');
                                        $this->email->message('                 
                                            <!doctype html>
            <html lang="en-US">

            <head>
              <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
              <title>Project Request</title>
              <meta name="description" content="Project Request">
              <style type="text/css">
                  a:hover {text-decoration: underline !important;pointer:cursor !important;}
              </style>
            </head>

            <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
              <!--100% body table-->

              <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                  style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                  <tr>
                      <td>
                          <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                    <a href="'.base_url().'" title="Decision 168" target="_blank">
                                      <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                    </a>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td>
                                      <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                          style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                          <tr>
                                              <td style="padding:0 35px;">
                                                  <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                  <span
                                                      style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                  Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                     '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                      <br><br>
                                                      Portfolio: '.$get_portfolio_name.'
                                                      <br><br>
                                                      Project Short Description: '.substr($pdes,0,100).'...
                                                      <br><br>
                                                  </p>
                                                  <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                  style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                  <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                      style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                      <br><br>
                                                      Thanks,
                                                      <br>
                                                      The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                      <br>
                                                      <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                      </p>
                                              </td>
                                          </tr>
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                      </table>
                                  </td>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                  <br>
                                      <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                          </table>
                      </td>
                  </tr>
              </table>
              <!--/100% body table-->
            </body>

            </html>' 
                                                        );
                $this->email->send();
              }
            }
          }
          else
          {
            if($pro_owner != $this->input->post('team_member2'))
            {
              $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
              $pro_member = array();
              if($pdetail_member)
              {
                  foreach($pdetail_member as $pm)
                    {
                      $pro_member[] = $pm->pmember;
                    }
              }
              $implode_pro_member = implode(',', $pro_member);
              $check_mem = explode(',', $implode_pro_member);        
              $index = array_search($this->input->post('team_member2'),$check_mem);
              if($index === FALSE)
              {
                  $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                  if($check == 0 && $check_pmem == 0)
                  {
                    $data2 = array(
                        'pid' => $this->input->post('tproject_assign'),
                        'suggest_id' => trim($this->input->post('team_member2')),
                        'status' => 'suggested',
                        'already_register' => 'yes',
                        'suggested_by' => $this->session->userdata('d168_id'),
                        'suggested_date' => date('Y-m-d H:i:s')
                          );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_SuggestTeamMember($data2);
                    $pmsuggested_inserted_id = $this->db->insert_id();
                    $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                    $hdata = array(
                                  'pid' => $this->input->post('tproject_assign'),
                                  'gid' => $gid,
                                  'sid' => $sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                  'pmsuggested_id' =>$pmsuggested_inserted_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
                  }
              }
            }
          }  

                    $data = array(
                                      'tcode' => $get_tcode,
                                      'tname' => $this->input->post('tname'),
                                      'tdes' => $this->input->post('tdes'),
                                      'tlink' => $tlink_array,
                                      'tlink_comment' => $tlink_comment_array,
                                      'tnote' => $this->input->post('tnote'),
                                      'tfile' => $tfile_upload,
                                      'tpriority' => $this->input->post('tpriority'),
                                      'tstatus' => 'to_do',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                      'tproject_assign' => $this->input->post('tproject_assign'),
                                      'portfolio_id' => $portfolio_id,
                                      'tassignee' => $this->input->post('team_member2'),
                                      'tcreated_by' => $this->session->userdata('d168_id'),
                                      'tcreated_date' => date('Y-m-d H:i:s'),
                                      'tnotify' => 'yes',
                                      'tnotify_clear' => 'no',
                                      'tnotify_date' => date('Y-m-d H:i:s'),
                                      'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                      'tdue_date_clear' => 'no',
                                      'gid' => $gid,
                                      'sid' => $sid,
                                      'dept_id' => $this->input->post('dept'),
                                      'estimated_time' => $this->input->post('estimated_time'),
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_NewTask($data);
                                  //recent inserted id
                                  $inserted_id = $this->db->insert_id();
                                  if(!empty($this->input->post('tproject_assign')))
                                  {
                                    $hdata = array(
                                                        'pid' => $this->input->post('tproject_assign'),
                                                        'gid' => $gid,
                                                        'sid' => $sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $powner->reg_id,
                                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                        'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                        'task_id' =>$inserted_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                                  }  
                                $message = 'Task Created Successfully!';
                                $this->session->set_flashdata('message', $message);
                                $response['tid'] = $inserted_id;
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response);
                  }
                  else
                  {
                    $response['status'] = 'limit_task';
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
                  }
                }
                else
                {
                  $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
            $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
            //tlink array
            $tlink_array="";
            $tlink_comment_array="";
            if(!empty($_POST['tlink'][0])){
              $tlink_array = implode(',',$this->input->post('tlink'));
              $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
              $tlink_exarray = explode(',', $tlink_array);
              $count_extlink = count($tlink_exarray);
              if($count_extlink >= 0)
              {
                 for ($i=0; $i<$count_extlink; $i++)
                  {
                     $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                      if (!preg_match($pattern, $tlink_exarray[$i]))
                      {
                          $response['status'] = 'link_valid';
                          header('Content-type: application/json');
                          //echo json_encode($response);
                          exit(json_encode($response));
                      }
                  }
              }           
            }
             if(!empty($this->input->post('tproject_assign')))
             {
                $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                $random_num = rand(1, 10000);
                $get_tcode = $letter.'-'.$random_num;            
             }
             else
             {
                $random_num = rand(1, 10000);
                $get_tcode = 'T-'.$random_num; 
             }

             $portfolio_id = "";
             if(!empty($this->input->post('tproject_assign')))
             {
              $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              if($portfolio->portfolio_id != 0)
              {
                $portfolio_id = $portfolio->portfolio_id;
              }
              else
              {
                $portfolio_id = "";
              }
             }
             else
             {
              $portfolio_id = $_COOKIE["d168_selectedportfolio"];
             }


              $tfile_upload="";
              if(!empty($_FILES['tfile']['name'][0]))
              {
                $cpt = count($_FILES['tfile']['name']);
                $files = $_FILES;
                $config['upload_path'] = 'assets/task_files/';
                $config['allowed_types'] = '*';
                $maxsize=2000000;
                //Load upload library and initialize configuration
                $this->load->library('upload', $config);

                for($i=0; $i<$cpt; $i++)
                  {          
                    //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                    $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                    $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                    $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                    $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                    $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                    $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                    $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                    $this->upload->initialize($config);
                    if($_FILES['tfile']['size'] >= $maxsize)
                          {
                                  $response['status'] = 'file_uploadSizeErr';
                                  header('Content-type: application/json');
                                  exit(json_encode($response));
                          }
                    else
                          {
                              if($this->upload->do_upload('tfile'))
                                {
                                  $fileData = $this->upload->data();
                                  $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                }
                                else 
                                {
                                  $response['status'] = 'Error_Uploading';
                                  header('Content-type: application/json');
                                  //echo json_encode($response);
                                  exit(json_encode($response));
                                } 
                          }                                  
                  }

                  if(is_array($uploadData))
                      {
                          $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                      }
              }


            $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
            $pro_owner = "";
            $pro_manager = "";
            $pname = "";
            $pdes = "";
            $portfolio_owner_id = "";
            if($check_Pro_Owner)
            {
              $pro_owner = $check_Pro_Owner->pcreated_by;
              $pro_manager = $check_Pro_Owner->pmanager;
              $pname = $check_Pro_Owner->pname;
              $pdes = $check_Pro_Owner->pdes;

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
            }

          if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

          if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
          {
            if($pro_owner != $this->input->post('team_member2'))
            {
              $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
              $pro_member = array();
              if($pdetail_member)
              {
                  foreach($pdetail_member as $pm)
                    {
                      $pro_member[] = $pm->pmember;
                    }
              }
              $implode_pro_member = implode(',', $pro_member);
              $check_mem = explode(',', $implode_pro_member);        
              $index = array_search($this->input->post('team_member2'),$check_mem);
              if($index === FALSE)
              {
                $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                if($check_if_suggested > 0)
                {
                  $data = array(
                       'status' => 'approved',
                       'approve_date' => date('Y-m-d H:i:s')
                                );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                }
                  $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                      $data2 = array(
                                          'pid' => $this->input->post('tproject_assign'),
                                          'portfolio_id' => $portfolio_id,
                                          'pmember' => $this->input->post('team_member2'),
                                          'status' => 'send',
                                          'pcreated_by' => $this->session->userdata('d168_id'),
                                          'sent_date' => date('Y-m-d H:i:s'),
                                          'sent_notify_clear' => 'no',
                                                            );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->insert_TeamMember($data2);
                                      $inserted_pm_id = $this->db->insert_id();
                                      //get email id from member id
                                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                      $hdata = array(
                                                        'pid' => $this->input->post('tproject_assign'),
                                                        'gid' => $gid,
                                                        'sid' => $sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                        'pmember_id' =>$inserted_pm_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                      $RequestEmailID = $getEmailID->email_address;

                                      $email_to = $RequestEmailID;
                                        $email_from = 'hello@decision168.com'; 
                                        //$email_from = 'saramaazkhan123@gmail.com'; 
                                        $email_name = 'Decision 168';

                                        $this->load->library('email');  
                                        $config=array(
                                          'charset'=>'utf-8',
                                          'wordwrap'=> TRUE,
                                          'mailtype' => 'html'
                                          );
                                        $this->email->initialize($config);
                                        $this->email->from($email_from, $email_name);
                                        $this->email->set_header('Reply-To', $email_from."\r\n");
                                        $this->email->set_header('Return-Path', $email_from."\r\n");
                                        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                        $this->email->to($email_to);
                                        $this->email->set_mailtype('html');
                                        $this->email->subject('Project Request | Decision 168');
                                        $this->email->message('                 
                                            <!doctype html>
            <html lang="en-US">

            <head>
              <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
              <title>Project Request</title>
              <meta name="description" content="Project Request">
              <style type="text/css">
                  a:hover {text-decoration: underline !important;pointer:cursor !important;}
              </style>
            </head>

            <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
              <!--100% body table-->

              <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                  style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                  <tr>
                      <td>
                          <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                    <a href="'.base_url().'" title="Decision 168" target="_blank">
                                      <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                    </a>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td>
                                      <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                          style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                          <tr>
                                              <td style="padding:0 35px;">
                                                  <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                  <span
                                                      style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                  Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                     '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                      <br><br>
                                                      Portfolio: '.$get_portfolio_name.'
                                                      <br><br>
                                                      Project Short Description: '.substr($pdes,0,100).'...
                                                      <br><br>
                                                  </p>
                                                  <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                  style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                  <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                      style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                      <br><br>
                                                      Thanks,
                                                      <br>
                                                      The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                      <br>
                                                      <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                      </p>
                                              </td>
                                          </tr>
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                      </table>
                                  </td>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                  <br>
                                      <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                          </table>
                      </td>
                  </tr>
              </table>
              <!--/100% body table-->
            </body>

            </html>' 
                                                        );
                $this->email->send();
              }
            }
          }
          else
          {
            if($pro_owner != $this->input->post('team_member2'))
            {
              $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
              $pro_member = array();
              if($pdetail_member)
              {
                  foreach($pdetail_member as $pm)
                    {
                      $pro_member[] = $pm->pmember;
                    }
              }
              $implode_pro_member = implode(',', $pro_member);
              $check_mem = explode(',', $implode_pro_member);        
              $index = array_search($this->input->post('team_member2'),$check_mem);
              if($index === FALSE)
              {
                  $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                  if($check == 0 && $check_pmem == 0)
                  {
                    $data2 = array(
                        'pid' => $this->input->post('tproject_assign'),
                        'suggest_id' => trim($this->input->post('team_member2')),
                        'status' => 'suggested',
                        'already_register' => 'yes',
                        'suggested_by' => $this->session->userdata('d168_id'),
                        'suggested_date' => date('Y-m-d H:i:s')
                          );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_SuggestTeamMember($data2);
                    $pmsuggested_inserted_id = $this->db->insert_id();
                    $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                    $hdata = array(
                                  'pid' => $this->input->post('tproject_assign'),
                                  'gid' => $gid,
                                  'sid' => $sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                  'pmsuggested_id' =>$pmsuggested_inserted_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
                  }
              }
            }
          }  

                    $data = array(
                                      'tcode' => $get_tcode,
                                      'tname' => $this->input->post('tname'),
                                      'tdes' => $this->input->post('tdes'),
                                      'tlink' => $tlink_array,
                                      'tlink_comment' => $tlink_comment_array,
                                      'tnote' => $this->input->post('tnote'),
                                      'tfile' => $tfile_upload,
                                      'tpriority' => $this->input->post('tpriority'),
                                      'tstatus' => 'to_do',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                      'tproject_assign' => $this->input->post('tproject_assign'),
                                      'portfolio_id' => $portfolio_id,
                                      'tassignee' => $this->input->post('team_member2'),
                                      'tcreated_by' => $this->session->userdata('d168_id'),
                                      'tcreated_date' => date('Y-m-d H:i:s'),
                                      'tnotify' => 'yes',
                                      'tnotify_clear' => 'no',
                                      'tnotify_date' => date('Y-m-d H:i:s'),
                                      'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                      'tdue_date_clear' => 'no',
                                      'gid' => $gid,
                                      'sid' => $sid,
                                      'dept_id' => $this->input->post('dept'),
                                      'estimated_time' => $this->input->post('estimated_time'),
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_NewTask($data);
                                  //recent inserted id
                                  $inserted_id = $this->db->insert_id();
                                  if(!empty($this->input->post('tproject_assign')))
                                  {
                                    $hdata = array(
                                                        'pid' => $this->input->post('tproject_assign'),
                                                        'gid' => $gid,
                                                        'sid' => $sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $powner->reg_id,
                                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                        'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                        'task_id' =>$inserted_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                                  }  
                                $message = 'Task Created Successfully!';
                                $this->session->set_flashdata('message', $message);
                                $response['tid'] = $inserted_id;
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response);
                }
              }
            }
          }
}
else
{
  
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('task', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'employee') || ($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                $getTaskCount = $this->Front_model->getProject_TaskCountCorp($this->input->post('tproject_assign'));
                if($getPackDetail)
                {
                  $total_tasks = trim($getPackDetail->pack_tasks);
                  $used_tasks = trim($getTaskCount['task_count_rows']);
                  $check_type = is_numeric($total_tasks);
                  if($check_type == 'true')
                  {
                    if($used_tasks < $total_tasks)
                    {
                      $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
              $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
              //tlink array
              $tlink_array="";
              $tlink_comment_array="";
              if(!empty($_POST['tlink'][0])){
                $tlink_array = implode(',',$this->input->post('tlink'));
                $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
                $tlink_exarray = explode(',', $tlink_array);
                $count_extlink = count($tlink_exarray);
                if($count_extlink >= 0)
                {
                   for ($i=0; $i<$count_extlink; $i++)
                    {
                       $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                        if (!preg_match($pattern, $tlink_exarray[$i]))
                        {
                            $response['status'] = 'link_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                    }
                }           
              }
               if(!empty($this->input->post('tproject_assign')))
               {
                  $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                  $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                  $random_num = rand(1, 10000);
                  $get_tcode = $letter.'-'.$random_num;            
               }
               else
               {
                  $random_num = rand(1, 10000);
                  $get_tcode = 'T-'.$random_num; 
               }

               $portfolio_id = "";
               if(!empty($this->input->post('tproject_assign')))
               {
                $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                if($portfolio->portfolio_id != 0)
                {
                  $portfolio_id = $portfolio->portfolio_id;
                }
                else
                {
                  $portfolio_id = "";
                }
               }
               else
               {
                $portfolio_id = $_COOKIE["d168_selectedportfolio"];
               }


                $tfile_upload="";
                if(!empty($_FILES['tfile']['name'][0]))
                {
                  $cpt = count($_FILES['tfile']['name']);
                  $files = $_FILES;
                  $config['upload_path'] = 'assets/task_files/';
                  $config['allowed_types'] = '*';
                  $maxsize=2000000;
                  //Load upload library and initialize configuration
                  $this->load->library('upload', $config);

                  for($i=0; $i<$cpt; $i++)
                    {          
                      //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                      $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                      $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                      $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                      $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                      $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                      $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                      $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                      $this->upload->initialize($config);
                      if($_FILES['tfile']['size'] >= $maxsize)
                            {
                                    $response['status'] = 'file_uploadSizeErr';
                                    header('Content-type: application/json');
                                    exit(json_encode($response));
                            }
                      else
                            {
                                if($this->upload->do_upload('tfile'))
                                  {
                                    $fileData = $this->upload->data();
                                    $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                  }
                                  else 
                                  {
                                    $response['status'] = 'Error_Uploading';
                                    header('Content-type: application/json');
                                    //echo json_encode($response);
                                    exit(json_encode($response));
                                  } 
                            }                                  
                    }

                    if(is_array($uploadData))
                        {
                            $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                        }
                }


              $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              $pro_owner = "";
              $pro_manager = "";
              $pname = "";
              $pdes = "";
              $portfolio_owner_id = "";
              if($check_Pro_Owner)
              {
                $pro_owner = $check_Pro_Owner->pcreated_by;
                $pro_manager = $check_Pro_Owner->pmanager;
                $pname = $check_Pro_Owner->pname;
                $pdes = $check_Pro_Owner->pdes;

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
              }


            if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

            if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                  $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  if($check_if_suggested > 0)
                  {
                    $data = array(
                         'status' => 'approved',
                         'approve_date' => date('Y-m-d H:i:s')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  }
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                        $data2 = array(
                                            'pid' => $this->input->post('tproject_assign'),
                                            'portfolio_id' => $portfolio_id,
                                            'pmember' => $this->input->post('team_member2'),
                                            'status' => 'send',
                                            'pcreated_by' => $this->session->userdata('d168_id'),
                                            'sent_date' => date('Y-m-d H:i:s'),
                                            'sent_notify_clear' => 'no',
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        //get email id from member id
                                        $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                        $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $P_Owner->reg_id,
                                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                          'pmember_id' =>$inserted_pm_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                        $RequestEmailID = $getEmailID->email_address;

                                        $email_to = $RequestEmailID;
                                          $email_from = 'hello@decision168.com'; 
                                          //$email_from = 'saramaazkhan123@gmail.com'; 
                                          $email_name = 'Decision 168';

                                          $this->load->library('email');  
                                          $config=array(
                                            'charset'=>'utf-8',
                                            'wordwrap'=> TRUE,
                                            'mailtype' => 'html'
                                            );
                                          $this->email->initialize($config);
                                          $this->email->from($email_from, $email_name);
                                          $this->email->set_header('Reply-To', $email_from."\r\n");
                                          $this->email->set_header('Return-Path', $email_from."\r\n");
                                          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                          $this->email->to($email_to);
                                          $this->email->set_mailtype('html');
                                          $this->email->subject('Project Request | Decision 168');
                                          $this->email->message('                 
                                              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Project Request</title>
                <meta name="description" content="Project Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Project Short Description: '.substr($pdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                          );
                  $this->email->send();
                }
              }
            }
            else
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                    $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                    if($check == 0 && $check_pmem == 0)
                    {
                      $data2 = array(
                          'pid' => $this->input->post('tproject_assign'),
                          'suggest_id' => trim($this->input->post('team_member2')),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_SuggestTeamMember($data2);
                      $pmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                      $hdata = array(
                                    'pid' => $this->input->post('tproject_assign'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$pmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                }
              }
            }  

                      $data = array(
                                        'tcode' => $get_tcode,
                                        'tname' => $this->input->post('tname'),
                                        'tdes' => $this->input->post('tdes'),
                                        'tlink' => $tlink_array,
                                        'tlink_comment' => $tlink_comment_array,
                                        'tnote' => $this->input->post('tnote'),
                                        'tfile' => $tfile_upload,
                                        'tpriority' => $this->input->post('tpriority'),
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $this->input->post('tproject_assign'),
                                        'portfolio_id' => $portfolio_id,
                                        'tassignee' => $this->input->post('team_member2'),
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'yes',
                                        'tnotify_clear' => 'no',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                        'tdue_date_clear' => 'no',
                                        'gid' => $gid,
                                        'sid' => $sid,
                                        'dept_id' => $this->input->post('dept'),
                                        'estimated_time' => $this->input->post('estimated_time'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                    );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_NewTask($data);
                                    //recent inserted id
                                    $inserted_id = $this->db->insert_id();
                                    if(!empty($this->input->post('tproject_assign')))
                                    {
                                      $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $powner->reg_id,
                                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                          'task_id' =>$inserted_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                                    }  
                                  $message = 'Task Created Successfully!';
                                  $this->session->set_flashdata('message', $message);
                                  $response['tid'] = $inserted_id;
                                  $response['status'] = TRUE;
                                  header('Content-type: application/json');
                                  echo json_encode($response);
                    }
                    else
                    {
                      $response['status'] = 'limit_task';
                      header('Content-type: application/json');
                      //echo json_encode($response);
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
              $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
              //tlink array
              $tlink_array="";
              $tlink_comment_array="";
              if(!empty($_POST['tlink'][0])){
                $tlink_array = implode(',',$this->input->post('tlink'));
                $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
                $tlink_exarray = explode(',', $tlink_array);
                $count_extlink = count($tlink_exarray);
                if($count_extlink >= 0)
                {
                   for ($i=0; $i<$count_extlink; $i++)
                    {
                       $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                        if (!preg_match($pattern, $tlink_exarray[$i]))
                        {
                            $response['status'] = 'link_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                    }
                }           
              }
               if(!empty($this->input->post('tproject_assign')))
               {
                  $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                  $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                  $random_num = rand(1, 10000);
                  $get_tcode = $letter.'-'.$random_num;            
               }
               else
               {
                  $random_num = rand(1, 10000);
                  $get_tcode = 'T-'.$random_num; 
               }

               $portfolio_id = "";
               if(!empty($this->input->post('tproject_assign')))
               {
                $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                if($portfolio->portfolio_id != 0)
                {
                  $portfolio_id = $portfolio->portfolio_id;
                }
                else
                {
                  $portfolio_id = "";
                }
               }
               else
               {
                $portfolio_id = $_COOKIE["d168_selectedportfolio"];
               }


                $tfile_upload="";
                if(!empty($_FILES['tfile']['name'][0]))
                {
                  $cpt = count($_FILES['tfile']['name']);
                  $files = $_FILES;
                  $config['upload_path'] = 'assets/task_files/';
                  $config['allowed_types'] = '*';
                  $maxsize=2000000;
                  //Load upload library and initialize configuration
                  $this->load->library('upload', $config);

                  for($i=0; $i<$cpt; $i++)
                    {          
                      //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                      $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                      $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                      $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                      $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                      $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                      $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                      $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                      $this->upload->initialize($config);
                      if($_FILES['tfile']['size'] >= $maxsize)
                            {
                                    $response['status'] = 'file_uploadSizeErr';
                                    header('Content-type: application/json');
                                    exit(json_encode($response));
                            }
                      else
                            {
                                if($this->upload->do_upload('tfile'))
                                  {
                                    $fileData = $this->upload->data();
                                    $uploadData[$i]['tfile2'] = $fileData['file_name'];
                                  }
                                  else 
                                  {
                                    $response['status'] = 'Error_Uploading';
                                    header('Content-type: application/json');
                                    //echo json_encode($response);
                                    exit(json_encode($response));
                                  } 
                            }                                  
                    }

                    if(is_array($uploadData))
                        {
                            $tfile_upload = implode(',', array_column($uploadData, 'tfile2'));
                        }
                }


              $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
              $pro_owner = "";
              $pro_manager = "";
              $pname = "";
              $pdes = "";
              $portfolio_owner_id = "";
              if($check_Pro_Owner)
              {
                $pro_owner = $check_Pro_Owner->pcreated_by;
                $pro_manager = $check_Pro_Owner->pmanager;
                $pname = $check_Pro_Owner->pname;
                $pdes = $check_Pro_Owner->pdes;

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
              }

            if((!empty($this->input->post('gid'))) && (!empty($this->input->post('sid'))))
            {
              $gid = $this->input->post('gid');
              $sid = $this->input->post('sid');
            }
            elseif((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

            if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                  $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  if($check_if_suggested > 0)
                  {
                    $data = array(
                         'status' => 'approved',
                         'approve_date' => date('Y-m-d H:i:s')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
                  }
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                        $data2 = array(
                                            'pid' => $this->input->post('tproject_assign'),
                                            'portfolio_id' => $portfolio_id,
                                            'pmember' => $this->input->post('team_member2'),
                                            'status' => 'send',
                                            'pcreated_by' => $this->session->userdata('d168_id'),
                                            'sent_date' => date('Y-m-d H:i:s'),
                                            'sent_notify_clear' => 'no',
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        //get email id from member id
                                        $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                        $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $P_Owner->reg_id,
                                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                          'pmember_id' =>$inserted_pm_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                        $RequestEmailID = $getEmailID->email_address;

                                        $email_to = $RequestEmailID;
                                          $email_from = 'hello@decision168.com'; 
                                          //$email_from = 'saramaazkhan123@gmail.com'; 
                                          $email_name = 'Decision 168';

                                          $this->load->library('email');  
                                          $config=array(
                                            'charset'=>'utf-8',
                                            'wordwrap'=> TRUE,
                                            'mailtype' => 'html'
                                            );
                                          $this->email->initialize($config);
                                          $this->email->from($email_from, $email_name);
                                          $this->email->set_header('Reply-To', $email_from."\r\n");
                                          $this->email->set_header('Return-Path', $email_from."\r\n");
                                          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                          $this->email->to($email_to);
                                          $this->email->set_mailtype('html');
                                          $this->email->subject('Project Request | Decision 168');
                                          $this->email->message('                 
                                              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Project Request</title>
                <meta name="description" content="Project Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Project Short Description: '.substr($pdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                    <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                          );
                  $this->email->send();
                }
              }
            }
            else
            {
              if($pro_owner != $this->input->post('team_member2'))
              {
                $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                $pro_member = array();
                if($pdetail_member)
                {
                    foreach($pdetail_member as $pm)
                      {
                        $pro_member[] = $pm->pmember;
                      }
                }
                $implode_pro_member = implode(',', $pro_member);
                $check_mem = explode(',', $implode_pro_member);        
                $index = array_search($this->input->post('team_member2'),$check_mem);
                if($index === FALSE)
                {
                    $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                    if($check == 0 && $check_pmem == 0)
                    {
                      $data2 = array(
                          'pid' => $this->input->post('tproject_assign'),
                          'suggest_id' => trim($this->input->post('team_member2')),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_SuggestTeamMember($data2);
                      $pmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                      $hdata = array(
                                    'pid' => $this->input->post('tproject_assign'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'pmsuggested_id' =>$pmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                }
              }
            }  

                      $data = array(
                                        'tcode' => $get_tcode,
                                        'tname' => $this->input->post('tname'),
                                        'tdes' => $this->input->post('tdes'),
                                        'tlink' => $tlink_array,
                                        'tlink_comment' => $tlink_comment_array,
                                        'tnote' => $this->input->post('tnote'),
                                        'tfile' => $tfile_upload,
                                        'tpriority' => $this->input->post('tpriority'),
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $this->input->post('tproject_assign'),
                                        'portfolio_id' => $portfolio_id,
                                        'tassignee' => $this->input->post('team_member2'),
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'yes',
                                        'tnotify_clear' => 'no',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                        'tdue_date_clear' => 'no',
                                        'gid' => $gid,
                                        'sid' => $sid,
                                        'dept_id' => $this->input->post('dept'),
                                        'estimated_time' => $this->input->post('estimated_time'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                    );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_NewTask($data);
                                    //recent inserted id
                                    $inserted_id = $this->db->insert_id();
                                    if(!empty($this->input->post('tproject_assign')))
                                    {
                                      $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $powner->reg_id,
                                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                          'task_id' =>$inserted_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                                    }  
                                  $message = 'Task Created Successfully!';
                                  $this->session->set_flashdata('message', $message);
                                  $response['tid'] = $inserted_id;
                                  $response['status'] = TRUE;
                                  header('Content-type: application/json');
                                  echo json_encode($response);
                  }
                }
              }
            }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  
}
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function change_taskStatus()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $tassignee = $this->input->post('tassignee');
    $status_but = $this->input->post('status_but');
    $res = $this->Front_model->check_task_assignProOwner($tid);
    if($res)
    {
      if($status_but == 'to_do')
      {
                                $data = array(
                                    'tstatus' => 'to_do',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_TaskProOwner($data,$tid);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- To Do',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }   
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);                             
      }
      if($status_but == 'in_progress')
      {
                                $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_TaskProOwner($data,$tid);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- In Progress',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
      }

      if($status_but == 'in_review')
      {
        $check_st = $this->Front_model->check_tasks_subtasks($tid);
        if($check_st)
        {
          $all_stcount = 0;
          $done_stcount = 0;
              foreach($check_st as $c_allst)
                {
                  $all_stcount++; 
                }
              foreach($check_st as $c_allst)
                {
                  if($c_allst->ststatus == 'done')
                  {
                    $done_stcount++;
                  } 
                }
          if($all_stcount == $done_stcount)
          {
            if($res->tproject_assign != 0)
          {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
                              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks')); 
                              redirect($_SERVER['HTTP_REFERER']); 
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks')); 
                              redirect($_SERVER['HTTP_REFERER']); 
            }
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
          }
          else
          {
                                $message = 'Subtasks are not Completed, So you are not able to change Task status to Done!';
                                $this->session->set_flashdata('message', $message);
                                //redirect(base_url('all-tasks'));
                                redirect($_SERVER['HTTP_REFERER']);
          }
                                
        }
        else
        {
          if($res->tproject_assign != 0)
          {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
                              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
        }
      }

      if($status_but == 'done')
      {
        $check_st = $this->Front_model->check_tasks_subtasks($tid);
        if($check_st)
        {
          $all_stcount = 0;
          $done_stcount = 0;
              foreach($check_st as $c_allst)
                {
                  $all_stcount++; 
                }
              foreach($check_st as $c_allst)
                {
                  if($c_allst->ststatus == 'done')
                  {
                    $done_stcount++;
                  } 
                }
          if($all_stcount == $done_stcount)
          {
            if($res->tproject_assign != 0)
          {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
                              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));  
                              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
          }
          else
          {
                                $message = 'Subtasks are not Completed, So you are not able to change Task status to Done!';
                                $this->session->set_flashdata('message', $message);
                                //redirect(base_url('all-tasks'));
                                redirect($_SERVER['HTTP_REFERER']);
          }
                                
        }
        else
        {
          if($res->tproject_assign != 0)
          {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
                              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks')); 
                              redirect($_SERVER['HTTP_REFERER']); 
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_TaskProOwner($data,$tid);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($this->input->post('tassignee'));
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);      
              }
                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);  
            }
        }
      }
  
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function tasklist_status_change()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_task_assign($tid);
    if($res)
    {
      if($res->tstatus == 'to_do')
      {
        $check_st = $this->Front_model->check_tasks_subtasks($tid);
        if($check_st)
        {
          $all_stcount = 0;
          $done_stcount = 0;
              foreach($check_st as $c_allst)
                {
                  $all_stcount++; 
                }
              foreach($check_st as $c_allst)
                {
                  if($c_allst->ststatus == 'done')
                  {
                    $done_stcount++;
                  } 
                }
          if($all_stcount == $done_stcount)
          {
            if($res->tproject_assign != 0)
            {          
            $get_pro_createdby = "";
            $get_pro_manager = "";
            $get_portfolio_owner_id = "";

            $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
            if($getPcreated_by)
            {
                $get_pro_createdby = $getPcreated_by->pcreated_by;
                $get_pro_manager = $getPcreated_by->pmanager;
                $get_portfolio_owner_id = "";

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                  if($check_Portfolio_owner_id)
                  {
                      $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                  }
            }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
            {
            $data = array(
                                        'tstatus' => 'in_review',
                                        'review' => 'sent',
                                        'review_clear' => 'no',
                                        'review_notify'=> 'sent_yes',
                                        'po_review_clear' => 'no',
                                        'po_review_notify'=> 'sent_yes',
                                        'review_notdate' => date('Y-m-d H:i:s'),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Sent for Review!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Completed Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
            }
            else
            {
              $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Completed Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
          }
          else
          {
              $message = 'Subtasks are not Completed, So you are not able to change Task status to Done!';
              $this->session->set_flashdata('message', $message);
              //redirect(base_url('all-tasks'));
              redirect($_SERVER['HTTP_REFERER']);
          }

        }
        else
        {
          if($res->tproject_assign != 0)
          {          
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
          $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task sent for Review!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            else
            {
              $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Completed Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
          }
          else
          {
            $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Completed Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
        }
      }

      if($res->tstatus == 'in_progress')
      {
        $check_st = $this->Front_model->check_tasks_subtasks($tid);
        if($check_st)
        {
          $all_stcount = 0;
          $done_stcount = 0;
              foreach($check_st as $c_allst)
                {
                  $all_stcount++; 
                }
              foreach($check_st as $c_allst)
                {
                  if($c_allst->ststatus == 'done')
                  {
                    $done_stcount++;
                  } 
                }
          if($all_stcount == $done_stcount)
          {
            if($res->tproject_assign != 0)
            {
            $get_pro_createdby = "";
            $get_pro_manager = "";
            $get_portfolio_owner_id = "";

            $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
            if($getPcreated_by)
            {
                $get_pro_createdby = $getPcreated_by->pcreated_by;
                $get_pro_manager = $getPcreated_by->pmanager;
                $get_portfolio_owner_id = "";

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                  if($check_Portfolio_owner_id)
                  {
                      $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                  }
            }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
            {
            $data = array(
                                        'tstatus' => 'in_review',
                                        'review' => 'sent',
                                        'review_clear' => 'no',
                                        'review_notify'=> 'sent_yes',
                                        'po_review_clear' => 'no',
                                        'po_review_notify'=> 'sent_yes',
                                        'review_notdate' => date('Y-m-d H:i:s'),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task sent for Review!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                $data = array(
                                          'tstatus' => 'done',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Task($data,$tid,$tassignee);
                  if(!empty($res->tproject_assign))
                  {
                    $stud = $this->Front_model->getStudentById($tassignee);
                                          $hdata = array(
                                                            'pid' => $res->tproject_assign,
                                                            'gid' => $res->gid,
                                                            'sid' => $res->sid,
                                                            'h_date' => date('Y-m-d H:i:s'),
                                                            'h_resource_id' => $stud->reg_id,
                                                            'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                            'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                            'task_id' =>$tid
                                                        );
                                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                                        $this->Front_model->insert_ProjectHistory($hdata);
                  }
                  $this->session->set_flashdata('message','Task Completed Successfully');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
              }
            }
            else
            {
              $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Completed Successfully');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
          }
          else
          {
                        $message = 'Subtasks are not Completed, So you are not able to change Task status to Done!';
                        $this->session->set_flashdata('message', $message);
                        //redirect(base_url('all-tasks'));
                        redirect($_SERVER['HTTP_REFERER']);
          }

        }
        else
        {
          if($res->tproject_assign != 0)
          {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
          $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task sent for Review!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            else
            {
              $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Completed Successfully');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
          }
          else
          {
            $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Completed Successfully');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
        }
      }

      if($res->tstatus == 'done')
      {
        $data = array(
                                    'tstatus' => 'to_do',                                    
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Task($data,$tid,$tassignee);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- To Do',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Task Status Changed to Incomplete!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function taskgrid_todo_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_task_assign($tid);
    if($res)
    {
            $data = array(
                                    'tstatus' => 'to_do',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Task($data,$tid,$tassignee);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- To Do',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Task Status Changed to "To Do" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);          
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function taskgrid_inprogress_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_task_assign($tid);
    if($res)
    {
            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Task($data,$tid,$tassignee);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- In Progress',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Task Status Changed to "In Progress" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);          
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function taskgrid_inreview_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_task_assign($tid);
    if($res)
    {
      $check_st = $this->Front_model->check_tasks_subtasks($tid);
      if($check_st)
      {
        $all_stcount = 0;
        $done_stcount = 0;
            foreach($check_st as $c_allst)
              {
                $all_stcount++; 
              }
            foreach($check_st as $c_allst)
              {
                if($c_allst->ststatus == 'done')
                {
                  $done_stcount++;
                } 
              }
        if($all_stcount == $done_stcount)
        {
          if($res->tproject_assign != 0)
          {
            $get_pro_createdby = "";
            $get_pro_manager = "";
            $get_portfolio_owner_id = "";

            $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
            if($getPcreated_by)
            {
                $get_pro_createdby = $getPcreated_by->pcreated_by;
                $get_pro_manager = $getPcreated_by->pmanager;
                $get_portfolio_owner_id = "";

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                  if($check_Portfolio_owner_id)
                  {
                      $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                  }
            }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
            {
                $data = array(
                                        'tstatus' => 'in_review',
                                        'review' => 'sent',
                                        'review_clear' => 'no',
                                        'review_notify'=> 'sent_yes',
                                        'po_review_clear' => 'no',
                                        'po_review_notify'=> 'sent_yes',
                                        'review_notdate' => date('Y-m-d H:i:s'),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Status Changed to "In Review" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response); 
              }
              else
              {
                $data = array(
                                            'tstatus' => 'done',
                                            'tstatus_date' => date('Y-m-d H:i:s'),
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_Task($data,$tid,$tassignee);
                    if(!empty($res->tproject_assign))
                    {
                      $stud = $this->Front_model->getStudentById($tassignee);
                                            $hdata = array(
                                                              'pid' => $res->tproject_assign,
                                                              'gid' => $res->gid,
                                                              'sid' => $res->sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $stud->reg_id,
                                                              'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                              'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                              'task_id' =>$tid
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
                    }
                    $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);  
              } 
          }
          else
          {
            $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);  
          } 
        }
        else
        {
                  $message = 'Subtasks are not Completed, So you are not able to Sent Task for Review!';
                  $this->session->set_flashdata('message', $message);
                  //redirect(base_url('all-tasks'));
                  redirect($_SERVER['HTTP_REFERER']);
        }

      }
      else
      {
        if($res->tproject_assign != 0)
        {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Status Changed to "In Review" Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response); 
            }
            else
            {
              $data = array(
                                          'tstatus' => 'done',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Task($data,$tid,$tassignee);
                  if(!empty($res->tproject_assign))
                  {
                    $stud = $this->Front_model->getStudentById($tassignee);
                                          $hdata = array(
                                                            'pid' => $res->tproject_assign,
                                                            'gid' => $res->gid,
                                                            'sid' => $res->sid,
                                                            'h_date' => date('Y-m-d H:i:s'),
                                                            'h_resource_id' => $stud->reg_id,
                                                            'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                            'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                            'task_id' =>$tid
                                                        );
                                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                                        $this->Front_model->insert_ProjectHistory($hdata);
                  }
                  $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);  
            } 
        }
        else
        {
          $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);  
        }        
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function taskgrid_done_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_task_assign($tid);
    if($res)
    {
      $check_st = $this->Front_model->check_tasks_subtasks($tid);
      if($check_st)
      {
        $all_stcount = 0;
        $done_stcount = 0;
            foreach($check_st as $c_allst)
              {
                $all_stcount++; 
              }
            foreach($check_st as $c_allst)
              {
                if($c_allst->ststatus == 'done')
                {
                  $done_stcount++;
                } 
              }
        if($all_stcount == $done_stcount)
        {
          if($res->tproject_assign != 0)
          {
            $get_pro_createdby = "";
            $get_pro_manager = "";
            $get_portfolio_owner_id = "";

            $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
            if($getPcreated_by)
            {
                $get_pro_createdby = $getPcreated_by->pcreated_by;
                $get_pro_manager = $getPcreated_by->pmanager;
                $get_portfolio_owner_id = "";

                $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                  if($check_Portfolio_owner_id)
                  {
                      $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                  }
            }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
            {
                $data = array(
                                        'tstatus' => 'in_review',
                                        'review' => 'sent',
                                        'review_clear' => 'no',
                                        'review_notify'=> 'sent_yes',
                                        'po_review_clear' => 'no',
                                        'po_review_notify'=> 'sent_yes',
                                        'review_notdate' => date('Y-m-d H:i:s'),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Status Changed to "In Review" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response); 
              }
              else
              {
                $data = array(
                                            'tstatus' => 'done',
                                            'tstatus_date' => date('Y-m-d H:i:s'),
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_Task($data,$tid,$tassignee);
                    if(!empty($res->tproject_assign))
                    {
                      $stud = $this->Front_model->getStudentById($tassignee);
                                            $hdata = array(
                                                              'pid' => $res->tproject_assign,
                                                              'gid' => $res->gid,
                                                              'sid' => $res->sid,
                                                              'h_date' => date('Y-m-d H:i:s'),
                                                              'h_resource_id' => $stud->reg_id,
                                                              'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                              'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                              'task_id' =>$tid
                                                          );
                                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                                          $this->Front_model->insert_ProjectHistory($hdata);
                    }
                    $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);  
              } 
          }
          else
          {
            $data = array(
                                        'tstatus' => 'done',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Task($data,$tid,$tassignee);
                if(!empty($res->tproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->tproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                          'task_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);  
          } 
        }
        else
        {
                  $message = 'Subtasks are not Completed, So you are not able to change Task status to Done!';
                  $this->session->set_flashdata('message', $message);
                  //redirect(base_url('all-tasks'));
                  redirect($_SERVER['HTTP_REFERER']);
        }

      }
      else
      {
        if($res->tproject_assign != 0)
        {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
          {
              $data = array(
                                      'tstatus' => 'in_review',
                                      'review' => 'sent',
                                      'review_clear' => 'no',
                                      'review_notify'=> 'sent_yes',
                                      'po_review_clear' => 'no',
                                      'po_review_notify'=> 'sent_yes',
                                      'review_notdate' => date('Y-m-d H:i:s'),
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Submit for Review, Review:- Sent',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Status Changed to "In Review" Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response); 
            }
            else
            {
              $data = array(
                                          'tstatus' => 'done',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Task($data,$tid,$tassignee);
                  if(!empty($res->tproject_assign))
                  {
                    $stud = $this->Front_model->getStudentById($tassignee);
                                          $hdata = array(
                                                            'pid' => $res->tproject_assign,
                                                            'gid' => $res->gid,
                                                            'sid' => $res->sid,
                                                            'h_date' => date('Y-m-d H:i:s'),
                                                            'h_resource_id' => $stud->reg_id,
                                                            'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                            'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                            'task_id' =>$tid
                                                        );
                                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                                        $this->Front_model->insert_ProjectHistory($hdata);
                  }
                  $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);  
            } 
        }
        else
        {
          $data = array(
                                      'tstatus' => 'done',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_Task($data,$tid,$tassignee);
              if(!empty($res->tproject_assign))
              {
                $stud = $this->Front_model->getStudentById($tassignee);
                                      $hdata = array(
                                                        'pid' => $res->tproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done',
                                                        'task_id' =>$tid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Task Status Changed to "Done" Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);  
        }        
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskReview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['tdetail'] = $this->Front_model->TaskDetail($id);
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="TaskReviewModalLabel">'.$data['tdetail']->tname.'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/tasks-review-modal',$data);                                       
      echo '</div>';   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function tasks_review_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $flag = $this->input->post('flag');
    $tid = $this->input->post('tid');
    $res = $this->Front_model->get_task_details($tid);
      $get_pro_createdby = "";
      $get_pro_manager = "";
      $get_portfolio_owner_id = "";

      $getPcreated_by = $this->Front_model->getProjectById($res->tproject_assign);
      if($getPcreated_by)
      {
          $get_pro_createdby = $getPcreated_by->pcreated_by;
          $get_pro_manager = $getPcreated_by->pmanager;
          $get_portfolio_owner_id = "";

          $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
            if($check_Portfolio_owner_id)
            {
                $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
            }
      }

      if(($get_pro_createdby == $this->session->userdata('d168_id')) || ($get_pro_manager == $this->session->userdata('d168_id')) || ($get_portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($flag == 1)
          {
            $data = array(
                                    'tstatus' => 'done',
                                    'review' => 'approved',
                                    'review_clear' => 'no',
                                    'review_notify'=> 'sent_yes',
                                    'po_review_clear' => 'no',
                                    'po_review_notify'=> 'sent_yes',
                                    'review_notdate' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewTask($data,$tid);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- Done, Review:- Approved',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Task Approved Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          if($flag == 2)
          {
            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => 'denied',
                                    'review_clear' => 'no',
                                    'review_notify'=> 'sent_yes',
                                    'po_review_clear' => 'no',
                                    'po_review_notify'=> 'sent_yes',
                                    'review_notdate' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewTask($data,$tid);
            if(!empty($res->tproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $hdata = array(
                                                      'pid' => $res->tproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->tcode.', New status:- In Progress, Review:- Denied',
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Task Denied Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          } 
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function tasks_overview()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['tdetail'] = $this->Front_model->TaskDetail($id);
      $this->load->view('user/tasks-overview',$data);    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskOverview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $previous_url = $_SERVER['HTTP_REFERER'];
      $previous_url_array = explode('/', $previous_url);
      $previous_page_name = end($previous_url_array);
      $data['previous_page_name'] = $previous_page_name;

              $data_task = $this->Front_model->getTasksDetail($id);
if($data_task->flag == '1'){

  $data['tdetail'] = $this->Front_model->TaskDetail($id);
  echo '<div class="modal-header">
              <h5 class="modal-title mt-0" id="TaskOverviewModalLabel">'.$data['tdetail']->tname.'</h5>
              &nbsp;&nbsp;<a href="'.base_url('tasks-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">';
  $this->load->view('user/tasks-overview-modal',$data);                                       
  echo '</div>'; 

}
else{

  if($previous_page_name == 'file-cabinet'){
    $privilege_only_view = 'no';
    if(!empty($this->session->userdata('d168_user_cor_id')))
    {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('view', $cus_privilege))
            {
              $privilege_only_view = 'yes';
            }
          }
        }      
      }
    }
    }

$data['tdetail'] = $this->Front_model->file_itTaskDetail($id);

    echo '<div class="modal-header">
            <h5 class="modal-title mt-0" id="TaskOverviewModalLabel">'.$data['tdetail']->tname.'</h5>';
    $check_pro_createdby = "";
    if(!empty($data['tdetail']->tproject_assign))
    {
        $pro = $this->Front_model->file_itgetProjectById($data['tdetail']->tproject_assign);
        if($pro)
        {
            $check_pro_createdby = $pro->pcreated_by;
        }
    }
    if(($data['tdetail']->tassignee == $this->session->userdata('d168_id')) || ($data['tdetail']->tcreated_by == $this->session->userdata('d168_id')) || ($check_pro_createdby == $this->session->userdata('d168_id'))){
      if($privilege_only_view == 'no')
      {
      echo '&nbsp;&nbsp;<a href="javascript:void(0);" onclick="reopenTask('.$id.');" class="btn btn-sm btn-d text-white">Reopen</a>';
      }
    }        

    echo '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">';
    $this->load->view('user/tasks-overview-modal',$data);                                       
    echo '</div>';   
  }else{
    $data['tdetail'] = $this->Front_model->TaskDetail($id);
    echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="TaskOverviewModalLabel">'.$data['tdetail']->tname.'</h5>
                &nbsp;&nbsp;<a href="'.base_url('tasks-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">';
    $this->load->view('user/tasks-overview-modal',$data);                                       
    echo '</div>';   
  }
}
      
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function team_member_tasks_list()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');
      $this->session->unset_userdata('searched_port_id');
      $this->session->unset_userdata('searched_project_id');
      $this->session->unset_userdata('searched_project_assignee_id');
      $data['pid'] = $this->uri->segment(2);
      $data['tassignee'] = $this->uri->segment(3);
      $this->session->set_userdata('searched_project_id',$this->uri->segment(2)); 
      $this->session->set_userdata('searched_project_assignee_id',$this->uri->segment(3)); 
      $data['pdetail'] = $this->Front_model->ProjectDetail2($data['pid']);
      $data['tlist'] = $this->Front_model->team_member_tasks_listNew($data['pid'],$data['tassignee']);
      $data['stlist'] = $this->Front_model->team_member_subtasks_listNew($data['pid'],$data['tassignee']);
      $this->load->view('user/team-member-tasks-list',$data);    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $res = $this->Front_model->file_itcheck_task($tid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    
    if($res)
    {
        if($res->tproject_assign != 0)
        {
                $data = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tsingle_trash' => 'yes'
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewTask($data,$tid);

                $data = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => 't_yes'
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_task_subtasksRetrieve($data,$tid);

          $hdata = array(
                                        'pid' => $res->tproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->tcode.' Task Moved to Trash by '.$powner->first_name.' '.$powner->last_name,
                                        'task_id' =>$res->tid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
            
            $this->session->set_flashdata('message','Task Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        else
        {
            $data = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewTask($data,$tid);

            $data = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_task_subtasks($data,$tid);

            $this->session->set_flashdata('message','Task Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $res = $this->Front_model->archivecheck_Donetask($tid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $getTaskAllSubtask = $this->Front_model->archivegetTaskAllSubtaskNotArc($tid);
    if($res)
    {
      if($getTaskAllSubtask)
      {
        $all_subtask = 0;
        $done_subtask = 0;

        if($getTaskAllSubtask)
          {
            foreach($getTaskAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getTaskAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          if($all_subtask == $done_subtask)
          {
                $data = array(
                                          'task_archive' => 'yes',
                                          'task_archive_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

                $data = array(
                                          'subtask_archive' => 'yes',
                                          'subtask_archive_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_task_subtasks($data,$tid);

              if($res->tproject_assign != 0)
              {
                $hdata = array(
                                              'pid' => $res->tproject_assign,
                                              'gid' => $res->gid,
                                              'sid' => $res->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->tcode.' Task Archived by '.$powner->first_name.' '.$powner->last_name,
                                              'task_id' =>$res->tid
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
                  
                  $this->session->set_flashdata('message','Task Archived Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Subtasks to Archive Task!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
          $data = array(
                                        'task_archive' => 'yes',
                                        'task_archive_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewTask($data,$tid);
          if($res->tproject_assign != 0)
              {
                $hdata = array(
                                              'pid' => $res->tproject_assign,
                                              'gid' => $res->gid,
                                              'sid' => $res->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->tcode.' Task Archived by '.$powner->first_name.' '.$powner->last_name,
                                              'task_id' =>$res->tid
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
            
            $this->session->set_flashdata('message','Task Archived Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    else
    {
                $this->session->set_flashdata('al_message','Please Complete Task to Archive!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_tasks = trim($getPackDetail->pack_tasks);
            $used_tasks = trim($getTaskCount['task_count_rows']);
            $check_type = is_numeric($total_tasks);

            if($check_type == 'true')
            {
              $total_all_pro = trim($getPackDetail->pack_projects);
              $total_all_task = $total_tasks;
              if(is_numeric($total_all_pro))
              {
                $total_all_task = $total_tasks * $total_all_pro;
              }
              if($used_tasks < $total_all_task)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';  
              }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_tasks = trim($getPackDetail->pack_tasks);
          $used_tasks = trim($getTaskCount['task_count_rows']);
          $check_type = is_numeric($total_tasks);
          if($check_type == 'true')
          {
            $total_all_pro = trim($getPackDetail->pack_projects);
            $total_all_task = $total_tasks;
            if(is_numeric($total_all_pro))
            {
              $total_all_task = $total_tasks * $total_all_pro;
            }
            if($used_tasks < $total_all_task)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
            {
              $limitation = 'in_limit';
            }
          }
        }
      }
    }
}
else
{
  
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('task', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'employee') || ($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getTaskCount = $this->Front_model->getTaskCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_tasks = trim($getPackDetail->pack_tasks);
              $used_tasks = trim($getTaskCount['task_count_rows']);
              $check_type = is_numeric($total_tasks);

              if($check_type == 'true')
              {
                $total_all_pro = trim($getPackDetail->pack_projects);
                $total_all_task = $total_tasks;
                if(is_numeric($total_all_pro))
                {
                  $total_all_task = $total_tasks * $total_all_pro;
                }
                if($used_tasks < $total_all_task)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';  
                }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  
}

    if($limitation == 'in_limit')
    {
      $tid = $this->input->post('tid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_task2($tid); 

      if($res)
      {
        if($res->tproject_assign != 0)
          {
            $checkTaskProjectTrash = $this->Front_model->checkTaskProjectTrash($res->tproject_assign);
              if($checkTaskProjectTrash > 0)
              {
                   $this->session->set_flashdata('al_message','Project is in Trash! To Restore Task please Restore Project!');
                   $response['status'] = FALSE;
                   header('Content-type: application/json');
                   echo json_encode($response);
              }
              else
              {
                  $data = array(
                                          'trash' => '',
                                          'trash_date' => '',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                          'tsingle_trash' => ''
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

                  $data = array(
                                          'strash' => '',
                                          'strash_date' => '',
                                          'ststatus_date' => date('Y-m-d H:i:s'),
                                          'stsingle_trash' => ''
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_task_subtasksRetrieve($data,$tid);

                  $hdata = array(
                                                'pid' => $res->tproject_assign,
                                                'gid' => $res->gid,
                                                'sid' => $res->sid,
                                                'h_date' => date('Y-m-d H:i:s'),
                                                'h_resource_id' => $powner->reg_id,
                                                'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                'h_description' => $res->tcode.' Task Restored by '.$powner->first_name.' '.$powner->last_name,
                                                'task_id' =>$res->tid
                                            );
                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                            $this->Front_model->insert_ProjectHistory($hdata);
                    
                    $this->session->set_flashdata('message','Task Restored Successfully!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
              }
          }
          else
          {
              $data = array(
                                          'trash' => '',
                                          'trash_date' => '',
                                          'tstatus_date' => date('Y-m-d H:i:s'),
                                          'tsingle_trash' => ''
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

              $data = array(
                                          'strash' => '',
                                          'strash_date' => '',
                                          'ststatus_date' => date('Y-m-d H:i:s'),
                                          'stsingle_trash' => ''
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_task_subtasksRetrieve($data,$tid);

              $this->session->set_flashdata('message','Task Restored Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function task_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $get_tid = $this->input->post('tid');
      $res = $this->Front_model->check_task2_new($get_tid); 
      if($res)
      {
          $this->Front_model->delete_task_subtask($get_tid);
          $this->Front_model->delete_task_subtask_trash($get_tid);
          $this->Front_model->delete_task_t_trash($get_tid);
          $this->Front_model->delete_task($get_tid);

        $this->session->set_flashdata('message','Task deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
      }    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function unarchived_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_tasks = trim($getPackDetail->pack_tasks);
            $used_tasks = trim($getTaskCount['task_count_rows']);
            $check_type = is_numeric($total_tasks);

            if($check_type == 'true')
            {
              $total_all_pro = trim($getPackDetail->pack_projects);
              $total_all_task = $total_tasks;
              if(is_numeric($total_all_pro))
              {
                $total_all_task = $total_tasks * $total_all_pro;
              }
              if($used_tasks < $total_all_task)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';  
              }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_tasks = trim($getPackDetail->pack_tasks);
          $used_tasks = trim($getTaskCount['task_count_rows']);
          $check_type = is_numeric($total_tasks);
          if($check_type == 'true')
          {
            $total_all_pro = trim($getPackDetail->pack_projects);
            $total_all_task = $total_tasks;
            if(is_numeric($total_all_pro))
            {
              $total_all_task = $total_tasks * $total_all_pro;
            }
            if($used_tasks < $total_all_task)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
            {
              $limitation = 'in_limit';
            }
          }
        }
      }
    }
}
else
{
  
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('task', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'employee') || ($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getTaskCount = $this->Front_model->getTaskCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_tasks = trim($getPackDetail->pack_tasks);
              $used_tasks = trim($getTaskCount['task_count_rows']);
              $check_type = is_numeric($total_tasks);

              if($check_type == 'true')
              {
                $total_all_pro = trim($getPackDetail->pack_projects);
                $total_all_task = $total_tasks;
                if(is_numeric($total_all_pro))
                {
                  $total_all_task = $total_tasks * $total_all_pro;
                }
                if($used_tasks < $total_all_task)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';  
                }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  
}

    if($limitation == 'in_limit')
    {
      $tid = $this->input->post('tid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_task_archive($tid); 
      if($res)
      {
        if($res->tproject_assign != 0)
          {
            $proj_del = $this->Front_model->getPortProjectById($res->tproject_assign);
            $file_it = '';
            $file_it_date = '';
            if($proj_del){
              if($proj_del->project_file_it == "yes"){
                $file_it = 'yes';
                $file_it_date = $proj_del->project_file_it_date;
              }
            }
            $checkTaskProjectArchive = $this->Front_model->checkTaskProjectArchive($res->tproject_assign);
              if($checkTaskProjectArchive > 0)
              {
                   $this->session->set_flashdata('al_message','Project is Archived! To Reopen Task please Reopen Project!');
                   $response['status'] = FALSE;
                   header('Content-type: application/json');
                   echo json_encode($response);
              } 
              else
              {
                  $data = array(
                                          'task_archive' => '',
                                          'task_archive_date' => '',
                                          'task_file_it' => $file_it,
                                          'task_file_it_date' => $file_it_date,
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

                  $data = array(
                                            'subtask_archive' => '',
                                            'subtask_archive_date' => '',
                                            'subtask_file_it' => $file_it,
                                            'subtask_file_it_date' => $file_it_date,
                                            );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->edit_task_subtasks($data,$tid);

                  $hdata = array(
                                          'pid' => $res->tproject_assign,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $powner->reg_id,
                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                          'h_description' => $res->tcode.' Task Reopened by '.$powner->first_name.' '.$powner->last_name,
                                          'task_id' =>$res->tid
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                  
                  //$this->session->set_flashdata('message','Task Reopened Successfully!');
                  $link = anchor(base_url('tasks-overview/'.$tid), 'View Reopened Task!');
                  $message = 'Task Reopened Successfully!' .' '. $link;
                  $this->session->set_flashdata('message',$message);
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
              }
          }
          else
          {
              $data = array(
                                          'task_archive' => '',
                                          'task_archive_date' => '',
                                          'task_file_it' => '',
                                          'task_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

              $data = array(
                                            'subtask_archive' => '',
                                            'subtask_archive_date' => '',
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->edit_task_subtasks($data,$tid);
              
              //$this->session->set_flashdata('message','Task Reopened Successfully!');
              $link = anchor(base_url('tasks-overview/'.$tid), 'View Reopened Task!');
              $message = 'Task Reopened Successfully!' .' '. $link;
              $this->session->set_flashdata('message',$message);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }  
  }

  public function tasks_edit()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
      $tid = $this->uri->segment(2);
      $data['tdetail'] = $this->Front_model->check_task($tid); 
      $port_id = $_COOKIE["d168_selectedportfolio"];
      $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
      $this->load->view('user/tasks-edit',$data);  
      }  
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskEdit_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
      $id = $this->input->post('id');
      $data['tdetail'] = $this->Front_model->check_task($id); 
      $port_id = $_COOKIE["d168_selectedportfolio"];
      $data['plist'] = $this->Front_model->ProjectListbyPortCookie($port_id);
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectListbyPortCookie($port_id);
      $this->load->view('user/tasks-edit-modal',$data);
      }   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // public function TaskNameEdit_Modal()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $id = $this->input->post('tid');
  //     $data['field_name'] = $this->input->post('field_name');
  //     $data['plist'] = $this->Front_model->ProjectList(); 
  //     $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
  //     $data['tdetail'] = $this->Front_model->check_task($id);
      
  //     if($data['tdetail'])
  //     {
  //       $this->load->view('user/tasks-editable-modal',$data);
  //     }
  //     else
  //     {
  //       echo '<h4 class="card-title mb-2">Only Task Assignee and Task Created User can Edit Task Details!</h4>
  //       <button type="button" class="btn bg-d btn-sm text-white" data-bs-dismiss="modal"><i class="mdi mdi-close-thick"></i></button>';
  //     }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function editable_task()
  // {
  //   $field_name = $this->input->post('edit_field');
  //   if($field_name == 'etname')
  //   {
  //     $this->form_validation->set_rules('tname','Task Name','trim|required');
  //     if ($this->form_validation->run() == FALSE)
  //     {
  //         //$errors = array();
  //         $errors = $this->form_validation->error_array();
  //         // Loop through $_POST and get the keys
  //         foreach ($errors as $key => $value)
  //         {
  //         // Add the error message for this field
  //         $errors[$key] = form_error($key);
  //         }
                  
  //         $response['errors'] = array_filter($errors); // Some might be empty
  //         $response['status'] = FALSE;
  //         // You can use the Output class here too
  //         header('Content-type: application/json');
  //         //echo json_encode($response);
  //         exit(json_encode($response));
  //       }
  //       else
  //       {
  //         $tid = $this->input->post('tid');
  //         $get_tcode = $this->input->post('tcode');
  //         $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
  //                 $data = array(
  //                                   'tname' => $this->input->post('tname'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$tid);
  //                               if(!empty($this->input->post('tproject_assign')))
  //                               {
  //                                 $hdata = array(
  //                                                     'pid' => $this->input->post('tproject_assign'),
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $powner->first_name.' '.$powner->last_name,
  //                                                     'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Edited by '.$powner->first_name.' '.$powner->last_name,
  //                                                     'task_id' =>$tid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);
  //                               }  
  //                             $response['status'] = TRUE;
  //                             header('Content-type: application/json');
  //                             echo json_encode($response);
  //       }
  //   }
  // }

  public function edit_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('tname','Task Name','trim|required');
    $this->form_validation->set_rules('tpriority','Task Priority','trim|required');
    $this->form_validation->set_rules('team_member2','Assignee','trim|required');
    $this->form_validation->set_rules('tdue_date','Due Date','trim|required');
    $this->form_validation->set_rules('portfolio_name','Portfolio','trim|required');
    $this->form_validation->set_rules('dept','Department','trim|required');
    $this->form_validation->set_rules('estimated_time','Estimated Time','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          //tlink array
          $tlink_array = "";
          $tlink_comment_array="";
          if(!empty($_POST['tlink'][0])){
            $tlink_array = implode(',',$this->input->post('tlink'));
            $tlink_comment_array = implode(',',$this->input->post('tlink_comment'));
            $tlink_exarray = explode(',', $tlink_array);
            $count_extlink = count($tlink_exarray);
            if($count_extlink >= 0)
            {
               for ($i=0; $i<$count_extlink; $i++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $tlink_exarray[$i]))
                    {
                        $response['status'] = 'link_valid';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }
          $tid = $this->input->post('tid');
          $get_tcode = $this->input->post('tcode');
          $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
          $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
          $getSubtasks = $this->Front_model->Check_Task_Subtasks($tid);
          $getTasksDetail = $this->Front_model->getTasksDetail($tid);

          $portfolio_id = "";
           if(!empty($this->input->post('tproject_assign')))
           {
            $portfolio = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
            if($portfolio->portfolio_id != 0)
            {
              $portfolio_id = $portfolio->portfolio_id;
              if($getSubtasks)
              {

              //project tasks
              $data9 = array(
                                  'stproject_assign' => $this->input->post('tproject_assign'),
                                  'portfolio_id' => $portfolio_id,
                                  'dept_id' => $this->input->post('dept'),
                                  'gid' => $portfolio->gid,
                                  'sid' => $portfolio->sid,
                            );
                    $data9 = $this->security->xss_clean($data9); // xss filter
                    $this->Front_model->edit_task_subtasks($data9,$tid);
              }
            }
            else
            {
              $portfolio_id = "";
              if((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
              {
                $gid = $this->input->post('get_gid');
                $sid = $this->input->post('get_sid');
              }
              else
              {
                $gid = "";
                $sid = "";
              }
              if($getSubtasks)
              {

              //project tasks
              $data9 = array(
                                  'stproject_assign' => $this->input->post('tproject_assign'),
                                  'dept_id' => $this->input->post('dept'),
                                  'gid' => $gid,
                                  'sid' => $sid,
                            );
                    $data9 = $this->security->xss_clean($data9); // xss filter
                    $this->Front_model->edit_task_subtasks($data9,$tid);
              }
            }
           }
           else
           {
            $portfolio_id = $_COOKIE["d168_selectedportfolio"];
           }

           $tfile_old = $this->input->post('tfile_old');

           $tfile_upload=$tfile_old;

           $tfile_new_upload = "";
           $final_mem = "";
            if(!empty($_FILES['tfile']['name'][0]))
            {
              $tfile_upload= "";
              $cpt = count($_FILES['tfile']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/task_files/';
              $config['allowed_types'] = '*';
              $maxsize=2000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                  $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                  $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                  $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['tfile']['size'] >= $maxsize)
                        {
                                $response['passYvalue'] = '1';
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('tfile'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['tfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['passYvalue'] = '1';
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $tfile_new = implode(',', array_column($uploadData, 'tfile2'));
                        $tfile_new_upload = implode(',', array_column($uploadData, 'tfile2'));
                        $pdetail = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                        $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($tfile_old))
                    {
                      $tfile_old_array = explode(', ', $tfile_old);
                      $tfile_new_array = explode(', ', $tfile_new);
                      $merge_tfile = array_merge($tfile_old_array,$tfile_new_array);
                      $tfile_upload = implode(',',$merge_tfile);                      
                    }
                    else
                    {
                      $tfile_upload = $tfile_new;
                    }
            }

            $tnotify = "";
            $tnotify_clear = "";
            if($getTasksDetail)
            {
              if($getTasksDetail->tassignee == $this->input->post('team_member2'))
              {
                $tnotify = $getTasksDetail->tnotify;
                $tnotify_clear = $getTasksDetail->tnotify_clear;
              }
              else
              {
                $tnotify = 'yes';
                $tnotify_clear = 'no';
              }
            }

          $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

        if((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

        if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $this->input->post('team_member2'))
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($this->input->post('team_member2'),$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$this->input->post('team_member2'));
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$this->input->post('team_member2'));
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $data2 = array(
                                        'pid' => $this->input->post('tproject_assign'),
                                        'portfolio_id' => $portfolio_id,
                                        'pmember' => $this->input->post('team_member2'),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                                    $hdata = array(
                                                      'pid' => $this->input->post('tproject_assign'),
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $this->input->post('team_member2'))
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($this->input->post('team_member2'),$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$this->input->post('team_member2'));
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $this->input->post('tproject_assign'),
                      'suggest_id' => trim($this->input->post('team_member2')),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                  $hdata = array(
                                'pid' => $this->input->post('tproject_assign'),
                                'gid' => $gid,
                                'sid' => $sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }
        $estimated_time = $this->input->post('estimated_time');
        $timer_alert_status = $getTasksDetail->timer_alert_status;
        if($getTasksDetail->estimated_time !== $estimated_time ){
          $timer_alert_status = '0';
        }

                  $data = array(
                                    'tname' => $this->input->post('tname'),
                                    'tdes' => $this->input->post('tdes'),
                                    'tlink' => $tlink_array,
                                    'tlink_comment' => $tlink_comment_array,
                                    'tnote' => $this->input->post('tnote'),
                                    'tfile' => $tfile_upload,
                                    'tpriority' => $this->input->post('tpriority'),
                                    'tproject_assign' => $this->input->post('tproject_assign'),
                                    'portfolio_id' => $portfolio_id,
                                    'tassignee' => $this->input->post('team_member2'),
                                    'tdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                    'tdue_date_clear' => 'no',
                                    'new_file' => $tfile_new_upload,
                                    'tfnotify' => $final_mem,
                                    'tfnotify_clear' => $final_mem,
                                    'tfnotify_date' => date('Y-m-d H:i:s'),
                                    'tnotify' => $tnotify,
                                    'tnotify_clear' => $tnotify_clear,
                                    'tnotify_date' => date('Y-m-d H:i:s'),
                                    'gid' => $gid,
                                    'sid' => $sid,
                                    'dept_id' => $this->input->post('dept'),
                                    'estimated_time' => $estimated_time,
                                    'timer_alert_status' => $timer_alert_status,
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
                                //recent inserted id
                                $inserted_id = $this->db->insert_id();
                                if(!empty($this->input->post('tproject_assign')))
                                {
                                  $hdata = array(
                                                      'pid' => $this->input->post('tproject_assign'),
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $powner->reg_id,
                                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                      'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$this->input->post('tname').', Edited by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                                }
      ///ADD Subtask
            if(!empty($this->input->post('tproject_assign')))
             {
                $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2));             
             }
             else
             {
                $letter = '';
             }
             
              $Yvalue = $this->input->post('getYvalue');   
               if($Yvalue > 0)
               {
               $scount = $this->input->post('getYvalue') + 1;
               $passYvalue = $this->input->post('getYvalue');
               $loop_insert = $this->input->post('data_below_insert');
               for($i=$loop_insert; $i<$scount; $i++)
                    {
                      if(!empty($_POST['stname'.$i][0]))
                      {
                        if(!empty($letter))
                         {
                            $random_num = rand(1, 10000);
                            $get_stcode = $letter.'-'.$random_num;            
                         }
                         else
                         {
                            $random_num = rand(1, 10000);
                            $get_stcode = 'T-'.$random_num; 
                         }
                        $stname = $_POST['stname'.$i]; 
                        $stdes = $_POST['tdes'.$i]; 
                        $stnote = $_POST['tnote'.$i]; 
                        $stdue_date = $_POST['tdue_date'.$i]; 
                        $stpriority = $_POST['tpriority'.$i]; 
                        $stpriority = $_POST['tpriority'.$i];
                        $stassignee = $_POST['team_member2'.$i]; 
                        $estimated_stime = $_POST['estimated_stime'.$i];
                            $stud = $this->Front_model->getStudentById($stassignee);
                        //stlink array
                        $stlink_array="";
                        $stlink_comment_array="";
                        if(!empty($_POST['stlink'.$i][0])){
                          $stlink_array = implode(',',$_POST['stlink'.$i]);
                          $stlink_comment_array = implode(',',$_POST['stlink_comment'.$i]);
                          $stlink_exarray = explode(',', $stlink_array);
                          $count_exstlink = count($stlink_exarray);
                          if($count_exstlink >= 0)
                          {
                             for ($cli=0; $cli<$count_exstlink; $cli++)
                              {
                                 $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                                  if (!preg_match($pattern, $stlink_exarray[$cli]))
                                  {
                                      $response['status'] = 'stlink_valid';
                                      header('Content-type: application/json');
                                      //echo json_encode($response);
                                      exit(json_encode($response));
                                  }
                              }
                          }           
                        }
                        $stfile_upload="";
                        if(!empty($_FILES['tfile'.$i]['name'][0]))
                         {
                            $cpt = count($_FILES['tfile'.$i]['name']);
                            $files = $_FILES;
                            $config['upload_path'] = 'assets/task_files/';
                            $config['allowed_types'] = '*';
                            $maxsize=2000000;
                            //Load upload library and initialize configuration
                            $this->load->library('upload', $config);
                            for($j=0; $j<$cpt; $j++)
                            {  
                              //$_FILES['tfile'.$i]['name']= time().'_'.$files['tfile'.$i]['name'][$j];
                              $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile'.$i]['name'][$j]))); 
                              $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                              $_FILES['tfile'.$i]['name']= time().'_'.strtolower($new_file_name);
                              $_FILES['tfile'.$i]['type']= $files['tfile'.$i]['type'][$j];
                              $_FILES['tfile'.$i]['tmp_name']= $files['tfile'.$i]['tmp_name'][$j];
                              $_FILES['tfile'.$i]['error']= $files['tfile'.$i]['error'][$j];
                              $_FILES['tfile'.$i]['size']= $files['tfile'.$i]['size'][$j];   

                              $this->upload->initialize($config);
                              if($_FILES['tfile'.$i]['size'] >= $maxsize)
                                    {
                                            $response['passYvalue'] = $passYvalue;
                                            $response['status'] = 'file_uploadSizeErr';
                                            header('Content-type: application/json');
                                            exit(json_encode($response));
                                    }
                              else
                                    {
                                        if($this->upload->do_upload('tfile'.$i))
                                          {
                                            $fileData = $this->upload->data();
                                            $uploadData[$j]['tfile2'.$i] = $fileData['file_name'];
                                          }
                                          else 
                                          {
                                            $response['passYvalue'] = $passYvalue;
                                            $response['status'] = 'Error_Uploading';
                                            header('Content-type: application/json');
                                            //echo json_encode($response);
                                            exit(json_encode($response));
                                          } 
                                    }
                            }
                            if(is_array($uploadData))
                            {
                                $stfile_upload = implode(',', array_column($uploadData, 'tfile2'.$i));
                                //echo $stfile_upload;
                            }
                          }
                          else
                          {
                            $stfile_upload="";
                          } 

          $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

        if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $stassignee)
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($stassignee,$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$stassignee);
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$stassignee);
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                $data2 = array(
                    'pid' => $this->input->post('tproject_assign'),
                    'portfolio_id' => $portfolio_id,
                    'pmember' => $stassignee,
                    'status' => 'send',
                    'pcreated_by' => $this->session->userdata('d168_id'),
                    'sent_date' => date('Y-m-d H:i:s'),
                    'sent_notify_clear' => 'no',
                                      );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->insert_TeamMember($data2);
                $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($stassignee);
                $hdata = array(
                                  'pid' => $this->input->post('tproject_assign'),
                                  'gid' => $gid,
                                  'sid' => $sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                  'pmember_id' =>$inserted_pm_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                $RequestEmailID = $getEmailID->email_address;

                $email_to = $RequestEmailID;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Project Request | Decision 168');
                  $this->email->message('                 
                      <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($stassignee).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($stassignee).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $stassignee)
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($stassignee,$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$stassignee);
                $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$stassignee);
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $this->input->post('tproject_assign'),
                      'suggest_id' => trim($stassignee),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($stassignee);
                  $hdata = array(
                                'pid' => $this->input->post('tproject_assign'),
                                'gid' => $gid,
                                'sid' => $sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }
        
        
                          $data2 = array(
                                      'tid' => $tid,
                                      'stproject_assign' => $this->input->post('tproject_assign'),
                                      'portfolio_id' => $portfolio_id,
                                      'stcode' => $get_stcode,
                                      'stname' => $stname,
                                      'stdes' => $stdes,
                                      'stlink' => $stlink_array,
                                      'stlink_comment' => $stlink_comment_array,
                                      'stnote' => $stnote,
                                      'stfile' => $stfile_upload,
                                      'stpriority' => $stpriority,
                                      'ststatus' => 'to_do',
                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                      'stassignee' => $stassignee,
                                      'stcreated_by' => $this->session->userdata('d168_id'),
                                      'stcreated_date' => date('Y-m-d H:i:s'),
                                      'stnotify' => 'yes',
                                      'stnotify_clear' => 'no',
                                      'stnotify_date' => date('Y-m-d H:i:s'),
                                      'stdue_date' => date("Y-m-d", strtotime($stdue_date)),
                                      'stdue_date_clear' => 'no',
                                      'gid' => $gid,
                                      'sid' => $sid,
                                      'dept_id' => $this->input->post('dept'),
                                      'estimated_stime' => $estimated_stime,
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->insert_NewSubtask($data2);   
                        //recent inserted id
                                    $inserted_id2 = $this->db->insert_id();
                                    if(!empty($this->input->post('tproject_assign')))
                                    {
                                      $hdata = array(
                                                          'pid' => $this->input->post('tproject_assign'),
                                                          'gid' => $gid,
                                                          'sid' => $sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $powner->reg_id,
                                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                          'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$stname.', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                          'subtask_id' =>$inserted_id2
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                                    } 
                          if($inserted_id2) 
                          {
                            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
                          }
                      }                  
                    }
                    } 

                              $message = 'Task Edited Successfully!';
                              $this->session->set_flashdata('message', $message);
                              $response['tid'] = $tid;
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function project_tasks_list()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');
      $this->session->unset_userdata('searched_port_id');
      $this->session->unset_userdata('searched_project_id');
      $this->session->unset_userdata('searched_project_assignee_id');
      $data['pid'] = $this->uri->segment(2);    
      $this->session->set_userdata('searched_project_id',$this->uri->segment(2));  
      $data['pdetail'] = $this->Front_model->ProjectDetail2($data['pid']);
      $data['tlist'] = $this->Front_model->project_tasks_listNew($data['pid']);
      //$data['stlist'] = $this->Front_model->project_subtasks_list($data['pid']);
      $this->load->view('user/project-tasks-list',$data);    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function preview_task_file()
  {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
          $privilege_only_view = 'no';
          if(!empty($this->session->userdata('d168_user_cor_id')))
          {
          $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getCompPackInfo)
          {
            $privilege = "no";
            if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
            {
              $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
              if($getCompRolesInfo)
              {
                if($getCompRolesInfo->privilege != 'all')
                {
                  $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                  if(in_array('view', $cus_privilege))
                  {
                    $privilege_only_view = 'yes';
                  }
                }
              }      
            }
          }
          }
            $tfile_name = $this->input->post('tfile_name');
            $tid = $this->input->post('tid');
            $getExt = pathinfo($tfile_name, PATHINFO_EXTENSION); 
            if($privilege_only_view == 'no')
            {
              $preview_download = '<a href="'.base_url().'front/download_taskFileAttachment/'.$tfile_name.'/'.$tid.'" class="btn btn-sm btn-d text-white">Download</a>';
            }
            else
            {
              $preview_download = '';
            }
            //echo $getExt;
            if($getExt == 'jpg' || $getExt == 'JPG' || $getExt == 'jpeg' || $getExt == 'JPEG' || $getExt == 'png' || $getExt == 'PNG' || $getExt == 'svg' || $getExt == 'SVG' || $getExt == 'webp' || $getExt == 'WEBP')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewTaskModalLabel">'.substr($tfile_name, strpos($tfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <img src="'.base_url().'assets/task_files/'.$tfile_name .'" height="100%" width="100%">                    
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'pdf' || $getExt == 'PDF' || $getExt == 'gif' || $getExt == 'GIF' || $getExt == 'txt' || $getExt == 'TXT')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewTaskModalLabel">'.substr($tfile_name, strpos($tfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <iframe src="'.base_url().'assets/task_files/'.$tfile_name .'" height="100%" width="100%"></iframe>                      
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'mp4' || $getExt == 'MP4' || $getExt == 'mov' || $getExt == 'MOV' || $getExt == 'webm' || $getExt == 'WEBM' || $getExt == 'mkv'  || $getExt == 'MKV')
            {
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewTaskModalLabel">'.substr($tfile_name, strpos($tfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                      <video height="100%" width="100%" controls autoplay>
                        <source src="'.base_url().'assets/task_files/'.$tfile_name .'">
                      </video>                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'csv' || $getExt == 'CSV')
            {
              $url = base_url().'assets/task_files/'.$tfile_name;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewTaskModalLabel'>".substr($tfile_name, strpos($tfile_name, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://docs.google.com/viewer?embedded=true&url=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                      ".$preview_download."
                  </div>";
            }
            else
            {
              $url = base_url().'assets/task_files/'.$tfile_name;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewTaskModalLabel'>".substr($tfile_name, strpos($tfile_name, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                      ".$preview_download."
                  </div>";
            }          
        } 
        else 
        {
            redirect(base_url('login'));
        }
  }

  public function download_taskFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $tfile_name = $this->uri->segment(3);
      $tid = $this->uri->segment(4);
      $tdetail = $this->Front_model->getTaskById($tid);      
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($tdetail->tproject_assign != 0)
      {
          $hdata = array(
                                    'pid' => $tdetail->tproject_assign,
                                    'gid' => $tdetail->gid,
                                    'sid' => $tdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($tfile_name), strpos(trim($tfile_name), '_') + 1).' File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                    'task_id' =>$tdetail->tid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
      }
      $file = 'assets/task_files/'.$tfile_name;
      //print_r($file);
      //force download
      force_download($file,NULL);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function delete_tfile()
  // {
  //   $tfile_name = $this->input->post('tfile_name');
  //   $tid = $this->input->post('tid');
  //   $tdetail = $this->Front_model->getTaskById($tid); 
  //         $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
  //   if($tdetail->tproject_assign != 0)
  //   {
  //     $hdata = array(
  //                                   'pid' => $tdetail->tproject_assign,
  //                                   'h_date' => date('Y-m-d H:i:s'),
  //                                   'h_resource' => $powner->first_name.' '.$powner->last_name,
  //                                   'h_description' =>  substr(trim($tfile_name), strpos(trim($tfile_name), '_') + 1).' Deleted By '.$powner->first_name.' '.$powner->last_name,
  //                                   'pfile_id' =>$tdetail->tid
  //                               );
  //                               $hdata = $this->security->xss_clean($hdata); // xss filter
  //                               $this->Front_model->insert_ProjectHistory($hdata);
  //   }
          
  //   $getAlltfile = explode(',', $tdetail->tfile);
  //   $count = count($getAlltfile);
  //   $new_tfiles = array();
  //   if($count > 0)
  //   {
  //     for ($i=0; $i<$count; $i++)
  //       {
  //         $get_tfile_name = strtolower($getAlltfile[$i]);
  //         if($get_tfile_name == $tfile_name)
  //         {
  //           $get_tfile_name = "";
  //         }
  //         $new_tfiles[] = $get_tfile_name; 
  //       }
  //       //echo "<br>";
  //       $new = implode(',', $new_tfiles);
  //       //echo $new;
  //       //echo "<br>";
  //       $string_file = preg_replace("/,+/", ",", $new);
  //       //echo $string_file;
  //                 $data = array(
  //                                   'tfile' => $string_file
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$tid);
  //       unlink("assets/task_files/".$tfile_name);
  //   }

  //     $this->session->set_flashdata('message','File Deleted Successfully!');
  //     $response['status'] = TRUE;
  //     header('Content-type: application/json');
  //     echo json_encode($response);
  // }

  public function delete_tfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tfile_name = $this->input->post('tfile_name');
    $tid = $this->input->post('tid');
    $tdetail = $this->Front_model->file_itgetTaskById($tid); 
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($tdetail->tproject_assign != 0)
    {
      $hdata = array(
                                    'pid' => $tdetail->tproject_assign,
                                    'gid' => $tdetail->gid,
                                    'sid' => $tdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($tfile_name), strpos(trim($tfile_name), '_') + 1).' Moved To Trash By '.$powner->first_name.' '.$powner->last_name,
                                    'task_id' =>$tdetail->tid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
    }

    $data = array(
                                    'pid' => $tdetail->tproject_assign,
                                    'tid' => $tid,
                                    'tfile' => $tfile_name,
                                    'task_trash' => 'yes',
                                    'task_trash_date' =>date("Y-m-d", strtotime("+1 month")),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_task_trash($data);
          
    $getAlltfile = explode(',', $tdetail->tfile);
    $count = count($getAlltfile);
    $new_tfiles = array();
    if($count > 0)
    {
      for ($i=0; $i<$count; $i++)
        {
          $get_tfile_name = $getAlltfile[$i];
          if($get_tfile_name == $tfile_name)
          {
            $get_tfile_name = "";
          }
          $new_tfiles[] = $get_tfile_name; 
        }
        //echo "<br>";
        $new = implode(',', $new_tfiles);
        //echo $new;
        //echo "<br>";
        $string_file = preg_replace("/,+/", ",", $new);
        $new_string_file = rtrim($string_file, ',');
        $final_string_file = ltrim($new_string_file, ',');
        //echo $string_file;
                  $data = array(
                                    'tfile' => $final_string_file
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
    }

      $this->session->set_flashdata('message','File Moved to Trash Successfully!');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function trash_task_files()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['TrashTaskFiles'] = $this->Front_model->TrashTaskFiles();
      $this->load->view('user/trash-task-files',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function retrieve_tfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $tfile = $this->input->post('tfile');
    $trash_id = $this->input->post('trash_id');
    $tdetail = $this->Front_model->file_itgetTaskById($tid); 
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
     $checkFileTaskTrash = $this->Front_model->checkFileTaskTrash($tid);
            if($checkFileTaskTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Task is in Trash! To Restore File please Restore Task!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
                 if($tdetail->tproject_assign != 0)
                  {
                    $hdata = array(
                                                  'pid' => $tdetail->tproject_assign,
                                                  'gid' => $tdetail->gid,
                                                  'sid' => $tdetail->sid,
                                                  'h_date' => date('Y-m-d H:i:s'),
                                                  'h_resource_id' => $powner->reg_id,
                                                  'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                  'h_description' =>  substr(trim($tfile), strpos(trim($tfile), '_') + 1).' Restored By '.$powner->first_name.' '.$powner->last_name,
                                                  'task_id' =>$tdetail->tid
                                              );
                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                              $this->Front_model->insert_ProjectHistory($hdata);
                  }

                  $tfile_restore = "";
                  if(!empty($tdetail->tfile))
                  {
                    $exist_tfile = $tdetail->tfile;
                                    $exist_tfile_array = explode(', ', $exist_tfile);
                                    $tfile_new_array = explode(', ', $tfile);
                                    $merge_tfile = array_merge($exist_tfile_array,$tfile_new_array);
                                    $tfile_restore = implode(',',$merge_tfile); 
                  }
                  else
                  {
                    $tfile_restore = $tfile;
                  }

                  $data = array(
                                                  'tfile' => $tfile_restore
                                              );
                                              $data = $this->security->xss_clean($data); // xss filter
                                              $this->Front_model->edit_NewTask($data,$tid);
                                              //delete file from task trash table
                                             $this->Front_model->delete_task_trash($trash_id); 
                    $this->session->set_flashdata('message','File Restored Successfully!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response); 
            }              
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function tfile_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $trash_id = $this->input->post('trash_id');
    $res = $this->Front_model->check_tfile_task_trash($trash_id,$tid); 
    if($res)
    {
        $res2 = $this->Front_model->delete_tfile_trash($trash_id);
        if ($res2 == true) 
        {
            unlink("assets/task_files/".$res->tfile);
        }
            
        $this->session->set_flashdata('message','Task file deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function change_my_password()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $id = $this->session->userdata('d168_id');
        $data['stud_del'] = $this->Front_model->getStudentById($id);
        $this->load->view('user/change_my_password',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_my_password()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('old_password','Current Password','trim|required');
      $this->form_validation->set_rules('new_password','New Password','trim|required|min_length[5]|callback_valid_password');
      $this->form_validation->set_rules('conf_password','Confirm Password','trim|required|required|matches[new_password]');
      
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $id = $this->session->userdata('d168_id');
        $check_oldPwd = $this->Front_model->getStudentById($id);
        if($check_oldPwd)
        {
          if($check_oldPwd->password == md5($this->input->post('old_password')))
          {
            if($check_oldPwd->password != md5($this->input->post('new_password')))
            {
              $data = array(  'password' => md5($this->input->post('new_password')) );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->updateRegistration($data,$id);
              $this->session->set_flashdata('message', 'Password Changed Successfully! Login with New Password');

                delete_cookie("d168_password");
                $this->session->unset_userdata('d168_user_role_in_comp');
                $this->session->unset_userdata('d168_user_cor_id');
                $this->session->unset_userdata('d168_id');
                $response['status'] = TRUE;              
                header('Content-type: application/json');
                echo json_encode($response); 
            }
            else
            {
                $response['status'] = 'new_passwordError';
                header('Content-type: application/json');
                exit(json_encode($response));
            }
          }
          else
          {
              $response['status'] = 'old_passwordError';
              header('Content-type: application/json');
              exit(json_encode($response));
          }
        } 
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function portfolio_AddTeamMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $port_id = $this->input->post('port_id');
          $getportd = $this->Front_model->getPortfolio($port_id);
          $P_Owner = $this->Front_model->getStudentById($getportd->portfolio_createdby);
          $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim|required');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
                $myIM_Array = explode(',', $imemail_array);//invite team member array
                foreach($myIM_Array as $im)
                  {
                    $check_portmember = $this->Front_model->check_PortfolioMember($port_id,$im);
                    if(!empty($check_portmember))
                    {
                      if($check_portmember->status == 'accepted')
                      {
                        $response['status'] = 'accepted_email';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                      }
                      else
                      {
                        $response['status'] = 'Invited_email';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                      }
                    }
                    else
                    {
                      $data = array(
                                      'portfolio_id' => $port_id,
                                      'sent_to' => $im,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'status' => 'pending',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s'),
                                      'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);
                      $inserted_id = $this->db->insert_id();
                                $email_to = $im;
                                $email_from = 'hello@decision168.com'; 
                                //$email_from = 'saramaazkhan123@gmail.com'; 
                                $email_name = 'Decision 168';
                                $this->load->library('email');  
                                $config=array(
                                             'charset'=>'utf-8',
                                             'wordwrap'=> TRUE,
                                             'mailtype' => 'html'
                                             );
                        $this->email->initialize($config);
                        $this->email->from($email_from, $email_name);
                        $this->email->set_header('Reply-To', $email_from."\r\n");
                        $this->email->set_header('Return-Path', $email_from."\r\n");
                        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                        $this->email->to($email_to);
                        $this->email->set_mailtype('html');
                        $this->email->subject('Portfolio Team Member Request | Decision 168');
                        $this->email->message('                 
                                                      <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Portfolio Request</title>
            <meta name="description" content="Portfolio Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Portfolio...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has invited you to join '.$getportd->portfolio_name.' '.$getportd->portfolio_lname.' portfolio as a team member. Just click the appropriate button below to join the portfolio or request more information.
                                                    <br><br>
                                                    Portfolio Short Description: '.substr($getportd->about_portfolio,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('portfolio-invite-accept-request/'.$port_id.'/'.$inserted_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join The Team</a>
                                                <a href="'.base_url('portfolio-invite-reject-request/'.$port_id.'/'.$inserted_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                    $this->email->send();
                    }
                  }

                                                    $this->session->set_flashdata('message','Invite sent Successfully!');
                                                    $response['status'] = TRUE;
                                                    header('Content-type: application/json');
                                                    echo json_encode($response);
              }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function portfolio_AddDepartment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if((!empty($this->input->post('department'))) || (!empty($this->input->post('cus_department'))))
        {
          $port_id = $this->input->post('port_id');
          if(empty($this->input->post('department')))
          {
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept2;
          }
          elseif(empty($this->input->post('cus_department')))
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept = $dept1;            
          }
          else
          {
            $dept1 = implode(',',$this->input->post('department'));
            $dept2 = implode(',',$this->input->post('cus_department'));
            $dept = $dept1.','.$dept2;            
          }
          $extract_dept = explode(',',$dept);
          $cnt_dept = count($extract_dept);
          for ($dpt=0; $dpt<$cnt_dept; $dpt++)
          {
            $ddata = array(
                                      'portfolio_id' => $port_id,
                                      'department' => $extract_dept[$dpt],
                                      'createdby' => $this->session->userdata('d168_id'),
                                      'dstatus' => 'active',
                                      'createddate' => date('Y-m-d H:i:s')
                                    );
            $ddata = $this->security->xss_clean($ddata); // xss filter
            $this->Front_model->insert_PortfolioDepartment($ddata);
          }
          $this->session->set_flashdata('message', 'Department Added Successfully');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);  
        }
        else
        {
          $response['status'] = FALSE;
          header('Content-type: application/json');
          echo json_encode($response); 
        }
    }
  else
  {
    redirect(base_url('login'));
  } 
}

  public function portfolio_invite_accept_request()
  {
    $port_id = $this->uri->segment(2);
    $pim_id = $this->uri->segment(3);
    $flag = $this->uri->segment(4);
    if($flag == '1')
    {
      $getportd = $this->Front_model->getPortfolioMember($pim_id,$port_id);
      if($getportd)
      {
      $check_if_registered = $this->Front_model->selectLogin($getportd->sent_to);
        if($getportd->status == 'pending')
        {
          if(!empty($check_if_registered))
          {
            $data['user_status'] = 'registered';
            $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'yes',
                              'status_notify_clear' => 'no',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMember($data2,$pim_id);
            $this->load->view('user/portfolio_invite_accept',$data);
          }
          else
          {
            $data['user_status'] = 'not_registered';
            $this->load->view('user/portfolio_invite_accept',$data);
          }
        }
        else
        {
          $data['user_status'] = $getportd->status;
          $this->load->view('user/portfolio_invite_accept',$data);
        }
      }
      else
      {
        $this->load->view('user/pages-404');
      }          
    }
    else
    {
      $this->load->view('user/pages-404');
    }
  }

  public function portfolio_invite_reject_request()
  {
    $port_id = $this->uri->segment(2);
    $pim_id = $this->uri->segment(3);
    $flag = $this->uri->segment(4);
    if($flag == '2')
    {
      $getportd = $this->Front_model->getPortfolioMember($pim_id,$port_id);
      if($getportd)
      {
        if($getportd->status == 'pending')
        {
            $data['user_status'] = 'rejected_request';
            $data2 = array(    'status' => 'rejected',
                              'status_date' => date('Y-m-d H:i:s')
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMember($data2,$pim_id);
            $this->load->view('user/portfolio_invite_reject',$data);
        }
        else
        {
          $data['user_status'] = $getportd->status;
          $this->load->view('user/portfolio_invite_reject',$data);
        }
      }
      else
      {
        $this->load->view('user/pages-404');
      } 
    }
    else
    {
      $this->load->view('user/pages-404');
    }
  }

  public function get_portfolioTM()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $port_id = $this->input->post('port_id');
    $porttm = $this->Front_model->getAccepted_PortTM($port_id);
    if(!empty($port_id)) 
    {                              
      if($porttm){
        foreach ($porttm as $ptm) {
          $m = $this->Front_model->selectLogin($ptm->sent_to);
          if($m){
            if($m->reg_id != $this->session->userdata('d168_id'))
              {
              ?>
              <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
              <?php
              }
          }
          }
        }
    }
    else
    {
      ?>
        <option value="">Select Team Member</option>
      <?php
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }
  
  public function get_portfolioTM_edit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $port_id = $this->input->post('port_id');
    $pid = $this->input->post('pid');
    $porttm = $this->Front_model->getAccepted_PortTM($port_id); 
    if(!empty($port_id)) 
    {                             
    if($porttm){
      foreach ($porttm as $ptm) {
        $m = $this->Front_model->selectLogin($ptm->sent_to);
        $check_pm = $this->Front_model->check_pm($m->reg_id,$pid,$port_id);
          if($m)
          {
            $check_pm_pmember = "";
            if($check_pm)
            {
              $check_pm_pmember = $check_pm->pmember;
            }
            if(($m->reg_id != $this->session->userdata('d168_id')) && ($m->reg_id != $check_pm_pmember))
            {
              $get_pdetail = $this->Front_model->getProjectById($pid);
              if($get_pdetail)
              {
              if($m->reg_id != $get_pdetail->pcreated_by)
              {
              ?>
              <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
              <?php
              }
              }
            }
          }
          if($check_pm && $m)
          {
            if((($check_pm->status == 'accepted') || ($check_pm->status == 'send')) && ($m->reg_id == $check_pm->pmember))
            {
            ?>
            <option value="<?php echo $m->reg_id;?>" selected><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
            <?php
            }
          }
        }
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

public function subtasks_overview()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
      $this->load->view('user/subtasks-overview',$data);    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtasks_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/subtasks-create');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('tid','Task Name','trim|required');
    // $this->form_validation->set_rules('estimated_stime','Estimated Time','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
           $tid = $this->input->post('tid');
           $dept_id = $this->input->post('dept');
           $portfolio_id = $this->input->post('portfolio_id');
           $tproject_assign = $this->input->post('tproject_assign');
            $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
             if(!empty($tproject_assign))
             {
                $get_project_name = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
                $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2));             
             }
             else
             {
                $letter = '';
             }

           $scount = $this->input->post('getYvalue') + 1;
           $passYvalue = $this->input->post('getYvalue');
           $loop_insert = $this->input->post('data_below_insert');
           //echo $scount;
           for($i=$loop_insert; $i<$scount; $i++)
                {
                  if(!empty($_POST['stname'.$i]))
                  {
                    if(!empty($letter))
                     {
                        $random_num = rand(1, 10000);
                        $get_stcode = $letter.'-'.$random_num;            
                     }
                     else
                     {
                        $random_num = rand(1, 10000);
                        $get_stcode = 'T-'.$random_num; 
                     }
                    $stname = $_POST['stname'.$i]; 
                    $stdes = $_POST['tdes'.$i]; 
                    $stnote = $_POST['tnote'.$i]; 
                    $stdue_date = $_POST['tdue_date'.$i]; 
                    $stpriority = $_POST['tpriority'.$i]; 
                    $stassignee = $_POST['team_member2'.$i];
                    $estimated_stime = $_POST['estimated_stime'.$i];
                    $stud = $this->Front_model->getStudentById($stassignee);
                    //stlink array
                    $stlink_array="";
                    $stlink_comment_array="";
                    if(!empty($_POST['stlink'.$i][0])){
                      $stlink_array = implode(',',$_POST['stlink'.$i]);
                      $stlink_comment_array = implode(',',$_POST['stlink_comment'.$i]);
                      $stlink_exarray = explode(',', $stlink_array);
                      $count_exstlink = count($stlink_exarray);
                      if($count_exstlink >= 0)
                      {
                         for ($cli=0; $cli<$count_exstlink; $cli++)
                          {
                             $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                              if (!preg_match($pattern, $stlink_exarray[$cli]))
                              {
                                  $response['status'] = 'stlink_valid';
                                  header('Content-type: application/json');
                                  //echo json_encode($response);
                                  exit(json_encode($response));
                              }
                          }
                      }           
                    }
                    $stfile_upload="";
                    if(!empty($_FILES['tfile'.$i]['name'][0]))
                     {
                        $cpt = count($_FILES['tfile'.$i]['name']);
                        $files = $_FILES;
                        $config['upload_path'] = 'assets/task_files/';
                        $config['allowed_types'] = '*';
                        $maxsize=2000000;
                        //Load upload library and initialize configuration
                        $this->load->library('upload', $config);
                        for($j=0; $j<$cpt; $j++)
                        {  
                          //$_FILES['tfile'.$i]['name']= time().'_'.$files['tfile'.$i]['name'][$j];
                          $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile'.$i]['name'][$j]))); 
                          $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                          $_FILES['tfile'.$i]['name']= time().'_'.strtolower($new_file_name);
                          $_FILES['tfile'.$i]['type']= $files['tfile'.$i]['type'][$j];
                          $_FILES['tfile'.$i]['tmp_name']= $files['tfile'.$i]['tmp_name'][$j];
                          $_FILES['tfile'.$i]['error']= $files['tfile'.$i]['error'][$j];
                          $_FILES['tfile'.$i]['size']= $files['tfile'.$i]['size'][$j];   

                          $this->upload->initialize($config);
                          if($_FILES['tfile'.$i]['size'] >= $maxsize)
                                {
                                        $response['passYvalue'] = $passYvalue;
                                        $response['status'] = 'file_uploadSizeErr';
                                        header('Content-type: application/json');
                                        exit(json_encode($response));
                                }
                          else
                                {
                                    if($this->upload->do_upload('tfile'.$i))
                                      {
                                        $fileData = $this->upload->data();
                                        $uploadData[$j]['tfile2'.$i] = $fileData['file_name'];
                                      }
                                      else 
                                      {
                                        $response['passYvalue'] = $passYvalue;
                                        $response['status'] = 'Error_Uploading';
                                        header('Content-type: application/json');
                                        //echo json_encode($response);
                                        exit(json_encode($response));
                                      } 
                                }
                        }
                        if(is_array($uploadData))
                        {
                            $stfile_upload = implode(',', array_column($uploadData, 'tfile2'.$i));
                            //echo $stfile_upload;
                        }
                      }
                      else
                      {
                        $stfile_upload="";
                      }    

          $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('tproject_assign'));
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

        if((!empty($this->input->post('get_gid'))) && (!empty($this->input->post('get_sid'))))
            {
              $gid = $this->input->post('get_gid');
              $sid = $this->input->post('get_sid');
            }
            else
            {
              $gid = "";
              $sid = "";
            }

        if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $stassignee)
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($stassignee,$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('tproject_assign'),$stassignee);
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$this->input->post('tproject_assign'),$stassignee);
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                $data2 = array(
                    'pid' => $this->input->post('tproject_assign'),
                    'portfolio_id' => $portfolio_id,
                    'pmember' => $stassignee,
                    'status' => 'send',
                    'pcreated_by' => $this->session->userdata('d168_id'),
                    'sent_date' => date('Y-m-d H:i:s'),
                    'sent_notify_clear' => 'no',
                                      );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->insert_TeamMember($data2);
                $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($stassignee);
                $hdata = array(
                                  'pid' => $this->input->post('tproject_assign'),
                                  'gid' => $gid,
                                  'sid' => $sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                  'pmember_id' =>$inserted_pm_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                $RequestEmailID = $getEmailID->email_address;

                $email_to = $RequestEmailID;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Project Request | Decision 168');
                  $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($stassignee).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$this->input->post('tproject_assign').'/'.trim($stassignee).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $stassignee)
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('tproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($stassignee,$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($this->input->post('tproject_assign'),$stassignee);
                $check_pmem = $this->Front_model->check_pro_member2($this->input->post('tproject_assign'),$stassignee);
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $this->input->post('tproject_assign'),
                      'suggest_id' => trim($stassignee),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($stassignee);
                  $hdata = array(
                                'pid' => $this->input->post('tproject_assign'),
                                'gid' => $gid,
                                'sid' => $sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }
        // $getSTasksDetail = $this->Front_model->getSubtasksDetail($stid);
        // $estimated_stime = $this->input->post('estimated_stime');
        // $timer_salert_status = $getSTasksDetail->timer_salert_status;
        // if($getSTasksDetail->estimated_stime !== $estimated_stime ){
        //   $timer_salert_status = '0';
        // }
                      $data = array(
                                      'tid' => $tid,
                                      'stproject_assign' => $tproject_assign,
                                      'portfolio_id' => $portfolio_id,
                                      'stcode' => $get_stcode,
                                      'stname' => $stname,
                                      'stdes' => $stdes,
                                      'stlink' => $stlink_array,
                                      'stlink_comment' => $stlink_comment_array,
                                      'stnote' => $stnote,
                                      'stfile' => $stfile_upload,
                                      'stpriority' => $stpriority,
                                      'ststatus' => 'to_do',
                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                      'stassignee' => $stassignee,
                                      'stcreated_by' => $this->session->userdata('d168_id'),
                                      'stcreated_date' => date('Y-m-d H:i:s'),
                                      'stnotify' => 'yes',
                                      'stnotify_clear' => 'no',
                                      'stnotify_date' => date('Y-m-d H:i:s'),
                                      'stdue_date' => date("Y-m-d", strtotime($stdue_date)),
                                      'stdue_date_clear' => 'no',
                                      'gid' => $gid,
                                      'sid' => $sid,
                                      'dept_id' => $dept_id,
                                      'estimated_stime' => $estimated_stime,
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewSubtask($data);   
                    //recent inserted id
                                $inserted_id = $this->db->insert_id();
                                if(!empty($tproject_assign))
                                {
                                  $hdata = array(
                                                      'pid' => $tproject_assign,
                                                      'gid' => $gid,
                                                      'sid' => $sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $powner->reg_id,
                                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$stname.', Created by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                      'subtask_id' =>$inserted_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                                }  

                                if($inserted_id)
                                {
                                    $data = array(
                                      'tstatus' => 'in_progress',
                                      'review' => '',
                                      'review_clear'=> '',
                                      'review_notify'=> '',
                                      'po_review_clear' => '',
                                      'po_review_notify'=> '',
                                      'tstatus_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->edit_NewTask($data,$tid);
                                }
                  }                  
                }  

                              $this->session->set_flashdata('message', 'Subtask Created Successfully!');
                              $response['tid'] = $tid;
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);              
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskOverview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $previous_url = $_SERVER['HTTP_REFERER'];
      $previous_url_array = explode('/', $previous_url);
      $previous_page_name = end($previous_url_array);
      $data['previous_page_name'] = $previous_page_name;

      $data_stask = $this->Front_model->check_subtask($id);
if($data_stask->sflag == '1'){

  $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
    if($data['stdetail'])
    {
     echo '<div class="modal-header">
              <h5 class="modal-title mt-0" id="SubtaskOverviewModalLabel">'.$data['stdetail']->stname.'</h5>
              &nbsp;&nbsp;<a href="'.base_url('subtasks-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">';
      $this->load->view('user/subtasks-overview-modal',$data);                                       
      echo '</div>';  
    }
}
else{

  if($previous_page_name == 'file-cabinet'){
    $privilege_only_view = 'no';
    if(!empty($this->session->userdata('d168_user_cor_id')))
    {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('view', $cus_privilege))
            {
              $privilege_only_view = 'yes';
            }
          }
        }      
      }
    }
    }
    $data['stdetail'] = $this->Front_model->file_itSubtaskDetail($id);
    if($data['stdetail'])
    {
     echo '<div class="modal-header">
              <h5 class="modal-title mt-0" id="SubtaskOverviewModalLabel">'.$data['stdetail']->stname.'</h5>';
      $check_pro_createdby = "";
      if(!empty($data['stdetail']->stproject_assign))
      {
          $pro = $this->Front_model->getProjectById($data['stdetail']->stproject_assign);
          if($pro)
          {
              $check_pro_createdby = $pro->pcreated_by;
          }
      }
      if(($data['stdetail']->stassignee == $this->session->userdata('d168_id')) || ($data['stdetail']->stcreated_by == $this->session->userdata('d168_id')) || ($check_pro_createdby == $this->session->userdata('d168_id'))) 
      {
        if($privilege_only_view == 'no')
        {
        echo '&nbsp;&nbsp;<a href="javascript:void(0);" onclick="reopenSubtask('.$id.');" class="btn btn-sm btn-d text-white">Reopen</a>';
        }
      }
      echo '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">';
      $this->load->view('user/subtasks-overview-modal',$data);                                       
      echo '</div>';  
    }
  }else{
    $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
    if($data['stdetail'])
    {
     echo '<div class="modal-header">
              <h5 class="modal-title mt-0" id="SubtaskOverviewModalLabel">'.$data['stdetail']->stname.'</h5>
              &nbsp;&nbsp;<a href="'.base_url('subtasks-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">';
      $this->load->view('user/subtasks-overview-modal',$data);                                       
      echo '</div>';  
    }
  }

}
         
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function SubtaskEdit_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['stdetail'] = $this->Front_model->check_subtask($id); 
      $this->load->view('user/subtasks-edit-modal',$data);   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('stname','Subtask Name','trim|required');
    $this->form_validation->set_rules('tpriority','Subtask Priority','trim|required');
    $this->form_validation->set_rules('team_member2','Assignee','trim|required');
    $this->form_validation->set_rules('tdue_date','Due Date','trim|required');
    $this->form_validation->set_rules('estimated_stime','Estimated Time','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          //stlink array
          $stlink_array="";
          $stlink_comment_array="";
          if(!empty($_POST['stlink'][0])){
            $stlink_array = implode(',',$this->input->post('stlink'));
            $stlink_comment_array = implode(',',$this->input->post('stlink_comment'));
            $stlink_exarray = explode(',', $stlink_array);
            $count_exstlink = count($stlink_exarray);
            if($count_exstlink >= 0)
            {
               for ($i=0; $i<$count_exstlink; $i++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $stlink_exarray[$i]))
                    {
                        $response['status'] = 'stlink_valid';
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }
          $stid = $this->input->post('stid');
          $get_stcode = $this->input->post('stcode');
          $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
          $stud = $this->Front_model->getStudentById($this->input->post('team_member2'));
          $check_subtask = $this->Front_model->check_subtask($stid);

          $portfolio_id = "";
           if(!empty($this->input->post('stproject_assign')))
           {
            $portfolio = $this->Front_model->getProjectById($this->input->post('stproject_assign'));
            if($portfolio->portfolio_id != 0)
            {
              $portfolio_id = $portfolio->portfolio_id;
            }
            else
            {
              $portfolio_id = "";
            }
           }

           $tfile_old = $this->input->post('stfile_old');

           $tfile_upload=$tfile_old;

           $tfile_new_upload = "";
           $final_mem = "";
            if(!empty($_FILES['tfile']['name'][0]))
            {
              $tfile_upload= "";
              $cpt = count($_FILES['tfile']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/task_files/';
              $config['allowed_types'] = '*';
              $maxsize=2000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['tfile']['name']= time().'_'.$files['tfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['tfile']['name'][$i]))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['tfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['tfile']['type']= $files['tfile']['type'][$i];
                  $_FILES['tfile']['tmp_name']= $files['tfile']['tmp_name'][$i];
                  $_FILES['tfile']['error']= $files['tfile']['error'][$i];
                  $_FILES['tfile']['size']= $files['tfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['tfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('tfile'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['tfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $tfile_new = implode(',', array_column($uploadData, 'tfile2'));
                        $tfile_new_upload = implode(',', array_column($uploadData, 'tfile2'));
                        $pdetail = $this->Front_model->getProjectById($this->input->post('stproject_assign'));
                        $pdetail_member = $this->Front_model->getMemberProject($this->input->post('stproject_assign'));
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($tfile_old))
                    {
                      $tfile_old_array = explode(', ', $tfile_old);
                      $tfile_new_array = explode(', ', $tfile_new);
                      $merge_tfile = array_merge($tfile_old_array,$tfile_new_array);
                      $tfile_upload = implode(',',$merge_tfile);                      
                    }
                    else
                    {
                      $tfile_upload = $tfile_new;
                    }
            }

            $stnotify = "";
            $stnotify_clear = "";
            if($check_subtask)
            {
              if($check_subtask->stassignee == $this->input->post('team_member2'))
              {
                $stnotify = $check_subtask->stnotify;
                $stnotify_clear = $check_subtask->stnotify_clear;
              }
              else
              {
                $stnotify = 'yes';
                $stnotify_clear = 'no';
              }
            }

          $check_Pro_Owner = $this->Front_model->getProjectById($this->input->post('stproject_assign'));
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

        if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $this->input->post('team_member2'))
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('stproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($this->input->post('team_member2'),$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($this->input->post('stproject_assign'),$this->input->post('team_member2'));
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$this->input->post('stproject_assign'),$this->input->post('team_member2'));
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                $data2 = array(
                    'pid' => $this->input->post('stproject_assign'),
                    'portfolio_id' => $portfolio_id,
                    'pmember' => $this->input->post('team_member2'),
                    'status' => 'send',
                    'pcreated_by' => $this->session->userdata('d168_id'),
                    'sent_date' => date('Y-m-d H:i:s'),
                    'sent_notify_clear' => 'no',
                                      );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->insert_TeamMember($data2);
                $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                $hdata = array(
                                  'pid' => $this->input->post('stproject_assign'),
                                  'gid' => $check_Pro_Owner->gid,
                                  'sid' => $check_Pro_Owner->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                  'pmember_id' =>$inserted_pm_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                $RequestEmailID = $getEmailID->email_address;

                $email_to = $RequestEmailID;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Project Request | Decision 168');
                  $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$this->input->post('stproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$this->input->post('stproject_assign').'/'.trim($this->input->post('team_member2')).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $this->input->post('team_member2'))
          {
            $pdetail_member = $this->Front_model->getMemberProject($this->input->post('stproject_assign'));
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($this->input->post('team_member2'),$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($this->input->post('stproject_assign'),$this->input->post('team_member2'));
                $check_pmem = $this->Front_model->check_pro_member2($this->input->post('stproject_assign'),$this->input->post('team_member2'));
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $this->input->post('stproject_assign'),
                      'suggest_id' => trim($this->input->post('team_member2')),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($this->input->post('team_member2'));
                  $hdata = array(
                                'pid' => $this->input->post('stproject_assign'),
                                'gid' => $check_Pro_Owner->gid,
                                'sid' => $check_Pro_Owner->sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }

        $getSTasksDetail = $this->Front_model->getSubtasksDetail($stid);
        $estimated_stime = $this->input->post('estimated_stime');
        $timer_salert_status = $getSTasksDetail->timer_salert_status;
        if($getSTasksDetail->estimated_stime !== $estimated_stime ){
          $timer_salert_status = '0';
        }

                  $data = array(
                                    'stname' => $this->input->post('stname'),
                                    'stdes' => $this->input->post('tdes'),
                                    'stlink' => $stlink_array,
                                    'stlink_comment' => $stlink_comment_array,
                                    'stnote' => $this->input->post('tnote'),
                                    'stfile' => $tfile_upload,
                                    'stpriority' => $this->input->post('tpriority'),
                                    'portfolio_id' => $portfolio_id,
                                    'stassignee' => $this->input->post('team_member2'),
                                    'stdue_date' => date("Y-m-d", strtotime($this->input->post('tdue_date'))),
                                    'stdue_date_clear' => 'no',
                                    'snew_file' => $tfile_new_upload,
                                    'stfnotify' => $final_mem,
                                    'stfnotify_clear' => $final_mem,
                                    'stfnotify_date' => date('Y-m-d H:i:s'),
                                    'stnotify' => $stnotify,
                                    'stnotify_clear' => $stnotify_clear,
                                    'stnotify_date' => date('Y-m-d H:i:s'),
                                    'estimated_stime' => $this->input->post('estimated_stime'),
                                    'timer_salert_status' => $timer_salert_status,
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewSubtask($data,$stid);
                                if(!empty($this->input->post('stproject_assign')))
                                {
                                  $hdata = array(
                                                      'pid' => $this->input->post('stproject_assign'),
                                                      'gid' => $check_Pro_Owner->gid,
                                                      'sid' => $check_Pro_Owner->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $powner->reg_id,
                                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Task Name: '.$this->input->post('stname').', Edited by '.$powner->first_name.' '.$powner->last_name.' and assigned to '.$stud->first_name.' '.$stud->last_name,
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                                }  
                              $message = 'Subtask Edited Successfully!';
                              $this->session->set_flashdata('message', $message);
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function preview_subtask_file()
  {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
          $privilege_only_view = 'no';
          if(!empty($this->session->userdata('d168_user_cor_id')))
          {
          $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getCompPackInfo)
          {
            $privilege = "no";
            if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
            {
              $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
              if($getCompRolesInfo)
              {
                if($getCompRolesInfo->privilege != 'all')
                {
                  $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                  if(in_array('view', $cus_privilege))
                  {
                    $privilege_only_view = 'yes';
                  }
                }
              }      
            }
          }
          }
            $stfile_name = $this->input->post('stfile_name');
            $stid = $this->input->post('stid');
            $getExt = pathinfo($stfile_name, PATHINFO_EXTENSION); 
            if($privilege_only_view == 'no')
            {
              $preview_download = '<a href="'.base_url().'front/download_subtaskFileAttachment/'.$stfile_name.'/'.$stid.'" class="btn btn-sm btn-d text-white">Download</a>';
            }
            else
            {
              $preview_download = '';
            }
            //echo $getExt;
            if($getExt == 'jpg' || $getExt == 'JPG' || $getExt == 'jpeg' || $getExt == 'JPEG' || $getExt == 'png' || $getExt == 'PNG' || $getExt == 'svg' || $getExt == 'SVG' || $getExt == 'webp' || $getExt == 'WEBP')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewSubtaskModalLabel">'.substr($stfile_name, strpos($stfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <img src="'.base_url().'assets/task_files/'.$stfile_name .'" height="100%" width="100%">                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'pdf' || $getExt == 'PDF' || $getExt == 'gif' || $getExt == 'GIF' || $getExt == 'txt' || $getExt == 'TXT')
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewSubtaskModalLabel">'.substr($stfile_name, strpos($stfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       <iframe src="'.base_url().'assets/task_files/'.$stfile_name .'" height="100%" width="100%"></iframe>                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'mp4' || $getExt == 'MP4' || $getExt == 'mov' || $getExt == 'MOV' || $getExt == 'webm' || $getExt == 'WEBM' || $getExt == 'mkv'  || $getExt == 'MKV')
            {
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewSubtaskModalLabel">'.substr($stfile_name, strpos($stfile_name, '_') + 1).'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                      <video height="100%" width="100%" controls autoplay>
                        <source src="'.base_url().'assets/task_files/'.$stfile_name .'">
                      </video>                            
                  </div>
                  <div class="modal-footer">
                      '.$preview_download.'
                  </div>';
            }
            elseif($getExt == 'csv' || $getExt == 'CSV')
            {
              $url = base_url().'assets/task_files/'.$stfile_name;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewSubtaskModalLabel'>".substr($stfile_name, strpos($stfile_name, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://docs.google.com/viewer?embedded=true&url=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                      ".$preview_download."
                  </div>";
            }
            else
            {
              $url = base_url().'assets/task_files/'.$stfile_name;
              echo "<div class='modal-header'>
                    <h5 class='modal-title mt-0' id='previewSubtaskModalLabel'>".substr($stfile_name, strpos($stfile_name, "_") + 1)."</h5>
                    <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                  </div>
                  <div class='modal-body' style='height:400px'>
                      <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                  </div>
                  <div class='modal-footer'>
                     ".$preview_download."
                  </div>";
            }          
        } 
        else 
        {
            redirect(base_url('login'));
        }
  }

  public function download_subtaskFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $stfile_name = $this->uri->segment(3);
      $stid = $this->uri->segment(4);
      $stdetail = $this->Front_model->getSubtaskById($stid);      
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($stdetail->stproject_assign != 0)
      {
          $hdata = array(
                                    'pid' => $stdetail->stproject_assign,
                                    'gid' => $stdetail->gid,
                                    'sid' => $stdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($stfile_name), strpos(trim($stfile_name), '_') + 1).' File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                    'subtask_id' =>$stdetail->stid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
      }
      $file = 'assets/task_files/'.$stfile_name;
      //print_r($file);
      //force download
      force_download($file,NULL);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_stfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stfile_name = $this->input->post('stfile_name');
    $stid = $this->input->post('stid');
    $stdetail = $this->Front_model->getSubtaskById($stid);  
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($stdetail->stproject_assign != 0)
    {
      $hdata = array(
                                    'pid' => $stdetail->stproject_assign,
                                    'gid' => $stdetail->gid,
                                    'sid' => $stdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  substr(trim($stfile_name), strpos(trim($stfile_name), '_') + 1).' Moved To Trash By '.$powner->first_name.' '.$powner->last_name,
                                    'subtask_id' =>$stid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
    }

    $data = array(
                                    'stid' => $stid,
                                    'pid' => $stdetail->stproject_assign,
                                    'tid' => $stdetail->tid,
                                    'stfile' => $stfile_name,
                                    'stask_trash' => 'yes',
                                    'stask_trash_date' =>date("Y-m-d", strtotime("+1 month")),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_subtask_trash($data);
          
    $getAlltfile = explode(',', $stdetail->stfile);
    $count = count($getAlltfile);
    $new_tfiles = array();
    if($count > 0)
    {
      for ($i=0; $i<$count; $i++)
        {
          $get_tfile_name = $getAlltfile[$i];
          if($get_tfile_name == $stfile_name)
          {
            $get_tfile_name = "";
          }
          $new_tfiles[] = $get_tfile_name; 
        }
        //echo "<br>";
        $new = implode(',', $new_tfiles);
        //echo $new;
        //echo "<br>";
        $string_file = preg_replace("/,+/", ",", $new);
        $new_string_file = rtrim($string_file, ',');
        $final_string_file = ltrim($new_string_file, ',');
        //echo $string_file;
                  $data = array(
                                    'stfile' => $final_string_file
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewSubtask($data,$stid);
    }

      $this->session->set_flashdata('message','File Moved to Trash Successfully!');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_stfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $stfile = $this->input->post('stfile');
    $strash_id = $this->input->post('strash_id');
    $stdetail = $this->Front_model->getSubtaskById($stid); 
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $checkFileSubtaskTrash = $this->Front_model->checkFileSubtaskTrash($stid);
            if($checkFileSubtaskTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Subtask is in Trash! To Restore File please Restore Subtask!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
                if($stdetail->stproject_assign != 0)
                {
                  $hdata = array(
                                                'pid' => $stdetail->stproject_assign,
                                                'gid' => $stdetail->gid,
                                                'sid' => $stdetail->sid,
                                                'h_date' => date('Y-m-d H:i:s'),
                                                'h_resource_id' => $powner->reg_id,
                                                'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                'h_description' =>  substr(trim($stfile), strpos(trim($stfile), '_') + 1).' Restored By '.$powner->first_name.' '.$powner->last_name,
                                                'subtask_id' =>$stid
                                            );
                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                            $this->Front_model->insert_ProjectHistory($hdata);
                }

                $tfile_restore = "";
                if(!empty($stdetail->stfile))
                {
                  $exist_tfile = $stdetail->stfile;
                                  $exist_tfile_array = explode(', ', $exist_tfile);
                                  $tfile_new_array = explode(', ', $stfile);
                                  $merge_tfile = array_merge($exist_tfile_array,$tfile_new_array);
                                  $tfile_restore = implode(',',$merge_tfile); 
                }
                else
                {
                  $tfile_restore = $stfile;
                }

                $data = array(
                                                'stfile' => $tfile_restore
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->edit_NewSubtask($data,$stid);
                                            //delete file from task trash table
                                           $this->Front_model->delete_subtask_trash($strash_id); 
                  $this->session->set_flashdata('message','File Restored Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);  
            }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function stfile_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $strash_id = $this->input->post('strash_id');
    $res = $this->Front_model->check_stfile_subtask_trash($strash_id,$stid); 
    if($res)
    {
        $res2 = $this->Front_model->delete_stfile_trash($strash_id);
        if($res2 == true) 
        {
            unlink("assets/task_files/".$res->stfile);
        }
            
        $this->session->set_flashdata('message','Subtask file deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function change_subtaskStatus()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $stassignee = $this->input->post('stassignee');
    $status_but = $this->input->post('status_but');
    $res = $this->Front_model->check_subtask_assignProOwner($stid);
    if($res)
    {
      if($status_but == 'to_do')
      {
                                $data = array(
                                    'ststatus' => 'to_do',
                                    'sreview' => '',
                                    'sreview_clear'=> '',
                                    'sreview_notify'=> '',
                                    'po_sreview_clear' => '',
                                    'po_sreview_notify'=> '',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);

                                $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- To Do',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }                              
      }
      if($status_but == 'in_progress')
      {
                                $data = array(
                                    'ststatus' => 'in_progress',
                                    'sreview' => '',
                                    'sreview_clear'=> '',
                                    'sreview_notify'=> '',
                                    'po_sreview_clear' => '',
                                    'po_sreview_notify'=> '',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);

                                $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- In Progress',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
      }

      if($status_but == 'in_review')
      {
        if($res->stproject_assign != 0)
        {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
                            $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);

                                $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
          else
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
          }
          else
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
      }

      if($status_but == 'done')
      {
        if($res->stproject_assign != 0)
        {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
                            $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);

                                $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
          else
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
          }
          else
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->update_SubtaskProOwner($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);      
            }
          }
      }

                              $message = 'Status Changed Successfully!';
                              $this->session->set_flashdata('message', $message);
                              //redirect(base_url('all-tasks'));
                              redirect($_SERVER['HTTP_REFERER']);    
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function change_subtaskStatusOverviewModal()
  // {
  //   $stid = $this->input->post('stid');
  //   $stassignee = $this->input->post('stassignee');
  //   $status_but = $this->input->post('status_but');
  //   // echo "yes";
  //   // echo $stid;
  //   // echo $status_but;
  //   // die();
  //   $res = $this->Front_model->check_subtask_assign($stid);

  //   if($res)
  //   {
  //     if($status_but == 'to_do')
  //     {
  //                               $data = array(
  //                                   'ststatus' => 'to_do',
  //                                   'sreview' => '',
  //                                   'sreview_notify'=> '',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);

  //                               $data = array(
  //                                   'tstatus' => 'in_progress',
  //                                   'review' => '',
  //                                   'review_notify'=> '',
  //                                   'tstatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$res->tid);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- To Do',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);
  //           }                              
  //     }
  //     if($status_but == 'in_progress')
  //     {
  //                               $data = array(
  //                                   'ststatus' => 'in_progress',
  //                                   'sreview' => '',
  //                                   'sreview_notify'=> '',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);

  //                               $data = array(
  //                                   'tstatus' => 'in_progress',
  //                                   'review' => '',
  //                                   'review_notify'=> '',
  //                                   'tstatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$res->tid);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- In Progress',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);
  //           }
  //     }

  //     if($status_but == 'in_review')
  //     {
  //       if($res->stproject_assign != 0)
  //       {
  //         $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
  //       if($getPcreated_by->pcreated_by != $this->session->userdata('d168_id'))
  //       {
  //                           $data = array(
  //                                   'ststatus' => 'in_review',
  //                                   'sreview' => 'sent',
  //                                   'sreview_notify'=> 'sent_yes',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);

  //                               $data = array(
  //                                   'tstatus' => 'in_progress',
  //                                   'review' => '',
  //                                   'review_notify'=> '',
  //                                   'tstatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$res->tid);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done, Review:- Sent',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //         else
  //         {
  //           $data = array(
  //                                   'ststatus' => 'done',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //         }
  //         else
  //         {
  //           $data = array(
  //                                   'ststatus' => 'done',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //     }

  //     if($status_but == 'done')
  //     {
  //       if($res->stproject_assign != 0)
  //       {
  //         $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
  //       if($getPcreated_by->pcreated_by != $this->session->userdata('d168_id'))
  //       {
  //                           $data = array(
  //                                   'ststatus' => 'in_review',
  //                                   'sreview' => 'sent',
  //                                   'sreview_notify'=> 'sent_yes',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);

  //                               $data = array(
  //                                   'tstatus' => 'in_progress',
  //                                   'review' => '',
  //                                   'review_notify'=> '',
  //                                   'tstatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->edit_NewTask($data,$res->tid);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done, Review:- Sent',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //         else
  //         {
  //           $data = array(
  //                                   'ststatus' => 'done',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //         }
  //         else
  //         {
  //           $data = array(
  //                                   'ststatus' => 'done',
  //                                   'ststatus_date' => date('Y-m-d H:i:s'),
  //                               );
  //                               $data = $this->security->xss_clean($data); // xss filter
  //                               $this->Front_model->update_Subtask($data,$stid,$stassignee);
  //           if(!empty($res->stproject_assign))
  //           {
  //             $stud = $this->Front_model->getStudentById($this->input->post('stassignee'));
  //                                   $hdata = array(
  //                                                     'pid' => $res->stproject_assign,
  //                                                     'h_date' => date('Y-m-d H:i:s'),
  //                                                     'h_resource' => $stud->first_name.' '.$stud->last_name,
  //                                                     'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
  //                                                     'subtask_id' =>$stid
  //                                                 );
  //                                                 $hdata = $this->security->xss_clean($hdata); // xss filter
  //                                                 $this->Front_model->insert_ProjectHistory($hdata);      
  //           }
  //         }
  //     }

  //           $this->session->set_flashdata('message','Status Changed Successfully!');
  //           $response['status'] = TRUE;
  //           header('Content-type: application/json');
  //           echo json_encode($response);   
  //   }
  // }

  public function subtasklist_status_change()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $stassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_subtask_assign2($stid);
    if($res)
    {
      if($res->ststatus == 'to_do')
      {
        if($res->stproject_assign != 0)
        {          
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
        $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask sent for Review!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          else
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Completed Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
        }
        else
        {
          $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Completed Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
      }

      if($res->ststatus == 'in_progress')
      {
        if($res->stproject_assign != 0)
        {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
        $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask sent for Review!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          else
          {
            $data = array(
                                      'ststatus' => 'done',
                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                  );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewSubtask($data,$stid);
              if(!empty($res->stproject_assign))
              {
                $stud = $this->Front_model->getStudentById($stassignee);
                                      $hdata = array(
                                                        'pid' => $res->stproject_assign,
                                                        'gid' => $res->gid,
                                                        'sid' => $res->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $stud->reg_id,
                                                        'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                        'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                        'subtask_id' =>$stid
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
              }
              $this->session->set_flashdata('message','Subtask Completed Successfully');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
        }
        else
        {
          $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Completed Successfully');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
      }

      if($res->ststatus == 'done')
      {
        $data = array(
                                    'ststatus' => 'to_do',                                    
                                    'sreview' => '',
                                    'sreview_clear'=> '',
                                    'sreview_notify'=> '',
                                    'po_sreview_clear' => '',
                                    'po_sreview_notify'=> '',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($stassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- To Do',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to Incomplete!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtaskgrid_todo_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_subtask_assign($tid);
    if($res)
    {
            $data = array(
                                    'ststatus' => 'to_do',
                                    'sreview' => '',
                                    'sreview_clear'=> '',
                                    'sreview_notify'=> '',
                                    'po_sreview_clear' => '',
                                    'po_sreview_notify'=> '',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- To Do',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "To Do" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);          
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtaskgrid_inprogress_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_subtask_assign($tid);
    if($res)
    {
            $data = array(
                                    'ststatus' => 'in_progress',
                                    'sreview' => '',
                                    'sreview_clear'=> '',
                                    'sreview_notify'=> '',
                                    'po_sreview_clear' => '',
                                    'po_sreview_notify'=> '',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- In Progress',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "In Progress" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);          
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtaskgrid_inreview_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_subtask_assign($tid);
    if($res)
    {
      if($res->stproject_assign != 0)
      {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
            $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "In Review" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response); 
          }
          else
          {
            $data = array(
                                        'ststatus' => 'done',
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Subtask($data,$tid,$tassignee);
                if(!empty($res->stproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->stproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                          'subtask_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Subtask Status Changed to "Done" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);  
          } 
      }
      else
      {
        $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "Done" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);  
      }        
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtaskgrid_done_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('task_id');
    $tassignee = $this->session->userdata('d168_id');
    $res = $this->Front_model->check_subtask_assign($tid);
    if($res)
    {
      if($res->stproject_assign != 0)
      {
          $get_pro_createdby = "";
          $get_pro_manager = "";
          $get_portfolio_owner_id = "";

          $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
          if($getPcreated_by)
          {
              $get_pro_createdby = $getPcreated_by->pcreated_by;
              $get_pro_manager = $getPcreated_by->pmanager;
              $get_portfolio_owner_id = "";

              $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
        {
            $data = array(
                                    'ststatus' => 'in_review',
                                    'sreview' => 'sent',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Submit for Review, Review:- Sent',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "In Review" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response); 
          }
          else
          {
            $data = array(
                                        'ststatus' => 'done',
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Subtask($data,$tid,$tassignee);
                if(!empty($res->stproject_assign))
                {
                  $stud = $this->Front_model->getStudentById($tassignee);
                                        $hdata = array(
                                                          'pid' => $res->stproject_assign,
                                                          'gid' => $res->gid,
                                                          'sid' => $res->sid,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $stud->reg_id,
                                                          'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                          'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                          'subtask_id' =>$tid
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);
                }
                $this->session->set_flashdata('message','Subtask Status Changed to "Done" Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);  
          } 
      }
      else
      {
        $data = array(
                                    'ststatus' => 'done',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Subtask($data,$tid,$tassignee);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($tassignee);
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done',
                                                      'subtask_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Status Changed to "Done" Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);  
      }        
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskReview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
      echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="TaskReviewModalLabel">'.$data['stdetail']->stname.'</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/subtasks-review-modal',$data);                                       
      echo '</div>';   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function subtasks_review_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $flag = $this->input->post('flag');
    $stid = $this->input->post('stid');
    $res = $this->Front_model->get_subtask_details($stid);
      $get_pro_createdby = "";
      $get_pro_manager = "";
      $get_portfolio_owner_id = "";

      $getPcreated_by = $this->Front_model->getProjectById($res->stproject_assign);
      if($getPcreated_by)
      {
          $get_pro_createdby = $getPcreated_by->pcreated_by;
          $get_pro_manager = $getPcreated_by->pmanager;
          $get_portfolio_owner_id = "";

          $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
            if($check_Portfolio_owner_id)
            {
                $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
            }
      }

      if(($get_pro_createdby == $this->session->userdata('d168_id')) || ($get_pro_manager == $this->session->userdata('d168_id')) || ($get_portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($flag == 1)
          {
            $data = array(
                                    'ststatus' => 'done',
                                    'sreview' => 'approved',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- Done, Review:- Approved',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Approved Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          if($flag == 2)
          {
            $data = array(
                                    'ststatus' => 'in_progress',
                                    'sreview' => 'denied',
                                    'sreview_clear' => 'no',
                                    'sreview_notify'=> 'sent_yes',
                                    'po_sreview_clear' => 'no',
                                    'po_sreview_notify'=> 'sent_yes',
                                    'sreview_notdate' => date('Y-m-d H:i:s'),
                                );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewSubtask($data,$stid);

            $data = array(
                                    'tstatus' => 'in_progress',
                                    'review' => '',
                                    'review_clear'=> '',
                                    'review_notify'=> '',
                                    'po_review_clear' => '',
                                    'po_review_notify'=> '',
                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$res->tid);
            if(!empty($res->stproject_assign))
            {
              $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $hdata = array(
                                                      'pid' => $res->stproject_assign,
                                                      'gid' => $res->gid,
                                                      'sid' => $res->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $stud->reg_id,
                                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$res->stcode.', New status:- In Progress, Review:- Denied',
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Subtask Denied Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          } 
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $res = $this->Front_model->file_itcheck_subtask($stid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    
    if($res)
    {
        if($res->stproject_assign != 0)
        {
                $data = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => 'yes'
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$stid);
          $hdata = array(
                                        'pid' => $res->stproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->stcode.' Subtask Moved to Trash by '.$powner->first_name.' '.$powner->last_name,
                                        'subtask_id' =>$res->stid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
            
            $this->session->set_flashdata('message','Subtask Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        else
        {
            $data = array(
                                        'strash' => 'yes',
                                        'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => 'yes'
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$stid);
            $this->session->set_flashdata('message','Subtask Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $res = $this->Front_model->archivecheck_Donesubtask($stid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($res)
    {
                  $data = array(
                                          'subtask_archive' => 'yes',
                                          'subtask_archive_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);

                if($res->stproject_assign != 0)
                {
                    $hdata = array(
                                        'pid' => $res->stproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->stcode.' Subtask Archived by '.$powner->first_name.' '.$powner->last_name,
                                        'subtask_id' =>$res->stid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                }   

                  $this->session->set_flashdata('message','Subtask Archived Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);               
    } 
    else
    {
                $this->session->set_flashdata('al_message','Please Complete Subtask to Archive!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }   
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_subtask2($stid); 

    if($res)
    {
      if($res->stproject_assign != 0)
        {
          $checkSubtaskTaskTrash = $this->Front_model->checkSubtaskTaskTrash($res->tid);
            if($checkSubtaskTaskTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Task is in Trash! To Restore Subtask please Restore Task!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
                $data = array(
                                        'strash' => '',
                                        'strash_date' => '',
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => ''
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$stid);
              $hdata = array(
                                            'pid' => $res->stproject_assign,
                                            'gid' => $res->gid,
                                            'sid' => $res->sid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $powner->reg_id,
                                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                                            'h_description' => $res->stcode.' Subtask Restored by '.$powner->first_name.' '.$powner->last_name,
                                            'subtask_id' =>$res->stid
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Subtask Restored Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
        }
        else
        {
            $data = array(
                                        'strash' => '',
                                        'strash_date' => '',
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stsingle_trash' => ''
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$stid);
            $this->session->set_flashdata('message','Subtask Restored Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    }   
  }

  public function subtask_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $get_stid = $this->input->post('stid');
    $res = $this->Front_model->check_subtask2($get_stid); 
    if($res)
    {
        $this->Front_model->delete_task_st_trash($get_stid);
        $this->Front_model->delete_subtask($get_stid);
      
        $this->session->set_flashdata('message','Subtask deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
    }
    }
    else
    {
      redirect(base_url('login'));
    }   
  }

  public function unarchived_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_subtask_archive($stid); 
    if($res)
    {
      if($res->stproject_assign != 0)
        {
          $task_del = $this->Front_model->getProjTaskById($res->tid);
          $file_it = '';
          $file_it_date = '';
          if($task_del){
            if($task_del->task_file_it == "yes"){
              $file_it = 'yes';
              $file_it_date = $task_del->task_file_it_date;
            }
          }
          $checkSubtaskTaskArchive = $this->Front_model->checkSubtaskTaskArchive($res->tid);
            if($checkSubtaskTaskArchive > 0)
            {
                 $this->session->set_flashdata('al_message','Task is Archived! To Reopen Subtask please Reopen Task!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            } 
            else
            {
                $data = array(
                                          'subtask_archive' => '',
                                          'subtask_archive_date' => '',
                                          'subtask_file_it' => $file_it,
                                          'subtask_file_it_date' => $file_it,
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);

                $hdata = array(
                                        'pid' => $res->stproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->stcode.' Subtask Reopened by '.$powner->first_name.' '.$powner->last_name,
                                        'subtask_id' =>$res->stid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                
                //$this->session->set_flashdata('message','Subtask Reopened Successfully!');
                $link = anchor(base_url('subtasks-overview/'.$stid), 'View Reopened Subtask!');
                $message = 'Subtask Reopened Successfully!' .' '. $link;
                $this->session->set_flashdata('message',$message);
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
        }
        else
        {
            $data = array(
                                          'subtask_archive' => '',
                                          'subtask_archive_date' => '',
                                          'subtask_file_it' => '',
                                          'subtask_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);
            
            //$this->session->set_flashdata('message','Subtask Reopened Successfully!');
            $link = anchor(base_url('subtasks-overview/'.$stid), 'View Reopened Subtask!');
            $message = 'Subtask Reopened Successfully!' .' '. $link;
            $this->session->set_flashdata('message',$message);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_TaskToClear($id);
    if($check)
    {
      if($check->tnotify_clear == 'no')
      {
        $data = array(
                                    'tnotify_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewTask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_SubtaskToClear($id);
    if($check)
    {
      if($check->stnotify_clear == 'no')
      {
        $data = array(
                                    'stnotify_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewSubtask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function ProjectFileNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $pfile_detail = $this->Front_model->pfile_detail($id);
    if($pfile_detail)
    {
      $pdetail = $this->Front_model->getProjectById($pfile_detail->pid);
      if($pdetail)
      {
        if($pdetail->pcreated_by == $this->session->userdata('d168_id'))
        {
          $p_files = explode(',', $pfile_detail->pfnotify_clear); 
          $index = array_search($this->session->userdata('d168_id'),$p_files);
                      if($index !== FALSE){
                          unset($p_files[$index]);
                      }
                      $final_mem = implode(',', $p_files); 
                      $data2 = array(
                                      'pfnotify_clear' => $final_mem,
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files_by_pfileId($data2,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);  
        }
        else
        {
          $p_files = explode(',', $pfile_detail->pfnotify_clear); 
          $index = array_search($this->session->userdata('d168_id'),$p_files);
                      if($index !== FALSE){
                          unset($p_files[$index]);
                      }
                      $final_mem = implode(',', $p_files); 
                      $data2 = array(
                                      'pfnotify_clear' => $final_mem,
                                                        );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files_by_pfileId($data2,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);  
        }
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskFileNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('id');
    $tdetail = $this->Front_model->getTasksDetail($tid);
      if($tdetail)
      {        
            $t_files = explode(',', $tdetail->tfnotify_clear); 
            $all_new_tfile = explode(',', $tdetail->new_file);
            $count_new_tfile = count($all_new_tfile);
            $index = array_search($this->session->userdata('d168_id'),$t_files);
                        if($index !== FALSE){
                            unset($t_files[$index]);
                        }
                        $final_mem = implode(',', $t_files); 
                        $data = array(
                                        'tfnotify_clear' => $final_mem,
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);          
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskFileNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('id');
    $tdetail = $this->Front_model->getSubtasksDetail($stid);
      if($tdetail)
      {        
            $t_files = explode(',', $tdetail->stfnotify_clear); 
            $all_new_tfile = explode(',', $tdetail->snew_file);
            $count_new_tfile = count($all_new_tfile);
            $index = array_search($this->session->userdata('d168_id'),$t_files);
                        if($index !== FALSE){
                            unset($t_files[$index]);
                        }
                        $final_mem = implode(',', $t_files); 
                        $data = array(
                                        'stfnotify_clear' => $final_mem,
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewSubtask($data,$stid);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);       
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function TaskReviewNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_TaskToClear($id);
    if($check)
    {
      if($check->review_clear == 'no')
      {
        $data = array(
                                    'review_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewTask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskReviewNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_SubtaskToClear($id);
    if($check)
    {
      if($check->sreview_clear == 'no')
      {
        $data = array(
                                    'sreview_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewSubtask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function PendingRequestNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_ProjectMToClear($id);
    if($check)
    {
      if($check->sent_notify_clear == 'no')
      {
        $data = array(
                                    'sent_notify_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_project_members($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function GoalPendingRequestNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_GoalMToClear($id);
    if($check)
    {
      $data = array(
                                    'sent_notify_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_goals_members($data,$id);
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function OverdueTaskNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_TaskToClear($id);
    if($check)
    {
      if($check->tdue_date_clear == 'no')
      {
        $data = array(
                                    'tdue_date_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewTask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function OverdueSubtaskNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_SubtaskToClear($id);
    if($check)
    {
      if($check->stdue_date_clear == 'no')
      {
        $data = array(
                                    'stdue_date_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewSubtask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function ProjectCommentNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $getProjectComments = $this->Front_model->getProjectComments($id);
    if($getProjectComments)
    {
      foreach($getProjectComments as $pComment)
      {
          $p_comments = explode(',', $pComment->c_notify_clear); 
          $index = array_search($this->session->userdata('d168_id'),$p_comments);
                      if($index !== FALSE){
                          unset($p_comments[$index]);
                      }
                      $final_mem = implode(',', $p_comments); 
                      $data = array(
                                      'c_notify_clear' => $final_mem,
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->update_CommentbyCid($data,$pComment->cid);
      }   
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);         
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function AllNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {

    //New note notification    
    $get_newNotebySessID = $this->Front_model->get_notefilebySessID();
    
    if($get_newNotebySessID)
    {
      foreach($get_newNotebySessID as $nnt)
      {
        $id0 = $nnt->nm_id;
        $data0 = array(
                'status_notify_clear' => 'yes',
                'sent_notify_clear' => 'yes',
            );
        $data0 = $this->security->xss_clean($data0); // xss filter
        $this->Front_model->updateNoteMem($data0,$id0);
      }
    }

    //New task notification
    $get_newTaskbySessID = $this->Front_model->get_newTaskbySessID();
      if($get_newTaskbySessID)
      {
        foreach($get_newTaskbySessID as $gnt)
        {
          $id1 = $gnt->tid;
          $data1 = array(
                                    'tnotify_clear' => 'yes',
                                );
          $data1 = $this->security->xss_clean($data1); // xss filter
          $this->Front_model->edit_NewTask($data1,$id1);
        }
      }
    //New subtask notification
    $get_newSubtaskbySessID = $this->Front_model->get_newSubtaskbySessID();
      if($get_newSubtaskbySessID)
      {
        foreach($get_newSubtaskbySessID as $gns)
        {
          $id2 = $gns->stid;
          $data2 = array(
                                    'stnotify_clear' => 'yes',
                                );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->edit_NewSubtask($data2,$id2);
        }
      }
    //Project File notification
    $get_projfilebySessID = $this->Front_model->get_projfilebySessID();
      if($get_projfilebySessID)
      {
        foreach($get_projfilebySessID as $gpf)
        {
          $id3 = $gpf->pfile_id;
          $p_files = explode(',', $gpf->pfnotify_clear); 
          $index = array_search($this->session->userdata('d168_id'),$p_files);
                      if($index !== FALSE){
                          unset($p_files[$index]);
                      }
                      $final_mem = implode(',', $p_files); 
                      $data3 = array(
                                      'pfnotify_clear' => $final_mem,
                                                        );
                      $data3 = $this->security->xss_clean($data3); // xss filter
                      $this->Front_model->edit_project_files_by_pfileId($data3,$id3);
        }
      }
    //Task File notification
    $get_taskfilebySessID = $this->Front_model->get_taskfilebySessID();
      if($get_taskfilebySessID)
      {
        foreach($get_taskfilebySessID as $gtf)
        {
          $id4 = $gtf->tid;
          $t_files = explode(',', $gtf->tfnotify_clear); 
          $all_new_tfile = explode(',', $gtf->new_file);
          $count_new_tfile = count($all_new_tfile);
          $index = array_search($this->session->userdata('d168_id'),$t_files);
                          if($index !== FALSE){
                              unset($t_files[$index]);
                          }
                          $final_mem = implode(',', $t_files); 
                          $data4 = array(
                                          'tfnotify_clear' => $final_mem,
                                  );
                          $data4 = $this->security->xss_clean($data4); // xss filter
                          $this->Front_model->edit_NewTask($data4,$id4);
        }
      }
    //Subtask File notification
    $get_subtaskfilebySessID = $this->Front_model->get_subtaskfilebySessID();
      if($get_subtaskfilebySessID)
      {
        foreach($get_subtaskfilebySessID as $gsf)
        {
          $id5 = $gsf->stid;
          $t_files = explode(',', $gsf->stfnotify_clear); 
          $all_new_tfile = explode(',', $gsf->snew_file);
          $count_new_tfile = count($all_new_tfile);
          $index = array_search($this->session->userdata('d168_id'),$t_files);
                        if($index !== FALSE){
                            unset($t_files[$index]);
                        }
                        $final_mem = implode(',', $t_files); 
                        $data5 = array(
                                        'stfnotify_clear' => $final_mem,
                                );
                        $data5 = $this->security->xss_clean($data5); // xss filter
                        $this->Front_model->edit_NewSubtask($data5,$id5);
        }
      }
    //Task Review Notification
    $get_taskreviewbySessID = $this->Front_model->get_taskreviewbySessID();
      if($get_taskreviewbySessID)
      {
        foreach($get_taskreviewbySessID as $gtr)
        {
          $id6 = $gtr->tid;
          $data6 = array(
                                    'review_clear' => 'yes',
                                );
          $data6 = $this->security->xss_clean($data6); // xss filter
          $this->Front_model->edit_NewTask($data6,$id6);
        }
      }
    //Subtask Review Notification
    $get_subtaskreviewbySessID = $this->Front_model->get_subtaskreviewbySessID();
      if($get_subtaskreviewbySessID)
      {
        foreach($get_subtaskreviewbySessID as $grs)
        {
          $id7 = $grs->stid;
          $data7 = array(
                                    'sreview_clear' => 'yes',
                                );
          $data7 = $this->security->xss_clean($data7); // xss filter
          $this->Front_model->edit_NewSubtask($data7,$id7);
        }
      }
    //Pending Project Request notification
    $get_pendingprojbySessID = $this->Front_model->get_pendingprojbySessID();
      if($get_pendingprojbySessID)
      {
        foreach($get_pendingprojbySessID as $gpp)
        {
          $id8 = $gpp->pid;
          $data8 = array(
                                    'sent_notify_clear' => 'yes',
                                );
          $data8 = $this->security->xss_clean($data8); // xss filter
          $this->Front_model->edit_project_members($data8,$id8);
        }
      }
    $currentDate = date("Y-m-d");
    //Overdue Task Notification
    $get_oduetaskbySessID = $this->Front_model->get_oduetaskbySessID($currentDate);
      if($get_oduetaskbySessID)
      {
        foreach($get_oduetaskbySessID as $got)
        {
          $id9 = $got->tid;
          $data9 = array(
                                    'tdue_date_clear' => 'yes',
                                );
          $data9 = $this->security->xss_clean($data9); // xss filter
          $this->Front_model->edit_NewTask($data9,$id9);
        }
      }
    //Overdue Subtask Notification
    $get_oduesubtaskbySessID = $this->Front_model->get_oduesubtaskbySessID($currentDate);
      if($get_oduesubtaskbySessID)
      {
        foreach($get_oduesubtaskbySessID as $gos)
        {
          $id10 = $gos->stid;
          $data10 = array(
                                    'stdue_date_clear' => 'yes',
                                );
          $data10 = $this->security->xss_clean($data10); // xss filter
          $this->Front_model->edit_NewSubtask($data10,$id10);
        }
      }
      //Planned Content Notification
      $get_contentplanningbySessID = $this->Front_model->get_contentplanningbySessID();
        if($get_contentplanningbySessID)
        {
          foreach($get_contentplanningbySessID as $gcp)
          {
            $pro_id = $gcp->pc_project_assign;
            $pcn_allAssigneesByPID = $this->Front_model->pcn_allAssigneesByPID($pro_id);
            if($pcn_allAssigneesByPID)
            {
              foreach($pcn_allAssigneesByPID as $pcn)
                {
                    $pcn_assignee = explode(',', $pcn->pc_notify_clear);
                    $pcn_assignee_cnt = count($pcn_assignee);
                    if($pcn_assignee_cnt > 0)
                    {
                      for ($rpcn_i=0; $rpcn_i<$pcn_assignee_cnt; $rpcn_i++)
                      {
                        $index = array_search($this->session->userdata('d168_id'),$pcn_assignee);
                          if($index !== FALSE){
                              unset($pcn_assignee[$index]);
                          }
                      }
                    }
                      $final_mem = implode(',', $pcn_assignee); 
                      $data = array(
                                      'pc_notify_clear' => $final_mem,
                                                        );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_Content($data,$pcn->pc_id);
                }
            }
          }
        }
        //Task Arrive for Review Notification
        $get_taskarrivereviewbySessID = $this->Front_model->get_taskarrivereviewbySessID();
          if($get_taskarrivereviewbySessID)
          {
            foreach($get_taskarrivereviewbySessID as $gtar)
            {
              $id11 = $gtar->tid;
              $data11 = array(
                                        'po_review_clear' => 'yes',
                                    );
              $data11 = $this->security->xss_clean($data11); // xss filter
              $this->Front_model->edit_NewTask($data11,$id11);
            }
          }
        //Subtask Arrive for Review Notification
        $get_subtaskarrivereviewbySessID = $this->Front_model->get_subtaskarrivereviewbySessID();
          if($get_subtaskarrivereviewbySessID)
          {
            foreach($get_subtaskarrivereviewbySessID as $gars)
            {
              $id12 = $gars->stid;
              $data12 = array(
                                        'po_sreview_clear' => 'yes',
                                    );
              $data12 = $this->security->xss_clean($data12); // xss filter
              $this->Front_model->edit_NewSubtask($data12,$id12);
            }
          }
        //Portfolio Request Accepted Notification
        $check_portfolio_accepted_notify_clear = $this->Front_model->check_portfolio_accepted_notify_clear();
          if($check_portfolio_accepted_notify_clear)
          {
            foreach($check_portfolio_accepted_notify_clear as $gpars)
            {
              $id13 = $gpars->pim_id;
              $data13 = array(
                                    'status_notify_clear' => 'yes',
                                );
              $data13 = $this->security->xss_clean($data13); // xss filter
              $this->Front_model->update_PortfolioMember($data13,$id13);
            }
          }
        //Project Request Accepted Notification
        $check_project_accepted_notify_clear = $this->Front_model->check_project_accepted_notify_clear();
          if($check_project_accepted_notify_clear)
          {
            foreach($check_project_accepted_notify_clear as $gprars)
            {
              $id14 = $gprars->pm_id;
              $data14 = array(
                                    'status_notify_clear' => 'yes',
                                );
              $data14 = $this->security->xss_clean($data14); // xss filter
              $this->Front_model->edit_project_members_notify($data14,$id14);
            }
          }
        //Project Invite Request Accepted Notification
        $check_project_invite_accepted_notify_clear = $this->Front_model->check_project_invite_accepted_notify_clear();
          if($check_project_invite_accepted_notify_clear)
          {
            foreach($check_project_invite_accepted_notify_clear as $gpirars)
            {
              $id15 = $gpirars->im_id;
              $data15 = array(
                                    'status_notify_clear' => 'yes',
                                );
              $data15 = $this->security->xss_clean($data15); // xss filter
              $this->Front_model->edit_project_invite_members_notify($data15,$id15);
            }
          }
          //Project Comment notification
          $get_projectcommentbySessID = $this->Front_model->get_projectcommentbySessID();
            if($get_projectcommentbySessID)
            {
              foreach($get_projectcommentbySessID as $gcf)
              {
                $id16 = $gcf->cid;
                $p_com = explode(',', $gcf->c_notify_clear);
                $index = array_search($this->session->userdata('d168_id'),$p_com);
                              if($index !== FALSE){
                                  unset($p_com[$index]);
                              }
                              $final_mem = implode(',', $p_com); 
                              $data16 = array(
                                              'c_notify_clear' => $final_mem,
                                      );
                              $data16 = $this->security->xss_clean($data16); // xss filter
                              $this->Front_model->update_CommentbyCid($data16,$id16);
              }
            }
          //Project Membership Request Notification
          $check_project_request_member_notify_clear = $this->Front_model->check_project_request_member_notify_clear();
            if($check_project_request_member_notify_clear)
            {
              foreach($check_project_request_member_notify_clear as $gprmnc)
              {
                $id17 = $gprmnc->req_id;
                $data17 = array(
                                'mreq_notify' => 'seen',
                                'mreq_notify_clear' => 'yes',
                                  );
                $data17 = $this->security->xss_clean($data17); // xss filter
                $this->Front_model->edit_project_membership_req_notify($data17,$id17);
              }
            }
            //meeting member request notification
            $getMeetingInvites_inApp_notify_clear = $this->Front_model->getMeetingInvites_inApp_notify_clear();
            if($getMeetingInvites_inApp_notify_clear)
            {
              $member = $this->session->userdata('d168_id');
              // print_r($getMeetingInvites_inApp_notify_clear);
              foreach($getMeetingInvites_inApp_notify_clear as $gmina)
              {
                $unique_key = $gmina->event_unique_key;
                $data18 = array(
                              'm_notify_clear' => 'yes',
                                );
                $data18 = $this->security->xss_clean($data18); // xss filter
                $res = $this->Front_model->update_meeting_invites($data18,$member,$unique_key);
                // echo 'yes';
                // print_r($res);
              }
            }
            //Pending Goal Request notification
            $get_pendinggoalbySessID = $this->Front_model->get_pendinggoalbySessID();
              if($get_pendinggoalbySessID)
              {
                foreach($get_pendinggoalbySessID as $gppm)
                {
                  $gid = $gppm->gid;
                  $gdata = array(
                                            'sent_notify_clear' => 'yes',
                                        );
                  $gdata = $this->security->xss_clean($gdata); // xss filter
                  $this->Front_model->edit_goals_members($gdata,$gid);
                }
              }

              $file_preview_permission_notify_clear = $this->Front_model->file_preview_permission_notify_clear();
              if($file_preview_permission_notify_clear)
              {
                $privilege_only_view = 'no';
                if(!empty($this->session->userdata('d168_user_cor_id')))
                {
                $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
                if($getCompPackInfo)
                {
                  $privilege = "no";
                  if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
                  {
                    $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
                    if($getCompRolesInfo)
                    {
                      if($getCompRolesInfo->privilege != 'all')
                      {
                        $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                        if(in_array('view', $cus_privilege))
                        {
                          $privilege_only_view = 'yes';
                        }
                      }
                    }      
                  }
                }
                }
                if($privilege_only_view == 'no')
                {
                  foreach($file_preview_permission_notify_clear as $fppnc)
                  {
                    $getEmailID = $this->Front_model->getStudentById($fppnc->req_by);
                    $getProject = $this->Front_model->getProjectDetailID($fppnc->pid);
                    if(($getEmailID) && ($getProject))
                    {
                      $fpid = $fppnc->fpid;
                      $fpdata2 = array(
                                        'req_notify_clear' => 'yes',
                                          );
                      $fpdata2 = $this->security->xss_clean($fpdata2); // xss filter
                      $this->Front_model->update_file_preview_access_req($fpdata2,$fpid);
                    }
                  }
                }                                
              }

              $file_preview_permission_resp_notify_clear = $this->Front_model->file_preview_permission_resp_notify_clear();
              if($file_preview_permission_resp_notify_clear)
              {
                foreach($file_preview_permission_resp_notify_clear as $fpprnc)
                {
                  $getProject = $this->Front_model->getProjectDetailID($fpprnc->pid);
                  if($getProject)
                  {
                    $checkif_pmem_ex = $this->Front_model->check_pro_member_exists($fpprnc->pid,$this->session->userdata('d168_id'));
                    if($checkif_pmem_ex)
                    {
                      if($checkif_pmem_ex->status == 'accepted')
                      {
                        $fpid21 = $fpprnc->fpid;
                        $fpdata21 = array(
                                          'res_notify_clear' => 'yes',
                                            );
                        $fpdata21 = $this->security->xss_clean($fpdata21); // xss filter
                        $this->Front_model->update_file_preview_access_req($fpdata21,$fpid21);
                      }                                    
                    }                                  
                  }
                }                               
              }
              $getApproveExpertNotify_clear = $this->Front_model->getApproveExpertNotify_clear(); 
              if($getApproveExpertNotify_clear) 
              { 
                foreach($getApproveExpertNotify_clear as $gaec) 
                { 
                  $id17 = $gaec->reg_id;  
                  $data17 = array(  
                                            'call_notify_clear' => 'yes', 
                                        );  
                  $data17 = $this->security->xss_clean($data17); // xss filter  
                  $this->Front_model->updateRegistration($data17,$id17);  
                } 
              }              

            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function PlannedContentNotification_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $pdetail = $this->Front_model->getProjectById($pid);
      $pmember = $this->Front_model->Check_port_tm($this->session->userdata('d168_id'),$pid);
      $pcn_allAssigneesByPID = $this->Front_model->pcn_allAssigneesByPID($pid);
      if($pdetail)
      {
        if($pdetail->pcreated_by == $this->session->userdata('d168_id'))
        {
            if($pcn_allAssigneesByPID)
            {
              foreach($pcn_allAssigneesByPID as $pcn)
                {
                    $pcn_assignee = explode(',', $pcn->pc_notify);
                    $pcn_assignee_cnt = count($pcn_assignee);
                    if($pcn_assignee_cnt > 0)
                    {
                      for ($rpcn_i=0; $rpcn_i<$pcn_assignee_cnt; $rpcn_i++)
                      {
                        $index = array_search($this->session->userdata('d168_id'),$pcn_assignee);
                          if($index !== FALSE){
                              unset($pcn_assignee[$index]);
                          }
                      }
                    }
                      $final_mem = implode(',', $pcn_assignee); 
                      $data = array(
                                      'pc_notify' => $final_mem,
                                      'pc_notify_clear' => $final_mem,
                                                        );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_Content($data,$pcn->pc_id);
                } 
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewFileNotificationModalLabel">'.$pdetail->pname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('projects-overview/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table project-list-table table-nowrap align-middle table-borderless m-3">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 100px">Platform</th>
                                    <th scope="col">Assignee For (Open Project For More Detail)</th>
                                </tr>
                            </thead>
                            <tbody>';
                              foreach($pcn_allAssigneesByPID as $pcn)
                                    {
                                      $pcn_assignee = explode(',', $pcn->pc_notify);
                                        if(in_array($this->session->userdata('d168_id'), $pcn_assignee))
                                        {
                                    echo '
                                      <tr>
                                          <td>';
                                          if($pcn->platform == 'twitter')
                                          {
                                          ?>
                                          <i class="fab fa-twitter h2 m-1 text-d" title="Twitter"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'facebook')
                                          { 
                                          ?>                 
                                          <i class="fab fa-facebook h2 m-1 text-d" title="Facebook"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'instagram')
                                          {
                                          ?>
                                          <i class="fab fa-instagram h2 m-1 text-d" title="Instagram"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'linkedin')
                                          {
                                          ?>
                                          <i class="fab fa-linkedin h2 m-1 text-d" title="LinkedIn"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'google-my-business')
                                          {
                                          ?>
                                          <i class="mdi mdi-google-my-business h2 m-1 text-d" title="Google My Business"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'pinterest')
                                          {
                                          ?>
                                          <i class="fab fa-pinterest h2 m-1 text-d" title="Pinterest"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'youtube')
                                          {
                                          ?>
                                          <i class="fab fa-youtube h2 m-1 text-d" title="YouTube"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'blogger')
                                          {
                                          ?>
                                          <i class="fab fa-blogger h2 m-1 text-d" title="Blog"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'tiktok')
                                          {
                                          ?>
                                          <i class="fab fa-tiktok h2 m-1 text-d" title="TikTok"></i> </label>
                                          <?php
                                          }
                                    echo '</td>
                                          <td>
                                          <span style="display:flex;">';
                                          if($pcn->written_content_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Written Content</span></h5>';
                                          }
                                          if($pcn->pc_file_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Media Files</span></h5>';
                                          } 
                                          if($pcn->submit_to_approval == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Submit for Approval</span></h5>';
                                          }
                                          if($pcn->pc_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Scheduler</span></h5>';
                                          } 
                                    echo      '<span>
                                          </td>
                                      </tr>';
                                    }
                                  }
                      echo '</tbody>
                        </table>
                    </div>
                  </div>';
            }
        }
        if($pmember)
        {
          if($pmember->status == 'accepted')
          {
            if($pcn_allAssigneesByPID)
            {
              foreach($pcn_allAssigneesByPID as $pcn)
                {
                    $pcn_assignee = explode(',', $pcn->pc_notify);
                    $pcn_assignee_cnt = count($pcn_assignee);
                    if($pcn_assignee_cnt > 0)
                    {
                      for ($rpcn_i=0; $rpcn_i<$pcn_assignee_cnt; $rpcn_i++)
                      {
                        $index = array_search($this->session->userdata('d168_id'),$pcn_assignee);
                          if($index !== FALSE){
                              unset($pcn_assignee[$index]);
                          }
                      }
                    }
                      $final_mem = implode(',', $pcn_assignee); 
                      $data = array(
                                      'pc_notify' => $final_mem,
                                      'pc_notify_clear' => $final_mem,
                                                        );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_Content($data,$pcn->pc_id);
                } 
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewFileNotificationModalLabel">'.$pdetail->pname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('projects-overview-accepted/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table project-list-table table-nowrap align-middle table-borderless m-3">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 100px">Platform</th>
                                    <th scope="col">Assignee For (Open Project For More Detail)</th>
                                </tr>
                            </thead>
                            <tbody>';
                              foreach($pcn_allAssigneesByPID as $pcn)
                                    {
                                      $pcn_assignee = explode(',', $pcn->pc_notify);
                                        if(in_array($this->session->userdata('d168_id'), $pcn_assignee))
                                        {
                                    echo '
                                      <tr>
                                          <td>';
                                          if($pcn->platform == 'twitter')
                                          {
                                          ?>
                                          <i class="fab fa-twitter h2 m-1 text-d" title="Twitter"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'facebook')
                                          { 
                                          ?>                 
                                          <i class="fab fa-facebook h2 m-1 text-d" title="Facebook"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'instagram')
                                          {
                                          ?>
                                          <i class="fab fa-instagram h2 m-1 text-d" title="Instagram"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'linkedin')
                                          {
                                          ?>
                                          <i class="fab fa-linkedin h2 m-1 text-d" title="LinkedIn"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'google-my-business')
                                          {
                                          ?>
                                          <i class="mdi mdi-google-my-business h2 m-1 text-d" title="Google My Business"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'pinterest')
                                          {
                                          ?>
                                          <i class="fab fa-pinterest h2 m-1 text-d" title="Pinterest"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'youtube')
                                          {
                                          ?>
                                          <i class="fab fa-youtube h2 m-1 text-d" title="YouTube"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'blogger')
                                          {
                                          ?>
                                          <i class="fab fa-blogger h2 m-1 text-d" title="Blog"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'tiktok')
                                          {
                                          ?>
                                          <i class="fab fa-tiktok h2 m-1 text-d" title="TikTok"></i> </label>
                                          <?php
                                          }
                                    echo '</td>
                                          <td>
                                          <span style="display:flex;">';
                                          if($pcn->written_content_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Written Content</span></h5>';
                                          }
                                          if($pcn->pc_file_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Media Files</span></h5>';
                                          } 
                                          if($pcn->submit_to_approval == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Submit for Approval</span></h5>';
                                          }
                                          if($pcn->pc_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Scheduler</span></h5>';
                                          } 
                                    echo      '<span>
                                          </td>
                                      </tr>';
                                    }
                                  }
                      echo '</tbody>
                        </table>
                    </div>
                  </div>';
            }
          }
          elseif($pmember->status == 'send' || $pmember->status == 'read_more')
          {
            if($pcn_allAssigneesByPID)
            {
              foreach($pcn_allAssigneesByPID as $pcn)
                {
                    $pcn_assignee = explode(',', $pcn->pc_notify);
                    $pcn_assignee_cnt = count($pcn_assignee);
                    if($pcn_assignee_cnt > 0)
                    {
                      for ($rpcn_i=0; $rpcn_i<$pcn_assignee_cnt; $rpcn_i++)
                      {
                        $index = array_search($this->session->userdata('d168_id'),$pcn_assignee);
                          if($index !== FALSE){
                              unset($pcn_assignee[$index]);
                          }
                      }
                    }
                      $final_mem = implode(',', $pcn_assignee); 
                      $data = array(
                                      'pc_notify' => $final_mem,
                                      'pc_notify_clear' => $final_mem,
                                                        );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_Content($data,$pcn->pc_id);
                } 
                echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewFileNotificationModalLabel">'.$pdetail->pname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('projects-overview-request/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table project-list-table table-nowrap align-middle table-borderless m-3">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 100px">Platform</th>
                                    <th scope="col">Assignee For (Accept Project For More Detail)</th>
                                </tr>
                            </thead>
                            <tbody>';
                              foreach($pcn_allAssigneesByPID as $pcn)
                                    {
                                      $pcn_assignee = explode(',', $pcn->pc_notify);
                                        if(in_array($this->session->userdata('d168_id'), $pcn_assignee))
                                        {
                                    echo '
                                      <tr>
                                          <td>';
                                          if($pcn->platform == 'twitter')
                                          {
                                          ?>
                                          <i class="fab fa-twitter h2 m-1 text-d" title="Twitter"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'facebook')
                                          { 
                                          ?>                 
                                          <i class="fab fa-facebook h2 m-1 text-d" title="Facebook"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'instagram')
                                          {
                                          ?>
                                          <i class="fab fa-instagram h2 m-1 text-d" title="Instagram"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'linkedin')
                                          {
                                          ?>
                                          <i class="fab fa-linkedin h2 m-1 text-d" title="LinkedIn"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'google-my-business')
                                          {
                                          ?>
                                          <i class="mdi mdi-google-my-business h2 m-1 text-d" title="Google My Business"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'pinterest')
                                          {
                                          ?>
                                          <i class="fab fa-pinterest h2 m-1 text-d" title="Pinterest"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'youtube')
                                          {
                                          ?>
                                          <i class="fab fa-youtube h2 m-1 text-d" title="YouTube"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'blogger')
                                          {
                                          ?>
                                          <i class="fab fa-blogger h2 m-1 text-d" title="Blog"></i></label>
                                          <?php
                                          }
                                          elseif($pcn->platform == 'tiktok')
                                          {
                                          ?>
                                          <i class="fab fa-tiktok h2 m-1 text-d" title="TikTok"></i> </label>
                                          <?php
                                          }
                                    echo '</td>
                                          <td>
                                          <span style="display:flex;">';
                                          if($pcn->written_content_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Written Content</span></h5>';
                                          }
                                          if($pcn->pc_file_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Media Files</span></h5>';
                                          } 
                                          if($pcn->submit_to_approval == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Submit for Approval</span></h5>';
                                          }
                                          if($pcn->pc_assignee == $this->session->userdata('d168_id'))
                                          {
                                            echo '<h5 class="text-dark m-1 font-size-14"><span class="badge badge-soft-dark" style="font-size: 90%;">Scheduler</span></h5>';
                                          } 
                                    echo      '<span>
                                          </td>
                                      </tr>';
                                    }
                                  }
                      echo '</tbody>
                        </table>
                    </div>
                  </div>';
            }
          }
        }
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function PlannedContentNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $pcn_allAssigneesByPID = $this->Front_model->pcn_allAssigneesByPID($id);
      if($pcn_allAssigneesByPID)
      {
        foreach($pcn_allAssigneesByPID as $pcn)
          {
              $pcn_assignee = explode(',', $pcn->pc_notify_clear);
              $pcn_assignee_cnt = count($pcn_assignee);
              if($pcn_assignee_cnt > 0)
              {
                for ($rpcn_i=0; $rpcn_i<$pcn_assignee_cnt; $rpcn_i++)
                {
                  $index = array_search($this->session->userdata('d168_id'),$pcn_assignee);
                    if($index !== FALSE){
                        unset($pcn_assignee[$index]);
                    }
                }
              }
                $final_mem = implode(',', $pcn_assignee); 
                $data = array(
                                'pc_notify_clear' => $final_mem,
                                                  );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pcn->pc_id);
          }
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function contacts_grid()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/contacts-grid');    
    }
    else
    {
      redirect(base_url('login'));
    }    
  }

  public function contacts_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      //$data['list'] = $this->Front_model->Team_Members();
      $data['Portfolio'] = $this->Front_model->IndividualPortfolio();
      $data['AcceptedProjectList'] = $this->Front_model->AcceptedProjectListIndividualPortfolio();
      $this->load->view('user/contacts-list', $data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function contacts_profile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/contacts-profile');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function pricing_packages()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(empty($this->session->userdata('d168_user_cor_id')))
      {
        $this->session->unset_userdata('d168_stripe_price_id');
        $data['getMyPack'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
        $data['getPack'] = $this->Front_model->getAllPack();
        if($data['getPack'])
        {
          $this->load->view('user/pricing-packages', $data);    
        }
      }      
    }
    else
    {      
      redirect(base_url('login'));
    }
  }

  public function free_trial_account_access()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('code','Code/Coupon ','trim|required');
         
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $check_code = $this->Front_model->check_code($this->input->post('code'));
          if(!empty($check_code))
          {
            $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
            if($getMydetail)
            {
              $my_used_co_id = explode(',', $getMydetail->used_package_coupon_id); 
              $index = array_search($check_code->co_id,$my_used_co_id);
              if($index === FALSE)
              {
                if(is_numeric($check_code->co_limit))
                {
                  $all_users_coupon = $this->Front_model->all_users_coupon();
                  $all_userscp = array();
                  $userscp_ex = array();
                  if($all_users_coupon)
                  {
                      foreach($all_users_coupon as $aucp)
                      {
                          $all_userscp[] = $aucp->used_package_coupon_id;
                      }
                  }
                  $userscp = implode(',',$all_userscp);
                  $userscp_ex = explode(',',$userscp);
                  $total_cp = "0";
                  $total_acp = "0";
                  $total_ucp = "0";
                  $currently_used = $this->Front_model->users_active_coupon($check_code->co_id);
                  if($currently_used)
                  {
                    $total_acp = $currently_used['count_rows'];
                  }
                  $total_ucp = count(array_keys($userscp_ex, $check_code->co_id));
                  $total_cp = $total_acp + $total_ucp;
                  // echo $total_cp.'<br>';
                  // echo $check_code->co_limit;
                  if($total_cp < $check_code->co_limit)
                  {
                    // echo 'yes';
                    // die();
                    $packid = $check_code->pack_id;
                    $days = $check_code->co_validity;
                    $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($days).' day'));
                        $upData = array(
                              'package_coupon_id' => $check_code->co_id,
                              'package_id' => $packid,
                              'package_start' => date('Y-m-d H:i:s'),
                              'package_expiry' => $pack_expire,
                            );
                      $upData = $this->security->xss_clean($upData); // xss filter
                      $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id')); 

                      $this->session->set_flashdata('message', 'Enjoy free trial!');
                      $response['status'] = TRUE;
                      header('Content-type: application/json');
                      echo json_encode($response);
                  }
                  else
                  {
                    $response['status'] = 'invalid_code';
                    header('Content-type: application/json');
                    echo json_encode($response); 
                  }
                }
                else
                {
                  // echo "yes";
                  // die();
                  $packid = $check_code->pack_id;
                  $days = $check_code->co_validity;
                  $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($days).' day'));
                      $upData = array(
                            'package_coupon_id' => $check_code->co_id,
                            'package_id' => $packid,
                            'package_start' => date('Y-m-d H:i:s'),
                            'package_expiry' => $pack_expire,
                          );
                    $upData = $this->security->xss_clean($upData); // xss filter
                    $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id')); 

                    $this->session->set_flashdata('message', 'Enjoy free trial!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                }                
              }
              else
              {
                $response['status'] = 'used_code';
                header('Content-type: application/json');
                echo json_encode($response);  
              }
            }            
          }
          else
          {
            $response['status'] = 'invalid_code';
            header('Content-type: application/json');
            echo json_encode($response);              
          }
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function redirect_payment_gateway() 
  { 
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      // If payment form is submitted with token
        if($this->input->post('stripeToken'))
        {
          // Retrieve stripe token, card and user info from the submitted form data
          $postData = $this->input->post();
          
          // Make payment
          $paymentID = $this->payment($postData);
          
          // If payment successful
          if($paymentID){
            redirect(base_url('dashboard'));
          }else{
            $apiError = !empty($this->stripe_lib->api_error)?' ('.$this->stripe_lib->api_error.')':'';
            $data['error_msg'] = 'Transaction has been failed!'.$apiError;
          }
        }
            $up_pack_id = $this->input->post('up_pack_id');
            // Get package data from the database
            $up_package = $this->Front_model->getPackDetail($up_pack_id);//upgarde to this pack
            $my_package = $this->Front_model->getStudentById($this->session->userdata('d168_id'));//current pack

            if (DateTime::createFromFormat('Y-m-d H:i:s', $my_package->package_expiry) !== false) 
            {
              if($my_package->package_expiry <= date('Y-m-d H:i:s'))
              {
                  $package['pack_id'] = $up_package->pack_id;
                  $package['pack_price'] = $up_package->pack_price;
                  $package['pack_name'] = $up_package->pack_name; 
                  $package['pack_validity'] = $up_package->pack_validity;
                  $package['left_amt'] = "";
              }
              else
              {
                  $check_sd = date('Y-m-d h:i:s', strtotime($my_package->package_start));
                  $p_duration = date('Y-m-d h:i:s', strtotime($check_sd. '+30 day'));
                  if(date('Y-m-d H:i:s') <= $p_duration)
                  {
                    $sd = date('Y-m-d', strtotime($my_package->package_start));                  
                    $PackStartTimeStamp = strtotime($sd);
                    //echo $PackStartTimeStamp;
                    $ChangePackTimeStamp = strtotime(date('Y-m-d'));
                    //echo $ChangePackTimeStamp;
                    $timeDiff = abs($ChangePackTimeStamp - $PackStartTimeStamp);

                    $numberDays = $timeDiff/86400;  // 86400 seconds in one day

                    // and you might want to convert to integer
                    $numberDays = intval($numberDays);
                    //echo $numberDays;
                    //die();
                    $paid = $my_package->paid_amount;
                    if($numberDays == '0')
                    {
                      $left_amt = $paid;
                    }
                    else
                    {
                      $left_amt = $paid/$numberDays;
                    }
                    $new_price = $up_package->pack_price;
                    $total_price = $new_price - $left_amt;
                    $package['pack_id'] = $up_package->pack_id;
                    $package['pack_price'] = $total_price;
                    $package['pack_name'] = $up_package->pack_name; 
                    $package['pack_validity'] = $up_package->pack_validity;
                    $package['left_amt'] = $left_amt;
                  }
                  else
                  {
                    $package['pack_id'] = $up_package->pack_id;
                    $package['pack_price'] = $up_package->pack_price;
                    $package['pack_name'] = $up_package->pack_name; 
                    $package['pack_validity'] = $up_package->pack_validity;
                    $package['left_amt'] = "";
                  }                  
              }
            }
            else
            {
                $package['pack_id'] = $up_package->pack_id;
                $package['pack_price'] = $up_package->pack_price;
                $package['pack_name'] = $up_package->pack_name; 
                $package['pack_validity'] = $up_package->pack_validity;
                $package['left_amt'] = "";
            } 
        
                
          // Pass package data to the details view
          $data['package'] = $package;
          if($package)
          {
            $data['fname'] = $my_package->first_name;
            $data['lname'] = $my_package->last_name;
            $data['email'] = $my_package->email_address;
            $this->load->view('user/payment-gateway',$data);
          }
          else
          {
            redirect(base_url('pricing-packages'));
          } 
    }
    else
    {      
      redirect(base_url('login'));
    }
  }

  function payment($postData)
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    // If post data is not empty
    if(!empty($postData)){
      // Retrieve stripe token, card and user info from the submitted form data
      $token  = $postData['stripeToken'];
      $name = $postData['name'];
      $email = $postData['email'];
      $card_number = $postData['card_number'];
      $card_number = preg_replace('/\s+/', '', $card_number);
      $card_exp_month = $postData['card_exp_month'];
      $card_exp_year = $postData['card_exp_year'];
      $card_cvc = $postData['card_cvc'];
      

      // Unique order ID
      $orderID = strtoupper(str_replace('.','',uniqid('', true)));
      
      // Add customer to stripe
      $customer = $this->stripe_lib->addCustomer($email, $token);
      
      if($customer){
        // Charge a credit or a debit card
        $charge = $this->stripe_lib->createCharge($customer->id, $postData['pack_name'], $postData['pack_price'], $orderID);
        
        if($charge){
          // Check whether the charge is successful
          if($charge['amount_refunded'] == 0 && empty($charge['failure_code']) && $charge['paid'] == 1 && $charge['captured'] == 1){
            // Transaction details 
            $transactionID = $charge['balance_transaction'];
            $paidAmount = $charge['amount'];
            $paidAmount = ($paidAmount/100);
            $paidCurrency = $charge['currency'];
            $payment_status = $charge['status'];
            
            $check_type = is_numeric(trim($postData['pack_validity']));
              if($check_type == 'true')
              {
                $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($postData['pack_validity']).' day'));
              }
              else
              {
                $pack_expire = "";
              }
            // Insert tansaction data into the database
            $upData = array(
              'package_id' => $postData['pack_id'],
              'package_start' => date('Y-m-d H:i:s'),
              'package_expiry' => $pack_expire,
              'card_number' => $card_number,
              'card_exp_month' => $card_exp_month,
              'card_exp_year' => $card_exp_year,
              'card_cvc' =>  base64_encode($card_cvc),
              'balance_amount' => $postData['left_amt'],
              'paid_amount' => $paidAmount,
              'paid_amount_currency' => $paidCurrency,
              'txn_id' => $transactionID,
              'payment_status' => $payment_status,
              'renew' => 'auto',
            );
            $upData = $this->security->xss_clean($upData); // xss filter
            $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
            
            // If the order is successful
            if($payment_status == 'succeeded'){
              $this->session->set_flashdata('message', 'Package Updated Successfully!');
              return true;
            }
          }
        }
      }
    }
    return false;
    }
    else
    {      
      redirect(base_url('login'));
    }
  }

  public function register()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));    
    }
    else
    {      
      $data['authURL'] =  $this->facebook->login_url(); 
      $this->load->view('user/register',$data);
    }
  }

  public function insert_registration() //Insert Student Details
  {
    $this->form_validation->set_rules('full_name','Full Name','trim|required|callback_alpha_space|max_length[50]',array('max_length' => 'Full Name is too long!'));
    // $this->form_validation->set_rules('first_name','First Name','trim|required|callback_alpha_space|max_length[20]',array('max_length' => 'First Name is too long!'));
    //$this->form_validation->set_rules('middle_name','Middle Name','trim|max_length[20]',array('max_length' => 'Middle Name is too long!'));
    //$this->form_validation->set_rules('last_name','Last Name','trim|required|callback_alpha_space|max_length[25]',array('max_length' => 'Last Name is too long!'));
    $this->form_validation->set_rules('email_address','Email Address','valid_email|trim|required|is_unique[registration.email_address]',array('is_unique' => 'Email Address already exists, Please Login'));
    $this->form_validation->set_rules('password','password','trim|required|min_length[5]|callback_valid_password');
    //$this->form_validation->set_rules('conf_password','Confirm Password','trim|required|required|matches[password]');
    $this->form_validation->set_rules('g-recaptcha-response','Recaptcha','required');
    $this->form_validation->set_rules('terms_privacy','Terms & Privacy Policy','trim|required');

    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();

        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
          // Add the error message for this field
          $errors[$key] = form_error($key);
        }
      
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
    }
    else
    {
      $fullname = trim($this->input->post('full_name'));
      $strArray = explode(' ',$fullname);
      $words = count($strArray);

      if($words < 2)
      {
        $response['status'] = 'fullnameErr';
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      elseif($words > 3)
      {
        $response['status'] = 'fullname2Err';
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      else
      {
        $secretKey = "6LeGztMcAAAAABo3gtAjhWfM9J2ZNVKgR5jPwDE1";
        //$secretKey = "6Ld21JMaAAAAAKdJWi_bhns9O7kP3C85sordZMdB";
        $responseKey = $this->input->post('g-recaptcha-response');
        $userIP = $this->input->server('REMOTE_ADDR');       
        $url = "https://www.google.com/recaptcha/api/siteverify?secret=$secretKey&response=$responseKey&remoteip=$userIP";
        $response1 = file_get_contents($url);
        $response1 = json_decode($response1);

        if($response1->success)
        {
          if($words == 3)
          {
            $fname = $strArray[0];
            $mname = $strArray[1];
            $lname = $strArray[2];
          }
          else
          {
            $fname = $strArray[0];
            $mname = "";
            $lname = $strArray[1];
          }        

          $email = $this->input->post('email_address');
          // MailChimp API credentials
          $apiKey = '371ac802d0f3416b8149e5deb7a39daf-us6';
          $listID = '2ecef410e7';
          
          // MailChimp API URL
          $memberID = md5(strtolower($email));
          $dataCenter = substr($apiKey,strpos($apiKey,'-')+1);
          $url = 'https://' . $dataCenter . '.api.mailchimp.com/3.0/lists/' . $listID . '/members/' . $memberID;
          
          // member information
          $json = json_encode([
              'email_address' => $email, 
              'status'        => 'subscribed',           
               'merge_fields'  => [
                  'FNAME'     => $fname,
                  'LNAME'     => $lname
              ]
          ]);
           
           //echo $json;
          // send a HTTP POST request with curl
          $ch = curl_init($url);
          curl_setopt($ch, CURLOPT_USERPWD, 'user:' . $apiKey);
          curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_TIMEOUT, 10);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
          curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
          $result = curl_exec($ch);
          $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
          curl_close($ch);
          
          //echo $result;
          //echo $httpCode;
          // store the status message based on response code
          if ($httpCode == 200) 
          {
            if($this->input->post('terms_privacy'))
            {
              $agree = 'yes';
            }

            $pacid = "";
            if(isset($_COOKIE["d168_personal_acc_id"]))
            {
                $pacid = $_COOKIE["d168_personal_acc_id"];
              $data = array(  'personal_acc_created' => 'yes' );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->updateRegistration($data,$_COOKIE["d168_personal_acc_id"]);
              delete_cookie('d168_personal_acc_id');
            }
                  $verification_code = uniqid().uniqid();
                  $data = array(  'first_name' => $fname,
                                  'middle_name' => $mname,
                                  'last_name' => $lname,
                                  'email_address' => $this->input->post('email_address'),
                                  'password' => md5($this->input->post('password')),
                                  'login_password' => $this->input->post('password'),
                                  'verification_code' => $verification_code,
                                  'verified' => 'no',
                                  'agree_terms_privacy' => $agree,
                                  'reg_date' => date('Y-m-d H:i:s'),
                                  'msg_flag' => '0',
                                  'reg_acc_status' => 'activated',
                                  'package_id' => '1',
                                  'package_start' => date('Y-m-d H:i:s'),
                                  'package_expiry' => 'free_forever',
                                  'paid_amount' => '0',
                                  'personal_acc_created' => $pacid
                               );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insertRegistration($data);
                  $inserted_id = $this->db->insert_id();
                  //check if account is recreated
                  $check_re_created_acc = $this->Front_model->check_re_created_acc($email);
                  if(!empty($check_re_created_acc))
                  {
                    $this->Front_model->delete_registration_deleted($email);
                  }
                  //check email is invited for any project
                  $check_invitation = $this->Front_model->checkInviteMemberEmail($email);
                  if($check_invitation)
                  {
                    foreach($check_invitation as $i)
                    {
                      if($i->status == 'pending')
                      {
                        $data5 = array(
                                        'status' => 'accepted',
                                        'accept_date' => date('Y-m-d H:i:s'),
                                        'status_notify' => 'yes',
                                        'status_notify_clear' => 'no',
                                      );
                        $data5 = $this->security->xss_clean($data5);
                        $this->Front_model->update_invite_request($data5,$email);

                        $get_gs_pid = $this->Front_model->getProjectById($i->pid);
                        $hdata = array(
                                                        'pid' => $i->pid,
                                                        'gid' => $get_gs_pid->gid,
                                                        'sid' => $get_gs_pid->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource' => $i->sent_to,
                                                        'h_description' => 'Invite Accepted By '.$i->sent_to,
                                                        'pinvited_id' =>$i->im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                            $pdetail = $this->Front_model->ProjectDetailPortfolio($i->pid);
                            $data21 = array(    'status' => 'accepted',
                                'working_status' => 'active',
                                'status_date' => date('Y-m-d H:i:s'),
                                'status_notify' => 'seen',
                                'status_notify_clear' => 'yes',
                                );
                            $data21 = $this->security->xss_clean($data21); // xss filter
                            $this->Front_model->update_PortfolioMemberPIM($data21,$email,$pdetail->portfolio_id);
                            $data2 = array(
                                              'pid' => $i->pid,
                                              'portfolio_id' => $pdetail->portfolio_id,
                                              'pmember' => $inserted_id,
                                              'status' => 'accepted',
                                              'pcreated_by' => $i->sent_from,
                                              'status_date' => date('Y-m-d H:i:s')
                                                                );
                                          $data2 = $this->security->xss_clean($data2); // xss filter
                                          $this->Front_model->insert_TeamMember($data2);
                                          $inserted_pm_id = $this->db->insert_id();
                                          $hdata = array(
                                                        'pid' => $i->pid,
                                                        'gid' => $get_gs_pid->gid,
                                                        'sid' => $get_gs_pid->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource' => $fname.' '.$lname,
                                                        'h_description' => 'Team Member Request Accepted By '.$fname.' '.$lname,
                                                        'pmember_id' =>$inserted_pm_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                        $data4 = array(
                              'pid' => $i->pid,
                              'powner' => $i->sent_from,
                              'pmember' => $inserted_id,
                              'edit_allow' => 'no',                            
                            );
                        $data4 = $this->security->xss_clean($data4);
                        $this->Front_model->insert_projectManagement($data4);
                        $pmanage_inserted_id = $this->db->insert_id();
                        $hdata = array(
                                      'pid' => $i->pid,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource' => $fname.' '.$lname,
                                      'h_description' => 'Edit Permission not allowed to '.$fname.' '.$lname,
                                      'pmanage_id' =>$pmanage_inserted_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
                      }
                    }                  
                  }
                  //check email is invited for any goal
                  $check_invitation_goal = $this->Front_model->checkGoalInviteMemberEmail($email);
                  if($check_invitation_goal)
                  {
                    foreach($check_invitation_goal as $ig)
                    {
                      if($ig->status == 'pending')
                      {
                        $iggm_id = $ig->igm_id;
                        $data5 = array(
                                        'status' => 'accepted',
                                        'accept_date' => date('Y-m-d H:i:s'),
                                        'status_notify' => 'yes',
                                        'status_notify_clear' => 'no',
                                      );
                        $data5 = $this->security->xss_clean($data5);
                        $this->Front_model->update_goal_invite_request($data5,$iggm_id);
                        $hdata = array(
                                          'gid' => $ig->gid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource' => $ig->sent_to,
                                          'h_description' => 'Invite Accepted By '.$ig->sent_to,
                                          'ginvited_id' =>$iggm_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                            $gdetail = $this->Front_model->GoalDetail($ig->gid);
                            $data21 = array(    'status' => 'accepted',
                                'working_status' => 'active',
                                'status_date' => date('Y-m-d H:i:s'),
                                'status_notify' => 'seen',
                                'status_notify_clear' => 'yes',
                                );
                            $data21 = $this->security->xss_clean($data21); // xss filter
                            $this->Front_model->update_PortfolioMemberPIM($data21,$email,$gdetail->portfolio_id);

                            $data2 = array(
                              'gid' => $ig->gid,
                              'portfolio_id' => $gdetail->portfolio_id,
                              'gmember' => trim($inserted_id),
                              'status' => 'accepted',
                              'gcreated_by' => $gdetail->gcreated_by,
                              'sent_date' => date('Y-m-d H:i:s'),
                              'sent_notify_clear' => 'yes',
                                                );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->insert_GoalTeamMember($data2);
                          $inserted_pm_id = $this->db->insert_id();
                          //get email id from member id
                          // $getEmailID = $this->Front_model->getEmailID($inserted_id);
                          // $P_Owner = $this->Front_model->getEmailID($gdetail->gcreated_by);
                          // $hdata = array(
                          //                   'gid' => $ig->gid,
                          //                   'h_date' => date('Y-m-d H:i:s'),
                          //                   'h_resource_id' => $P_Owner->reg_id,
                          //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                          //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          //                   'gmember_id' =>$inserted_pm_id
                          //               );
                          //               $hdata = $this->security->xss_clean($hdata); // xss filter
                          //               $this->Front_model->insert_ProjectHistory($hdata);
                      }
                    }                  
                  }
                  //check email is invited for portfolio team member
                  $check_portTM = $this->Front_model->check_portTM($email);
                  if($check_portTM)
                  {
                    foreach($check_portTM as $cptm)
                    {
                      $idata = array(    'status' => 'accepted',
                                         'working_status' => 'active',
                                         'status_date' => date('Y-m-d H:i:s'),
                                         'status_notify' => 'yes',
                                         'status_notify_clear' => 'no',
                                    );
                            $idata = $this->security->xss_clean($idata); // xss filter
                            $this->Front_model->update_InvitePortfolioMember($idata,$email);
                    }
                  }
                  //check invited for meeting
                  $check_meetm = $this->Front_model->CheckMeetingInvitedMemberEmail($email);
                  if($check_meetm)
                  {
                    foreach($check_meetm as $meetm)
                    {
                      $getEvts = $this->Front_model->getDataByUniqueId($meetm->event_unique_key);
                      if($getEvts)
                      {
                        $check_portm = $this->Front_model->checkPortfolioMemberEmail($meetm->member,$meetm->portfolio_id);
                        if($check_portm == 0)
                        {
                          $data = array(
                                                  'portfolio_id' => $meetm->portfolio_id,
                                                  'sent_to' => $meetm->member,
                                                  'sent_from' => $meetm->sent_by,
                                                  'status' => 'accepted',
                                                  'working_status' => 'active',
                                                  'status_date' => date('Y-m-d H:i:s')
                                                );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_PortfolioMember($data);
                        }

                        foreach($getEvts as $evt)
                        {
                          $data = array(
                                        'event_id' => $evt->id,
                                        'event_unique_key' => $meetm->event_unique_key,
                                        'member' => $inserted_id,
                                        'status' => 'accepted',
                                        'status_date' => date('Y-m-d H:i:s'),
                                        'created_by' => $evt->student_id,
                                        'created_type' => $evt->created_type,
                                        'm_date' => date('Y-m-d H:i:s'),
                                                          );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_events_meeting($data);
                        }

                        // $updata = array(
                        // 'status' => 'accepted',
                        // 'status_date' => date('Y-m-d H:i:s'),
                        //                   );
                        // $updata = $this->security->xss_clean($updata); // xss filter
                        // $this->Front_model->update_events_meeting_invited_members($updata,$meetm->imid);
                      }
                    }                  
                  }

                  $email_to = $this->input->post('email_address');
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Account Verification | Decision 168');
                  $this->email->message('
                   
            <!doctype html>
            <html lang="en-US">

            <head>
              <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
              <title>Account Verification</title>
              <meta name="description" content="Account Verification">
              <style type="text/css">
                  a:hover {text-decoration: underline !important;pointer:cursor !important;}
              </style>
            </head>

            <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
              <!--100% body table-->

              <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                  style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                  <tr>
                      <td>
                          <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                    <a href="'.base_url().'" title="Decision 168" target="_blank">
                                      <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                    </a>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td>
                                      <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                          style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                          <tr>
                                              <td style="padding:0 35px;">
                                                  <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Almost there...</h1>
                                                  <span
                                                      style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                  Hello '.$fname.',<br><br>
                                                      We are excited to get you going with the Decision 168 Accountability & Productivity Platform (D168). But first, you need to confirm your account.
                                                      <br><br>
                                                      Just click the button below to verify your account.
                                                  </p>
                                                  <a href="'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px; color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Verify Your Account</a>
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:center; margin:0;">
                                                      If that doesn\'t work, copy and paste the following link in your browser:
                                                      <br>
                                                      <a onMouseOver="this.style.pointer=cursor" href="'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'" style="color:#c7df19;text-decoration: none;">'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'</a>
                                                      </p>
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      We are looking forward to welcoming you to the Decision 168 community.
                                                      <br><br>
                                                      Thanks,
                                                      <br>
                                                      The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                      <br>
                                                      <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                      <br>
                                                      <a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
                                                      </p>
                                              </td>
                                          </tr>
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                      </table>
                                  </td>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                  <br>
                                      <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                          </table>
                      </td>
                  </tr>
              </table>
              <!--/100% body table-->
            </body>

            </html>' 
                        );
                  if($this->email->send())
                  {
                    $this->session->set_flashdata('message', 'Verification Link has been sent on your Registered Email Address.');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                  }else{
                    echo $this->email->print_debugger();
                  }
          }
          else
          {
                $response['status'] = 'Error_Registration';
                header('Content-type: application/json');
                exit(json_encode($response));
          } 
        }
        else
        {
          $response['errors'] = 'Verification Failed';
          $response['status'] = FALSE;
          header('Content-type: application/json');
          exit(json_encode($response));
        }
      }
    }
  }

  public function account_verify() //Verify Account
  {
    $student_id = $this->uri->segment(2);
    $verification_code = $this->uri->segment(4);
    $data['stud_del'] = $this->Front_model->getStudentById($student_id);
    if($data['stud_del']){
      if($data['stud_del']->verified != 'yes'){
        if($data['stud_del']->verification_code == $verification_code){
          $login_password = $data['stud_del']->login_password;
//           $email_to = $data['stud_del']->email_address;
//           $email_from = 'hello@decision168.com'; 
//           //$email_from = 'saramaazkhan123@gmail.com'; 
//           $email_name = 'Decision 168';

//           $this->load->library('email');  
//           $config=array(
//             'charset'=>'utf-8',
//             'wordwrap'=> TRUE,
//             'mailtype' => 'html'
//             );
//           $this->email->initialize($config);
//           $this->email->from($email_from, $email_name);
//           $this->email->set_header('Reply-To', $email_from."\r\n");
//           $this->email->set_header('Return-Path', $email_from."\r\n");
//           $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
//           $this->email->set_header('MIME-Version', '1.0' . "\r\n");
//           $this->email->to($email_to);
//           $this->email->set_mailtype('html');
//           $this->email->subject('Login Credentials | Decision 168');
//           $this->email->message('
       
// <!doctype html>
//           <html lang="en-US">

//           <head>
//             <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
//             <title>Login Credentials</title>
//             <meta name="description" content="Login Credentials">
//             <style type="text/css">
//                 a:hover {text-decoration: underline !important;pointer:cursor !important;}
//             </style>
//           </head>

//           <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
//             <!--100% body table-->

//             <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
//                 style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
//                 <tr>
//                     <td>
//                         <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
//                             <tr>
//                                 <td style="height:80px;">&nbsp;</td>
//                             </tr>
//                             <tr>
//                                 <td style="text-align:center;">
//                                   <a href="'.base_url().'" title="Decision 168" target="_blank">
//                                     <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
//                                   </a>
//                                 </td>
//                             </tr>
//                             <tr>
//                                 <td style="height:20px;">&nbsp;</td>
//                             </tr>
//                             <tr>
//                                 <td>
//                                     <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
//                                         style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
//                                         <tr>
//                                             <td style="height:40px;">&nbsp;</td>
//                                         </tr>
//                                         <tr>
//                                             <td style="padding:0 35px;">
//                                                 <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Let\'s get you going!</h1>
//                                                 <span
//                                                     style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
//                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
//                                                 Hello '.ucfirst($data['stud_del']->first_name).',<br><br>
//                                                    Welcome to the Decision 168 Accountability & Productivity Platform (D168).
//                                                     <br><br>
//                                                     Your account has been created and below are your self-generated login credentials. You can change your password after you log in.
//                                                     <br><br>
//                                                 </p>
//                                                 <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
//                                                       Username: <b style="color:#c7df19;">'.$email_to.'</b>
//                                                       <br>
//                                                       Password: <b>'.$login_password.'</b>
//                                                 </p>
//                                                     <a href="'.base_url().'"
//                                                       style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Login to your account
//                                                     </a> 
//                                                     <br><br>
//                                                     <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
//                                                     We\'re so excited to have you join the Decision 168 community.
//                                                     <br><br>
//                                                     Thanks,
//                                                     <br>
//                                                     The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
//                                                     </p>
//                                                     <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
//                                                     <br>
//                                                     <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
//                                                     <br>
//                                                     <a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
//                                                     </p>
//                                             </td>
//                                         </tr>
//                                         <tr>
//                                             <td style="height:40px;">&nbsp;</td>
//                                         </tr>
//                                     </table>
//                                 </td>
//                             <tr>
//                                 <td style="height:20px;">&nbsp;</td>
//                             </tr>
//                             <tr>
//                                 <td style="text-align:center;">
//                                 <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
//                                 <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
//                                 <br>
//                                     <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
//                                 </td>
//                             </tr>
//                             <tr>
//                                 <td style="height:80px;">&nbsp;</td>
//                             </tr>
//                         </table>
//                     </td>
//                 </tr>
//             </table>
//             <!--/100% body table-->
//           </body>

//           </html>' 
//             );
          
            $cus_id = "";
            if(empty($data['stud_del']->stripe_cus_id))
            {
              $ocus_name = $data['stud_del']->first_name.' '.$data['stud_del']->last_name;
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
                    $customer = \Stripe\Customer::create(['name' => $ocus_name,'email' => $data['stud_del']->email_address]);
                $cus_id = $customer->id;    
            }
            elseif(!empty($data['stud_del']->stripe_cus_id))
            {
              $cus_id = $data['stud_del']->stripe_cus_id;
            }
            $data = array(  'stripe_cus_id' => $cus_id,'verified' => 'yes' );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->updateRegistration($data,$student_id);
            $this->load->view('user/account_verify',$data);

          // if($this->email->send())
          // {
          //   $cus_id = "";
          //   if(empty($data['stud_del']->stripe_cus_id))
          //   {
          //     $ocus_name = $data['stud_del']->first_name.' '.$data['stud_del']->last_name;
          //     \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
          //           $customer = \Stripe\Customer::create(['name' => $ocus_name,'email' => $data['stud_del']->email_address]);
          //       $cus_id = $customer->id;    
          //   }
          //   elseif(!empty($data['stud_del']->stripe_cus_id))
          //   {
          //     $cus_id = $data['stud_del']->stripe_cus_id;
          //   }
          //   $data = array(  'stripe_cus_id' => $cus_id,'verified' => 'yes' );
          //   $data = $this->security->xss_clean($data); // xss filter
          //   $this->Front_model->updateRegistration($data,$student_id);
          //   $this->load->view('user/account_verify',$data);
          // }else{
          //   echo $this->email->print_debugger();
          // } 
        }else{
          $this->load->view('user/account_expire',$data);
        }
      }else{
        $this->load->view('user/account_verified',$data);
      }
    }else{
      $this->load->view('user/account_expire',$data);
    }
  }

  public function login()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));    
    }
    else
    {      
      $data['authURL'] =  $this->facebook->login_url(); 
      $this->load->view('user/login',$data);
    }
  }

  public function check_login() //Check Login
  {
    $this->load->library('form_validation');
    $this->form_validation->set_rules('login_email','Email Address','required|valid_email');
    $this->form_validation->set_rules('login_password','Password','required');
      $this->form_validation->set_rules('g-recaptcha-response','Recaptcha','required');
    if ($this->form_validation->run() == FALSE)
      {
        $response['errors'] = validation_errors();
        $response['status'] = FALSE;

        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
    else
    {
      $email = $this->input->post('login_email');
      $password = $this->input->post('login_password');  
        $user = $this->Front_model->selectLogin($email);
        if($user)
        {
          $data = $this->Front_model->checkLogin($email,md5($password));
          if($data > 0)
          {           
            //$secretKey = "6LeGztMcAAAAABo3gtAjhWfM9J2ZNVKgR5jPwDE1";
            $secretKey = "6Ld21JMaAAAAAKdJWi_bhns9O7kP3C85sordZMdB";
            $responseKey = $this->input->post('g-recaptcha-response');
            $userIP = $this->input->server('REMOTE_ADDR');       
            $url = "https://www.google.com/recaptcha/api/siteverify?secret=$secretKey&response=$responseKey&remoteip=$userIP";
            $response1 = file_get_contents($url);
            $response1 = json_decode($response1);

            if($response1->success)
            {             
              if($user)
              {
                //user have corporate id
                if(!empty($user->used_corporate_id))
                {
                  $checkComp = $this->Front_model->checkCompany($user->used_corporate_id);
                  if($checkComp)
                  {
                    $checkComp = $this->Front_model->checkCompanyEmp($email,$checkComp->cc_id);
                    if($checkComp)
                    {
                      if(($user->verified == 'yes') && ($user->reg_acc_status != 'deactivated'))
                      {
                        if(!empty($this->input->post('basic_checkbox_1')))
                        {
                            setcookie("d168_email",$email,time()+ (10 * 365 * 24 * 60 * 60),'/');
                            setcookie("d168_password",$password,time()+ (10 * 365 * 24 * 60 * 60),'/');
                        }
                        else
                        {
                            setcookie("d168_email","",time() - 3600,'/');
                            setcookie("d168_password","",time() - 3600,'/');
                        } 
                        $this->session->set_userdata('d168_id',$user->reg_id); 
                        $this->session->set_userdata('d168_user_cor_id',$user->used_corporate_id); 
                        $this->session->set_userdata('d168_user_role_in_comp',$user->role_in_comp);  
                        //last login
                          $upData = array(
                                      'last_login' => date('Y-m-d H:i:s'),
                                      'inactivity_mail_days' => "",
                                      'deactive_date' => "",
                                      'delete_date' => ""
                                    );
                          $upData = $this->security->xss_clean($upData); // xss filter
                          $this->Front_model->updateRegistration($upData,$user->reg_id);

                        $this->session->set_flashdata('message', 'Successfully Logged In');
                        $response['status'] = TRUE;
                        header('Content-type: application/json');
                        echo json_encode($response);
                      }
                      elseif(($user->verified == 'no') && ($user->reg_acc_status != 'deactivated'))
                      {
                        $response['errors'] = 'Verification link has been sent on your registered email Address. Verify you account to login.';
                        $response['status'] = FALSE;
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                      else
                      {
                        $link = anchor(base_url('send-activate-account-request/'.$user->reg_id.'/1'), 'Send Request');
                        $response['reg_in_message'] = 'Inactive account to activate account send request to Admin!' .' '. $link;
                        $response['status'] = 'inactive_status';
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                    }
                    else
                    {
                      $response['status'] = 'Error_Login';
                      header('Content-type: application/json');
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $response['status'] = 'Error_Login';
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  }
                }
                else
                {              
                  if(($user->verified == 'yes') && ($user->reg_acc_status != 'deactivated'))
                  {
                    if(!empty($this->input->post('basic_checkbox_1')))
                    {
                        setcookie("d168_email",$email,time()+ (10 * 365 * 24 * 60 * 60),'/');
                        setcookie("d168_password",$password,time()+ (10 * 365 * 24 * 60 * 60),'/');
                    }
                    else
                    {
                        setcookie("d168_email","",time() - 3600,'/');
                        setcookie("d168_password","",time() - 3600,'/');
                    } 
                    $this->session->set_userdata('d168_id',$user->reg_id); 
                    $this->session->set_userdata('d168_user_cor_id',$user->used_corporate_id); 
                    $this->session->set_userdata('d168_user_role_in_comp',$user->role_in_comp);
                    //last login
                      $upData = array(
                                  'last_login' => date('Y-m-d H:i:s'),
                                  'inactivity_mail_days' => "",
                                  'deactive_date' => "",
                                  'delete_date' => ""
                                );
                      $upData = $this->security->xss_clean($upData); // xss filter
                      $this->Front_model->updateRegistration($upData,$user->reg_id);

                    $this->session->set_flashdata('message', 'Successfully Logged In');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                  }
                  elseif(($user->verified == 'no') && ($user->reg_acc_status != 'deactivated'))
                  {
                    $response['errors'] = 'Verification link has been sent on your registered email Address. Verify you account to login.';
                    $response['status'] = FALSE;
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  }
                  else
                  {
                    $link = anchor(base_url('send-activate-account-request/'.$user->reg_id.'/1'), 'Send Request');
                    $response['reg_in_message'] = 'Inactive account to activate account send request to Admin!' .' '. $link;
                    $response['status'] = 'inactive_status';
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  } 
                }
              }
              else
              {
                  $response['errors'] = 'This Email Address is not registered.';
                  $response['status'] = FALSE;
                  header('Content-type: application/json');
                  exit(json_encode($response));
              }
            }
            else
            {
              $response['errors'] = 'Verification Failed';
              $response['status'] = FALSE;
              header('Content-type: application/json');
              exit(json_encode($response));
            }
          }
        else
        {
          $response['errors'] = 'Wrong Email Address or Password!';
          $response['status'] = FALSE;
          header('Content-type: application/json');
          exit(json_encode($response));
        }
      }
      else
      {
          $response['errors'] = 'This Email Address is not registered!';
          $response['status'] = FALSE;
          header('Content-type: application/json');
          exit(json_encode($response));
      }
    }
  }

  public function google_login() //login with google
  {  
    $clientId = '66859253710-iiv0h6h3neonorhb0hnruoote2sjtnue.apps.googleusercontent.com'; //Google client ID
    $clientSecret = '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'; //Google client secret
    $redirectURL = base_url('front/google_login');
    
    //https://curl.haxx.se/docs/caextract.html

    //Call Google API
    $gClient = new Google_Client();
    $gClient->setApplicationName('Login');
    $gClient->setClientId($clientId);
    $gClient->setClientSecret($clientSecret);
    $gClient->setRedirectUri($redirectURL);
    $google_oauthV2 = new Google_Oauth2Service($gClient);
    
    if(isset($_GET['code']))
    {
      $gClient->authenticate($_GET['code']);
      $_SESSION['token'] = $gClient->getAccessToken();
      header('Location: ' . filter_var($redirectURL, FILTER_SANITIZE_URL));
    }

    if (isset($_SESSION['token'])) 
    {
      $gClient->setAccessToken($_SESSION['token']);
    }
    
    if ($gClient->getAccessToken()) {
            $userProfile = $google_oauthV2->userinfo->get();

            // Preparing data for database insertion 
            $userData['oauth_provider'] = 'google'; 
            $userData['oauth_uid']         = $userProfile['id']; 
            $userData['first_name']     = $userProfile['given_name']; 
            $userData['last_name']         = $userProfile['family_name']; 
            $userData['email']             = $userProfile['email']; 
            $userData['gender']         = !empty($userProfile['gender'])?$userProfile['gender']:''; 
            $userData['locale']         = !empty($userProfile['locale'])?$userProfile['locale']:''; 
            $userData['picture']         = !empty($userProfile['picture'])?$userProfile['picture']:''; 

            $get_del = $this->Front_model->selectLogin($userData['email']);
            if($get_del)
            {
              if($get_del->reg_acc_status != 'deactivated')
              { 
                //user have corporate id
                if(!empty($get_del->used_corporate_id))
                {
                  $checkComp = $this->Front_model->checkCompany($get_del->used_corporate_id);
                  if($checkComp)
                  {
                    $checkComp = $this->Front_model->checkCompanyEmp($email,$checkComp->cc_id);
                    if($checkComp)
                    {
                      if(($get_del->verified == 'yes') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $this->session->set_userdata('d168_id',$get_del->reg_id); 
                        $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                        $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                        //last login
                        $upData = array(
                                    'last_login' => date('Y-m-d H:i:s'),
                                    'inactivity_mail_days' => "",
                                    'deactive_date' => "",
                                    'delete_date' => ""
                                  );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                         
                        $this->session->set_flashdata('message', 'Successfully Logged In');
                        redirect(base_url('dashboard'));
                      }
                      elseif(($get_del->verified == 'no') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $response['errors'] = 'Verification link has been sent on your registered email Address. Verify you account to login.';
                        $response['status'] = FALSE;
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                      else
                      {
                        $link = anchor(base_url('send-activate-account-request/'.$get_del->reg_id.'/1'), 'Send Request');
                        $response['reg_in_message'] = 'Inactive account to activate account send request to Admin!' .' '. $link;
                        $response['status'] = 'inactive_status';
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                    }
                    else
                    {
                      $response['status'] = 'Error_Login';
                      header('Content-type: application/json');
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $response['status'] = 'Error_Login';
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  }
                }
                else
                {
                  $this->session->set_userdata('d168_id',$get_del->reg_id); 
                  $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                  $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                  //last login
                      $upData = array(
                                  'last_login' => date('Y-m-d H:i:s'),
                                  'inactivity_mail_days' => "",
                                  'deactive_date' => "",
                                  'delete_date' => ""
                                );
                      $upData = $this->security->xss_clean($upData); // xss filter
                      $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                   
                  $this->session->set_flashdata('message', 'Successfully Logged In');
                  redirect(base_url('dashboard'));
                }
              }
              elseif($get_del->reg_acc_status == 'deactivated')
              {
                $data['link'] = base_url('send-activate-account-request/'.$get_del->reg_id.'/1');
                $this->load->view('user/send-activate-req-social-media',$data);
              }
            }
            else
            {
              $fname = $userData['first_name'];
              $lname = $userData['last_name'];
              $email = $userData['email'];
              // MailChimp API credentials
              $apiKey = '371ac802d0f3416b8149e5deb7a39daf-us6';
              $listID = '2ecef410e7';
              
              // MailChimp API URL
              $memberID = md5(strtolower($email));
              $dataCenter = substr($apiKey,strpos($apiKey,'-')+1);
              $url = 'https://' . $dataCenter . '.api.mailchimp.com/3.0/lists/' . $listID . '/members/' . $memberID;
              
              // member information
              $json = json_encode([
                  'email_address' => $email, 
                  'status'        => 'subscribed',           
                   'merge_fields'  => [
                      'FNAME'     => $fname,
                      'LNAME'     => $lname
                  ]
              ]);
               
               //echo $json;
              // send a HTTP POST request with curl
              $ch = curl_init($url);
              curl_setopt($ch, CURLOPT_USERPWD, 'user:' . $apiKey);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($ch, CURLOPT_TIMEOUT, 10);
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
              curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
              $result = curl_exec($ch);
              $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
              curl_close($ch);
        
        //echo $result;
        //echo $httpCode;
        // store the status message based on response code 
        if ($httpCode == 200) 
        {            
            $cus_id = "";
            $ocus_name = $userData['first_name'].' '.$userData['last_name'];
            \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
            $customer = \Stripe\Customer::create(['name' => $ocus_name,'email' => $userData['email']]);
            $cus_id = $customer->id; 

            $pacid = "";
            if(isset($_COOKIE["d168_personal_acc_id"]))
            {
                $pacid = $_COOKIE["d168_personal_acc_id"];
              $data = array(  'personal_acc_created' => 'yes' );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->updateRegistration($data,$_COOKIE["d168_personal_acc_id"]);
              delete_cookie('d168_personal_acc_id');
            }

              $data = array(  'first_name' => $userData['first_name'],
                      'last_name' => $userData['last_name'],
                      'email_address' => $userData['email'],
                      'gender' => $userData['gender'],
                      'logged_in_with' => $userData['oauth_provider'],
                      'socialmedia_id' => $userData['oauth_uid'],
                      'google_locale' => $userData['locale'],
                      'socialmedia_picture' => $userData['picture'],
                      'stripe_cus_id' => $cus_id,
                      'verified' => 'yes',
                      'agree_terms_privacy' => 'yes',
                      'reg_date' => date('Y-m-d H:i:s'),
                      'msg_flag' => '0',
                      'reg_acc_status' => 'activated',
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'paid_amount' => '0',
                      'personal_acc_created' => $pacid
                   );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertRegistration($data);
        $inserted_id = $this->db->insert_id();
        //check if account is recreated
        $check_re_created_acc = $this->Front_model->check_re_created_acc($userData['email']);
        if(!empty($check_re_created_acc))
        {
          $this->Front_model->delete_registration_deleted($userData['email']);
        }
        //check email is invited for any project
                $check_invitation = $this->Front_model->checkInviteMemberEmail($userData['email']);
                if($check_invitation)
                {
                  foreach($check_invitation as $i)
                  {
                    if($i->status == 'pending')
                    {
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_invite_request($data5,$userData['email']);

                      $get_gs_pid = $this->Front_model->getProjectById($i->pid);
                      $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $i->sent_to,
                                                      'h_description' => 'Invite Accepted By '.$i->sent_to,
                                                      'pinvited_id' =>$i->im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                          $pdetail = $this->Front_model->ProjectDetailPortfolio($i->pid);
                          $data21 = array(    'status' => 'accepted',
                                      'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$userData['email'],$pdetail->portfolio_id);
                          $data2 = array(
                                            'pid' => $i->pid,
                                            'portfolio_id' => $pdetail->portfolio_id,
                                            'pmember' => $inserted_id,
                                            'status' => 'accepted',
                                            'pcreated_by' => $i->sent_from,                                 
                                            'status_date' => date('Y-m-d H:i:s')
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $userData['first_name'].' '.$userData['last_name'],
                                                      'h_description' => 'Team Member Request Accepted By '.$userData['first_name'].' '.$userData['last_name'],
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                      $data4 = array(
                            'pid' => $i->pid,
                            'powner' => $i->sent_from,
                            'pmember' => $inserted_id,
                            'edit_allow' => 'no',                            
                          );
                      $data4 = $this->security->xss_clean($data4);
                      $this->Front_model->insert_projectManagement($data4);
                      $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $i->pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource' => $userData['first_name'].' '.$userData['last_name'],
                                    'h_description' => 'Edit Permission not allowed to '.$userData['first_name'].' '.$userData['last_name'],
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for any goal
                $check_invitation_goal = $this->Front_model->checkGoalInviteMemberEmail($userData['email']);
                if($check_invitation_goal)
                {
                  foreach($check_invitation_goal as $ig)
                  {
                    if($ig->status == 'pending')
                    {
                      $iggm_id = $ig->igm_id;
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_goal_invite_request($data5,$iggm_id);
                      $hdata = array(
                                        'gid' => $ig->gid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource' => $ig->sent_to,
                                        'h_description' => 'Invite Accepted By '.$ig->sent_to,
                                        'ginvited_id' =>$iggm_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                          $gdetail = $this->Front_model->GoalDetail($ig->gid);
                          $data21 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$userData['email'],$gdetail->portfolio_id);

                          $data2 = array(
                            'gid' => $ig->gid,
                            'portfolio_id' => $gdetail->portfolio_id,
                            'gmember' => trim($inserted_id),
                            'status' => 'accepted',
                            'gcreated_by' => $gdetail->gcreated_by,
                            'sent_date' => date('Y-m-d H:i:s'),
                            'sent_notify_clear' => 'yes',
                                              );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->insert_GoalTeamMember($data2);
                        $inserted_pm_id = $this->db->insert_id();
                        //get email id from member id
                        // $getEmailID = $this->Front_model->getEmailID($inserted_id);
                        // $P_Owner = $this->Front_model->getEmailID($gdetail->gcreated_by);
                        // $hdata = array(
                        //                   'gid' => $ig->gid,
                        //                   'h_date' => date('Y-m-d H:i:s'),
                        //                   'h_resource_id' => $P_Owner->reg_id,
                        //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                        //                   'gmember_id' =>$inserted_pm_id
                        //               );
                        //               $hdata = $this->security->xss_clean($hdata); // xss filter
                        //               $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for portfolio team member
                $check_portTM = $this->Front_model->check_portTM($userData['email']);
                if($check_portTM)
                {
                  foreach($check_portTM as $cptm)
                  {
                    $idata = array(    'status' => 'accepted',
                                       'working_status' => 'active',
                                       'status_date' => date('Y-m-d H:i:s'),
                                       'status_notify' => 'yes',
                                       'status_notify_clear' => 'no',
                                  );
                          $idata = $this->security->xss_clean($idata); // xss filter
                          $this->Front_model->update_InvitePortfolioMember($idata,$userData['email']);
                  }
                }
                //check invited for meeting
                $check_meetm = $this->Front_model->CheckMeetingInvitedMemberEmail($userData['email']);
                if($check_meetm)
                {
                  foreach($check_meetm as $meetm)
                  {
                    $getEvts = $this->Front_model->getDataByUniqueId($meetm->event_unique_key);
                    if($getEvts)
                    {
                      $check_portm = $this->Front_model->checkPortfolioMemberEmail($meetm->member,$meetm->portfolio_id);
                      if($check_portm == 0)
                      {
                        $data = array(
                                                'portfolio_id' => $meetm->portfolio_id,
                                                'sent_to' => $meetm->member,
                                                'sent_from' => $meetm->sent_by,
                                                'status' => 'accepted',
                                                'working_status' => 'active',
                                                'status_date' => date('Y-m-d H:i:s')
                                              );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_PortfolioMember($data);
                      }

                      foreach($getEvts as $evt)
                      {
                        $data = array(
                                      'event_id' => $evt->id,
                                      'event_unique_key' => $meetm->event_unique_key,
                                      'member' => $inserted_id,
                                      'status' => 'accepted',
                                      'status_date' => date('Y-m-d H:i:s'),
                                      'created_by' => $evt->student_id,
                                      'created_type' => $evt->created_type,
                                      'm_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_events_meeting($data);
                      }

                      // $updata = array(
                      // 'status' => 'accepted',
                      // 'status_date' => date('Y-m-d H:i:s'),
                      //                   );
                      // $updata = $this->security->xss_clean($updata); // xss filter
                      // $this->Front_model->update_events_meeting_invited_members($updata,$meetm->imid);
                    }
                  }                  
                }

        $this->session->set_userdata('d168_id', $inserted_id);
        $this->session->set_userdata('d168_user_cor_id',''); 
        $this->session->set_userdata('d168_user_role_in_comp','');
        //last login
                  $upData = array(
                              'last_login' => date('Y-m-d H:i:s'),
                              'inactivity_mail_days' => "",
                              'deactive_date' => "",
                              'delete_date' => ""
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$inserted_id);
        $this->session->set_flashdata('message', 'Successfully Signed Up');
        redirect(base_url('dashboard'));
              }
            }
        } 
    else 
    {
            $url = $gClient->createAuthUrl();
        header("Location: $url");
            exit;
        }
  }

  public function callback()//login with linkedin
  {
        require('./assets/linkedIn/init.php');    
        if(isset($_GET["error"]))
        {
          redirect(base_url(),'refresh');
          die();
        }
        
        if ($_GET['state'] != $_SESSION['linkedincsrf']) 
        {
    
          echo "<script>alert('Please try again to subscribe')</script>";
          redirect(base_url(),'refresh');
          die();
          
        }
    
        if(isset($_GET['code']))
        {
          $accessToken = $linkedin->getAccessToken($_GET['code']);
          if (!$accessToken) {
              redirect(base_url(),'refresh');
              die();
          }else
          {
            $profile = $linkedin->getPerson($accessToken);
            $emailId = $linkedin->getEmail($accessToken);
        
            $lid = $fname = $lname = $email = '';
            if(!empty($profile))
            {
              $lid = $profile->id;
              $fname = $profile->firstName->localized->en_US; 
              $lname = $profile->lastName->localized->en_US;
            }
            if(!empty($emailId))
            {
              $email = $emailId->elements[0]->{'handle~'}->emailAddress; 
            }
        
            $get_del = $this->Front_model->selectLogin($email);
            if($get_del)
            {
              if($get_del->reg_acc_status != 'deactivated')
              {
                //user have corporate id
                if(!empty($get_del->used_corporate_id))
                {
                  $checkComp = $this->Front_model->checkCompany($get_del->used_corporate_id);
                  if($checkComp)
                  {
                    $checkComp = $this->Front_model->checkCompanyEmp($email,$checkComp->cc_id);
                    if($checkComp)
                    {
                      if(($get_del->verified == 'yes') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $this->session->set_userdata('d168_id',$get_del->reg_id); 
                        $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                        $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                        //last login
                        $upData = array(
                                    'last_login' => date('Y-m-d H:i:s'),
                                    'inactivity_mail_days' => "",
                                    'deactive_date' => "",
                                    'delete_date' => ""
                                  );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                         
                        $this->session->set_flashdata('message', 'Successfully Logged In');
                        redirect(base_url('dashboard'));
                      }
                      elseif(($get_del->verified == 'no') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $response['errors'] = 'Verification link has been sent on your registered email Address. Verify you account to login.';
                        $response['status'] = FALSE;
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                      else
                      {
                        $link = anchor(base_url('send-activate-account-request/'.$get_del->reg_id.'/1'), 'Send Request');
                        $response['reg_in_message'] = 'Inactive account to activate account send request to Admin!' .' '. $link;
                        $response['status'] = 'inactive_status';
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                    }
                    else
                    {
                      $response['status'] = 'Error_Login';
                      header('Content-type: application/json');
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $response['status'] = 'Error_Login';
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  }
                }
                else
                {
                  $this->session->set_userdata('d168_id',$get_del->reg_id); 
                  $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                  $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                  //last login
                      $upData = array(
                                  'last_login' => date('Y-m-d H:i:s'),
                                  'inactivity_mail_days' => "",
                                  'deactive_date' => "",
                                  'delete_date' => ""
                                );
                      $upData = $this->security->xss_clean($upData); // xss filter
                      $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                   
                  $this->session->set_flashdata('message', 'Successfully Logged In');
                  redirect(base_url('dashboard'));
                }
              }
              elseif($get_del->reg_acc_status == 'deactivated')
              {
                $data['link'] = base_url('send-activate-account-request/'.$get_del->reg_id.'/1');
                $this->load->view('user/send-activate-req-social-media',$data);
              }              
            }else
            {
            // MailChimp API credentials
            $apiKey = '371ac802d0f3416b8149e5deb7a39daf-us6';
            $listID = '2ecef410e7';
            
            // MailChimp API URL
            $memberID = md5(strtolower($email));
            $dataCenter = substr($apiKey,strpos($apiKey,'-')+1);
            $url = 'https://' . $dataCenter . '.api.mailchimp.com/3.0/lists/' . $listID . '/members/' . $memberID;
            
            // member information
            $json = json_encode([
                'email_address' => $email, 
                'status'        => 'subscribed',           
                 'merge_fields'  => [
                    'FNAME'     => $fname,
                    'LNAME'     => $lname
                ]
            ]);
             
             //echo $json;
            // send a HTTP POST request with curl
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_USERPWD, 'user:' . $apiKey);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, 10);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
            $result = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            
            //echo $result;
            //echo $httpCode;
            // store the status message based on response code
            if ($httpCode == 200) 
            {   
              $cus_id = "";
              $ocus_name = $fname.' '.$lname;
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
              $customer = \Stripe\Customer::create(['name' => $ocus_name,'email' => $email]);
              $cus_id = $customer->id; 

              $pacid = "";
              if(isset($_COOKIE["d168_personal_acc_id"]))
              {
                $pacid = $_COOKIE["d168_personal_acc_id"];
                $data = array(  'personal_acc_created' => 'yes' );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateRegistration($data,$_COOKIE["d168_personal_acc_id"]);
                delete_cookie('d168_personal_acc_id');
              }

              $data = array(  'first_name' => $fname,
                      'last_name' => $lname,
                      'email_address' => $email,                      
                      'logged_in_with' => 'linkedIn',
                      'socialmedia_id' => $lid,
                      'stripe_cus_id' => $cus_id,
                      'verified' => 'yes',
                      'agree_terms_privacy' => 'yes',
                      'reg_date' => date('Y-m-d H:i:s'),
                      'msg_flag' => '0',
                      'reg_acc_status' => 'activated',
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'paid_amount' => '0',
                      'personal_acc_created' => $pacid
                   );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertRegistration($data);
        $inserted_id = $this->db->insert_id();
        //check if account is recreated
        $check_re_created_acc = $this->Front_model->check_re_created_acc($email);
        if(!empty($check_re_created_acc))
        {
          $this->Front_model->delete_registration_deleted($email);
        }
        //check email is invited for any project
                $check_invitation = $this->Front_model->checkInviteMemberEmail($email);
                if($check_invitation)
                {
                  foreach($check_invitation as $i)
                  {
                    if($i->status == 'pending')
                    {
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_invite_request($data5,$email);

                      $get_gs_pid = $this->Front_model->getProjectById($i->pid);
                      $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $i->sent_to,
                                                      'h_description' => 'Invite Accepted By '.$i->sent_to,
                                                      'pinvited_id' =>$i->im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                          $pdetail = $this->Front_model->ProjectDetailPortfolio($i->pid);
                          $data21 = array(    'status' => 'accepted',
                                      'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$email,$pdetail->portfolio_id);
                          $data2 = array(
                                            'pid' => $i->pid,
                                            'portfolio_id' => $pdetail->portfolio_id,
                                            'pmember' => $inserted_id,
                                            'status' => 'accepted',
                                            'pcreated_by' => $i->sent_from,
                                            'status_date' => date('Y-m-d H:i:s')
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $fname.' '.$lname,
                                                      'h_description' => 'Team Member Request Accepted By '.$fname.' '.$lname,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                      $data4 = array(
                            'pid' => $i->pid,
                            'powner' => $i->sent_from,
                            'pmember' => $inserted_id,
                            'edit_allow' => 'no',                            
                          );
                      $data4 = $this->security->xss_clean($data4);
                      $this->Front_model->insert_projectManagement($data4);
                      $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $i->pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource' => $fname.' '.$lname,
                                    'h_description' => 'Edit Permission not allowed to '.$fname.' '.$lname,
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for any goal
                $check_invitation_goal = $this->Front_model->checkGoalInviteMemberEmail($email);
                if($check_invitation_goal)
                {
                  foreach($check_invitation_goal as $ig)
                  {
                    if($ig->status == 'pending')
                    {
                      $iggm_id = $ig->igm_id;
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_goal_invite_request($data5,$iggm_id);
                      $hdata = array(
                                        'gid' => $ig->gid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource' => $ig->sent_to,
                                        'h_description' => 'Invite Accepted By '.$ig->sent_to,
                                        'ginvited_id' =>$iggm_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                          $gdetail = $this->Front_model->GoalDetail($ig->gid);
                          $data21 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$email,$gdetail->portfolio_id);

                          $data2 = array(
                            'gid' => $ig->gid,
                            'portfolio_id' => $gdetail->portfolio_id,
                            'gmember' => trim($inserted_id),
                            'status' => 'accepted',
                            'gcreated_by' => $gdetail->gcreated_by,
                            'sent_date' => date('Y-m-d H:i:s'),
                            'sent_notify_clear' => 'yes',
                                              );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->insert_GoalTeamMember($data2);
                        $inserted_pm_id = $this->db->insert_id();
                        //get email id from member id
                        // $getEmailID = $this->Front_model->getEmailID($inserted_id);
                        // $P_Owner = $this->Front_model->getEmailID($gdetail->gcreated_by);
                        // $hdata = array(
                        //                   'gid' => $ig->gid,
                        //                   'h_date' => date('Y-m-d H:i:s'),
                        //                   'h_resource_id' => $P_Owner->reg_id,
                        //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                        //                   'gmember_id' =>$inserted_pm_id
                        //               );
                        //               $hdata = $this->security->xss_clean($hdata); // xss filter
                        //               $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for portfolio team member
                $check_portTM = $this->Front_model->check_portTM($email);
                if($check_portTM)
                {
                  foreach($check_portTM as $cptm)
                  {
                    $idata = array(    'status' => 'accepted',
                                       'working_status' => 'active',
                                       'status_date' => date('Y-m-d H:i:s'),
                                       'status_notify' => 'yes',
                                       'status_notify_clear' => 'no',
                                  );
                          $idata = $this->security->xss_clean($idata); // xss filter
                          $this->Front_model->update_InvitePortfolioMember($idata,$email);
                  }
                }
                //check invited for meeting
                $check_meetm = $this->Front_model->CheckMeetingInvitedMemberEmail($email);
                if($check_meetm)
                {
                  foreach($check_meetm as $meetm)
                  {
                    $getEvts = $this->Front_model->getDataByUniqueId($meetm->event_unique_key);
                    if($getEvts)
                    {
                      $check_portm = $this->Front_model->checkPortfolioMemberEmail($meetm->member,$meetm->portfolio_id);
                      if($check_portm == 0)
                      {
                        $data = array(
                                                'portfolio_id' => $meetm->portfolio_id,
                                                'sent_to' => $meetm->member,
                                                'sent_from' => $meetm->sent_by,
                                                'status' => 'accepted',
                                                'working_status' => 'active',
                                                'status_date' => date('Y-m-d H:i:s')
                                              );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_PortfolioMember($data);
                      }

                      foreach($getEvts as $evt)
                      {
                        $data = array(
                                      'event_id' => $evt->id,
                                      'event_unique_key' => $meetm->event_unique_key,
                                      'member' => $inserted_id,
                                      'status' => 'accepted',
                                      'status_date' => date('Y-m-d H:i:s'),
                                      'created_by' => $evt->student_id,
                                      'created_type' => $evt->created_type,
                                      'm_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_events_meeting($data);
                      }

                      // $updata = array(
                      // 'status' => 'accepted',
                      // 'status_date' => date('Y-m-d H:i:s'),
                      //                   );
                      // $updata = $this->security->xss_clean($updata); // xss filter
                      // $this->Front_model->update_events_meeting_invited_members($updata,$meetm->imid);
                    }
                  }                  
                }

        $this->session->set_userdata('d168_id', $inserted_id);
        $this->session->set_userdata('d168_user_cor_id',''); 
        $this->session->set_userdata('d168_user_role_in_comp','');
        //last login
                  $upData = array(
                              'last_login' => date('Y-m-d H:i:s'),
                              'inactivity_mail_days' => "",
                              'deactive_date' => "",
                              'delete_date' => ""
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$inserted_id);
        $this->session->set_flashdata('message', 'Successfully Signed Up');
        redirect(base_url('dashboard'));
              }
            }
            die();
          }
        }else
        {
          redirect(base_url(),'refresh');
          die();
        }
        
  }

  public function user_authentication()//login with facebook
  { 
        $userData = array(); 
         
        // Authenticate user with facebook 
        if($this->facebook->is_authenticated()){ 
            // Get user info from facebook 
            $fbUser = $this->facebook->request('get', '/me?fields=id,first_name,last_name,email,link,gender,picture'); 
 
            // Preparing data for database insertion 
            $userData['oauth_provider'] = 'facebook'; 
            $userData['oauth_uid']    = !empty($fbUser['id'])?$fbUser['id']:'';; 
            $userData['first_name']    = !empty($fbUser['first_name'])?$fbUser['first_name']:''; 
            $userData['last_name']    = !empty($fbUser['last_name'])?$fbUser['last_name']:''; 
            $userData['email']        = !empty($fbUser['email'])?$fbUser['email']:''; 
            $userData['gender']        = !empty($fbUser['gender'])?$fbUser['gender']:''; 
            $userData['picture']    = !empty($fbUser['picture']['data']['url'])?$fbUser['picture']['data']['url']:''; 
            $userData['link']        = !empty($fbUser['link'])?$fbUser['link']:'https://www.facebook.com/'; 

            $get_del = $this->Front_model->selectLogin($userData['email']);
            if($get_del)
            {
              if($get_del->reg_acc_status != 'deactivated')
              {
                //user have corporate id
                if(!empty($get_del->used_corporate_id))
                {
                  $checkComp = $this->Front_model->checkCompany($get_del->used_corporate_id);
                  if($checkComp)
                  {
                    $checkComp = $this->Front_model->checkCompanyEmp($email,$checkComp->cc_id);
                    if($checkComp)
                    {
                      if(($get_del->verified == 'yes') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $this->session->set_userdata('d168_id',$get_del->reg_id); 
                        $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                        $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                        //last login
                        $upData = array(
                                    'last_login' => date('Y-m-d H:i:s'),
                                    'inactivity_mail_days' => "",
                                    'deactive_date' => "",
                                    'delete_date' => ""
                                  );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                         
                        $this->session->set_flashdata('message', 'Successfully Logged In');
                        redirect(base_url('dashboard'));
                      }
                      elseif(($get_del->verified == 'no') && ($get_del->reg_acc_status != 'deactivated'))
                      {
                        $response['errors'] = 'Verification link has been sent on your registered email Address. Verify you account to login.';
                        $response['status'] = FALSE;
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                      else
                      {
                        $link = anchor(base_url('send-activate-account-request/'.$get_del->reg_id.'/1'), 'Send Request');
                        $response['reg_in_message'] = 'Inactive account to activate account send request to Admin!' .' '. $link;
                        $response['status'] = 'inactive_status';
                        header('Content-type: application/json');
                        exit(json_encode($response));
                      }
                    }
                    else
                    {
                      $response['status'] = 'Error_Login';
                      header('Content-type: application/json');
                      exit(json_encode($response));
                    }
                  }
                  else
                  {
                    $response['status'] = 'Error_Login';
                    header('Content-type: application/json');
                    exit(json_encode($response));
                  }
                }
                else
                {
                  $this->session->set_userdata('d168_id',$get_del->reg_id); 
                  $this->session->set_userdata('d168_user_cor_id',$get_del->used_corporate_id); 
                  $this->session->set_userdata('d168_user_role_in_comp',$get_del->role_in_comp);

                  //last login
                      $upData = array(
                                  'last_login' => date('Y-m-d H:i:s'),
                                  'inactivity_mail_days' => "",
                                  'deactive_date' => "",
                                  'delete_date' => ""
                                );
                      $upData = $this->security->xss_clean($upData); // xss filter
                      $this->Front_model->updateRegistration($upData,$get_del->reg_id);
                   
                  $this->session->set_flashdata('message', 'Successfully Logged In');
                  redirect(base_url('dashboard'));
                }
              }
              elseif($get_del->reg_acc_status == 'deactivated')
              {
                $data['link'] = base_url('send-activate-account-request/'.$get_del->reg_id.'/1');
                $this->load->view('user/send-activate-req-social-media',$data);
              }
            }else
            {
            $fname = $userData['first_name'];
            $lname = $userData['last_name'];
            $email = $userData['email'];
            // MailChimp API credentials
            $apiKey = '371ac802d0f3416b8149e5deb7a39daf-us6';
            $listID = '2ecef410e7';
            
            // MailChimp API URL
            $memberID = md5(strtolower($email));
            $dataCenter = substr($apiKey,strpos($apiKey,'-')+1);
            $url = 'https://' . $dataCenter . '.api.mailchimp.com/3.0/lists/' . $listID . '/members/' . $memberID;
            
            // member information
            $json = json_encode([
                'email_address' => $email, 
                'status'        => 'subscribed',           
                 'merge_fields'  => [
                    'FNAME'     => $fname,
                    'LNAME'     => $lname
                ]
            ]);
             
             //echo $json;
            // send a HTTP POST request with curl
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_USERPWD, 'user:' . $apiKey);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, 10);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
            $result = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            
            //echo $result;
            //echo $httpCode;
            // store the status message based on response code
            if ($httpCode == 200) 
            {         
              $cus_id = "";
              $ocus_name = $userData['first_name'].' '.$userData['last_name'];
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
              $customer = \Stripe\Customer::create(['name' => $ocus_name,'email' => $userData['email']]);
              $cus_id = $customer->id;   

              $pacid = "";
              if(isset($_COOKIE["d168_personal_acc_id"]))
              {
                $pacid = $_COOKIE["d168_personal_acc_id"];
                $data = array(  'personal_acc_created' => 'yes' );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateRegistration($data,$_COOKIE["d168_personal_acc_id"]);
                delete_cookie('d168_personal_acc_id');
              }

              $data = array(  'first_name' => $userData['first_name'],
                      'last_name' => $userData['last_name'],
                      'email_address' => $userData['email'],
                      'gender' => $userData['gender'],
                      'logged_in_with' => $userData['oauth_provider'],
                      'socialmedia_id' => $userData['oauth_uid'],
                      'profile_link' => $userData['link'],
                      'socialmedia_picture' => $userData['picture'],
                      'stripe_cus_id' => $cus_id,
                      'verified' => 'yes',
                      'agree_terms_privacy' => 'yes',
                      'reg_date' => date('Y-m-d H:i:s'),
                      'msg_flag' => '0',
                      'reg_acc_status' => 'activated',
                      'package_id' => '1',
                      'package_start' => date('Y-m-d H:i:s'),
                      'package_expiry' => 'free_forever',
                      'paid_amount' => '0',
                      'personal_acc_created' => $pacid
                   );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertRegistration($data);
        $inserted_id = $this->db->insert_id();
        //check if account is recreated
        $check_re_created_acc = $this->Front_model->check_re_created_acc($userData['email']);
        if(!empty($check_re_created_acc))
        {
          $this->Front_model->delete_registration_deleted($userData['email']);
        }
        //check email is invited for any project
                $check_invitation = $this->Front_model->checkInviteMemberEmail($userData['email']);
                if($check_invitation)
                {
                  foreach($check_invitation as $i)
                  {
                    if($i->status == 'pending')
                    {
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_invite_request($data5,$userData['email']);

                      $get_gs_pid = $this->Front_model->getProjectById($i->pid);
                      $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $i->sent_to,
                                                      'h_description' => 'Invite Accepted By '.$i->sent_to,
                                                      'pinvited_id' =>$i->im_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                          $pdetail = $this->Front_model->ProjectDetailPortfolio($i->pid);
                          $data21 = array(    'status' => 'accepted',
                                      'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$userData['email'],$pdetail->portfolio_id);
                          $data2 = array(
                                            'pid' => $i->pid,
                                            'portfolio_id' => $pdetail->portfolio_id,
                                            'pmember' => $inserted_id,
                                            'status' => 'accepted',
                                            'pcreated_by' => $i->sent_from,
                                            'status_date' => date('Y-m-d H:i:s')
                                                              );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->insert_TeamMember($data2);
                                        $inserted_pm_id = $this->db->insert_id();
                                        $hdata = array(
                                                      'pid' => $i->pid,
                                                      'gid' => $get_gs_pid->gid,
                                                      'sid' => $get_gs_pid->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource' => $userData['first_name'].' '.$userData['last_name'],
                                                      'h_description' => 'Team Member Request Accepted By '.$userData['first_name'].' '.$userData['last_name'],
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                      $data4 = array(
                            'pid' => $i->pid,
                            'powner' => $i->sent_from,
                            'pmember' => $inserted_id,
                            'edit_allow' => 'no',                            
                          );
                      $data4 = $this->security->xss_clean($data4);
                      $this->Front_model->insert_projectManagement($data4);
                      $pmanage_inserted_id = $this->db->insert_id();
                      $hdata = array(
                                    'pid' => $i->pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource' => $userData['first_name'].' '.$userData['last_name'],
                                    'h_description' => 'Edit Permission not allowed to '.$userData['first_name'].' '.$userData['last_name'],
                                    'pmanage_id' =>$pmanage_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for any goal
                $check_invitation_goal = $this->Front_model->checkGoalInviteMemberEmail($userData['email']);
                if($check_invitation_goal)
                {
                  foreach($check_invitation_goal as $ig)
                  {
                    if($ig->status == 'pending')
                    {
                      $iggm_id = $ig->igm_id;
                      $data5 = array(
                                      'status' => 'accepted',
                                      'accept_date' => date('Y-m-d H:i:s'),
                                      'status_notify' => 'yes',
                                      'status_notify_clear' => 'no',
                                    );
                      $data5 = $this->security->xss_clean($data5);
                      $this->Front_model->update_goal_invite_request($data5,$iggm_id);
                      $hdata = array(
                                        'gid' => $ig->gid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource' => $ig->sent_to,
                                        'h_description' => 'Invite Accepted By '.$ig->sent_to,
                                        'ginvited_id' =>$iggm_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                          $gdetail = $this->Front_model->GoalDetail($ig->gid);
                          $data21 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                              );
                          $data21 = $this->security->xss_clean($data21); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data21,$userData['email'],$gdetail->portfolio_id);

                          $data2 = array(
                            'gid' => $ig->gid,
                            'portfolio_id' => $gdetail->portfolio_id,
                            'gmember' => trim($inserted_id),
                            'status' => 'accepted',
                            'gcreated_by' => $gdetail->gcreated_by,
                            'sent_date' => date('Y-m-d H:i:s'),
                            'sent_notify_clear' => 'yes',
                                              );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->insert_GoalTeamMember($data2);
                        $inserted_pm_id = $this->db->insert_id();
                        //get email id from member id
                        // $getEmailID = $this->Front_model->getEmailID($inserted_id);
                        // $P_Owner = $this->Front_model->getEmailID($gdetail->gcreated_by);
                        // $hdata = array(
                        //                   'gid' => $ig->gid,
                        //                   'h_date' => date('Y-m-d H:i:s'),
                        //                   'h_resource_id' => $P_Owner->reg_id,
                        //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                        //                   'gmember_id' =>$inserted_pm_id
                        //               );
                        //               $hdata = $this->security->xss_clean($hdata); // xss filter
                        //               $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                  
                }
                //check email is invited for portfolio team member
                $check_portTM = $this->Front_model->check_portTM($userData['email']);
                if($check_portTM)
                {
                  foreach($check_portTM as $cptm)
                  {
                    $idata = array(    'status' => 'accepted',
                                       'working_status' => 'active',
                                       'status_date' => date('Y-m-d H:i:s'),
                                       'status_notify' => 'yes',
                                       'status_notify_clear' => 'no',
                                  );
                          $idata = $this->security->xss_clean($idata); // xss filter
                          $this->Front_model->update_InvitePortfolioMember($idata,$userData['email']);
                  }
                }
                //check invited for meeting
                $check_meetm = $this->Front_model->CheckMeetingInvitedMemberEmail($userData['email']);
                if($check_meetm)
                {
                  foreach($check_meetm as $meetm)
                  {
                    $getEvts = $this->Front_model->getDataByUniqueId($meetm->event_unique_key);
                    if($getEvts)
                    {
                      $check_portm = $this->Front_model->checkPortfolioMemberEmail($meetm->member,$meetm->portfolio_id);
                      if($check_portm == 0)
                      {
                        $data = array(
                                                'portfolio_id' => $meetm->portfolio_id,
                                                'sent_to' => $meetm->member,
                                                'sent_from' => $meetm->sent_by,
                                                'status' => 'accepted',
                                                'working_status' => 'active',
                                                'status_date' => date('Y-m-d H:i:s')
                                              );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_PortfolioMember($data);
                      }

                      foreach($getEvts as $evt)
                      {
                        $data = array(
                                      'event_id' => $evt->id,
                                      'event_unique_key' => $meetm->event_unique_key,
                                      'member' => $inserted_id,
                                      'status' => 'accepted',
                                      'status_date' => date('Y-m-d H:i:s'),
                                      'created_by' => $evt->student_id,
                                      'created_type' => $evt->created_type,
                                      'm_date' => date('Y-m-d H:i:s'),
                                                        );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_events_meeting($data);
                      }

                      // $updata = array(
                      // 'status' => 'accepted',
                      // 'status_date' => date('Y-m-d H:i:s'),
                      //                   );
                      // $updata = $this->security->xss_clean($updata); // xss filter
                      // $this->Front_model->update_events_meeting_invited_members($updata,$meetm->imid);
                    }
                  }                  
                }

        $this->session->set_userdata('d168_id', $inserted_id);
        $this->session->set_userdata('d168_user_cor_id',''); 
        $this->session->set_userdata('d168_user_role_in_comp','');
        //last login
                  $upData = array(
                              'last_login' => date('Y-m-d H:i:s'),
                              'inactivity_mail_days' => "",
                              'deactive_date' => "",
                              'delete_date' => ""
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$inserted_id);
        $this->session->set_flashdata('message', 'Successfully Signed Up');
        redirect(base_url('dashboard'));
              }
            }
        }else{ 
            // Facebook authentication url 
            $data['authURL'] =  $this->facebook->login_url(); 
        } 
    } 

  // public function test()
  // {
  //   $user = '1';
  //   $data['link'] = base_url('send-activate-account-request/'.$user.'/1');
  //             $this->load->view('user/send-activate-req-social-media',$data);
  // }

  public function logout()
  {
      //delete_cookie('d168_selectedportfolio');
      $this->session->unset_userdata('created_tl_port_id');
      $this->session->unset_userdata('created_tl_pid');
      $this->session->unset_userdata('d168_user_role_in_comp');
      $this->session->unset_userdata('d168_user_cor_id');
      $this->session->unset_userdata('d168_id');
      $this->session->sess_destroy();
  }

  public function timer_logout()
  {
      $this->session->unset_userdata('created_tl_port_id');
      $this->session->unset_userdata('created_tl_pid');
      $this->session->unset_userdata('d168_user_role_in_comp');
      $this->session->unset_userdata('d168_user_cor_id');
      $this->session->unset_userdata('d168_id');
      $this->session->sess_destroy();
      redirect(base_url('login'));
  }

  public function reset_password()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));    
    }
    else
    {      
      $this->load->view('user/reset-password');
    }
  }

  public function sent_reset_password() //Insert Forgotpassword
  {
      $this->form_validation->set_rules('email_address','Email Address','trim|required|valid_email');
      $this->form_validation->set_rules('g-recaptcha-response','Recaptcha','required');
      if ($this->form_validation->run() == FALSE)
      {
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $secretKey = "6LeGztMcAAAAABo3gtAjhWfM9J2ZNVKgR5jPwDE1";
        //$secretKey = "6Ld21JMaAAAAAKdJWi_bhns9O7kP3C85sordZMdB";
        $responseKey = $this->input->post('g-recaptcha-response');
        $userIP = $this->input->server('REMOTE_ADDR');       
        $url = "https://www.google.com/recaptcha/api/siteverify?secret=$secretKey&response=$responseKey&remoteip=$userIP";
        $response1 = file_get_contents($url);
        $response1 = json_decode($response1);

        if($response1->success)
        {                   
          $email = $this->input->post('email_address');
          $userdata = $this->Front_model->selectLogin($email);                  
          if($userdata)
          {
            if(($userdata->verified == 'yes') && ($userdata->reg_acc_status != 'deactivated'))
            {
              $md5_user = md5($userdata->first_name);
              $student_id = $userdata->reg_id;
              $code = uniqid().uniqid();

                $email_from = 'hello@decision168.com'; 
                //$email_from = 'saramaazkhan123@gmail.com'; 
                $email_name = 'Decision 168';

                $this->load->library('email');  
                $config=array(
                  'charset'=>'utf-8',
                  'wordwrap'=> TRUE,
                  'mailtype' => 'html'
                  );
                $this->email->initialize($config);
                $this->email->from($email_from, $email_name);
                $this->email->set_header('Reply-To', $email_from."\r\n");
                $this->email->set_header('Return-Path', $email_from."\r\n");
                $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                $this->email->to($email);
                $this->email->set_mailtype('html');
                $this->email->subject('Reset Password | Decision 168');
                $this->email->message('
         
<!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Reset Password</title>
            <meta name="description" content="Reset Password">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Did you request a password reset?</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($userdata->first_name).',<br><br>
                                                   We received a request to reset your password for access to the Decision 168 Accountability & Productivity Platform (D168). To reset your password, simply click the unique link below which has been generated for you, and follow the instructions.
                                                    <br><br>
                                                    For the security of your account, the password reset link will expire in 24 hours from when it was sent.
                                                </p>
                                                <a href="'.base_url('change-password/'.$student_id.'/'.$code.'/'.$md5_user).'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px; color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reset Your Password</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    <strong>Reset link expired?</strong> You can request another password reset <a onMouseOver="this.style.pointer=cursor" href="'.base_url('reset-password').'" style="color:#c7df19;">here</a>. <strong>If you didn\'t make this request and prefer not to change your password</strong> , simply disregard this message and it will remain unchanged.

                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    <span style="color:#c7df19;font-weight: 600;">Decision 168</span>
                                                    <br>
                                                    Support Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
              );
              if($this->email->send())
              {
                $data = array(  'mail_code' => $code,
                        'mail_date' => date('Y-m-d H:i:s') 
                      );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->updateRegistration($data,$student_id);
                $this->session->set_flashdata('message', 'Reset Link has been send on your Registered Email Address.. ');
                $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
              }else{
                echo $this->email->print_debugger();
              }
            }
            else
            {
              $response['reg_in_message'] = 'Your Account is Deactivated!';
              $response['status'] = 'inactive_status';
              header('Content-type: application/json');
              exit(json_encode($response));
            }                   
          }
          else
          {
              $response['errors'] = 'This Email Address is not registered.';
              $response['status'] = FALSE;
          header('Content-type: application/json');
          exit(json_encode($response));
          }            
      }
      else
      {
        $response['errors'] = 'Verification Failed';
        $response['status'] = FALSE;
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      }
  }

  public function change_password()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));     
    }else{
      $student_id = $this->uri->segment(2);
      $segment_code = $this->uri->segment(3);
      $first_name = $this->uri->segment(4);

      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      if($data['stud_del']){
        $studD = $data['stud_del'];
        if($studD->reg_acc_status != 'deactivated')
        {
          $created_on = date_create($data['stud_del']->mail_date);
          $time_limit = '24 hours';
          date_add($created_on,date_interval_create_from_date_string($time_limit)); 
          $expiryDate = date_format($created_on,"Y-m-d H:i:s");
          $currentDate = date('Y-m-d H:i:s');
          if(($expiryDate > $currentDate) && ($data['stud_del']->mail_code == $segment_code)){
            $fname = md5($data['stud_del']->first_name);
            if($first_name == $fname)
            {
              $this->load->view('user/change_password',$data);
            }else{
              $this->load->view('user/pages-404'); 
            }
          }else{
            echo '<h1> Expired </h1>';
          }
        }               
      }else{
        $this->load->view('user/pages-404'); 
      } 
    }   
  }

  public function insert_change_password() //Change Password
    {
      $this->form_validation->set_rules('email_address','Email Address','valid_email|trim|required');
      $this->form_validation->set_rules('new_password','Password','trim|required|min_length[5]|callback_valid_password');
      $this->form_validation->set_rules('conf_password','Confirm Password','trim|required|required|matches[new_password]');
      $this->form_validation->set_rules('g-recaptcha-response','Recaptcha','required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $secretKey = "6LeGztMcAAAAABo3gtAjhWfM9J2ZNVKgR5jPwDE1";
        //$secretKey = "6Ld21JMaAAAAAKdJWi_bhns9O7kP3C85sordZMdB";
        $responseKey = $this->input->post('g-recaptcha-response');
        $userIP = $this->input->server('REMOTE_ADDR');       
        $url = "https://www.google.com/recaptcha/api/siteverify?secret=$secretKey&response=$responseKey&remoteip=$userIP";
        $response1 = file_get_contents($url);
        $response1 = json_decode($response1);

        if($response1->success)
        { 
          $id = $this->input->post('reg_id');
          $data = array(  'password' => md5($this->input->post('new_password')) );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->updateRegistration($data,$id);
          $this->session->set_flashdata('message', 'Password Changed Successfully!');
          $response['status'] = TRUE;

        header('Content-type: application/json');
        echo json_encode($response);  
      }
      else
      {
        $response['errors'] = 'Verification Failed';
        $response['status'] = FALSE;
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      }
    }

  public function maintenance()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/pages-maintenance');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function faq()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/pages-faqs');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function pricing()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/pages-pricing');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

 /* public function page_404()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/pages-404');    
    }
    else
    {
      redirect(base_url('login'));
    }    
  }*/

  public function sweet_alert()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/ui-sweet-alert');    
    }
    else
    {
      redirect(base_url('login'));
    }    
  }

  public function video()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->load->view('user/ui-video');    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function content_planning()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['plist'] = $this->Front_model->ProjectList();
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
      $data['contentPlanningDetails'] = $this->Front_model->contentPlanningDetails();
      $this->load->view('user/content-planning',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_all_content_planner()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $data['plist'] = $this->Front_model->ProjectList();
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
      $data['getContentPlanningByDel'] = $this->Front_model->getContentPlanningByDel($pid);
      if($data['getContentPlanningByDel'])
      {
        $this->load->view('user/edit-all-content-planner',$data);
      }          
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_content()
  {  
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {  
    $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    if($this->input->post('total_edit_content')){
      $total_edit_content = $this->input->post('total_edit_content');
      $total_edit_fields = end($total_edit_content);
      if($total_edit_fields > 0)
      {
        for ($i=91; $i <= $total_edit_fields; $i++)
        {
          $pc_id = $this->input->post('pc_id'.$i);
          $cpdel = $this->Front_model->getContentPlanningById($pc_id);
          $platform = $this->input->post('platform'.$i);
          if($platform != "undefined" && $platform != ""){
            //pc_link array
            $pc_link_array = "";
            $pc_link_comment_array = "";
            if(!empty($_POST['pc_link'.$i][0]))
            {
              $pc_link_array = implode(',',$this->input->post('pc_link'.$i));
              $pc_link_comment_array = implode(',',$this->input->post('pc_link_comment'.$i));
              $pc_link_exarray = explode(',', $pc_link_array);
              $count_expc_link = count($pc_link_exarray);

              if($count_expc_link >= 0)
              {
                 for ($j=0; $j<$count_expc_link; $j++)
                  {
                     $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                      if (!preg_match($pattern, $pc_link_exarray[$j]))
                      {
                          $response['status'] = 'link_valid';
                          $response['link_counter'] = $i;
                          header('Content-type: application/json');
                          //echo json_encode($response);
                          exit(json_encode($response));
                      }
                  }
              }           
            }

            $pc_file_upload = $cpdel->pc_file;
            if(!empty($_FILES['pc_file'.$i]['name'][0]))
            {
              $cpt = count($_FILES['pc_file'.$i]['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/plan_content_files/';
              $config['allowed_types'] = 'gif|jpg|png|jpeg|webp|svg|mp4|ts|3gp|avi|mov|wmv|flv|m3u8';
              $maxsize=7000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($k=0; $k<$cpt; $k++)
              {          
                //$_FILES['pc_file'.$i]['name']= time().'_'.$files['pc_file'.$i]['name'][$k];
                $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pc_file'.$i]['name'][$k])));
                $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                $_FILES['pc_file'.$i]['name']= time().'_'.strtolower($new_file_name);
                $_FILES['pc_file'.$i]['type']= $files['pc_file'.$i]['type'][$k];
                $_FILES['pc_file'.$i]['tmp_name']= $files['pc_file'.$i]['tmp_name'][$k];
                $_FILES['pc_file'.$i]['error']= $files['pc_file'.$i]['error'][$k];
                $_FILES['pc_file'.$i]['size']= $files['pc_file'.$i]['size'][$k];   

                $this->upload->initialize($config);
                if($_FILES['pc_file'.$i]['size'] >= $maxsize)
                {
                  $response['status'] = 'file_uploadSizeErr';
                  $response['file_counter'] = $i;
                  header('Content-type: application/json');
                  exit(json_encode($response));
                }
                else
                {
                  if($this->upload->do_upload('pc_file'.$i))
                  {
                    $fileData = $this->upload->data();
                    $uploadData[$k]['pc_files'] = $fileData['file_name'];
                  }
                  else 
                  {
                    $response['status'] = 'Error_Uploading';
                    $response['file_counter'] = $i;
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
                  } 
                }                                  
              }
              if(is_array($uploadData))
              {
                if($cpdel->pc_file != ""){

                  $pc_file_upd = implode(',', array_column($uploadData, 'pc_files'));
                  $pc_file_upload = $cpdel->pc_file.','.$pc_file_upd;
                }else{
                  $pc_file_upload = implode(',', array_column($uploadData, 'pc_files'));
                }                
              }
            }

            $doc_pc_file_upload = $cpdel->doc_pc_file;
            if(!empty($_FILES['doc_pc_file'.$i]['name'][0]))
            {
              $cpt = count($_FILES['doc_pc_file'.$i]['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/plan_content_files/';
              $config['allowed_types'] = '*';
              $maxsize=7000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($l=0; $l<$cpt; $l++)
              {          
                //$_FILES['doc_pc_file'.$i]['name']= time().'_'.$files['doc_pc_file'.$i]['name'][$l];
                $file_name =trim((preg_replace("/\([^)]+\)/","",$files['doc_pc_file'.$i]['name'][$l]))); 
                $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                $_FILES['doc_pc_file'.$i]['name']= time().'_'.strtolower($new_file_name);
                $_FILES['doc_pc_file'.$i]['type']= $files['doc_pc_file'.$i]['type'][$l];
                $_FILES['doc_pc_file'.$i]['tmp_name']= $files['doc_pc_file'.$i]['tmp_name'][$l];
                $_FILES['doc_pc_file'.$i]['error']= $files['doc_pc_file'.$i]['error'][$l];
                $_FILES['doc_pc_file'.$i]['size']= $files['doc_pc_file'.$i]['size'][$l];   

                $this->upload->initialize($config);
                if($_FILES['doc_pc_file'.$i]['size'] >= $maxsize)
                {
                  $response['status'] = 'file_uploadSizeErr';
                  $response['file_counter'] = $i;
                  header('Content-type: application/json');
                  exit(json_encode($response));
                }
                else
                {
                  if($this->upload->do_upload('doc_pc_file'.$i))
                  {
                    $fileData = $this->upload->data();
                    $uploadData[$l]['doc_pc_files'] = $fileData['file_name'];
                  }
                  else 
                  {
                    $response['status'] = 'Error_Uploading';
                    $response['file_counter'] = $i;
                    header('Content-type: application/json');
                    //echo json_encode($response);
                    exit(json_encode($response));
                  } 
                }                                  
              }
              if(is_array($uploadData))
              {
                if($cpdel->doc_pc_file != ""){

                  $doc_pc_file_upd = implode(',', array_column($uploadData, 'doc_pc_files'));
                  $doc_pc_file_upload = $cpdel->doc_pc_file.','.$doc_pc_file_upd;
                }else{
                  $doc_pc_file_upload = implode(',', array_column($uploadData, 'doc_pc_files'));
                }                
              }
            }

            $get_notify_member_new = "";
            if($cpdel->written_content_assignee != $this->input->post('written_content_assignee'.$i))
            {
              $new_wca = $this->input->post('written_content_assignee'.$i);
            }
            else
            {
              $array1 = explode(',', $cpdel->pc_notify);
              if(in_array($cpdel->written_content_assignee, $array1))
              {
                  $new_wca = $cpdel->written_content_assignee;
              }
              else
              {
                $new_wca = "";
              }
            }

            if($cpdel->pc_file_assignee != $this->input->post('pc_file_assignee'.$i))
            {
              $new_pfa = $this->input->post('pc_file_assignee'.$i);
            }
            else
            {
              $array2 = explode(',', $cpdel->pc_notify);
              if(in_array($cpdel->pc_file_assignee, $array2))
              {
                  $new_pfa = $cpdel->pc_file_assignee;
              }
              else
              {
                $new_pfa = "";
              }
            }

            if($cpdel->submit_to_approval != $this->input->post('submit_to_approval'.$i))
            {
              $new_sta = $this->input->post('submit_to_approval'.$i);
            }
            else
            {
              $array3 = explode(',', $cpdel->pc_notify);
              if(in_array($cpdel->submit_to_approval, $array3))
              {
                  $new_sta = $cpdel->submit_to_approval;
              }
              else
              {
                $new_sta = "";
              }
            }

            if($cpdel->pc_assignee != $this->input->post('pc_assignee'.$i))
            {
              $new_pca = $this->input->post('pc_assignee'.$i);
            }
            else
            {
              $array4 = explode(',', $cpdel->pc_notify);
              if(in_array($cpdel->pc_assignee, $array4))
              {
                  $new_pca = $cpdel->pc_assignee;
              }
              else
              {
                $new_pca = "";
              }
            }
            $get_notify_member_new = $new_wca.",".$new_pfa.",".$new_sta.",".$new_pca;

            $get_notify_member_new_clear = "";
            if($cpdel->written_content_assignee != $this->input->post('written_content_assignee1'))
            {
              $new_wca2 = $this->input->post('written_content_assignee1');
            }
            else
            {
              $array1 = explode(',', $cpdel->pc_notify_clear);
              if(in_array($cpdel->written_content_assignee, $array1))
              {
                  $new_wca2 = $cpdel->written_content_assignee;
              }
              else
              {
                $new_wca2 = "";
              }
            }

            if($cpdel->pc_file_assignee != $this->input->post('pc_file_assignee1'))
            {
              $new_pfa2 = $this->input->post('pc_file_assignee1');
            }
            else
            {
              $array2 = explode(',', $cpdel->pc_notify_clear);
              if(in_array($cpdel->pc_file_assignee, $array2))
              {
                  $new_pfa2 = $cpdel->pc_file_assignee;
              }
              else
              {
                $new_pfa2 = "";
              }
            }

            if($cpdel->submit_to_approval != $this->input->post('submit_to_approval1'))
            {
              $new_sta2 = $this->input->post('submit_to_approval1');
            }
            else
            {
              $array3 = explode(',', $cpdel->pc_notify_clear);
              if(in_array($cpdel->submit_to_approval, $array3))
              {
                  $new_sta2 = $cpdel->submit_to_approval;
              }
              else
              {
                $new_sta2 = "";
              }
            }

            if($cpdel->pc_assignee != $this->input->post('pc_assignee1'))
            {
              $new_pca2 = $this->input->post('pc_assignee1');
            }
            else
            {
              $array4 = explode(',', $cpdel->pc_notify_clear);
              if(in_array($cpdel->pc_assignee, $array4))
              {
                  $new_pca2 = $cpdel->pc_assignee;
              }
              else
              {
                $new_pca2 = "";
              }
            }
            $get_notify_member_new_clear = $new_wca2.",".$new_pfa2.",".$new_sta2.",".$new_pca2;

            if(($platform == 'twitter') || ($platform == 'facebook') || ($platform == 'instagram') || ($platform == 'linkedin') || ($platform == 'tiktok') || ($platform == 'google-my-business')){
              $data = array('platform' => $this->input->post('platform'.$i),
                            'written_content' => $this->input->post('written_content'.$i),
                            'pc_link' => $pc_link_array,
                            'pc_link_comment' => $pc_link_comment_array,
                            'pc_file' => $pc_file_upload,
                            'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                            'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                            'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                            'pc_assignee' => $this->input->post('pc_assignee'.$i),
                            'pc_notify' => $get_notify_member_new,
                            'pc_notify_clear' => $get_notify_member_new_clear,
                            'pc_notify_date' => date('Y-m-d H:i:s'),
                            //'publish_date' => $this->input->post('pub_date'.$i),
                          );
            }else if($platform == 'pinterest'){
              $data = array('platform' => $this->input->post('platform'.$i),
                            'pc_title' => $this->input->post('pc_title'.$i),
                            'written_content' => $this->input->post('written_content'.$i),
                            'written_content_2' => $this->input->post('written_content_2'.$i),
                            'pc_link' => $pc_link_array,
                            'pc_link_comment' => $pc_link_comment_array,
                            'pc_file' => $pc_file_upload,
                            'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                            'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                            'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                            'pc_assignee' => $this->input->post('pc_assignee'.$i),
                            'pc_notify' => $get_notify_member_new,
                            'pc_notify_clear' => $get_notify_member_new_clear,
                            'pc_notify_date' => date('Y-m-d H:i:s'),
                            //'publish_date' => $this->input->post('pub_date'.$i),
                          );
            }else if($platform == 'youtube'){
              $data = array('platform' => $this->input->post('platform'.$i),
                            'pc_title' => $this->input->post('pc_title'.$i),
                            'written_content' => $this->input->post('written_content'.$i),
                            'tags' => $this->input->post('tags'.$i),
                            'pc_link' => $pc_link_array,
                            'pc_link_comment' => $pc_link_comment_array,
                            'pc_file' => $pc_file_upload,
                            'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                            'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                            'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                            'pc_assignee' => $this->input->post('pc_assignee'.$i),
                            'pc_notify' => $get_notify_member_new,
                            'pc_notify_clear' => $get_notify_member_new_clear,
                            'pc_notify_date' => date('Y-m-d H:i:s'),
                            //'publish_date' => $this->input->post('pub_date'.$i),
                          );
            }else if($platform == 'blogger'){
              $data = array('platform' => $this->input->post('platform'.$i),
                            'pc_title' => $this->input->post('pc_title'.$i),
                            'written_content' => $this->input->post('written_content'.$i),
                            'target_audience' => $this->input->post('target_audience'.$i),
                            'solutions' => $this->input->post('solutions'.$i),
                            'keywords' => $this->input->post('keywords'.$i),
                            'internal_links' => $this->input->post('internal_links'.$i),
                            'external_links' => $this->input->post('external_links'.$i),
                            'meta_title' => $this->input->post('meta_title'.$i),
                            'meta_description' => $this->input->post('meta_description'.$i),
                            'pc_link' => $pc_link_array,
                            'pc_link_comment' => $pc_link_comment_array,
                            'pc_file' => $pc_file_upload,
                            'doc_pc_file' => $doc_pc_file_upload,
                            'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                            'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                            'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                            'pc_assignee' => $this->input->post('pc_assignee'.$i),
                            'pc_notify' => $get_notify_member_new,
                            'pc_notify_clear' => $get_notify_member_new_clear,
                            'pc_notify_date' => date('Y-m-d H:i:s'),
                            //'publish_date' => $this->input->post('pub_date'.$i),
                          );
            }
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->update_Content($data,$pc_id);            
          }                   
        }
      }
    }
    
    $total_content = $this->input->post('total_content');
    $total_fields = end($total_content);
    if($total_fields > 0)
    {
      for ($i=1; $i <= $total_fields; $i++)
      {
        $platform = $this->input->post('platform'.$i);
        if($platform != "undefined" && $platform != ""){
          //pc_link array
          $pc_link_array="";
          $pc_link_comment_array="";
          if(!empty($_POST['pc_link'.$i][0]))
          {
            $pc_link_array = implode(',',$this->input->post('pc_link'.$i));
            $pc_link_comment_array = implode(',',$this->input->post('pc_link_comment'.$i));
            $pc_link_exarray = explode(',', $pc_link_array);
            $count_expc_link = count($pc_link_exarray);
            if($count_expc_link >= 0)
            {
               for ($j=0; $j<$count_expc_link; $j++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $pc_link_exarray[$j]))
                    {
                        $response['status'] = 'link_valid';
                        $response['link_counter'] = $i;
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }

          if(!empty($this->input->post('pid')))
          {
            $get_project_name = $this->Front_model->getProjectById($this->input->post('pid'));
            $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
            $random_num = rand(1, 10000);
            $get_pc_code = $letter.'-'.$random_num;            
          }
          else
          {
            $random_num = rand(1, 10000);
            $get_pc_code = 'PC-'.$random_num; 
          }

          $portfolio_id = "";
          $dept_id = "";
          if(!empty($this->input->post('pid')))
          {
            $portfolio = $this->Front_model->getProjectById($this->input->post('pid'));
            if($portfolio->portfolio_id != 0)
            {
              $portfolio_id = $portfolio->portfolio_id;
              $dept_id = $portfolio->dept_id;
            }
            else
            {
              $portfolio_id = "";
              $dept_id = "";
            }
          }

          $pc_file_upload="";
          if(!empty($_FILES['pc_file'.$i]['name'][0]))
          {
            $cpt = count($_FILES['pc_file'.$i]['name']);
            $files = $_FILES;
            $config['upload_path'] = 'assets/plan_content_files/';
            $config['allowed_types'] = 'gif|jpg|png|jpeg|webp|svg|mp4|ts|3gp|avi|mov|wmv|flv|m3u8';
            $maxsize=7000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);

            for($k=0; $k<$cpt; $k++)
            {          
              //$_FILES['pc_file'.$i]['name']= time().'_'.$files['pc_file'.$i]['name'][$k];
              $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pc_file'.$i]['name'][$k]))); 
              $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
              $_FILES['pc_file'.$i]['name']= time().'_'.strtolower($new_file_name);
              $_FILES['pc_file'.$i]['type']= $files['pc_file'.$i]['type'][$k];
              $_FILES['pc_file'.$i]['tmp_name']= $files['pc_file'.$i]['tmp_name'][$k];
              $_FILES['pc_file'.$i]['error']= $files['pc_file'.$i]['error'][$k];
              $_FILES['pc_file'.$i]['size']= $files['pc_file'.$i]['size'][$k];   

              $this->upload->initialize($config);
              if($_FILES['pc_file'.$i]['size'] >= $maxsize)
              {
                $response['status'] = 'file_uploadSizeErr';
                $response['file_counter'] = $i;
                header('Content-type: application/json');
                exit(json_encode($response));
              }
              else
              {
                if($this->upload->do_upload('pc_file'.$i))
                {
                  $fileData = $this->upload->data();
                  $uploadData[$k]['pc_files'] = $fileData['file_name'];
                }
                else 
                {
                  $response['status'] = 'Error_Uploading';
                  $response['file_counter'] = $i;
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
                } 
              }                                  
            }
            if(is_array($uploadData))
            {
              $pc_file_upload = implode(',', array_column($uploadData, 'pc_files'));
            }
          }

          $doc_pc_file_upload="";
          if(!empty($_FILES['doc_pc_file'.$i]['name'][0]))
          {
            $cpt = count($_FILES['doc_pc_file'.$i]['name']);
            $files = $_FILES;
            $config['upload_path'] = 'assets/plan_content_files/';
            $config['allowed_types'] = '*';
            $maxsize=7000000;
            //Load upload library and initialize configuration
            $this->load->library('upload', $config);

            for($l=0; $l<$cpt; $l++)
            {          
              //$_FILES['doc_pc_file'.$i]['name']= time().'_'.$files['doc_pc_file'.$i]['name'][$l];
              $file_name =trim((preg_replace("/\([^)]+\)/","",$files['doc_pc_file'.$i]['name'][$l])));
              $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name)); 
              $_FILES['doc_pc_file'.$i]['name']= time().'_'.strtolower($new_file_name);
              $_FILES['doc_pc_file'.$i]['type']= $files['doc_pc_file'.$i]['type'][$l];
              $_FILES['doc_pc_file'.$i]['tmp_name']= $files['doc_pc_file'.$i]['tmp_name'][$l];
              $_FILES['doc_pc_file'.$i]['error']= $files['doc_pc_file'.$i]['error'][$l];
              $_FILES['doc_pc_file'.$i]['size']= $files['doc_pc_file'.$i]['size'][$l];   

              $this->upload->initialize($config);
              if($_FILES['doc_pc_file'.$i]['size'] >= $maxsize)
              {
                $response['status'] = 'file_uploadSizeErr';
                $response['file_counter'] = $i;
                header('Content-type: application/json');
                exit(json_encode($response));
              }
              else
              {
                if($this->upload->do_upload('doc_pc_file'.$i))
                {
                  $fileData = $this->upload->data();
                  $uploadData[$l]['doc_pc_files'] = $fileData['file_name'];
                }
                else 
                {
                  $response['status'] = 'Error_Uploading';
                  $response['file_counter'] = $i;
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
                } 
              }                                  
            }
            if(is_array($uploadData))
            {
              $doc_pc_file_upload = implode(',', array_column($uploadData, 'doc_pc_files'));
            }
          }

          $get_notify_member = $this->input->post('written_content_assignee'.$i).",".$this->input->post('pc_file_assignee'.$i).",".$this->input->post('submit_to_approval'.$i).",".$this->input->post('pc_assignee'.$i);

          if(($platform == 'twitter') || ($platform == 'facebook') || ($platform == 'instagram') || ($platform == 'linkedin') || ($platform == 'tiktok') || ($platform == 'google-my-business')){
            $data = array('pc_project_assign' => $this->input->post('pid'),
                          'portfolio_id' => $portfolio_id,
                          'dept_id' => $dept_id,
                          'pc_code' => $get_pc_code,
                          'platform' => $this->input->post('platform'.$i),
                          'written_content' => $this->input->post('written_content'.$i),
                          'pc_link' => $pc_link_array,
                          'pc_link_comment' => $pc_link_comment_array,
                          'pc_file' => $pc_file_upload,
                          'pc_status' => 'done',
                          'pc_status_date' => date('Y-m-d H:i:s'),
                          'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                          'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                          'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                          'pc_assignee' => $this->input->post('pc_assignee'.$i),
                          'pc_created_by' => $this->session->userdata('d168_id'),
                          'pc_created_date' => date('Y-m-d H:i:s'),
                          'pc_notify' => $get_notify_member,
                          'pc_notify_clear' => $get_notify_member,
                          'pc_notify_date' => date('Y-m-d H:i:s'),
                          'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          //'publish_date' => $this->input->post('pub_date'.$i),
                        );
          }else if($platform == 'pinterest'){
            $data = array('pc_project_assign' => $this->input->post('pid'),
                          'portfolio_id' => $portfolio_id,
                          'dept_id' => $dept_id,
                          'pc_code' => $get_pc_code,
                          'platform' => $this->input->post('platform'.$i),
                          'pc_title' => $this->input->post('pc_title'.$i),
                          'written_content' => $this->input->post('written_content'.$i),
                          'written_content_2' => $this->input->post('written_content_2'.$i),
                          'pc_link' => $pc_link_array,
                          'pc_link_comment' => $pc_link_comment_array,
                          'pc_file' => $pc_file_upload,
                          'pc_status' => 'done',
                          'pc_status_date' => date('Y-m-d H:i:s'),
                          'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                          'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                          'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                          'pc_assignee' => $this->input->post('pc_assignee'.$i),
                          'pc_created_by' => $this->session->userdata('d168_id'),
                          'pc_created_date' => date('Y-m-d H:i:s'),
                          'pc_notify' => $get_notify_member,
                          'pc_notify_clear' => $get_notify_member,
                          'pc_notify_date' => date('Y-m-d H:i:s'),
                          'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          //'publish_date' => $this->input->post('pub_date'.$i),
                        );
          }else if($platform == 'youtube'){
            $data = array('pc_project_assign' => $this->input->post('pid'),
                          'portfolio_id' => $portfolio_id,
                          'dept_id' => $dept_id,
                          'pc_code' => $get_pc_code,
                          'platform' => $this->input->post('platform'.$i),
                          'pc_title' => $this->input->post('pc_title'.$i),
                          'written_content' => $this->input->post('written_content'.$i),
                          'tags' => $this->input->post('tags'.$i),
                          'pc_link' => $pc_link_array,
                          'pc_link_comment' => $pc_link_comment_array,
                          'pc_file' => $pc_file_upload,
                          'pc_status' => 'done',
                          'pc_status_date' => date('Y-m-d H:i:s'),
                          'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                          'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                          'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                          'pc_assignee' => $this->input->post('pc_assignee'.$i),
                          'pc_created_by' => $this->session->userdata('d168_id'),
                          'pc_created_date' => date('Y-m-d H:i:s'),                          
                          'pc_notify' => $get_notify_member,
                          'pc_notify_clear' => $get_notify_member,
                          'pc_notify_date' => date('Y-m-d H:i:s'),
                          'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          //'publish_date' => $this->input->post('pub_date'.$i),
                        );
          }else if($platform == 'blogger'){
            $data = array('pc_project_assign' => $this->input->post('pid'),
                          'portfolio_id' => $portfolio_id,
                          'dept_id' => $dept_id,
                          'pc_code' => $get_pc_code,
                          'platform' => $this->input->post('platform'.$i),
                          'pc_title' => $this->input->post('pc_title'.$i),
                          'written_content' => $this->input->post('written_content'.$i),
                          'target_audience' => $this->input->post('target_audience'.$i),
                          'solutions' => $this->input->post('solutions'.$i),
                          'keywords' => $this->input->post('keywords'.$i),
                          'internal_links' => $this->input->post('internal_links'.$i),
                          'external_links' => $this->input->post('external_links'.$i),
                          'meta_title' => $this->input->post('meta_title'.$i),
                          'meta_description' => $this->input->post('meta_description'.$i),
                          'pc_link' => $pc_link_array,
                          'pc_link_comment' => $pc_link_comment_array,
                          'pc_file' => $pc_file_upload,
                          'doc_pc_file' => $doc_pc_file_upload,
                          'pc_status' => 'done',
                          'pc_status_date' => date('Y-m-d H:i:s'),
                          'written_content_assignee' => $this->input->post('written_content_assignee'.$i),
                          'pc_file_assignee' => $this->input->post('pc_file_assignee'.$i),
                          'submit_to_approval' => $this->input->post('submit_to_approval'.$i),
                          'pc_assignee' => $this->input->post('pc_assignee'.$i),
                          'pc_created_by' => $this->session->userdata('d168_id'),
                          'pc_created_date' => date('Y-m-d H:i:s'),
                          'pc_notify' => $get_notify_member,
                          'pc_notify_clear' => $get_notify_member,
                          'pc_notify_date' => date('Y-m-d H:i:s'),
                          'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          //'publish_date' => $this->input->post('pub_date'.$i),
                        );
          }
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insert_NewContent($data);
          //recent inserted id
          $inserted_id = $this->db->insert_id();
          if(!empty($this->input->post('pid')))
          {
            $wca = $this->Front_model->getStudentById($this->input->post('written_content_assignee'.$i));
            $pfa = $this->Front_model->getStudentById($this->input->post('pc_file_assignee'.$i));
            $sta = $this->Front_model->getStudentById($this->input->post('submit_to_approval'.$i));
            $oa = $this->Front_model->getStudentById($this->input->post('pc_assignee'.$i));
            $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pid'));
            $hdata = array( 'pid' => $this->input->post('pid'),
                            'gid' => $get_gs_pid->gid,
                            'sid' => $get_gs_pid->sid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $powner->reg_id,
                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                            'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$this->input->post('platform'.$i).', Created by '.$powner->first_name.' '.$powner->last_name.' and submitted for Approval to '.$sta->first_name.' '.$sta->last_name,
                            'pc_id' =>$inserted_id
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
          }             
        }   
        if($i == $total_fields){
          $message = 'Content Created Successfully!';
          $this->session->set_flashdata('message', $message);
          $response['pid'] =$this->input->post('pid');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
        }                   
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_platform_data()
  {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pc_id = $this->input->post('pc_id');
      $platform = $this->input->post('platform');
      $cp = $this->Front_model->getContentPlanningById($pc_id);
      $response['privilege_only_view'] = 'no';
      if(!empty($this->session->userdata('d168_user_cor_id')))
      {
      $response['privilege'] = "no";
      $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
      if($getCompPackInfo)
      {
        if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
        {
          $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
          if($getCompRolesInfo)
          {
            if($getCompRolesInfo->privilege != 'all')
            {
              $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
              if(in_array('content planner', $cus_privilege))
              {
                $response['privilege'] = "yes";
              }
            }
            else
            {
              $response['privilege'] = "yes";
            }
            if($getCompRolesInfo->privilege != 'all')
            {
              $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
              if(in_array('view', $cus_privilege))
              {
                $response['privilege_only_view'] = 'yes';
              }
            }
          }      
        }
      }
      }
      else
      {        
        $response['privilege'] = "yes";
      }
      if(($platform == 'twitter') || ($platform == 'facebook') || ($platform == 'instagram') || ($platform == 'linkedin') || ($platform == 'tiktok') || ($platform == 'google-my-business'))
      {
        $response['content'] = $cp->written_content;
        if($cp->pc_file){
          $file_array = explode(',', $cp->pc_file);
          $response['file_count'] = count($file_array);
          if(count($file_array) == 1){
            $ext = pathinfo($file_array[0], PATHINFO_EXTENSION);
            if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
            {
              $response['images'] = '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$file_array[0]).'"></div>';
            }
            else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
            {
              $response['images'] = '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$file_array[0]).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
            }
          }else{
            $response['images'] = '';
            $index = 0;
            foreach ($file_array as $fa) {
              $ext = pathinfo($fa, PATHINFO_EXTENSION);
              if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
              }
              else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
              }
              $index++;
            }
          }
        }else{
          $response['images'] = "";
        }
      }
      else if($platform == 'pinterest')
      {
        $response['title'] = $cp->pc_title;
        $response['content1'] = $cp->written_content;
        $response['content2'] = $cp->written_content_2;
        if($cp->pc_file){
          $file_array = explode(',', $cp->pc_file);
          $response['file_count'] = count($file_array);
          if(count($file_array) == 1){
            $ext = pathinfo($file_array[0], PATHINFO_EXTENSION);
            if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
            {
              $response['images'] = '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$file_array[0]).'"></div>';
            }
            else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
            {
              $response['images'] = '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$file_array[0]).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
            }
          }else{
            $response['images'] = '';
            $index = 0;
            foreach ($file_array as $fa) {
              $ext = pathinfo($fa, PATHINFO_EXTENSION);
              if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
              }
              else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
              }
            $index++;
            }
          }
        }else{
          $response['images'] = "";
        }
      }
      else if($platform == 'blogger')
      {
        $response['title'] = $cp->pc_title;
        $response['content'] = $cp->written_content;
        if($cp->pc_file){
          $file_array = explode(',', $cp->pc_file);
          $response['file_count'] = count($file_array);
          if(count($file_array) == 1){
            $ext = pathinfo($file_array[0], PATHINFO_EXTENSION);
            if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
            {
              $response['images'] = '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$file_array[0]).'"></div>';
            }
            else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
            {
              $response['images'] = '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$file_array[0]).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
            }
          }else{
            $response['images'] = '';
            $index = 0;
            foreach ($file_array as $fa) {
              $ext = pathinfo($fa, PATHINFO_EXTENSION);
              if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
              }
              else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
              }
             $index++;
            }
          }
        }else{
          $response['images'] = "";
        }
      }
      else if($platform == 'youtube')
      {
        $response['title'] = $cp->pc_title;
        $response['content'] = $cp->written_content;
        if($cp->pc_file){
          $file_array = explode(',', $cp->pc_file);
          $response['file_count'] = count($file_array);
          if(count($file_array) == 1){
            $ext = pathinfo($file_array[0], PATHINFO_EXTENSION);
            if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
            {
              $response['images'] = '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$file_array[0]).'"></div>';
            }
            else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
            {
              $response['images'] = '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$file_array[0]).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
            }
          }else{
            $response['images'] = '';
            $index = 0;
            foreach ($file_array as $fa) {
              $ext = pathinfo($fa, PATHINFO_EXTENSION);
              if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$fa).'"></div>';
                }
              }
              else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
              {
                if($index == 0)
                {
                  $response['images'] .= '<div class="carousel-item active"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
                else
                {  
                  $response['images'] .= '<div class="carousel-item"><video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$fa).'" type="video/'.$ext.'">Your browser does not support the video tag.</video></div>';
                }
              }
            $index++;
            }
          }
        }else{
          $response['images'] = "";
        }
      }
      header('Content-type: application/json');
      echo json_encode($response);       
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_content_planner()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pc_id = $this->input->post('pc_id');
      $data['get_cpd'] = $this->Front_model->getContentPlanningData($pc_id);
      $this->load->view('user/edit-content-planner',$data);        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_content_planner()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $pc_code = $this->input->post('pc_code');
    $platform = $this->input->post('platform1');
    $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    $pcdetail = $this->Front_model->getContentPlanningData($pc_id); 
    $pcfile_old = $pcdetail->pc_file;

    $pcfile_upload=$pcfile_old;

    $pcfile_new_upload = "";
    $final_mem = "";
        if(!empty($_FILES['pc_file1']['name'][0]))
          {
              $pcfile_upload= "";
              $cpt = count($_FILES['pc_file1']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/plan_content_files/';
              $config['allowed_types'] = 'gif|jpg|png|jpeg|webp|svg|mp4|ts|3gp|avi|mov|wmv|flv|m3u8';
              $maxsize=7000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['pc_file1']['name']= time().'_'.$files['pc_file1']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['pc_file1']['name'][$i])));
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['pc_file1']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['pc_file1']['type']= $files['pc_file1']['type'][$i];
                  $_FILES['pc_file1']['tmp_name']= $files['pc_file1']['tmp_name'][$i];
                  $_FILES['pc_file1']['error']= $files['pc_file1']['error'][$i];
                  $_FILES['pc_file1']['size']= $files['pc_file1']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['pc_file1']['size'] >= $maxsize)
                        {
                                $response['pc_id'] = $pc_id;
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('pc_file1'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['pcfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['pc_id'] = $pc_id;
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $pcfile_new = implode(',', array_column($uploadData, 'pcfile2'));
                        $pcfile_new_upload = implode(',', array_column($uploadData, 'pcfile2'));
                        $pdetail = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
                        $pdetail_member = $this->Front_model->getMemberProject($this->input->post('pc_project_assign'));
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($pcfile_old))
                    {
                      $pcfile_old_array = explode(', ', $pcfile_old);
                      $pcfile_new_array = explode(', ', $pcfile_new);
                      $merge_pcfile = array_merge($pcfile_old_array,$pcfile_new_array);
                      $pcfile_upload = implode(',',$merge_pcfile);                      
                    }
                    else
                    {
                      $pcfile_upload = $pcfile_new;
                    }
            }            

      $doc_pcfile_old = $pcdetail->doc_pc_file;

    $doc_pcfile_upload=$doc_pcfile_old;

    $doc_pcfile_new_upload = "";
    $doc_final_mem = "";
        if(!empty($_FILES['doc_pc_file1']['name'][0]))
          {
              $doc_pcfile_upload= "";
              $cpt = count($_FILES['doc_pc_file1']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/plan_content_files/';
              $config['allowed_types'] = '*';
              $maxsize=2000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['doc_pc_file1']['name']= time().'_'.$files['doc_pc_file1']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['doc_pc_file1']['name'][$i]))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $_FILES['doc_pc_file1']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['doc_pc_file1']['type']= $files['doc_pc_file1']['type'][$i];
                  $_FILES['doc_pc_file1']['tmp_name']= $files['doc_pc_file1']['tmp_name'][$i];
                  $_FILES['doc_pc_file1']['error']= $files['doc_pc_file1']['error'][$i];
                  $_FILES['doc_pc_file1']['size']= $files['doc_pc_file1']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['doc_pc_file1']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('doc_pc_file1'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['doc_pcfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $doc_pcfile_new = implode(',', array_column($uploadData, 'doc_pcfile2'));
                        $doc_pcfile_new_upload = implode(',', array_column($uploadData, 'doc_pcfile2'));
                        $pdetail = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
                        $pdetail_member = $this->Front_model->getMemberProject($this->input->post('pc_project_assign'));
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $doc_final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($doc_pcfile_old))
                    {
                      $doc_pcfile_old_array = explode(', ', $doc_pcfile_old);
                      $doc_pcfile_new_array = explode(', ', $doc_pcfile_new);
                      $merge_doc_pcfile = array_merge($doc_pcfile_old_array,$doc_pcfile_new_array);
                      $doc_pcfile_upload = implode(',',$merge_doc_pcfile);                      
                    }
                    else
                    {
                      $doc_pcfile_upload = $doc_pcfile_new;
                    }
            } 

    //pc_link array
          $pc_link_array="";
          $pc_link_comment_array="";
          if(!empty($_POST['pc_link1'][0]))
          {
            $pc_link_array = implode(',',$this->input->post('pc_link1'));
            $pc_link_comment_array = implode(',',$this->input->post('pc_link_comment1'));
            $pc_link_exarray = explode(',', $pc_link_array);
            $count_expc_link = count($pc_link_exarray);
            if($count_expc_link >= 0)
            {
               for ($j=0; $j<$count_expc_link; $j++)
                {
                   $pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
                    if (!preg_match($pattern, $pc_link_exarray[$j]))
                    {
                        $response['status'] = 'link_valid';
                        $response['link_counter'] = $i;
                        header('Content-type: application/json');
                        //echo json_encode($response);
                        exit(json_encode($response));
                    }
                }
            }           
          }

            $get_notify_member_new = "";
            if($pcdetail->written_content_assignee != $this->input->post('written_content_assignee1'))
            {
              $new_wca = $this->input->post('written_content_assignee1');
            }
            else
            {
              $array1 = explode(',', $pcdetail->pc_notify);
              if(in_array($pcdetail->written_content_assignee, $array1))
              {
                  $new_wca = $pcdetail->written_content_assignee;
              }
              else
              {
                $new_wca = "";
              }
            }

            if($pcdetail->pc_file_assignee != $this->input->post('pc_file_assignee1'))
            {
              $new_pfa = $this->input->post('pc_file_assignee1');
            }
            else
            {
              $array2 = explode(',', $pcdetail->pc_notify);
              if(in_array($pcdetail->pc_file_assignee, $array2))
              {
                  $new_pfa = $pcdetail->pc_file_assignee;
              }
              else
              {
                $new_pfa = "";
              }
            }

            if($pcdetail->submit_to_approval != $this->input->post('submit_to_approval1'))
            {
              $new_sta = $this->input->post('submit_to_approval1');
            }
            else
            {
              $array3 = explode(',', $pcdetail->pc_notify);
              if(in_array($pcdetail->submit_to_approval, $array3))
              {
                  $new_sta = $pcdetail->submit_to_approval;
              }
              else
              {
                $new_sta = "";
              }
            }

            if($pcdetail->pc_assignee != $this->input->post('pc_assignee1'))
            {
              $new_pca = $this->input->post('pc_assignee1');
            }
            else
            {
              $array4 = explode(',', $pcdetail->pc_notify);
              if(in_array($pcdetail->pc_assignee, $array4))
              {
                  $new_pca = $pcdetail->pc_assignee;
              }
              else
              {
                $new_pca = "";
              }
            }
            $get_notify_member_new = $new_wca.",".$new_pfa.",".$new_sta.",".$new_pca;

            $get_notify_member_new_clear = "";
            if($pcdetail->written_content_assignee != $this->input->post('written_content_assignee1'))
            {
              $new_wca2 = $this->input->post('written_content_assignee1');
            }
            else
            {
              $array1 = explode(',', $pcdetail->pc_notify_clear);
              if(in_array($pcdetail->written_content_assignee, $array1))
              {
                  $new_wca2 = $pcdetail->written_content_assignee;
              }
              else
              {
                $new_wca2 = "";
              }
            }

            if($pcdetail->pc_file_assignee != $this->input->post('pc_file_assignee1'))
            {
              $new_pfa2 = $this->input->post('pc_file_assignee1');
            }
            else
            {
              $array2 = explode(',', $pcdetail->pc_notify_clear);
              if(in_array($pcdetail->pc_file_assignee, $array2))
              {
                  $new_pfa2 = $pcdetail->pc_file_assignee;
              }
              else
              {
                $new_pfa2 = "";
              }
            }

            if($pcdetail->submit_to_approval != $this->input->post('submit_to_approval1'))
            {
              $new_sta2 = $this->input->post('submit_to_approval1');
            }
            else
            {
              $array3 = explode(',', $pcdetail->pc_notify_clear);
              if(in_array($pcdetail->submit_to_approval, $array3))
              {
                  $new_sta2 = $pcdetail->submit_to_approval;
              }
              else
              {
                $new_sta2 = "";
              }
            }

            if($pcdetail->pc_assignee != $this->input->post('pc_assignee1'))
            {
              $new_pca2 = $this->input->post('pc_assignee1');
            }
            else
            {
              $array4 = explode(',', $pcdetail->pc_notify_clear);
              if(in_array($pcdetail->pc_assignee, $array4))
              {
                  $new_pca2 = $pcdetail->pc_assignee;
              }
              else
              {
                $new_pca2 = "";
              }
            }
            $get_notify_member_new_clear = $new_wca2.",".$new_pfa2.",".$new_sta2.",".$new_pca2;

    if(($platform == 'twitter') || ($platform == 'facebook') || ($platform == 'instagram') || ($platform == 'linkedin') || ($platform == 'tiktok') || ($platform == 'google-my-business'))
    {
      $data = array(
          'written_content' => $this->input->post('written_content1'),
          'pc_link' => $pc_link_array,
          'pc_link_comment' => $pc_link_comment_array,
          'pc_file' => $pcfile_upload,
          'written_content_assignee' => $this->input->post('written_content_assignee1'),
          'pc_file_assignee' => $this->input->post('pc_file_assignee1'),
          'submit_to_approval' => $this->input->post('submit_to_approval1'),
          'pc_assignee' => $this->input->post('pc_assignee1'),
          'pc_notify' => $get_notify_member_new,
          'pc_notify_clear' => $get_notify_member_new_clear,
          'pc_notify_date' => date('Y-m-d H:i:s'),
          //'publish_date' => $this->input->post('pub_date1'),
        );

      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->update_Content($data,$pc_id);
      if(!empty($this->input->post('pc_project_assign')))
      {
        $wca = $this->Front_model->getStudentById($this->input->post('written_content_assignee1'));
        $pfa = $this->Front_model->getStudentById($this->input->post('pc_file_assignee1'));
        $sta = $this->Front_model->getStudentById($this->input->post('submit_to_approval1'));
        $oa = $this->Front_model->getStudentById($this->input->post('pc_assignee1'));
        $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
        $hdata = array( 'pid' => $this->input->post('pc_project_assign'),
                        'gid' => $get_gs_pid->gid,
                        'sid' => $get_gs_pid->sid,
                        'h_date' => date('Y-m-d H:i:s'),
                        'h_resource_id' => $powner->reg_id,
                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                        'h_description' => 'Plan Content Code: '.$pc_code.' , '.'Platform: '.$this->input->post('platform1').', Updated by '.$powner->first_name.' '.$powner->last_name.' and submitted for Approval to '.$sta->first_name.' '.$sta->last_name,
                        'pc_id' =>$pc_id
                    );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
      }
        $message = 'Content Updated Successfully!';
        $this->session->set_flashdata('message', $message);
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else if($platform == 'pinterest')
    {
      $data = array(
        'pc_title' => $this->input->post('pc_title1'),
        'written_content' => $this->input->post('written_content1'),
        'written_content_2' => $this->input->post('written_content_21'),
        'pc_link' => $pc_link_array,
        'pc_link_comment' => $pc_link_comment_array,
        'pc_file' => $pcfile_upload,
        'written_content_assignee' => $this->input->post('written_content_assignee1'),
        'pc_file_assignee' => $this->input->post('pc_file_assignee1'),
        'submit_to_approval' => $this->input->post('submit_to_approval1'),
        'pc_assignee' => $this->input->post('pc_assignee1'),
        'pc_notify' => $get_notify_member_new,
        'pc_notify_clear' => $get_notify_member_new_clear,
        'pc_notify_date' => date('Y-m-d H:i:s'),
        //'publish_date' => $this->input->post('pub_date1'),
      );

    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_Content($data,$pc_id);
    if(!empty($this->input->post('pc_project_assign')))
    {
      $wca = $this->Front_model->getStudentById($this->input->post('written_content_assignee1'));
      $pfa = $this->Front_model->getStudentById($this->input->post('pc_file_assignee1'));
      $sta = $this->Front_model->getStudentById($this->input->post('submit_to_approval1'));
      $oa = $this->Front_model->getStudentById($this->input->post('pc_assignee1'));
      $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
      $hdata = array( 'pid' => $this->input->post('pc_project_assign'),
                      'gid' => $get_gs_pid->gid,
                      'sid' => $get_gs_pid->sid,
                      'h_date' => date('Y-m-d H:i:s'),
                      'h_resource_id' => $powner->reg_id,
                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                      'h_description' => 'Plan Content Code: '.$pc_code.' , '.'Platform: '.$this->input->post('platform1').', Updated by '.$powner->first_name.' '.$powner->last_name.' and submitted for Approval to '.$sta->first_name.' '.$sta->last_name,
                      'pc_id' =>$pc_id
                  );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
    }
      $message = 'Content Updated Successfully!';
      $this->session->set_flashdata('message', $message);
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else if($platform == 'youtube')
    {
      $data = array(
        'pc_title' => $this->input->post('pc_title1'),
        'written_content' => $this->input->post('written_content1'),
        'tags' => $this->input->post('tags1'),
        'pc_link' => $pc_link_array,
        'pc_link_comment' => $pc_link_comment_array,
        'pc_file' => $pcfile_upload,
        'written_content_assignee' => $this->input->post('written_content_assignee1'),
        'pc_file_assignee' => $this->input->post('pc_file_assignee1'),
        'submit_to_approval' => $this->input->post('submit_to_approval1'),
        'pc_assignee' => $this->input->post('pc_assignee1'),
        'pc_notify' => $get_notify_member_new,
        'pc_notify_clear' => $get_notify_member_new_clear,
        'pc_notify_date' => date('Y-m-d H:i:s'),
        //'publish_date' => $this->input->post('pub_date1'),
      );

    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_Content($data,$pc_id);
    if(!empty($this->input->post('pc_project_assign')))
    {
      $wca = $this->Front_model->getStudentById($this->input->post('written_content_assignee1'));
      $pfa = $this->Front_model->getStudentById($this->input->post('pc_file_assignee1'));
      $sta = $this->Front_model->getStudentById($this->input->post('submit_to_approval1'));
      $oa = $this->Front_model->getStudentById($this->input->post('pc_assignee1'));
      $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
      $hdata = array( 'pid' => $this->input->post('pc_project_assign'),
                      'gid' => $get_gs_pid->gid,
                      'sid' => $get_gs_pid->sid,
                      'h_date' => date('Y-m-d H:i:s'),
                      'h_resource_id' => $powner->reg_id,
                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                      'h_description' => 'Plan Content Code: '.$pc_code.' , '.'Platform: '.$this->input->post('platform1').', Updated by '.$powner->first_name.' '.$powner->last_name.' and submitted for Approval to '.$sta->first_name.' '.$sta->last_name,
                      'pc_id' =>$pc_id
                  );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
    }
      $message = 'Content Updated Successfully!';
      $this->session->set_flashdata('message', $message);
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else if($platform == 'blogger')
    {
      $data = array(
        'pc_title' => $this->input->post('pc_title1'),
        'written_content' => $this->input->post('written_content1'),
        'target_audience' => $this->input->post('target_audience1'),
        'solutions' => $this->input->post('solutions1'),
        'keywords' => $this->input->post('keywords1'),
        'internal_links' => $this->input->post('internal_links1'),
        'external_links' => $this->input->post('external_links1'),
        'meta_title' => $this->input->post('meta_title1'),
        'meta_description' => $this->input->post('meta_description1'),
        'pc_link' => $pc_link_array,
        'pc_link_comment' => $pc_link_comment_array,
        'pc_file' => $pcfile_upload,
        'doc_pc_file' => $doc_pcfile_upload,
        'written_content_assignee' => $this->input->post('written_content_assignee1'),
        'pc_file_assignee' => $this->input->post('pc_file_assignee1'),
        'submit_to_approval' => $this->input->post('submit_to_approval1'),
        'pc_assignee' => $this->input->post('pc_assignee1'),
        'pc_notify' => $get_notify_member_new,
        'pc_notify_clear' => $get_notify_member_new_clear,
        'pc_notify_date' => date('Y-m-d H:i:s'),
        //'publish_date' => $this->input->post('pub_date1'),
      );

    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_Content($data,$pc_id);
    if(!empty($this->input->post('pc_project_assign')))
    {
      $wca = $this->Front_model->getStudentById($this->input->post('written_content_assignee1'));
      $pfa = $this->Front_model->getStudentById($this->input->post('pc_file_assignee1'));
      $sta = $this->Front_model->getStudentById($this->input->post('submit_to_approval1'));
      $oa = $this->Front_model->getStudentById($this->input->post('pc_assignee1'));
      $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pc_project_assign'));
      $hdata = array( 'pid' => $this->input->post('pc_project_assign'),
                      'gid' => $get_gs_pid->gid,
                      'sid' => $get_gs_pid->sid,
                      'h_date' => date('Y-m-d H:i:s'),
                      'h_resource_id' => $powner->reg_id,
                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                      'h_description' => 'Plan Content Code: '.$pc_code.' , '.'Platform: '.$this->input->post('platform1').', Updated by '.$powner->first_name.' '.$powner->last_name.' and submitted for Approval to '.$sta->first_name.' '.$sta->last_name,
                      'pc_id' =>$pc_id
                  );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
    }
      $message = 'Content Updated Successfully!';
      $this->session->set_flashdata('message', $message);
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_pc_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $privilege_only_view = 'no';
    if(!empty($this->session->userdata('d168_user_cor_id')))
    {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('view', $cus_privilege))
            {
              $privilege_only_view = 'yes';
            }
          }
        }      
      }
    }
    }
    $index_id = $this->input->post('index_id');
    $pc_id = $this->input->post('pc_id');
   
    $pcdetail = $this->Front_model->getContentPlanningData($pc_id);
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($pcdetail)
    {
      $pc_file = explode(',', $pcdetail->pc_file);
      $pcfile_name = $pc_file[$index_id];
      if($pcdetail->pc_project_assign != 0)
      {
        $get_gs_pid = $this->Front_model->file_itgetProjectById($pcdetail->pc_project_assign);
        $hdata = array(
                                      'pid' => $pcdetail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  substr(trim($pcfile_name), strpos(trim($pcfile_name), '_') + 1).' Moved To Trash By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
      }

                    $data = array(
                                    'pc_id' => $pc_id,
                                    'pc_project_assign' => $pcdetail->pc_project_assign,
                                    'portfolio_id' => $pcdetail->portfolio_id,
                                    'pc_file' => $pcfile_name,
                                    'pc_trash' => 'yes',
                                    'pc_trash_date' =>date("Y-m-d", strtotime("+1 month")),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_content_planning_trash($data);

            $getAllfile = explode(',', $pcdetail->pc_file);
            $count = count($getAllfile);
            $new_files = array();
            if($count > 0)
            {
              for ($i=0; $i<$count; $i++)
                {
                  $get_file_name = $getAllfile[$i];
                  if($get_file_name == $pcfile_name)
                  {
                    $get_file_name = "";
                  }
                  $new_files[] = $get_file_name;
                }
                //echo "<br>";
                $new = implode(',', $new_files);
                //echo $new;
                //echo "<br>";
                $string_file = preg_replace("/,+/", ",", $new);
                $new_string_file = rtrim($string_file, ',');
                $final_string_file = ltrim($new_string_file, ',');
                //echo $string_file;
                          $data = array(
                                            'pc_file' => $final_string_file
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->update_Content($data,$pc_id);
            }

            $get_cpd = $this->Front_model->getContentPlanningData($pc_id);
            $project_id = $get_cpd->pc_project_assign;
            $pdetail = $this->Front_model->file_itProjectDetailPortfolio($project_id);
            $pcreated_by = $pdetail->pcreated_by;
            if(($pcreated_by == $this->session->userdata('d168_id')) || ($get_cpd->pc_created_by == $this->session->userdata('d168_id')) || ($get_cpd->submit_to_approval == $this->session->userdata('d168_id')) || ($get_cpd->pc_assignee == $this->session->userdata('d168_id')) || ($get_cpd->pc_file_assignee == $this->session->userdata('d168_id')))
            {
                $pfa_readonly = '';
                $delete_display = 'style="display:block"';
            }
            else
            {
                $pfa_readonly = 'readonly';
                $delete_display = 'style="display:none"';
            }
            $all_pc_file = explode(',', $get_cpd->pc_file);
            $old_cpfile = count($all_pc_file); 

            if($all_pc_file)
            {
                ?>
                <input type="hidden" id="limitCPOldFiles90<?php echo $get_cpd->pc_id; ?>" name="limitCPOldFiles" value="<?php echo $old_cpfile;?>">
                <ul class="list-unstyled fw-medium refresh_pcf_remove" style="border: 1px solid #ced4da;border-radius: 0.25rem;">
                    <p></p>
                <?php
                $count = 0;
                foreach($all_pc_file as $pc_file)
                {
                  if(empty($pc_file))
                  {
                    ?>
                    <li style="padding-left: 30px;" id="field_id<?php echo $count;?>">
                    </li>
                    <?php
                  }
                  else
                  {
                    ?>
                    <li style="padding-left: 30px;" id="field_id<?php echo $count;?>">
                        <div class="row">
                            <div class="col-8"> 
                               <a href="javascript: void(0);" class="nameLink" onclick="return PreviewContentFile('<?php echo $pc_file;?>','<?php echo $get_cpd->pc_id;?>')" title="Preview"><?php echo substr($pc_file, strpos($pc_file, '_') + 1);?></a>
                            </div>
                            <div class="col-4">
                                <a <?php echo $delete_display; ?> href="javascript:void(0)" onclick="return delete_pc_file('<?php echo $count;?>','<?php echo $get_cpd->pc_id;?>');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
<?php 
if($privilege_only_view == 'no')
{
?>
                                <a href="<?php echo base_url().'front/download_ContentFileAttachment/'.$pc_file.'/'.$get_cpd->pc_id;?>" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
<?php 
}
?>
                            </div>
                        </div></li>
                    <?php
                    }
                     $count++;
                }
                ?>
                </ul>
                <?php
            }
            else
            {
             ?>
              <ul class="list-unstyled fw-medium refresh_pcf_remove" style="border: 1px solid #ced4da;border-radius: 0.25rem;">
                    <p></p>
              </ul>
             <?php
            }           
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_pro_pc_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $index_id = $this->input->post('index_id');
    $pc_id = $this->input->post('pc_id');
   
    $pcdetail = $this->Front_model->getContentPlanningData($pc_id);
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($pcdetail)
    {
      $pc_file = explode(',', $pcdetail->pc_file);
      $pcfile_name = $pc_file[$index_id];
      if($pcdetail->pc_project_assign != 0)
      {
        $get_gs_pid = $this->Front_model->file_itgetProjectById($pcdetail->pc_project_assign);
        $hdata = array(
                                      'pid' => $pcdetail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  substr(trim($pcfile_name), strpos(trim($pcfile_name), '_') + 1).' Moved To Trash By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
      }

                    $data = array(
                                    'pc_id' => $pc_id,
                                    'pc_project_assign' => $pcdetail->pc_project_assign,
                                    'portfolio_id' => $pcdetail->portfolio_id,
                                    'pc_file' => $pcfile_name,
                                    'pc_trash' => 'yes',
                                    'pc_trash_date' =>date("Y-m-d", strtotime("+1 month")),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_content_planning_trash($data);

            $getAllfile = explode(',', $pcdetail->pc_file);
            $count = count($getAllfile);
            $new_files = array();
            if($count > 0)
            {
              for ($i=0; $i<$count; $i++)
                {
                  $get_file_name = $getAllfile[$i];
                  if($get_file_name == $pcfile_name)
                  {
                    $get_file_name = "";
                  }
                  $new_files[] = $get_file_name;
                }
                //echo "<br>";
                $new = implode(',', $new_files);
                //echo $new;
                //echo "<br>";
                $string_file = preg_replace("/,+/", ",", $new);
                $new_string_file = rtrim($string_file, ',');
                $final_string_file = ltrim($new_string_file, ',');
                //echo $string_file;
                          $data = array(
                                            'pc_file' => $final_string_file
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->update_Content($data,$pc_id);
            }

              $this->session->set_flashdata('message','File Moved to Trash Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function select_project_assignees()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $projtm = $this->Front_model->getAccepted_ProjTM($this->input->post('pid'));
    $response['assignees'] = '';
    $response['none_assignee'] = '';
    if($projtm){
      foreach ($projtm as $ptm) {
        $m = $this->Front_model->getStudentById($ptm->pmember);
        if($m)
        {
        if($m->reg_id != $this->session->userdata('d168_id'))
        {
          $response['assignees'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name.' '.$m->last_name.'</span></option>';
          $response['none_assignee'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name.' '.$m->last_name.'</span></option>';
        }else{
          if($m->reg_id == $this->session->userdata('d168_id'))
          {
            $response['assignees'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';
            $response['none_assignee'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';          
          }
        }
        }
      }
      $proj_del = $this->Front_model->getProjectById($ptm->pid);
      $m = $this->Front_model->getStudentById($proj_del->pcreated_by);
      if($m){
        if($m->reg_id != $this->session->userdata('d168_id'))
        {
          $response['assignees'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name.' '.$m->last_name.'</span></option>';
          $response['none_assignee'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name.' '.$m->last_name.'</span></option>';
        }
        if($m->reg_id == $this->session->userdata('d168_id'))
        {
          $response['assignees'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';
          $response['none_assignee'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';          
        }
      }
    }
    else
    {
      $response['assignees'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';
      $response['none_assignee'] .= '<option value="'.$this->session->userdata('d168_id').'"><span>Assign To Me</span></option>';
    }
    $response['none_assignee'] .= '<option value=""><span>None</span></option>';
    header('Content-type: application/json');
    echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_portfolio_projects()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $port_id = $this->input->post('port_id');
    $plist = $this->Front_model->portProjectList($port_id);
    $accepted_plist = $this->Front_model->acceptedPortProjectList2($port_id);
    ?>
    <option value="" selected="">Select Project</option>
    <?php
    if($plist){
      foreach($plist as $pl)
      {
          ?>
          <option value="<?php echo $pl->pid;?>"><?php echo $pl->pname;?></option>
          <?php
      }
    }
    if($accepted_plist){
      foreach($accepted_plist as $apl)
      {
          ?>
          <option value="<?php echo $apl->pid;?>"><?php echo $apl->pname;?></option>
          <?php
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');

    $previous_url = $_SERVER['HTTP_REFERER'];
    $previous_url_array = explode('/', $previous_url);
    $previous_page_name = end($previous_url_array);
    $data['previous_page_name'] = $previous_page_name;

    if($previous_page_name == 'file-cabinet'){
      $res = $this->Front_model->check_platform_file_it($pc_id); 
    }else{
      $res = $this->Front_model->file_itcheck_platform($pc_id);
    }
     
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    
    if($res)
    {
                        $data = array(
                                        'trash' => 'yes',
                                        'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                        'cpsingle_trash' => 'yes'
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);

            if($res->pc_project_assign != 0)
            {
              $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pc_project_assign);
                  $hdata = array(
                                        'pid' => $res->pc_project_assign,
                                        'gid' => $get_gs_pid->gid,
                                        'sid' => $get_gs_pid->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->pc_code.' Content Moved to Trash by '.$powner->first_name.' '.$powner->last_name,
                                        'pc_id' =>$res->pc_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
            }
            $this->session->set_flashdata('message','Content Moved To Trash Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->file_itcheck_platform2($pc_id); 

    if($res)
    {
      if($res->pc_project_assign != 0)
        {
          $checkTaskProjectTrash = $this->Front_model->checkTaskProjectTrash($res->pc_project_assign);
            if($checkTaskProjectTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Project is in Trash! To Restore Content please Restore Project!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
                $data = array(
                                        'trash' => '',
                                        'trash_date' => '',
                                        'cpsingle_trash' => ''
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);

                $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pc_project_assign);
                $hdata = array(
                                              'pid' => $res->pc_project_assign,
                                              'gid' => $get_gs_pid->gid,
                                              'sid' => $get_gs_pid->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->pc_code.' Content Restored by '.$powner->first_name.' '.$powner->last_name,
                                              'pc_id' =>$res->pc_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
                  
                  $this->session->set_flashdata('message','Content Restored Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
            }
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function platform_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $get_pc_id = $this->input->post('pc_id');
    $res = $this->Front_model->check_platform2_new($get_pc_id); 
      if($res)
      {
          $this->Front_model->delete_cp_t_trash($get_pc_id);
          $this->Front_model->delete_platform($get_pc_id);

          $this->session->set_flashdata('message','Content deleted permanently!');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $res = $this->Front_model->archivecheck_DonePlatform($pc_id);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

    if($res)
    {
          $data = array(
                                        'cp_archive' => 'yes',
                                        'cp_archive_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);
          if($res->pc_project_assign != 0)
              {
                $get_gs_pid = $this->Front_model->archivegetProjectById($res->pc_project_assign);
                $hdata = array(
                                              'pid' => $res->pc_project_assign,
                                              'gid' => $get_gs_pid->gid,
                                              'sid' => $get_gs_pid->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->pc_code.' Content Archived by '.$powner->first_name.' '.$powner->last_name,
                                              'pc_id' =>$res->pc_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
            
            $this->session->set_flashdata('message','Content Archived Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    else
    {
                $this->session->set_flashdata('al_message','Please Complete to Archive!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function unarchived_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_platform_archive($pc_id); 
    if($res)
    {
      if($res->pc_project_assign != 0)
        {
          $proj_del = $this->Front_model->getPortProjectById($res->pc_project_assign);
          $file_it = '';
          $file_it_date = '';
          if($proj_del){
            if($proj_del->project_file_it == "yes"){
              $file_it = 'yes';
              $file_it_date = $proj_del->project_file_it_date;
            }
          }
          $checkTaskProjectArchive = $this->Front_model->checkTaskProjectArchive($res->pc_project_assign);
            if($checkTaskProjectArchive > 0)
            {
                 $this->session->set_flashdata('al_message','Project is Archived! To Reopen Content please Reopen Project!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            } 
            else
            {
                $data = array(
                                        'cp_archive' => '',
                                        'cp_archive_date' => '',
                                        'cp_file_it' => $file_it,
                                        'cp_file_it_date' => $file_it_date,
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);

                $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pc_project_assign);
                $hdata = array(
                                        'pid' => $res->pc_project_assign,
                                        'gid' => $get_gs_pid->gid,
                                        'sid' => $get_gs_pid->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->pc_code.' Content Reopened by '.$powner->first_name.' '.$powner->last_name,
                                        'pc_id' =>$res->pc_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Content Reopened Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function download_ContentFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pc_file = $this->uri->segment(3);
      $pc_id = $this->uri->segment(4);
      $previous_url = $_SERVER['HTTP_REFERER']; 
      $previous_url_array = explode('/', $previous_url);  
      $previous_page_name = end($previous_url_array); 
      $data['previous_page_name'] = $previous_page_name;  
      if($previous_page_name == 'file-cabinet'){  
        $cp_detail = $this->Front_model->check_platform_file_it($pc_id);  
      }else{  
        $cp_detail = $this->Front_model->check_platform($pc_id);  
      } 
             
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($cp_detail)
      {
        if($cp_detail->pc_project_assign != 0)
        {
          $get_gs_pid = $this->Front_model->getProjectById($cp_detail->pc_project_assign);
            $hdata = array(
                                      'pid' => $cp_detail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  substr(trim($pc_file), strpos(trim($pc_file), '_') + 1).' File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$cp_detail->pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
        }
      }
      $file = 'assets/plan_content_files/'.$pc_file;
      //print_r($file);
      //force download
      force_download($file,NULL);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function download_ContentALLFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pc_id = $this->uri->segment(3);
      $previous_url = $_SERVER['HTTP_REFERER']; 
      $previous_url_array = explode('/', $previous_url);  
      $previous_page_name = end($previous_url_array); 
      $data['previous_page_name'] = $previous_page_name;  
      if($previous_page_name == 'file-cabinet'){  
        $cp_detail = $this->Front_model->check_platform_file_it($pc_id);  
      }else{  
        $cp_detail = $this->Front_model->check_platform($pc_id);  
      }

      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($cp_detail)
      {
        if($cp_detail->pc_project_assign != 0)
        {
          $get_gs_pid = $this->Front_model->getProjectById($cp_detail->pc_project_assign);
            $hdata = array(
                                      'pid' => $cp_detail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  ' Content File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$cp_detail->pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
        }
        $all_pc_file = explode(',', $cp_detail->pc_file);
        $count = count($all_pc_file);
        if(!empty($all_pc_file[0]))
        {
          if($count > 1)
          {
            foreach($all_pc_file as $pc_file)
            {
                $fileName = FCPATH.'assets/plan_content_files/'.$pc_file;
                $this->zip->read_file($fileName);
            }
            $this->zip->download('planned_content_files.zip');
          }
          else
          {
            $file = 'assets/plan_content_files/'.$all_pc_file[0];
            //print_r($file);
            //force download
            force_download($file,NULL);
          }          
        }
        else
        {
          redirect($_SERVER['HTTP_REFERER']);
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function preview_content_file()
  {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
            $privilege_only_view = 'no';
            if(!empty($this->session->userdata('d168_user_cor_id')))
            {
            $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getCompPackInfo)
            {
              $privilege = "no";
              if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
              {
                $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
                if($getCompRolesInfo)
                {
                  if($getCompRolesInfo->privilege != 'all')
                  {
                    $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                    if(in_array('view', $cus_privilege))
                    {
                      $privilege_only_view = 'yes';
                    }
                  }
                }      
              }
            }
            }
            $pc_file = $this->input->post('pc_file');
            $pc_id = $this->input->post('pc_id');
            $ext = pathinfo($pc_file, PATHINFO_EXTENSION);
            $previous_url = $_SERVER['HTTP_REFERER']; 
            $previous_url_array = explode('/', $previous_url);  
            $previous_page_name = end($previous_url_array); 
            $data['previous_page_name'] = $previous_page_name; 
            if($privilege_only_view == 'no')
            {
              $preview_download = '<a href="'.base_url().'front/download_ContentFileAttachment/'.$pc_file.'/'.$pc_id.'" class="btn btn-sm btn-d text-white">Download</a>';
            }
            else
            {
              $preview_download = '';
            } 
            if($previous_page_name == 'file-cabinet'){  
              $cp_detail = $this->Front_model->check_platform_file_it($pc_id);  
            }else{  
              $cp_detail = $this->Front_model->check_platform($pc_id);  
            } 

            if($cp_detail)
            {
              if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
              {
                echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="previewTaskModalLabel">'.substr($pc_file, strpos($pc_file, '_') + 1).'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img class="d-block img-fluid" src="'.base_url('assets/plan_content_files/'.$pc_file).'">                          
                    </div>
                    <div class="modal-footer">
                       '.$preview_download.' 
                    </div>';
              }
              else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
              {
                echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="previewTaskModalLabel">'.substr($pc_file, strpos($pc_file, '_') + 1).'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <video class="d-block img-fluid" controls><source src="'.base_url('assets/plan_content_files/'.$pc_file).'" type="video/'.$ext.'">Your browser does not support the video tag.</video>                          
                    </div>
                    <div class="modal-footer">
                        '.$preview_download.'
                    </div>';
              }
            }
            else
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewTaskModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       File Not Found!                        
                  </div>';
            }          
        } 
        else 
        {
            redirect(base_url('login'));
        }
  }

  public function portfolio_projects_content()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['port_id'] = $this->uri->segment(2);
      $data['check_port_id'] = $this->uri->segment(2);
      // if((!empty($this->session->userdata('searched_content_port_id'))) && (!empty($this->session->userdata('searched_content_date'))))
      //     {
      //       $this->session->unset_userdata('searched_content_port_id');
      //       $this->session->unset_userdata('searched_content_date');
      //     }
      $data['plist'] = $this->Front_model->ProjectList();
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
      //$data['contentPlanningPublishDate'] = $this->Front_model->contentPlanningPublishDate($data['port_id']);
      //$data['contentPlanningDetails'] = $this->Front_model->PortfoliocontentPlanningDetailsProjects($data['port_id']);
      $data['contentPlanningDetails_plist'] = $this->Front_model->ProjectListByPortfolioContent($data['port_id']);
      $data['contentPlanningDetails_accepted_plist'] = $this->Front_model->AcceptedProjectListByPortfolioContent($data['port_id']);
      $data['contentPlanningDetails_pending_plist'] = $this->Front_model->PendingProjectListByPortfolioContent($data['port_id']);
      $data['contentPlanningDetails_readmore_plist'] = $this->Front_model->ReadMoreProjectListByPortfolioContent($data['port_id']);
      $this->load->view('user/portfolio-projects-content',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function preview_content_doc()
  {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
          $privilege_only_view = 'no';
          if(!empty($this->session->userdata('d168_user_cor_id')))
          {
          $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
          if($getCompPackInfo)
          {
            $privilege = "no";
            if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
            {
              $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
              if($getCompRolesInfo)
              {
                if($getCompRolesInfo->privilege != 'all')
                {
                  $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                  if(in_array('view', $cus_privilege))
                  {
                    $privilege_only_view = 'yes';
                  }
                }
              }      
            }
          }
          }
            $doc_pc_file = $this->input->post('doc_pc_file');
            $pc_id = $this->input->post('pc_id');
            $getExt = pathinfo($doc_pc_file, PATHINFO_EXTENSION);
             $previous_url = $_SERVER['HTTP_REFERER'];  
            $previous_url_array = explode('/', $previous_url);  
            $previous_page_name = end($previous_url_array); 
            $data['previous_page_name'] = $previous_page_name;  
            if($privilege_only_view == 'no')
            {
              $preview_download = '<a href="'.base_url().'front/download_ContentDocFileAttachment/'.$doc_pc_file.'/'.$pc_id.'" class="btn btn-sm btn-d text-white">Download</a>';
            }
            else
            {
              $preview_download = '';
            }
            if($previous_page_name == 'file-cabinet'){  
              $cp_detail = $this->Front_model->check_platform_file_it($pc_id);  
            }else{  
              $cp_detail = $this->Front_model->check_platform($pc_id);  
            } 

            if($cp_detail)
            {
              if($getExt == 'jpg' || $getExt == 'JPG' || $getExt == 'jpeg' || $getExt == 'JPEG' || $getExt == 'png' || $getExt == 'PNG' || $getExt == 'svg' || $getExt == 'SVG' || $getExt == 'webp' || $getExt == 'WEBP')
              {
                echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="previewContentDocModalLabel">'.substr($doc_pc_file, strpos($doc_pc_file, '_') + 1).'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="height:400px">
                    <img src="'.base_url().'assets/plan_content_files/'.$doc_pc_file .'" height="100%" width="100%">                      
                    </div>
                    <div class="modal-footer">
                        '.$preview_download.'
                    </div>';
              }
              elseif($getExt == 'pdf' || $getExt == 'PDF' || $getExt == 'gif' || $getExt == 'GIF' || $getExt == 'txt' || $getExt == 'TXT')
              {
                echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="previewContentDocModalLabel">'.substr($doc_pc_file, strpos($doc_pc_file, '_') + 1).'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="height:400px">
                    <iframe src="'.base_url().'assets/plan_content_files/'.$doc_pc_file .'" height="100%" width="100%"></iframe>                        
                    </div>
                    <div class="modal-footer">
                        '.$preview_download.'
                    </div>';
              }
              elseif($getExt == 'mp4' || $getExt == 'MP4' || $getExt == 'mov' || $getExt == 'MOV' || $getExt == 'webm' || $getExt == 'WEBM' || $getExt == 'mkv'  || $getExt == 'MKV')
              {
                echo '<div class="modal-header">
                      <h5 class="modal-title mt-0" id="previewContentDocModalLabel">'.substr($doc_pc_file, strpos($doc_pc_file, '_') + 1).'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="height:400px">
                      <video height="100%" width="100%" controls autoplay>
                        <source src="'.base_url().'assets/plan_content_files/'.$doc_pc_file .'">
                      </video>                          
                    </div>
                    <div class="modal-footer">
                        '.$preview_download.'
                    </div>';
              }
              elseif($getExt == 'csv' || $getExt == 'CSV')
              {
                $url = base_url().'assets/plan_content_files/'.$doc_pc_file;
                echo "<div class='modal-header'>
                      <h5 class='modal-title mt-0' id='previewContentDocModalLabel'>".substr($doc_pc_file, strpos($doc_pc_file, "_") + 1)."</h5>
                      <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                    </div>
                    <div class='modal-body' style='height:400px'>
                        <iframe src='https://docs.google.com/viewer?embedded=true&url=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                    </div>
                    <div class='modal-footer'>
                        ".$preview_download."
                    </div>";
              }
              else
              {
                $url = base_url().'assets/plan_content_files/'.$doc_pc_file;
                echo "<div class='modal-header'>
                      <h5 class='modal-title mt-0' id='previewContentDocModalLabel'>".substr($doc_pc_file, strpos($doc_pc_file, "_") + 1)."</h5>
                      <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                    </div>
                    <div class='modal-body' style='height:400px'>
                        <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                    </div>
                    <div class='modal-footer'>
                        ".$preview_download."
                    </div>";
              }
            }
            else
            {
              echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="previewContentDocModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body" style="height:400px">
                       File Not Found!                        
                  </div>';
            }          
        } 
        else 
        {
            redirect(base_url('login'));
        }
  }

  public function download_ContentDocFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $doc_pc_file = $this->uri->segment(3);
      $pc_id = $this->uri->segment(4);
      $previous_url = $_SERVER['HTTP_REFERER']; 
      $previous_url_array = explode('/', $previous_url);  
      $previous_page_name = end($previous_url_array); 
      $data['previous_page_name'] = $previous_page_name;  
      if($previous_page_name == 'file-cabinet'){  
        $cp_detail = $this->Front_model->check_platform_file_it($pc_id);  
      }else{  
        $cp_detail = $this->Front_model->check_platform($pc_id);  
      }

      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($cp_detail)
      {
        if($cp_detail->pc_project_assign != 0)
        {
          $get_gs_pid = $this->Front_model->getProjectById($cp_detail->pc_project_assign);
            $hdata = array(
                                      'pid' => $cp_detail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  substr(trim($doc_pc_file), strpos(trim($doc_pc_file), '_') + 1).' File Downloaded By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$cp_detail->pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
        }
      }
      $file = 'assets/plan_content_files/'.$doc_pc_file;
      //print_r($file);
      //force download
      force_download($file,NULL);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_pc_doc_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $index_id = $this->input->post('index_id');
    $pc_id = $this->input->post('pc_id');
   
    $pcdetail = $this->Front_model->getContentPlanningData($pc_id);
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($pcdetail)
    {
      $doc_pc_file = explode(',', $pcdetail->doc_pc_file);
      $doc_pcfile_name = $doc_pc_file[$index_id];
      if($pcdetail->pc_project_assign != 0)
      {
        $get_gs_pid = $this->Front_model->file_itgetProjectById($pcdetail->pc_project_assign);
        $hdata = array(
                                      'pid' => $pcdetail->pc_project_assign,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  substr(trim($doc_pcfile_name), strpos(trim($doc_pcfile_name), '_') + 1).' Moved To Trash By '.$powner->first_name.' '.$powner->last_name,
                                      'pc_id' =>$pc_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
      }

                    $data = array(
                                    'pc_id' => $pc_id,
                                    'pc_project_assign' => $pcdetail->pc_project_assign,
                                    'portfolio_id' => $pcdetail->portfolio_id,
                                    'doc_pc_file' => $doc_pcfile_name,
                                    'pc_trash' => 'yes',
                                    'pc_trash_date' =>date("Y-m-d", strtotime("+1 month")),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_content_planning_trash($data);

            $getAllfile = explode(',', $pcdetail->doc_pc_file);
            $count = count($getAllfile);
            $new_files = array();
            if($count > 0)
            {
              for ($i=0; $i<$count; $i++)
                {
                  $get_file_name = $getAllfile[$i];
                  if($get_file_name == $doc_pcfile_name)
                  {
                    $get_file_name = "";
                  }
                  $new_files[] = $get_file_name;
                }
                //echo "<br>";
                $new = implode(',', $new_files);
                //echo $new;
                //echo "<br>";
                $string_file = preg_replace("/,+/", ",", $new);
                $new_string_file = rtrim($string_file, ',');
                $final_string_file = ltrim($new_string_file, ',');
                //echo $string_file;
                          $data = array(
                                            'doc_pc_file' => $final_string_file
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->update_Content($data,$pc_id);
            }

              $this->session->set_flashdata('message','File Moved to Trash Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function insert_comment() 
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('message','Comment','trim|required');
    $this->form_validation->set_rules('pid','Project','trim|required');
    $this->form_validation->set_rules('tid','Task','trim|required');
    $this->form_validation->set_rules('stid','Subtask','trim|required');
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();

        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
          // Add the error message for this field
          $errors[$key] = form_error($key);
        }
      
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
    }
    else
    {
      $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
      if(!empty($this->input->post('pid')))
      {
        $get_project_name = $this->Front_model->getProjectById($this->input->post('pid'));
        $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
        $random_num = rand(1, 10000);
        $get_c_code = $letter.'-'.$random_num;            
      }
      else
      {
        $random_num = rand(1, 10000);
        $get_c_code = 'C-'.$random_num; 
      }

      $portfolio_id = "";
      if(!empty($this->input->post('pid')))
      {
        $portfolio = $this->Front_model->getProjectById($this->input->post('pid'));
        if($portfolio->portfolio_id != 0)
        {
          $portfolio_id = $portfolio->portfolio_id;
        }
        else
        {
          $portfolio_id = "";
        }
      }
      $final_mem = "";
      $pdetail = $this->Front_model->getProjectById($this->input->post('pid'));
      $pdetail_member = $this->Front_model->getMemberProject($this->input->post('pid'));
        $pro_member1 = "";
        $pro_member2[] = "";
        if($pdetail || $pdetail_member)
        {
          if($pdetail)
          {
            $pro_member1 = $pdetail->pcreated_by;
          }
          if($pdetail_member)
          {
            foreach($pdetail_member as $pm)
            {
              $pro_member2[] = $pm->pmember;
            }
          }
        }
      $new_pro_member1 = explode(', ', $pro_member1);
      $pro_member = array_merge($pro_member2,$new_pro_member1);
      $implode_pro_member = implode(',', $pro_member);
      $check_mem = explode(',', $implode_pro_member);        
      $index = array_search($this->session->userdata('d168_id'),$check_mem);
      if($index !== FALSE){
          unset($check_mem[$index]);
      }
      $final_mem = implode(',', $check_mem); 

      $data = array('project_id' => $this->input->post('pid'),
                    'task_id' => $this->input->post('tid'),
                    'subtask_id' => $this->input->post('stid'),
                    'portfolio_id' => $portfolio_id,
                    'c_code' => $get_c_code,
                    'message' => $this->input->post('message'),
                    'c_created_by' => $this->session->userdata('d168_id'),
                    'c_created_date' => date('Y-m-d H:i:s'),
                    'c_notify' => $final_mem,
                    'c_notify_clear' => $final_mem,
                  );
      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->insert_NewComment($data);
      $inserted_id = $this->db->insert_id();

      $get_gs_pid = $this->Front_model->getProjectById($this->input->post('pid'));
      $hdata = array( 'pid' => $this->input->post('pid'),
                      'gid' => $get_gs_pid->gid,
                      'sid' => $get_gs_pid->sid,
                      'h_date' => date('Y-m-d H:i:s'),
                      'h_resource_id' => $powner->reg_id,
                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                      'h_description' => 'Comment Code: '.$get_c_code.' , '.' Sent by '.$powner->first_name.' '.$powner->last_name,
                      'c_id' => $inserted_id
                    );
      $hdata = $this->security->xss_clean($hdata); // xss filter
      $this->Front_model->insert_ProjectHistory($hdata);

      $message = 'Comment Added Successfully!';
      $this->session->set_flashdata('message', $message);
      //$response['area'] = $this->input->post('area_type');
      $response['pid'] = $this->input->post('pid');
      $response['comment_sent'] = $this->input->post('message');
      $response['comment_date'] = date("h:i a", strtotime(date('Y-m-d H:i:s')));
      $response['comment_id'] = $inserted_id;
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  function delete_comment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $check = $this->Front_model->get_comment($id);
      if($check)
      {
        $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
        $data = array('delete_msg' => 'yes',
                      'deleted_date' => date('Y-m-d H:i:s'),
                    );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->update_Comment($data,$id);

        $get_gs_pid = $this->Front_model->file_itgetProjectById($check->project_id);
              $hdata = array( 'pid' => $check->project_id,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' => 'Comment Code: '.$check->c_code.' Deleted by '.$powner->first_name.' '.$powner->last_name,
                              'c_id' => $id
                          );
              $hdata = $this->security->xss_clean($hdata); // xss filter
              $this->Front_model->insert_ProjectHistory($hdata);
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function insert_request_quote()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('writer','Writer','trim|required');
      $this->form_validation->set_rules('quote','Quote','trim|required');
      if ($this->form_validation->run() == FALSE)
        {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
            {
              // Add the error message for this field
              $errors[$key] = form_error($key);
            }
            
            $response['errors'] = array_filter($errors); // Some might be empty
            $response['status'] = FALSE;
            // You can use the Output class here too
            header('Content-type: application/json');
            //echo json_encode($response);
            exit(json_encode($response));
        }
        else
        {
          $get_User = $this->Front_model->getStudentById($this->session->userdata('d168_id'));          
          $data2 = array(
                          'quote' => $this->input->post('quote'),
                          'writer' => $this->input->post('writer'),
                          'qcreated_by' => $this->session->userdata('d168_id'), 
                          'qcreated_date' => date('Y-m-d H:i:s'),
                          'status' => 'sent',
                          'status_date' => date('Y-m-d H:i:s'),
                          'qnotify' => 'yes',
                          'qnotify_clear' => 'no'
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_quote($data2);
                      $inserted_id = $this->db->insert_id();
      $email_to = 'don@z2squared.com';
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Quote Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Quote Request</title>
            <meta name="description" content="Quote Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Quote Request</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello SuperAdmin,<br><br>
                                                   '.ucfirst($get_User->first_name).' '.ucfirst($get_User->last_name).' has requested you to add quote. Just click the appropriate button to Approve or Deny Request.
                                                    <br><br>
                                                    Author: '.$this->input->post('writer').'
                                                    <br><br>
                                                    Quote: '.$this->input->post('quote').'      
                                                    <br><br> 
                                                </p>
                                                <a href="'.base_url('quote-approve-request/'.$inserted_id.'/'.$this->session->userdata('d168_id').'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Approve</a>
                                                <a href="'.base_url('quote-deny-request/'.$inserted_id.'/'.$this->session->userdata('d168_id').'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
        );
          $this->email->send();   

            $this->session->set_flashdata('message','Quote Request Sent Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function uploadProfilecover()
  {
    if(($this->session->userdata('d168_id')) &&  ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->session->userdata('d168_id');
      $data = $_POST['image'];

      list($type, $data) = explode(';', $data);
      list(, $data)      = explode(',', $data);
      $data = base64_decode($data);
      $imageName = time().'_'.$id.'.png';
      if(file_put_contents('./assets/student_cover_photos/'.$imageName, $data))
      {
        $data1 = array('cover_photo' => $imageName);
        $this->Front_model->updateRegistration($data1,$id);
        $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function uploadProfilepic()
  {
    if(($this->session->userdata('d168_id')) &&  ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->session->userdata('d168_id');
      $data = $_POST['image'];

      list($type, $data) = explode(';', $data);
      list(, $data)      = explode(',', $data);
      $data = base64_decode($data);
      $imageName = time().'_'.$id.'.png';
      if(file_put_contents('./assets/student_photos/'.$imageName, $data))
      {
        $data1 = array('photo' => $imageName);
        $this->Front_model->updateRegistration($data1,$id);
        $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_project_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['detail'] = $this->Front_model->getProjectById($id);
      if($data['detail'])
      {
            $this->load->view('user/duplicate_project_modal',$data);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $check_proOwner = $this->Front_model->ProjectDetail($id);
      $this->form_validation->set_rules('pname','Project Name','trim|required');
      $this->form_validation->set_rules('copy_detail','Option','trim|required');
      if($check_proOwner->ptype == "content")
      {
        $this->form_validation->set_rules('p_publish','Publish Date','trim|required');
      }
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
      $pname = $this->input->post('pname');
      $copy_detail = $this->input->post('copy_detail');
      $cust_contentplan = $this->input->post('cust_contentplan');
      $cust_task = $this->input->post('cust_task');
      if($check_proOwner)
      {
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);
        //Copy Project Detail
        if($check_proOwner->ptype == "content")
          {
            $publish_date = $this->input->post('p_publish'); 
          }
          else
          {
            $publish_date = "";
          }
        $pmanager = "";
        if($copy_detail == 'everything')
        {
          $pmanager = $check_proOwner->pmanager;
        }
        else
        {
          $pmanager = "";
        }
        $data = array(
                        'gid' => $check_proOwner->gid,
                        'sid' => $check_proOwner->sid,
                        'ptype' => $check_proOwner->ptype,
                        'p_publish' => $publish_date,
                        'pname' => $pname,
                        'pdes' => $check_proOwner->pdes,
                        'plink' => $check_proOwner->plink,
                        'plink_comment' => $check_proOwner->plink_comment,
                        'pmanager' => $pmanager,
                        'pcreated_by' => $this->session->userdata('d168_id'),
                        'pcreated_date' => date('Y-m-d H:i:s'),
                        'portfolio_id' => $check_proOwner->portfolio_id,
                        'dept_id' => $check_proOwner->dept_id,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewProject($data);
                    //recent inserted id
                    $inserted_id = $this->db->insert_id();
        //Insert in History
        $hdata = array(
                        'pid' => $inserted_id,
                        'gid' => $check_proOwner->gid,
                        'sid' => $check_proOwner->sid,
                        'h_date' => date('Y-m-d H:i:s'),
                        'h_resource_id' => $P_Owner->reg_id,
                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                    );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
        if($copy_detail == 'everything')
        {
          //Check Project Members            
          $getMemberProject = $this->Front_model->getMemberProject($id);
          if($getMemberProject)
          {
            foreach($getMemberProject as $t)
            {
              // if($t->status != 'read_more')
              // {
                $data2 = array(
                                'pid' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'pmember' => trim($t->pmember),
                                'status' => 'send',
                                'pcreated_by' => $this->session->userdata('d168_id'),
                                'sent_date' => date('Y-m-d H:i:s'),
                                'sent_notify_clear' => 'no',
                                                  );
                            $data2 = $this->security->xss_clean($data2); // xss filter
                            $this->Front_model->insert_TeamMember($data2);
                            $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($t->pmember);
                $hdata = array(
                                'pid' => $inserted_id,
                                'gid' => $check_proOwner->gid,
                                'sid' => $check_proOwner->sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                'pmember_id' =>$inserted_pm_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
            if($check_proOwner->pmanager == $t->pmember)
            {
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($check_proOwner->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

              $RequestEmailID = $getEmailID->email_address;
              $email_to = $RequestEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Project Request | Decision 168');
              $this->email->message('                 
                  <!doctype html>
                  <html lang="en-US">

                  <head>
                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                    <title>Project Request</title>
                    <meta name="description" content="Project Request">
                    <style type="text/css">
                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                    </style>
                  </head>

                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                    <!--100% body table-->

                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                        <tr>
                            <td>
                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                          </a>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                                <tr>
                                                    <td style="padding:0 35px;">
                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                        <span
                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                           '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a project manager. Just click the appropriate button below to join the project or request more information.
                                                            <br><br>
                                                            Portfolio: '.$get_portfolio_name.'
                                                            <br><br>
                                                            Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                            <br><br>
                                                        </p>
                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                            style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                            <br><br>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                            <br><br>
                                                            Thanks,
                                                            <br>
                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                            </p>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                            <br>
                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                            </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                        <br>
                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <!--/100% body table-->
                  </body>

                  </html>' 
                                                          );
                $this->email->send();
              }
              else
              {
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($check_proOwner->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

              $RequestEmailID = $getEmailID->email_address;
              $email_to = $RequestEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Project Request | Decision 168');
              $this->email->message('                 
                  <!doctype html>
                  <html lang="en-US">

                  <head>
                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                    <title>Project Request</title>
                    <meta name="description" content="Project Request">
                    <style type="text/css">
                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                    </style>
                  </head>

                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                    <!--100% body table-->

                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                        <tr>
                            <td>
                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                          </a>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                                <tr>
                                                    <td style="padding:0 35px;">
                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                        <span
                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                           '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                            <br><br>
                                                            Portfolio: '.$get_portfolio_name.'
                                                            <br><br>
                                                            Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                            <br><br>
                                                        </p>
                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                            style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                            <br><br>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                            <br><br>
                                                            Thanks,
                                                            <br>
                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                            </p>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                            <br>
                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                            </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                        <br>
                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <!--/100% body table-->
                  </body>

                  </html>' 
                                                          );
                $this->email->send();
                }
              //}
            }
          }
          //Check Project Content Planned
          $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($id);
          if($Project_Planned_Content) 
          {
            foreach($Project_Planned_Content as $ppc)
            {
              $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
              $random_num = rand(1, 10000);
              $get_pc_code = $letter.'-'.$random_num; 

              $get_notify_member = $ppc->written_content_assignee.",".$ppc->pc_file_assignee.",".$ppc->submit_to_approval.",".$ppc->pc_assignee;

                if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                  $data = array('pc_project_assign' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'dept_id' => $check_proOwner->dept_id,
                                'pc_code' => $get_pc_code,
                                'platform' => $ppc->platform,
                                'written_content' => $ppc->written_content,
                                'pc_link' => $ppc->pc_link,
                                'pc_link_comment' => $ppc->pc_link_comment,
                                'pc_file' => "",
                                'pc_status' => 'done',
                                'pc_status_date' => date('Y-m-d H:i:s'),
                                'written_content_assignee' => $ppc->written_content_assignee,
                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                'submit_to_approval' => $ppc->submit_to_approval,
                                'pc_assignee' => $ppc->pc_assignee,
                                'pc_created_by' => $this->session->userdata('d168_id'),
                                'pc_created_date' => date('Y-m-d H:i:s'),
                                'pc_notify' => $get_notify_member,
                                'pc_notify_clear' => $get_notify_member,
                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                //'publish_date' => $ppc->publish_date,
                              );
                }else if($ppc->platform == 'pinterest'){
                  $data = array('pc_project_assign' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'dept_id' => $check_proOwner->dept_id,
                                'pc_code' => $get_pc_code,
                                'platform' => $ppc->platform,
                                'pc_title' => $ppc->pc_title,
                                'written_content' => $ppc->written_content,
                                'written_content_2' => $ppc->written_content_2,
                                'pc_link' => $ppc->pc_link,
                                'pc_link_comment' => $ppc->pc_link_comment,
                                'pc_file' => "",
                                'pc_status' => 'done',
                                'pc_status_date' => date('Y-m-d H:i:s'),
                                'written_content_assignee' => $ppc->written_content_assignee,
                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                'submit_to_approval' => $ppc->submit_to_approval,
                                'pc_assignee' => $ppc->pc_assignee,
                                'pc_created_by' => $this->session->userdata('d168_id'),
                                'pc_created_date' => date('Y-m-d H:i:s'),
                                'pc_notify' => $get_notify_member,
                                'pc_notify_clear' => $get_notify_member,
                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                //'publish_date' => $ppc->publish_date,
                              );
                }else if($ppc->platform == 'youtube'){
                  $data = array('pc_project_assign' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'dept_id' => $check_proOwner->dept_id,
                                'pc_code' => $get_pc_code,
                                'platform' => $ppc->platform,
                                'pc_title' => $ppc->pc_title,
                                'written_content' => $ppc->written_content,
                                'tags' => $ppc->tags,
                                'pc_link' => $ppc->pc_link,
                                'pc_link_comment' => $ppc->pc_link_comment,
                                'pc_file' => "",
                                'pc_status' => 'done',
                                'pc_status_date' => date('Y-m-d H:i:s'),
                                'written_content_assignee' => $ppc->written_content_assignee,
                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                'submit_to_approval' => $ppc->submit_to_approval,
                                'pc_assignee' => $ppc->pc_assignee,
                                'pc_created_by' => $this->session->userdata('d168_id'),
                                'pc_created_date' => date('Y-m-d H:i:s'),
                                'pc_notify' => $get_notify_member,
                                'pc_notify_clear' => $get_notify_member,
                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                //'publish_date' => $ppc->publish_date,
                              );
                }else if($ppc->platform == 'blogger'){
                  $data = array('pc_project_assign' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'dept_id' => $check_proOwner->dept_id,
                                'pc_code' => $get_pc_code,
                                'platform' => $ppc->platform,
                                'pc_title' => $ppc->pc_title,
                                'written_content' => $ppc->written_content,
                                'target_audience' => $ppc->target_audience,
                                'solutions' => $ppc->solutions,
                                'keywords' => $ppc->keywords,
                                'internal_links' => $ppc->internal_links,
                                'external_links' => $ppc->external_links,
                                'meta_title' => $ppc->meta_title,
                                'meta_description' => $ppc->meta_description,
                                'pc_link' => $ppc->pc_link,
                                'pc_link_comment' => $ppc->pc_link_comment,
                                'pc_file' => "",
                                'doc_pc_file' => "",
                                'pc_status' => 'done',
                                'pc_status_date' => date('Y-m-d H:i:s'),
                                'written_content_assignee' => $ppc->written_content_assignee,
                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                'submit_to_approval' => $ppc->submit_to_approval,
                                'pc_assignee' => $ppc->pc_assignee,
                                'pc_created_by' => $this->session->userdata('d168_id'),
                                'pc_created_date' => date('Y-m-d H:i:s'),
                                'pc_notify' => $get_notify_member,
                                'pc_notify_clear' => $get_notify_member,
                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                //'publish_date' => $ppc->publish_date,
                              );
                }
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->insert_NewContent($data);
                //recent inserted id
                $inserted_content_id = $this->db->insert_id();
                $hdata = array( 
                              'pid' => $inserted_id,
                              'gid' => $check_proOwner->gid,
                              'sid' => $check_proOwner->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                              'pc_id' => $inserted_content_id
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
            }
          }
          //Check Project Tasks  
          $p_tasks = $this->Front_model->pro_all_tasks($id);
          if($p_tasks)
          {
            foreach($p_tasks as $pt)
            {
                $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                $random_num = rand(1, 10000);
                $get_tcode = $letter.'-'.$random_num; 
                  $data = array(
                                'gid' => $check_proOwner->gid,
                                'sid' => $check_proOwner->sid,
                                'dept_id' => $check_proOwner->dept_id,
                                'tcode' => $get_tcode,
                                'tname' => $pt->tname,
                                'tdes' => $pt->tdes,
                                'tlink' => $pt->tlink,
                                'tlink_comment' => $pt->tlink_comment,
                                'tnote' => $pt->tnote,
                                'tfile' => "",
                                'tpriority' => $pt->tpriority,
                                'tstatus' => 'to_do',
                                'tstatus_date' => date('Y-m-d H:i:s'),
                                'tproject_assign' => $inserted_id,
                                'portfolio_id' => $check_proOwner->portfolio_id,
                                'tassignee' => $pt->tassignee,
                                'tcreated_by' => $this->session->userdata('d168_id'),
                                'tcreated_date' => date('Y-m-d H:i:s'),
                                'tnotify' => 'yes',
                                'tnotify_clear' => 'no',
                                'tnotify_date' => date('Y-m-d H:i:s'),
                                'tdue_date' => $pt->tdue_date,
                                'tdue_date_clear' => 'no',
                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewTask($data); 
                          //recent task inserted id
                          $inserted_task_id = $this->db->insert_id();
                            $hdata = array(
                                            'pid' => $inserted_id,
                                            'gid' => $check_proOwner->gid,
                                            'sid' => $check_proOwner->sid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $P_Owner->reg_id,
                                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                            'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                            'task_id' =>$inserted_task_id
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);  

              $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                if($Check_Task_Subtasks)
                {
                  foreach($Check_Task_Subtasks as $ts)
                  {
                    $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                    $random_num = rand(1, 10000);
                    $get_stcode = $letter.'-'.$random_num; 
                      $data = array(
                                      'tid' => $inserted_task_id,
                                      'gid' => $check_proOwner->gid,
                                      'sid' => $check_proOwner->sid,
                                      'dept_id' => $check_proOwner->dept_id,
                                      'stproject_assign' => $inserted_id,
                                      'portfolio_id' => $check_proOwner->portfolio_id,
                                      'stcode' => $get_stcode,
                                      'stname' => $ts->stname,
                                      'stdes' => $ts->stdes,
                                      'stlink' => $ts->stlink,
                                      'stlink_comment' => $ts->stlink_comment,
                                      'stnote' => $ts->stnote,
                                      'stfile' => "",
                                      'stpriority' => $ts->stpriority,
                                      'ststatus' => 'to_do',
                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                      'stassignee' => $ts->stassignee,
                                      'stcreated_by' => $this->session->userdata('d168_id'),
                                      'stcreated_date' => date('Y-m-d H:i:s'),
                                      'stnotify' => 'yes',
                                      'stnotify_clear' => 'no',
                                      'stnotify_date' => date('Y-m-d H:i:s'),
                                      'stdue_date' => $ts->stdue_date,
                                      'stdue_date_clear' => 'no',
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewSubtask($data);  
                      //recent subtask inserted id
                      $inserted_subtask_id = $this->db->insert_id();
                        $hdata = array(
                                        'pid' => $inserted_id,
                                        'gid' => $check_proOwner->gid,
                                        'sid' => $check_proOwner->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                        'subtask_id' =>$inserted_subtask_id
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata); 
                  }
                }
            }
          }
        }
        if($copy_detail == 'custom')
        {
          if($cust_contentplan == '1')
          {
            //Check Project Content Planned
            $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($id);
            if($Project_Planned_Content) 
            {
              foreach($Project_Planned_Content as $ppc)
              {
                $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                $random_num = rand(1, 10000);
                $get_pc_code = $letter.'-'.$random_num; 

                  if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                    $data = array('pc_project_assign' => $inserted_id,
                                  'portfolio_id' => $check_proOwner->portfolio_id,
                                  'dept_id' => $check_proOwner->dept_id,
                                  'pc_code' => $get_pc_code,
                                  'platform' => $ppc->platform,
                                  'written_content' => $ppc->written_content,
                                  'pc_link' => $ppc->pc_link,
                                  'pc_link_comment' => $ppc->pc_link_comment,
                                  'pc_file' => "",
                                  'pc_status' => 'done',
                                  'pc_status_date' => date('Y-m-d H:i:s'),
                                  'written_content_assignee' => $this->session->userdata('d168_id'),
                                  'pc_file_assignee' => $this->session->userdata('d168_id'),
                                  'submit_to_approval' => $this->session->userdata('d168_id'),
                                  'pc_assignee' => $this->session->userdata('d168_id'),
                                  'pc_created_by' => $this->session->userdata('d168_id'),
                                  'pc_created_date' => date('Y-m-d H:i:s'),
                                  'pc_notify' => "",
                                  'pc_notify_clear' => "",
                                  'pc_notify_date' => date('Y-m-d H:i:s'),
                                  'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  //'publish_date' => $ppc->publish_date,
                                );
                  }else if($ppc->platform == 'pinterest'){
                    $data = array('pc_project_assign' => $inserted_id,
                                  'portfolio_id' => $check_proOwner->portfolio_id,
                                  'dept_id' => $check_proOwner->dept_id,
                                  'pc_code' => $get_pc_code,
                                  'platform' => $ppc->platform,
                                  'pc_title' => $ppc->pc_title,
                                  'written_content' => $ppc->written_content,
                                  'written_content_2' => $ppc->written_content_2,
                                  'pc_link' => $ppc->pc_link,
                                  'pc_link_comment' => $ppc->pc_link_comment,
                                  'pc_file' => "",
                                  'pc_status' => 'done',
                                  'pc_status_date' => date('Y-m-d H:i:s'),
                                  'written_content_assignee' => $this->session->userdata('d168_id'),
                                  'pc_file_assignee' => $this->session->userdata('d168_id'),
                                  'submit_to_approval' => $this->session->userdata('d168_id'),
                                  'pc_assignee' => $this->session->userdata('d168_id'),
                                  'pc_created_by' => $this->session->userdata('d168_id'),
                                  'pc_created_date' => date('Y-m-d H:i:s'),
                                  'pc_notify' => "",
                                  'pc_notify_clear' => "",
                                  'pc_notify_date' => date('Y-m-d H:i:s'),
                                  'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  //'publish_date' => $ppc->publish_date,
                                );
                  }else if($ppc->platform == 'youtube'){
                    $data = array('pc_project_assign' => $inserted_id,
                                  'portfolio_id' => $check_proOwner->portfolio_id,
                                  'dept_id' => $check_proOwner->dept_id,
                                  'pc_code' => $get_pc_code,
                                  'platform' => $ppc->platform,
                                  'pc_title' => $ppc->pc_title,
                                  'written_content' => $ppc->written_content,
                                  'tags' => $ppc->tags,
                                  'pc_link' => $ppc->pc_link,
                                  'pc_link_comment' => $ppc->pc_link_comment,
                                  'pc_file' => "",
                                  'pc_status' => 'done',
                                  'pc_status_date' => date('Y-m-d H:i:s'),
                                  'written_content_assignee' => $this->session->userdata('d168_id'),
                                  'pc_file_assignee' => $this->session->userdata('d168_id'),
                                  'submit_to_approval' => $this->session->userdata('d168_id'),
                                  'pc_assignee' => $this->session->userdata('d168_id'),
                                  'pc_created_by' => $this->session->userdata('d168_id'),
                                  'pc_created_date' => date('Y-m-d H:i:s'),
                                  'pc_notify' => "",
                                  'pc_notify_clear' => "",
                                  'pc_notify_date' => date('Y-m-d H:i:s'),
                                  'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  //'publish_date' => $ppc->publish_date,
                                );
                  }else if($ppc->platform == 'blogger'){
                    $data = array('pc_project_assign' => $inserted_id,
                                  'portfolio_id' => $check_proOwner->portfolio_id,
                                  'dept_id' => $check_proOwner->dept_id,
                                  'pc_code' => $get_pc_code,
                                  'platform' => $ppc->platform,
                                  'pc_title' => $ppc->pc_title,
                                  'written_content' => $ppc->written_content,
                                  'target_audience' => $ppc->target_audience,
                                  'solutions' => $ppc->solutions,
                                  'keywords' => $ppc->keywords,
                                  'internal_links' => $ppc->internal_links,
                                  'external_links' => $ppc->external_links,
                                  'meta_title' => $ppc->meta_title,
                                  'meta_description' => $ppc->meta_description,
                                  'pc_link' => $ppc->pc_link,
                                  'pc_link_comment' => $ppc->pc_link_comment,
                                  'pc_file' => "",
                                  'doc_pc_file' => "",
                                  'pc_status' => 'done',
                                  'pc_status_date' => date('Y-m-d H:i:s'),
                                  'written_content_assignee' => $this->session->userdata('d168_id'),
                                  'pc_file_assignee' => $this->session->userdata('d168_id'),
                                  'submit_to_approval' => $this->session->userdata('d168_id'),
                                  'pc_assignee' => $this->session->userdata('d168_id'),
                                  'pc_created_by' => $this->session->userdata('d168_id'),
                                  'pc_created_date' => date('Y-m-d H:i:s'),
                                  'pc_notify' => "",
                                  'pc_notify_clear' => "",
                                  'pc_notify_date' => date('Y-m-d H:i:s'),
                                  'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  //'publish_date' => $ppc->publish_date,
                                );
                  }
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewContent($data);
                  //recent inserted id
                  $inserted_content_id = $this->db->insert_id();
                  $hdata = array( 
                                'pid' => $inserted_id,
                                'gid' => $check_proOwner->gid,
                                'sid' => $check_proOwner->sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pc_id' => $inserted_content_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
              }
            }
          }
          if($cust_task == '2')
          {
            //Check Project Tasks  
            $p_tasks = $this->Front_model->pro_all_tasks($id);
            if($p_tasks)
            {
              foreach($p_tasks as $pt)
              {
                  $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                  $random_num = rand(1, 10000);
                  $get_tcode = $letter.'-'.$random_num; 
                    $data = array(
                                  'gid' => $check_proOwner->gid,
                                  'sid' => $check_proOwner->sid,
                                  'dept_id' => $check_proOwner->dept_id,
                                  'tcode' => $get_tcode,
                                  'tname' => $pt->tname,
                                  'tdes' => $pt->tdes,
                                  'tlink' => $pt->tlink,
                                  'tlink_comment' => $pt->tlink_comment,
                                  'tnote' => $pt->tnote,
                                  'tfile' => "",
                                  'tpriority' => $pt->tpriority,
                                  'tstatus' => 'to_do',
                                  'tstatus_date' => date('Y-m-d H:i:s'),
                                  'tproject_assign' => $inserted_id,
                                  'portfolio_id' => $check_proOwner->portfolio_id,
                                  'tassignee' => $this->session->userdata('d168_id'),
                                  'tcreated_by' => $this->session->userdata('d168_id'),
                                  'tcreated_date' => date('Y-m-d H:i:s'),
                                  'tnotify' => 'seen',
                                  'tnotify_clear' => 'yes',
                                  'tnotify_date' => date('Y-m-d H:i:s'),
                                  'tdue_date' => $pt->tdue_date,
                                  'tdue_date_clear' => 'no',
                                  'corporate_id' => $this->session->userdata('d168_user_cor_id')
                            );
                            $data = $this->security->xss_clean($data); // xss filter
                            $this->Front_model->insert_NewTask($data); 
                            //recent task inserted id
                            $inserted_task_id = $this->db->insert_id();
                              $hdata = array(
                                              'pid' => $inserted_id,
                                              'gid' => $check_proOwner->gid,
                                              'sid' => $check_proOwner->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $P_Owner->reg_id,
                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                              'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                              'task_id' =>$inserted_task_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);  

                $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                  if($Check_Task_Subtasks)
                  {
                    foreach($Check_Task_Subtasks as $ts)
                    {
                      $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                      $random_num = rand(1, 10000);
                      $get_stcode = $letter.'-'.$random_num; 
                        $data = array(
                                        'tid' => $inserted_task_id,
                                        'gid' => $check_proOwner->gid,
                                        'sid' => $check_proOwner->sid,
                                        'dept_id' => $check_proOwner->dept_id,
                                        'stproject_assign' => $inserted_id,
                                        'portfolio_id' => $check_proOwner->portfolio_id,
                                        'stcode' => $get_stcode,
                                        'stname' => $ts->stname,
                                        'stdes' => $ts->stdes,
                                        'stlink' => $ts->stlink,
                                        'stlink_comment' => $ts->stlink_comment,
                                        'stnote' => $ts->stnote,
                                        'stfile' => "",
                                        'stpriority' => $ts->stpriority,
                                        'ststatus' => 'to_do',
                                        'ststatus_date' => date('Y-m-d H:i:s'),
                                        'stassignee' => $this->session->userdata('d168_id'),
                                        'stcreated_by' => $this->session->userdata('d168_id'),
                                        'stcreated_date' => date('Y-m-d H:i:s'),
                                        'stnotify' => 'seen',
                                        'stnotify_clear' => 'yes',
                                        'stnotify_date' => date('Y-m-d H:i:s'),
                                        'stdue_date' => $ts->stdue_date,
                                        'stdue_date_clear' => 'no',
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_NewSubtask($data);  
                        //recent subtask inserted id
                        $inserted_subtask_id = $this->db->insert_id();
                          $hdata = array(
                                          'pid' => $inserted_id,
                                          'gid' => $check_proOwner->gid,
                                          'sid' => $check_proOwner->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                          'subtask_id' =>$inserted_subtask_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata); 
                    }
                  }
              }
            }
          }
        }

            $this->session->set_flashdata('message','Copied Successfully!');
            $response['pid'] = $inserted_id;
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
      else
      {
            $this->session->set_flashdata('message','Cannot Duplicate this Project!');
            $response['status'] = False;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_task_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['detail'] = $this->Front_model->TaskDetail($id);
      if($data['detail'])
      {
            $this->load->view('user/duplicate_task_modal',$data);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('tname','Task Name','trim|required');
      $this->form_validation->set_rules('copy_detail','Option','trim|required');
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
      $id = $this->input->post('id');
      $tname = $this->input->post('tname');
      $copy_detail = $this->input->post('copy_detail');
      $cust_tws = $this->input->post('cust_tws');
      $check_Task = $this->Front_model->TaskDetail($id);
      if($check_Task)
      {    
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);    
          if($check_Task->tproject_assign != '0')
           {
              $get_project_name = $this->Front_model->getProjectById($check_Task->tproject_assign);
              $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
              $random_num = rand(1, 10000);
              $get_tcode = $letter.'-'.$random_num;            
           }
           else
           {
              $random_num = rand(1, 10000);
              $get_tcode = 'T-'.$random_num; 
           }

           if($copy_detail == "everything")
           {
              $data = array(
                              'gid' => $check_Task->gid,
                              'sid' => $check_Task->sid,
                              'tcode' => $get_tcode,
                              'tname' => $tname,
                              'tdes' => $check_Task->tdes,
                              'tlink' => $check_Task->tlink,
                              'tlink_comment' => $check_Task->tlink_comment,
                              'tnote' => $check_Task->tnote,
                              'tfile' => "",
                              'tpriority' => $check_Task->tpriority,
                              'tstatus' => 'to_do',
                              'tstatus_date' => date('Y-m-d H:i:s'),
                              'tproject_assign' => $check_Task->tproject_assign,
                              'portfolio_id' => $check_Task->portfolio_id,
                              'tassignee' => $check_Task->tassignee,
                              'tcreated_by' => $this->session->userdata('d168_id'),
                              'tcreated_date' => date('Y-m-d H:i:s'),
                              'tnotify' => 'yes',
                              'tnotify_clear' => 'no',
                              'tnotify_date' => date('Y-m-d H:i:s'),
                              'tdue_date' => $check_Task->tdue_date,
                              'tdue_date_clear' => 'no',
                              'dept_id' => $check_Task->dept_id,
                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                        );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_NewTask($data); 
                        //recent task inserted id
                        $inserted_task_id = $this->db->insert_id();
                          $hdata = array(
                                          'pid' => $check_Task->tproject_assign,
                                          'gid' => $check_Task->gid,
                                          'sid' => $check_Task->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$tname.' , Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                          'task_id' => $inserted_task_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);  

            $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($id);
              if($Check_Task_Subtasks)
              {
                foreach($Check_Task_Subtasks as $ts)
                {
                  if($check_Task->tproject_assign != '0')
                   {
                      $get_project_name = $this->Front_model->getProjectById($check_Task->tproject_assign);
                      $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                      $random_num = rand(1, 10000);
                      $get_stcode = $letter.'-'.$random_num;            
                   }
                   else
                   {
                      $random_num = rand(1, 10000);
                      $get_stcode = 'T-'.$random_num; 
                   }
                    $data = array(
                                    'tid' => $inserted_task_id,
                                    'gid' => $check_Task->gid,
                                    'sid' => $check_Task->sid,
                                    'dept_id' => $check_Task->dept_id,
                                    'stproject_assign' => $check_Task->tproject_assign,
                                    'portfolio_id' => $check_Task->portfolio_id,
                                    'stcode' => $get_stcode,
                                    'stname' => $ts->stname,
                                    'stdes' => $ts->stdes,
                                    'stlink' => $ts->stlink,
                                    'stlink_comment' => $ts->stlink_comment,
                                    'stnote' => $ts->stnote,
                                    'stfile' => "",
                                    'stpriority' => $ts->stpriority,
                                    'ststatus' => 'to_do',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                    'stassignee' => $ts->stassignee,
                                    'stcreated_by' => $this->session->userdata('d168_id'),
                                    'stcreated_date' => date('Y-m-d H:i:s'),
                                    'stnotify' => 'yes',
                                    'stnotify_clear' => 'no',
                                    'stnotify_date' => date('Y-m-d H:i:s'),
                                    'stdue_date' => $ts->stdue_date,
                                    'stdue_date_clear' => 'no',
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewSubtask($data);  
                    //recent subtask inserted id
                    $inserted_subtask_id = $this->db->insert_id();
                      $hdata = array(
                                      'pid' => $check_Task->tproject_assign,
                                      'gid' => $check_Task->gid,
                                      'sid' => $check_Task->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $P_Owner->reg_id,
                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      'subtask_id' => $inserted_subtask_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata); 
                }
              }
           }

           if($copy_detail == "custom")
           {
              $data = array(
                              'gid' => $check_Task->gid,
                              'sid' => $check_Task->sid,
                              'dept_id' => $check_Task->dept_id,
                              'tcode' => $get_tcode,
                              'tname' => $tname,
                              'tdes' => $check_Task->tdes,
                              'tlink' => $check_Task->tlink,
                              'tlink_comment' => $check_Task->tlink_comment,
                              'tnote' => $check_Task->tnote,
                              'tfile' => "",
                              'tpriority' => $check_Task->tpriority,
                              'tstatus' => 'to_do',
                              'tstatus_date' => date('Y-m-d H:i:s'),
                              'tproject_assign' => $check_Task->tproject_assign,
                              'portfolio_id' => $check_Task->portfolio_id,
                              'tassignee' => $this->session->userdata('d168_id'),
                              'tcreated_by' => $this->session->userdata('d168_id'),
                              'tcreated_date' => date('Y-m-d H:i:s'),
                              'tnotify' => 'seen',
                              'tnotify_clear' => 'yes',
                              'tnotify_date' => date('Y-m-d H:i:s'),
                              'tdue_date' => $check_Task->tdue_date,
                              'tdue_date_clear' => 'no',
                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                        );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_NewTask($data); 
                        //recent task inserted id
                        $inserted_task_id = $this->db->insert_id();
                          $hdata = array(
                                          'pid' => $check_Task->tproject_assign,
                                          'gid' => $check_Task->gid,
                                          'sid' => $check_Task->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$tname.' , Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                          'task_id' => $inserted_task_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata); 
              
              if($cust_tws == '2')
              {
              $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($id);
                if($Check_Task_Subtasks)
                {
                  foreach($Check_Task_Subtasks as $ts)
                  {
                    if($check_Task->tproject_assign != '0')
                     {
                        $get_project_name = $this->Front_model->getProjectById($check_Task->tproject_assign);
                        $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
                        $random_num = rand(1, 10000);
                        $get_stcode = $letter.'-'.$random_num;            
                     }
                     else
                     {
                        $random_num = rand(1, 10000);
                        $get_stcode = 'T-'.$random_num; 
                     }
                      $data = array(
                                      'tid' => $inserted_task_id,
                                      'gid' => $check_Task->gid,
                                      'sid' => $check_Task->sid,
                                      'dept_id' => $check_Task->dept_id,
                                      'stproject_assign' => $check_Task->tproject_assign,
                                      'portfolio_id' => $check_Task->portfolio_id,
                                      'stcode' => $get_stcode,
                                      'stname' => $ts->stname,
                                      'stdes' => $ts->stdes,
                                      'stlink' => $ts->stlink,
                                      'stlink_comment' => $ts->stlink_comment,
                                      'stnote' => $ts->stnote,
                                      'stfile' => "",
                                      'stpriority' => $ts->stpriority,
                                      'ststatus' => 'to_do',
                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                      'stassignee' => $this->session->userdata('d168_id'),
                                      'stcreated_by' => $this->session->userdata('d168_id'),
                                      'stcreated_date' => date('Y-m-d H:i:s'),
                                      'stnotify' => 'seen',
                                      'stnotify_clear' => 'yes',
                                      'stnotify_date' => date('Y-m-d H:i:s'),
                                      'stdue_date' => $ts->stdue_date,
                                      'stdue_date_clear' => 'no',
                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewSubtask($data);  
                      //recent subtask inserted id
                      $inserted_subtask_id = $this->db->insert_id();
                        $hdata = array(
                                        'pid' => $check_Task->tproject_assign,
                                        'gid' => $check_Task->gid,
                                        'sid' => $check_Task->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                        'subtask_id' => $inserted_subtask_id
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata); 
                  }
                }
              }
           }
                
            $this->session->set_flashdata('message','Copied Successfully!');
            $response['tid'] = $inserted_task_id;
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
      else
      {
            $this->session->set_flashdata('message','Cannot Duplicate this Tasks!');
            $response['status'] = False;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_subtask_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['detail'] = $this->Front_model->SubtaskDetail($id);
      if($data['detail'])
      {
            $this->load->view('user/duplicate_subtask_modal',$data);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('stname','Subtask Name','trim|required');
    $this->form_validation->set_rules('copy_detail','Option','trim|required');
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
      $id = $this->input->post('id');
      $stname = $this->input->post('stname');
      $copy_detail = $this->input->post('copy_detail');
      $check_subtask = $this->Front_model->SubtaskDetail($id);
      if($check_subtask)
      {  
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);
        if($check_subtask->stproject_assign != '0')
         {
            $get_project_name = $this->Front_model->getProjectById($check_subtask->stproject_assign);
            $letter = strtoupper(substr(trim($get_project_name->pname), 0, 2)); 
            $random_num = rand(1, 10000);
            $get_stcode = $letter.'-'.$random_num;            
         }
         else
         {
            $random_num = rand(1, 10000);
            $get_stcode = 'T-'.$random_num; 
         }
        if($copy_detail == "everything")
        {
          $data = array(
                                    'tid' => $check_subtask->tid,
                                    'gid' => $check_subtask->gid,
                                    'sid' => $check_subtask->sid,
                                    'stproject_assign' => $check_subtask->stproject_assign,
                                    'portfolio_id' => $check_subtask->portfolio_id,
                                    'stcode' => $get_stcode,
                                    'stname' => $stname,
                                    'stdes' => $check_subtask->stdes,
                                    'stlink' => $check_subtask->stlink,
                                    'stlink_comment' => $check_subtask->stlink_comment,
                                    'stnote' => $check_subtask->stnote,
                                    'stfile' => "",
                                    'stpriority' => $check_subtask->stpriority,
                                    'ststatus' => 'to_do',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                    'stassignee' => $check_subtask->stassignee,
                                    'stcreated_by' => $this->session->userdata('d168_id'),
                                    'stcreated_date' => date('Y-m-d H:i:s'),
                                    'stnotify' => 'yes',
                                    'stnotify_clear' => 'no',
                                    'stnotify_date' => date('Y-m-d H:i:s'),
                                    'stdue_date' => $check_subtask->stdue_date,
                                    'stdue_date_clear' => 'no',
                                    'dept_id' => $check_subtask->dept_id,
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewSubtask($data);  
                    //recent subtask inserted id
                    $inserted_subtask_id = $this->db->insert_id();
                      $hdata = array(
                                      'pid' => $check_subtask->stproject_assign,
                                      'gid' => $check_subtask->gid,
                                      'sid' => $check_subtask->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $P_Owner->reg_id,
                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$stname.' , Copied by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      'subtask_id' =>$inserted_subtask_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata); 
        }  

        if($copy_detail == "custom")
        {
          $data = array(
                                    'tid' => $check_subtask->tid,
                                    'gid' => $check_subtask->gid,
                                    'sid' => $check_subtask->sid,
                                    'stproject_assign' => $check_subtask->stproject_assign,
                                    'portfolio_id' => $check_subtask->portfolio_id,
                                    'stcode' => $get_stcode,
                                    'stname' => $stname,
                                    'stdes' => $check_subtask->stdes,
                                    'stlink' => $check_subtask->stlink,
                                    'stlink_comment' => $check_subtask->stlink_comment,
                                    'stnote' => $check_subtask->stnote,
                                    'stfile' => "",
                                    'stpriority' => $check_subtask->stpriority,
                                    'ststatus' => 'to_do',
                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                    'stassignee' => $this->session->userdata('d168_id'),
                                    'stcreated_by' => $this->session->userdata('d168_id'),
                                    'stcreated_date' => date('Y-m-d H:i:s'),
                                    'stnotify' => 'seen',
                                    'stnotify_clear' => 'yes',
                                    'stnotify_date' => date('Y-m-d H:i:s'),
                                    'stdue_date' => $check_subtask->stdue_date,
                                    'stdue_date_clear' => 'no',
                                    'dept_id' => $check_subtask->dept_id,
                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewSubtask($data);  
                    //recent subtask inserted id
                    $inserted_subtask_id = $this->db->insert_id();
                      $hdata = array(
                                      'pid' => $check_subtask->stproject_assign,
                                      'gid' => $check_subtask->gid,
                                      'sid' => $check_subtask->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $P_Owner->reg_id,
                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$stname.' , Copied by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      'subtask_id' =>$inserted_subtask_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata); 
        }      
            $this->session->set_flashdata('message','Copied Successfully!');
            $response['stid'] = $inserted_subtask_id;
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
      else
      {
            $this->session->set_flashdata('message','Cannot Duplicate this Subtasks!');
            $response['status'] = False;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function TaskArriveReviewNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_TaskToClear($id);
    if($check)
    {
      if($check->po_review_clear == 'no')
      {
        $data = array(
                                    'po_review_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewTask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function SubtaskArriveReviewNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_SubtaskToClear($id);
    if($check)
    {
      if($check->po_sreview_clear == 'no')
      {
        $data = array(
                                    'po_sreview_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->edit_NewSubtask($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function PortfolioAcceptedReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_PPMToClear($id);
    if($check)
    {
      if($check->status_notify_clear == 'no')
      {
        $data2 = array(
                                    'status_notify_clear' => 'yes',
                                );
        $data2 = $this->security->xss_clean($data2); // xss filter
        $this->Front_model->update_PortfolioMember($data2,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function PortfolioAcceptedReqNotification_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pim_id = $this->input->post('pim_id');
      $port_id = $this->input->post('port_id');
      $detail = $this->Front_model->check_portfolio_accepted_req($pim_id,$port_id);
      if($detail)
      {
          $data2 = array(
                                    'status_notify' => 'seen',
                                );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->update_PortfolioMember($data2,$pim_id);
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectOverviewFileNotificationModalLabel">';
                    if($detail->portfolio_user == 'company'){ echo $detail->portfolio_name;}elseif($detail->portfolio_user == 'individual'){ echo $detail->portfolio_name.' '.$detail->portfolio_lname;}else{ echo $detail->portfolio_name;}
            echo '</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b> '.$detail->sent_to.' </b> Accepted the Portfolio Request of <b>';
                    if($detail->portfolio_user == 'company'){ echo $detail->portfolio_name;}elseif($detail->portfolio_user == 'individual'){ echo $detail->portfolio_name.' '.$detail->portfolio_lname;}else{ echo $detail->portfolio_name;}
            echo '</b>&nbsp;&nbsp;<a href="javascript: void(0);" onclick="return select_Portfolio('.$port_id.');" class="btn btn-sm btn-d text-white">Open</a></div>';
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectAcceptedReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_ProPMToClear($id);
    if($check)
    {
      if($check->status_notify_clear == 'no')
      {
        $data2 = array(
                                    'status_notify_clear' => 'yes',
                                );
        $data2 = $this->security->xss_clean($data2); // xss filter
        $this->Front_model->edit_project_members_notify($data2,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function ProjectAcceptedReqNotificationModal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pm_id = $this->input->post('pm_id');
      $pid = $this->input->post('pid');
      $detail = $this->Front_model->check_project_accepted_req($pm_id,$pid);
      if($detail)
      {
          $data2 = array(
                                    'status_notify' => 'seen',
                                );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->edit_project_members_notify($data2,$pm_id);
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectAcceptedReqNotificationModalLabel">'.$detail->pname.'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b> ';
                    $reg_name = $this->Front_model->getStudentById($detail->pmember);
                      if($reg_name)
                          {
                              echo $reg_name->first_name." ".$reg_name->last_name;
                          }
            echo ' </b> Accepted the Project Request of <b> '.$detail->pname.' </b>&nbsp;&nbsp;<a href="'.base_url('projects-overview/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a></div>';
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectAcceptedInviteReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->check_ProIPMToClear($id);
    if($check)
    {
      if($check->status_notify_clear == 'no')
      {
        $data2 = array(
                                    'status_notify_clear' => 'yes',
                                );
        $data2 = $this->security->xss_clean($data2); // xss filter
        $this->Front_model->edit_project_invite_members_notify($data2,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function ProjectAcceptedInviteReqNotificationModal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $im_id = $this->input->post('im_id');
      $pid = $this->input->post('pid');
      $detail = $this->Front_model->check_project_invite_accepted_req($im_id,$pid);
      if($detail)
      {
          $data2 = array(
                                    'status_notify' => 'seen',
                                );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->edit_project_invite_members_notify($data2,$im_id);
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="ProjectAcceptedInviteReqNotificationModal">'.$detail->pname.'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b> '.$detail->sent_to.' </b> Accepted the Project Request of <b> '.$detail->pname.' </b>&nbsp;&nbsp;<a href="'.base_url('projects-overview/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a></div>';
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function editable_table()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $div_class = $this->input->post('div_class');
    $div_field = $this->input->post('div_field');
    $div_id = $this->input->post('div_id');
    $txt = trim($this->input->post('txt'));
    $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if(!empty($txt))
    {
      //for task
      if($div_class == "task_editable")
      {
        $tdetail = $this->Front_model->getTaskById($div_id);
        if($tdetail)
        {
            //tname field
            if($div_field == "tname_field")
            {
              $data = array(
                            'tname' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewTask($data,$div_id);
              if(!empty($tdetail->tproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->tproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Task Name of '.$tdetail->tcode.', Name: '.$txt,
                                  'task_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }

              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            //tassignee field
            if($div_field == "tassignee_field")
            {
              $tnotify = "";
              $tnotify_clear = "";
                if($tdetail->tassignee == $txt)
                {
                  $tnotify = $tdetail->tnotify;
                  $tnotify_clear = $tdetail->tnotify_clear;
                }
                else
                {
                  $tnotify = 'yes';
                  $tnotify_clear = 'no';
                }

                 $check_Pro_Owner = $this->Front_model->getProjectById($tdetail->tproject_assign);
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }
if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $txt)
          {
            $pdetail_member = $this->Front_model->getMemberProject($tdetail->tproject_assign);
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($txt,$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($tdetail->tproject_assign,$txt);
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$tdetail->tproject_assign,$txt);
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                                    $data2 = array(
                                        'pid' => $tdetail->tproject_assign,
                                        'portfolio_id' => $tdetail->portfolio_id,
                                        'pmember' => $txt,
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($txt);
                                    $hdata = array(
                                                      'pid' => $tdetail->tproject_assign,
                                                      'gid' => $tdetail->gid,
                                                      'sid' => $tdetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'pmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($tdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Project Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$tdetail->tproject_assign.'/'.trim($txt).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$tdetail->tproject_assign.'/'.trim($txt).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $txt)
          {
            $pdetail_member = $this->Front_model->getMemberProject($tdetail->tproject_assign);
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($txt,$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($tdetail->tproject_assign,$txt);
                $check_pmem = $this->Front_model->check_pro_member2($tdetail->tproject_assign,$txt);
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $tdetail->tproject_assign,
                      'suggest_id' => trim($txt),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($txt);
                  $hdata = array(
                                'pid' => $tdetail->tproject_assign,
                                'gid' => $tdetail->gid,
                                'sid' => $tdetail->sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }

              $data = array(
                            'tassignee' =>  $txt, 
                            'tnotify' => $tnotify,
                            'tnotify_clear' => $tnotify_clear,
                            'tnotify_date' => date('Y-m-d H:i:s'),       
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewTask($data,$div_id);
              if(!empty($tdetail->tproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->tproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' 
                                  Changed Task Assignee of '.$tdetail->tcode,
                                  'task_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }

              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            //tpriority field
            if($div_field == "tpriority_field")
            {
              $data = array(
                            'tpriority' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewTask($data,$div_id);
              if(!empty($tdetail->tproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->tproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Task Priority of '.$tdetail->tcode.', Priority: '.$txt,
                                  'task_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }

              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            //tstatus field
            if($div_field == "tstatus_field")
            {
              if($txt == 'to_do' || $txt == "in_progress")
              {
                  $data = array(
                            'tstatus' =>  $txt,
                            'tstatus_date' => date('Y-m-d H:i:s'),      
                            );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$div_id);
                  if(!empty($tdetail->tproject_assign))
                  {
                    $hdata = array(
                                      'pid' => $tdetail->tproject_assign,
                                      'gid' => $tdetail->gid,
                                      'sid' => $tdetail->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $stud->reg_id,
                                      'h_resource' => $stud->first_name.' '.$stud->last_name,
                                      'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Task Status of '.$tdetail->tcode.', Status: '.$txt,
                                      'task_id' =>$div_id
                                  );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                  }

                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                if($txt == 'in_review')
                {
                  $check_st = $this->Front_model->check_tasks_subtasks($div_id);
                  if($check_st)
                  {
                    $all_stcount = 0;
                    $done_stcount = 0;
                        foreach($check_st as $c_allst)
                          {
                            $all_stcount++; 
                          }
                        foreach($check_st as $c_allst)
                          {
                            if($c_allst->ststatus == 'done')
                            {
                              $done_stcount++;
                            } 
                          }
                    if($all_stcount == $done_stcount)
                    {
                      if($tdetail->tproject_assign != 0)
                    {
                    $get_pro_createdby = "";
                    $get_pro_manager = "";
                    $get_portfolio_owner_id = "";

                    $getPcreated_by = $this->Front_model->getProjectById($tdetail->tproject_assign);
                    if($getPcreated_by)
                    {
                        $get_pro_createdby = $getPcreated_by->pcreated_by;
                        $get_pro_manager = $getPcreated_by->pmanager;
                        $get_portfolio_owner_id = "";

                        $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                          if($check_Portfolio_owner_id)
                          {
                              $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                          }
                    }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                    {
                                        $data = array(
                                                'tstatus' => 'in_review',
                                                'review' => 'sent',
                                                'review_clear' => 'no',
                                                'review_notify'=> 'sent_yes',
                                                'po_review_clear' => 'no',
                                                'po_review_notify'=> 'sent_yes',
                                                'review_notdate' => date('Y-m-d H:i:s'),
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Submit for Review, Review:- Sent',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                            $response['status'] = TRUE;
                            header('Content-type: application/json');
                            echo json_encode($response);
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                            $response['status'] = TRUE;
                            header('Content-type: application/json');
                            echo json_encode($response);
                      }
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                            $response['status'] = TRUE;
                            header('Content-type: application/json');
                            echo json_encode($response);
                      }
                    }
                    else
                    {
                          $response['status'] = FALSE;
                          $response['sub_count'] = "not_done";
                          header('Content-type: application/json');
                          echo json_encode($response);
                    }
                                          
                  }
                  else
                  {
                    if($tdetail->tproject_assign != 0)
                    {
                    $get_pro_createdby = "";
                    $get_pro_manager = "";
                    $get_portfolio_owner_id = "";

                    $getPcreated_by = $this->Front_model->getProjectById($tdetail->tproject_assign);
                    if($getPcreated_by)
                    {
                        $get_pro_createdby = $getPcreated_by->pcreated_by;
                        $get_pro_manager = $getPcreated_by->pmanager;
                        $get_portfolio_owner_id = "";

                        $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                          if($check_Portfolio_owner_id)
                          {
                              $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                          }
                    }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                    {
                                        $data = array(
                                                'tstatus' => 'in_review',
                                                'review' => 'sent',
                                                'review_clear' => 'no',
                                                'review_notify'=> 'sent_yes',
                                                'po_review_clear' => 'no',
                                                'po_review_notify'=> 'sent_yes',
                                                'review_notdate' => date('Y-m-d H:i:s'),
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Submit for Review, Review:- Sent',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                            $response['status'] = TRUE;
                            header('Content-type: application/json');
                            echo json_encode($response); 
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response); 
                      }
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response);
                      }
                  }
                }

                if($txt == 'done')
                {
                  $check_st = $this->Front_model->check_tasks_subtasks($div_id);
                  if($check_st)
                  {
                    $all_stcount = 0;
                    $done_stcount = 0;
                        foreach($check_st as $c_allst)
                          {
                            $all_stcount++; 
                          }
                        foreach($check_st as $c_allst)
                          {
                            if($c_allst->ststatus == 'done')
                            {
                              $done_stcount++;
                            } 
                          }
                    if($all_stcount == $done_stcount)
                    {
                      if($tdetail->tproject_assign != 0)
                    {
                    $get_pro_createdby = "";
                    $get_pro_manager = "";
                    $get_portfolio_owner_id = "";

                    $getPcreated_by = $this->Front_model->getProjectById($tdetail->tproject_assign);
                    if($getPcreated_by)
                    {
                        $get_pro_createdby = $getPcreated_by->pcreated_by;
                        $get_pro_manager = $getPcreated_by->pmanager;
                        $get_portfolio_owner_id = "";

                        $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                          if($check_Portfolio_owner_id)
                          {
                              $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                          }
                    }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                    {
                                        $data = array(
                                                'tstatus' => 'in_review',
                                                'review' => 'sent',
                                                'review_clear' => 'no',
                                                'review_notify'=> 'sent_yes',
                                                'po_review_clear' => 'no',
                                                'po_review_notify'=> 'sent_yes',
                                                'review_notdate' => date('Y-m-d H:i:s'),
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Submit for Review, Review:- Sent',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);  
                      }
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                                $response['status'] = TRUE;
                                header('Content-type: application/json');
                                echo json_encode($response);  
                      }
                    }
                    else
                    {
                              $response['status'] = FALSE;
                              $response['sub_count'] = "not_done";
                              header('Content-type: application/json');
                              echo json_encode($response);
                    }
                                          
                  }
                  else
                  {
                    if($tdetail->tproject_assign != 0)
                    {
                    $get_pro_createdby = "";
                    $get_pro_manager = "";
                    $get_portfolio_owner_id = "";

                    $getPcreated_by = $this->Front_model->getProjectById($tdetail->tproject_assign);
                    if($getPcreated_by)
                    {
                        $get_pro_createdby = $getPcreated_by->pcreated_by;
                        $get_pro_manager = $getPcreated_by->pmanager;
                        $get_portfolio_owner_id = "";

                        $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                          if($check_Portfolio_owner_id)
                          {
                              $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                          }
                    }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                    {
                                        $data = array(
                                                'tstatus' => 'in_review',
                                                'review' => 'sent',
                                                'review_clear' => 'no',
                                                'review_notify'=> 'sent_yes',
                                                'po_review_clear' => 'no',
                                                'po_review_notify'=> 'sent_yes',
                                                'review_notdate' => date('Y-m-d H:i:s'),
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Submit for Review, Review:- Sent',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response); 
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);  
                      }
                      }
                      else
                      {
                        $data = array(
                                                'tstatus' => 'done',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->update_TaskProOwner($data,$div_id);
                        if(!empty($tdetail->tproject_assign))
                        {
                                                $hdata = array(
                                                                  'pid' => $tdetail->tproject_assign,
                                                                  'gid' => $tdetail->gid,
                                                                  'sid' => $tdetail->sid,
                                                                  'h_date' => date('Y-m-d H:i:s'),
                                                                  'h_resource_id' => $stud->reg_id,
                                                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->tcode.', New status:- Done',
                                                                  'task_id' =>$div_id
                                                              );
                                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                                              $this->Front_model->insert_ProjectHistory($hdata);      
                        }
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);  
                      }
                  }
                }
              }
            }
            //tduedate field
            if($div_field == "tduedate_field")
            {
              if(preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$txt))
              {
                $data = array(
                              'tdue_date' =>  $txt,        
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewTask($data,$div_id);
                if(!empty($tdetail->tproject_assign))
                {
                  $hdata = array(
                                    'pid' => $tdetail->tproject_assign,
                                    'gid' => $tdetail->gid,
                                    'sid' => $tdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $stud->reg_id,
                                    'h_resource' => $stud->first_name.' '.$stud->last_name,
                                    'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Task Due Date of '.$tdetail->tcode.', Due Date: '.$txt,
                                    'task_id' =>$div_id
                                );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
                }

                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                $response['status'] = FALSE;
                $response['sub_count'] = "no_cnt";
                header('Content-type: application/json');
                echo json_encode($response);
              }
            }
        }
        else
        {
            $response['status'] = FALSE;
            $response['sub_count'] = "no_cnt";
            header('Content-type: application/json');
            echo json_encode($response);
        }
      }
      //for subtask
      if($div_class == "subtask_editable")
      {
        $tdetail = $this->Front_model->check_subtask_assignProOwner($div_id);
        if($tdetail)
        {
            //tname field
            if($div_field == "stname_field")
            {
              $data = array(
                            'stname' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewSubtask($data,$div_id);
              if(!empty($tdetail->stproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->stproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Subtask Name of '.$tdetail->stcode.', Name: '.$txt,
                                  'subtask_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
            //tassignee field
            if($div_field == "stassignee_field")
            {
              $stnotify = "";
              $stnotify_clear = "";
                if($tdetail->stassignee == $txt)
                {
                  $stnotify = $tdetail->stnotify;
                  $stnotify_clear = $tdetail->stnotify_clear;
                }
                else
                {
                  $stnotify = 'yes';
                  $stnotify_clear = 'no';
                }

                $stnotify = "";
            $stnotify_clear = "";
              if($tdetail->stassignee == $txt)
              {
                $stnotify = $tdetail->stnotify;
                $stnotify_clear = $tdetail->stnotify_clear;
              }
              else
              {
                $stnotify = 'yes';
                $stnotify_clear = 'no';
              }

          $check_Pro_Owner = $this->Front_model->getProjectById($tdetail->stproject_assign);
          $pro_owner = "";
          $pro_manager = "";
          $pname = "";
          $pdes = "";
          $portfolio_owner_id = "";
          if($check_Pro_Owner)
          {
            $pro_owner = $check_Pro_Owner->pcreated_by;
            $pro_manager = $check_Pro_Owner->pmanager;
            $pname = $check_Pro_Owner->pname;
            $pdes = $check_Pro_Owner->pdes;

            $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($check_Pro_Owner->portfolio_id);
                if($check_Portfolio_owner_id)
                {
                    $portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                }
          }

        if(($pro_owner == $this->session->userdata('d168_id')) || ($pro_manager == $this->session->userdata('d168_id')) || ($portfolio_owner_id == $this->session->userdata('d168_id')))
        {
          if($pro_owner != $txt)
          {
            $pdetail_member = $this->Front_model->getMemberProject($tdetail->stproject_assign);
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($txt,$check_mem);
            if($index === FALSE)
            {
              $check_if_suggested = $this->Front_model->check_if_suggested($tdetail->stproject_assign,$txt);
              if($check_if_suggested > 0)
              {
                $data = array(
                     'status' => 'approved',
                     'approve_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_SuggestTeamMember($data,$tdetail->stproject_assign,$txt);
              }
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                $data2 = array(
                    'pid' => $tdetail->stproject_assign,
                    'portfolio_id' => $tdetail->portfolio_id,
                    'pmember' => $txt,
                    'status' => 'send',
                    'pcreated_by' => $this->session->userdata('d168_id'),
                    'sent_date' => date('Y-m-d H:i:s'),
                    'sent_notify_clear' => 'no',
                                      );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->insert_TeamMember($data2);
                $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($txt);
                $hdata = array(
                                  'pid' => $tdetail->stproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                  'pmember_id' =>$inserted_pm_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($tdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                $RequestEmailID = $getEmailID->email_address;

                $email_to = $RequestEmailID;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Project Request | Decision 168');
                  $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$tdetail->stproject_assign.'/'.trim($txt).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$tdetail->stproject_assign.'/'.trim($txt).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                      );
              $this->email->send();
            }
          }
        }
        else
        {
          if($pro_owner != $txt)
          {
            $pdetail_member = $this->Front_model->getMemberProject($tdetail->stproject_assign);
            $pro_member = array();
            if($pdetail_member)
            {
                foreach($pdetail_member as $pm)
                  {
                    $pro_member[] = $pm->pmember;
                  }
            }
            $implode_pro_member = implode(',', $pro_member);
            $check_mem = explode(',', $implode_pro_member);        
            $index = array_search($txt,$check_mem);
            if($index === FALSE)
            {
                $check = $this->Front_model->check_suggested2($tdetail->stproject_assign,$txt);
                $check_pmem = $this->Front_model->check_pro_member2($tdetail->stproject_assign,$txt);
                $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                if($check == 0 && $check_pmem == 0)
                {
                  $data2 = array(
                      'pid' => $tdetail->stproject_assign,
                      'suggest_id' => trim($txt),
                      'status' => 'suggested',
                      'already_register' => 'yes',
                      'suggested_by' => $this->session->userdata('d168_id'),
                      'suggested_date' => date('Y-m-d H:i:s')
                        );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->insert_SuggestTeamMember($data2);
                  $pmsuggested_inserted_id = $this->db->insert_id();
                  $getEmailID = $this->Front_model->getEmailID($txt);
                  $hdata = array(
                                'pid' => $tdetail->stproject_assign,
                                'gid' => $tdetail->gid,
                                'sid' => $tdetail->sid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                'pmsuggested_id' =>$pmsuggested_inserted_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                }
            }
          }
        }

              $data = array(
                            'stassignee' =>  $txt,
                            'stnotify' => $stnotify,
                            'stnotify_clear' => $stnotify_clear,
                            'stnotify_date' => date('Y-m-d H:i:s'),        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewSubtask($data,$div_id);
              if(!empty($tdetail->stproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->stproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Assignee of '.$tdetail->stcode,
                                  'subtask_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
            //tpriority field
            if($div_field == "stpriority_field")
            {
              $data = array(
                            'stpriority' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_NewSubtask($data,$div_id);
              if(!empty($tdetail->stproject_assign))
              {
                $hdata = array(
                                  'pid' => $tdetail->stproject_assign,
                                  'gid' => $tdetail->gid,
                                  'sid' => $tdetail->sid,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $stud->reg_id,
                                  'h_resource' => $stud->first_name.' '.$stud->last_name,
                                  'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Subtask Priority of '.$tdetail->stcode.', Priority: '.$txt,
                                  'subtask_id' =>$div_id
                              );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
              }
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
            //tstatus field
            if($div_field == "ststatus_field")
            {
              if($txt == "to_do" || $txt == "in_progress")
              {
                $data = array(
                            'ststatus' =>  $txt,
                            'ststatus_date' => date('Y-m-d H:i:s'),        
                            );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$div_id);
                if(!empty($tdetail->stproject_assign))
                {
                  $hdata = array(
                                    'pid' => $tdetail->stproject_assign,
                                    'gid' => $tdetail->gid,
                                    'sid' => $tdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $stud->reg_id,
                                    'h_resource' => $stud->first_name.' '.$stud->last_name,
                                    'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Subtask Status of '.$tdetail->stcode.', Status: '.$txt,
                                    'subtask_id' =>$div_id
                                );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
                }
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
              }
              else
              {
                if($txt == 'in_review')
                {
                  if($tdetail->stproject_assign != 0)
                  {
                  $get_pro_createdby = "";
                  $get_pro_manager = "";
                  $get_portfolio_owner_id = "";

                  $getPcreated_by = $this->Front_model->getProjectById($tdetail->stproject_assign);
                  if($getPcreated_by)
                  {
                      $get_pro_createdby = $getPcreated_by->pcreated_by;
                      $get_pro_manager = $getPcreated_by->pmanager;
                      $get_portfolio_owner_id = "";

                      $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                        if($check_Portfolio_owner_id)
                        {
                            $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                        }
                  }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                  {
                                      $data = array(
                                              'ststatus' => 'in_review',
                                              'sreview' => 'sent',
                                              'sreview_clear' => 'no',
                                              'sreview_notify'=> 'sent_yes',
                                              'po_sreview_clear' => 'no',
                                              'po_sreview_notify'=> 'sent_yes',
                                              'sreview_notdate' => date('Y-m-d H:i:s'),
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);

                                          $data = array(
                                              'tstatus' => 'in_progress',
                                              'review' => '',
                                              'review_clear'=> '',
                                              'review_notify'=> '',
                                              'po_review_clear' => '',
                                              'po_review_notify'=> '',
                                              'tstatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->edit_NewTask($data,$tdetail->tid);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Submit for Review, Review:- Sent',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }
                    else
                    {
                      $data = array(
                                              'ststatus' => 'done',
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Done',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }
                    }
                    else
                    {
                      $data = array(
                                              'ststatus' => 'done',
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Done',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }

                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                }

                if($txt == 'done')
                {
                  if($tdetail->stproject_assign != 0)
                  {
                  $get_pro_createdby = "";
                  $get_pro_manager = "";
                  $get_portfolio_owner_id = "";

                  $getPcreated_by = $this->Front_model->getProjectById($tdetail->stproject_assign);
                  if($getPcreated_by)
                  {
                      $get_pro_createdby = $getPcreated_by->pcreated_by;
                      $get_pro_manager = $getPcreated_by->pmanager;
                      $get_portfolio_owner_id = "";

                      $check_Portfolio_owner_id = $this->Front_model->getPortfolioById($getPcreated_by->portfolio_id);
                        if($check_Portfolio_owner_id)
                        {
                            $get_portfolio_owner_id = $check_Portfolio_owner_id->portfolio_createdby;
                        }
                  }

          if(($get_pro_createdby != $this->session->userdata('d168_id')) && ($get_pro_manager != $this->session->userdata('d168_id')) && ($get_portfolio_owner_id != $this->session->userdata('d168_id')))
                  {
                                      $data = array(
                                              'ststatus' => 'in_review',
                                              'sreview' => 'sent',
                                              'sreview_clear' => 'no',
                                              'sreview_notify'=> 'sent_yes',
                                              'po_sreview_clear' => 'no',
                                              'po_sreview_notify'=> 'sent_yes',
                                              'sreview_notdate' => date('Y-m-d H:i:s'),
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);

                                          $data = array(
                                              'tstatus' => 'in_progress',
                                              'review' => '',
                                              'review_clear'=> '',
                                              'review_notify'=> '',
                                              'po_review_clear' => '',
                                              'po_review_notify'=> '',
                                              'tstatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->edit_NewTask($data,$tdetail->tid);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Submit for Review, Review:- Sent',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }
                    else
                    {
                      $data = array(
                                              'ststatus' => 'done',
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Done',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }
                    }
                    else
                    {
                      $data = array(
                                              'ststatus' => 'done',
                                              'ststatus_date' => date('Y-m-d H:i:s'),
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->update_SubtaskProOwner($data,$div_id);
                      if(!empty($tdetail->stproject_assign))
                      {
                                              $hdata = array(
                                                                'pid' => $tdetail->stproject_assign,
                                                                'gid' => $tdetail->gid,
                                                                'sid' => $tdetail->sid,
                                                                'h_date' => date('Y-m-d H:i:s'),
                                                                'h_resource_id' => $stud->reg_id,
                                                                'h_resource' => $stud->first_name.' '.$stud->last_name,
                                                                'h_description' => $stud->first_name.' '.$stud->last_name.' Changed Status of '.$tdetail->stcode.', New status:- Done',
                                                                'subtask_id' =>$div_id
                                                            );
                                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                                            $this->Front_model->insert_ProjectHistory($hdata);      
                      }
                    }

                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                }
              }
            }
            //tduedate field
            if($div_field == "stduedate_field")
            {
              if(preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$txt))
              {
                $data = array(
                              'stdue_date' =>  $txt,        
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$div_id);
                if(!empty($tdetail->stproject_assign))
                {
                  $hdata = array(
                                    'pid' => $tdetail->stproject_assign,
                                    'gid' => $tdetail->gid,
                                    'sid' => $tdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $stud->reg_id,
                                    'h_resource' => $stud->first_name.' '.$stud->last_name,
                                    'h_description' => $stud->first_name.' '.$stud->last_name.' Edited Subtask Due Date of '.$tdetail->stcode.', Due Date: '.$txt,
                                    'subtask_id' =>$div_id
                                );
                  $hdata = $this->security->xss_clean($hdata); // xss filter
                  $this->Front_model->insert_ProjectHistory($hdata);
                }

                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                $response['status'] = FALSE;
                $response['sub_count'] = "no_cnt";
                header('Content-type: application/json');
                echo json_encode($response);
              }
            }
        }
        else
        {
            $response['status'] = FALSE;
            $response['sub_count'] = "no_cnt";
            header('Content-type: application/json');
            echo json_encode($response);
        }
      }
    }
    else
    {
      $response['status'] = FALSE;
      $response['sub_count'] = "no_cnt";
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function portfolio_tasks_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->unset_userdata('searched_port_id');
      $this->session->unset_userdata('searched_pid');
      $this->session->unset_userdata('searched_taskFilter');
      $this->session->unset_userdata('searched_tf_start_date');
      $this->session->unset_userdata('searched_tf_end_date');
      $this->session->unset_userdata('searched_date_filter_page_name');

      $get_port_id = $this->uri->segment(2);
      $data['check_port_id'] = $this->uri->segment(2);
      $data['AssignedTasklist'] = $this->Front_model->AssignedTasklistPortfolio($get_port_id);
      $data['AssignedSubtasklist_Task'] = $this->Front_model->AssignedSubtasklist_TaskPortfolio($get_port_id);
      //$data['AssignedTaskTrashlist'] = $this->Front_model->AssignedTaskTrashlistPortfolio($get_port_id);
      $data['AssignedSubtasklist'] = $this->Front_model->AssignedSubtasklistPortfolio($get_port_id);
      //$data['AssignedSubtaskTrashlist'] = $this->Front_model->AssignedSubtaskTrashlistPortfolio($get_port_id); 
      //$data['plist'] = $this->Front_model->ProjectListgetPortfolio($get_port_id);
      //$data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($get_port_id);  
      $this->load->view('user/portfolio-tasks-list',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // public function project_search_task()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $this->form_validation->set_rules('pid_task','Project','trim|required');
  //     if ($this->form_validation->run() == FALSE)
  //     {
  //         //$errors = array();
  //         $errors = $this->form_validation->error_array();
  //         // Loop through $_POST and get the keys
  //         foreach ($errors as $key => $value)
  //         {
  //         // Add the error message for this field
  //         $errors[$key] = form_error($key);
  //         }
                  
  //         $response['errors'] = array_filter($errors); // Some might be empty
  //         $response['status'] = FALSE;
  //         // You can use the Output class here too
  //         header('Content-type: application/json');
  //         //echo json_encode($response);
  //         exit(json_encode($response));
  //       }
  //       else
  //       {
  //         $this->session->set_userdata('searched_port_id',$this->input->post('port_id'));
  //         $this->session->set_userdata('searched_pid',$this->input->post('pid_task'));
  //         $this->session->set_userdata('searched_taskFilter',$this->input->post('taskFilter'));
  //        // echo $this->input->post('pid_task');
  //         //echo $this->session->userdata('searched_port_id');
  //        // echo $this->session->userdata('searched_taskFilter');
  //         if((!empty($this->session->userdata('searched_port_id'))) && (!empty($this->session->userdata('searched_pid'))))
  //         {
  //           $response['status'] = TRUE;
  //           header('Content-type: application/json');
  //           echo json_encode($response); 
  //         }
  //       }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function portfolio_project_tasks_search()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     if((!empty($this->session->userdata('searched_port_id'))) && (!empty($this->session->userdata('searched_pid'))))
  //     {
  //         $data['port_id'] = $this->session->userdata('searched_port_id');
  //         $data['pid'] = $this->session->userdata('searched_pid');
  //         $data['getFilter'] = $this->session->userdata('searched_taskFilter');
  //         $data['AssignedTasklist'] = $this->Front_model->AssignedTasklistPortfolioReplace($data['port_id'],$data['pid']);
  //         $data['AssignedSubtasklist_Task'] = $this->Front_model->AssignedSubtasklist_TaskPortfolioReplace($data['port_id'],$data['pid']);
  //         //$data['AssignedTaskTrashlist'] = $this->Front_model->AssignedTaskTrashlistPortfolioReplace($data['port_id'],$data['pid']);
  //         $data['AssignedSubtasklist'] = $this->Front_model->AssignedSubtasklistPortfolioReplace($data['port_id'],$data['pid']);
  //         //$data['AssignedSubtaskTrashlist'] = $this->Front_model->AssignedSubtaskTrashlistPortfolioReplace($data['port_id'],$data['pid']); 
  //         $data['plist'] = $this->Front_model->ProjectListgetPortfolio($data['port_id']);
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($data['port_id']);  
  //         $this->load->view('user/portfolio-project-tasks-search',$data);
  //       }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function all_project_search_task()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $this->form_validation->set_rules('pid_task','Project','trim|required');
  //     if ($this->form_validation->run() == FALSE)
  //     {
  //         //$errors = array();
  //         $errors = $this->form_validation->error_array();
  //         // Loop through $_POST and get the keys
  //         foreach ($errors as $key => $value)
  //         {
  //         // Add the error message for this field
  //         $errors[$key] = form_error($key);
  //         }
                  
  //         $response['errors'] = array_filter($errors); // Some might be empty
  //         $response['status'] = FALSE;
  //         // You can use the Output class here too
  //         header('Content-type: application/json');
  //         //echo json_encode($response);
  //         exit(json_encode($response));
  //       }
  //       else
  //       {
  //         $this->session->set_userdata('searched_page_name',$this->input->post('page_name'));
  //         $this->session->set_userdata('searched_pid_list',$this->input->post('pid_task'));
  //         if($this->input->post('page_name') == "portfolio_tasks_page")
  //         {
  //           if(!empty($this->input->post('port_id_tl')))
  //           {
  //               $this->session->set_userdata('searched_Port_TL',$this->input->post('port_id_tl'));
  //           }
  //           else
  //           {
  //               $this->session->set_userdata('searched_Port_TL',"");
  //           }
  //           $this->session->set_userdata('searched_taskFilter',$this->input->post('taskFilter'));
  //         }
  //         elseif($this->input->post('page_name') == "tasks_list_page")
  //         {
  //           $this->session->set_userdata('searched_taskFilter',$this->input->post('taskFilter'));
  //         }
  //         else
  //         {
  //           $this->session->set_userdata('searched_Port_TL',"");
  //         }
          
  //         if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
  //         {
  //           $response['status'] = TRUE;
  //           header('Content-type: application/json');
  //           echo json_encode($response); 
  //         }
  //       }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function projects_tasks_search_list()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $this->session->unset_userdata('searched_tf_start_date');
  //     $this->session->unset_userdata('searched_tf_end_date');
  //     if((!empty($this->session->userdata('searched_page_name'))) && (!empty($this->session->userdata('searched_pid_list'))))
  //     {
  //       $data['pid'] = $this->session->userdata('searched_pid_list');
  //       if($this->session->userdata('searched_page_name') == "all_tasks_page")
  //       {
  //         $data['AssignedTasklist'] = $this->Front_model->AssignedTasklistByProj($data['pid']);
  //         $data['AssignedSubtasklist_Task'] = $this->Front_model->AssignedSubtasklist_TaskByProj($data['pid']);
  //         //$data['AssignedTaskTrashlist'] = $this->Front_model->AssignedTaskTrashlistByProj($data['pid']);
  //         $data['AssignedSubtasklist'] = $this->Front_model->AssignedSubtasklistByProj($data['pid']);
  //         //$data['AssignedSubtaskTrashlist'] = $this->Front_model->AssignedSubtaskTrashlistByProj($data['pid']);
  //         $data['plist'] = $this->Front_model->ProjectList();
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
  //         $this->load->view('user/all-projects-tasks',$data);
  //       }
  //       elseif($this->session->userdata('searched_page_name') == "today_tasks_page")
  //       {
  //         $today = date('Y-m-d');
  //         $data['TodayTasks'] = $this->Front_model->TodayTasksByProj($today,$data['pid']);
  //         $data['TodaySubtasklist_Task'] = $this->Front_model->TodaySubtasklist_TaskByProj($today,$data['pid']);
  //         //$data['TodayTasksTrashlist'] = $this->Front_model->TodayTasksTrashlistByProj($today,$data['pid']);
  //         $data['TodaySubtasks'] = $this->Front_model->TodaySubtasksByProj($today,$data['pid']);
  //         //$data['TodaySubtasksTrashlist'] = $this->Front_model->TodaySubtasksTrashlistByProj($today,$data['pid']);
  //         $data['plist'] = $this->Front_model->ProjectList();
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
  //         $this->load->view('user/today-projects-tasks',$data);
  //       }
  //       elseif($this->session->userdata('searched_page_name') == "week_tasks_page")
  //       {
  //         $FirstDay = date('Y-m-d', strtotime('+1 day'));
  //         $LastDay = date('Y-m-d', strtotime($FirstDay .' +6 days'));
  //         $data['WeekTasks'] = $this->Front_model->WeekTasksByProj($FirstDay,$LastDay,$data['pid']);
  //         $data['WeekSubtaskslist_Task'] = $this->Front_model->WeekSubtaskslist_TaskByProj($FirstDay,$LastDay,$data['pid']);
  //         //$data['WeekTasksTrashlist'] = $this->Front_model->WeekTasksTrashlistByProj($FirstDay,$LastDay,$data['pid']);
  //         $data['WeekSubtasks'] = $this->Front_model->WeekSubtasksByProj($FirstDay,$LastDay,$data['pid']);
  //         //$data['WeekSubtasksTrashlist'] = $this->Front_model->WeekSubtasksTrashlistByProj($FirstDay,$LastDay,$data['pid']);
  //         $data['plist'] = $this->Front_model->ProjectList();
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectList(); 
  //         $this->load->view('user/week-projects-tasks',$data);
  //       }
  //       elseif($this->session->userdata('searched_page_name') == "portfolio_tasks_page")
  //       {
  //         if(!empty($this->session->userdata('searched_Port_TL')))
  //         {
  //           $data['getFilter'] = $this->session->userdata('searched_taskFilter');
  //           $data['port_id_tl'] = $this->session->userdata('searched_Port_TL');
  //           $data['portfolio_tasks'] = $this->Front_model->portfolio_tasksNewByProj($data['port_id_tl'],$data['pid']);
  //           $data['plist'] = $this->Front_model->ProjectListByPortfolio($data['port_id_tl']);
  //           $data['accepted_plist'] = $this->Front_model->AcceptedProjectListByPortfolio($data['port_id_tl']); 
  //           $this->load->view('user/portfolio_projects_tasks',$data);
  //         }
  //       }
  //       elseif($this->session->userdata('searched_page_name') == "tasks_list_page")
  //       {
  //         $data['getFilter'] = $this->session->userdata('searched_taskFilter');
  //         $get_port_id = $this->session->userdata('created_tl_port_id');
  //         $get_pid = $this->session->userdata('searched_pid_list');
  //         $data['CreatedTaskList'] = $this->Front_model->CreatedTaskList_Project($get_port_id,$get_pid);
  //         $data['CreatedSubTaskList'] = $this->Front_model->CreatedSubTaskList_Project($get_port_id,$get_pid);
  //         $data['plist'] = $this->Front_model->ProjectListgetPortfolio($get_port_id);
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectListgetPortfolio($get_port_id);  
  //         $this->load->view('user/tasks-project-list',$data);
  //       }
  //     }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function task_attachmentModal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['tdetail'] = $this->Front_model->TaskDetail($id);
      if($data['tdetail'])
      {
        $this->load->view('user/tasks-attachment-modal',$data); 
      }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function task_commentmodal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['tdetail'] = $this->Front_model->TaskDetail($id);
      if($data['tdetail'])
      {
        $this->load->view('user/tasks-comment-modal',$data); 
      }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_attach_tfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $tid = $this->input->post('tid');
          $get_tcode = $this->input->post('tcode');
          $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
          $getTasksDetail = $this->Front_model->getTasksDetail($tid);

      if($getTasksDetail)
      {
          $tfile_old = $this->input->post('tfile_old');

          $tfile_upload=$tfile_old;

           $tfile_new_upload = "";
           $final_mem = "";
            if(!empty($_FILES['attach_tfile']['name'][0]))
            {
              $tfile_upload= "";
              $cpt = count($_FILES['attach_tfile']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/task_files/';
              $config['allowed_types'] = '*';
              $maxsize=2000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['attach_tfile']['name']= time().'_'.$files['attach_tfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['attach_tfile']['name'][$i])));
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name)); 
                  $_FILES['attach_tfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['attach_tfile']['type']= $files['attach_tfile']['type'][$i];
                  $_FILES['attach_tfile']['tmp_name']= $files['attach_tfile']['tmp_name'][$i];
                  $_FILES['attach_tfile']['error']= $files['attach_tfile']['error'][$i];
                  $_FILES['attach_tfile']['size']= $files['attach_tfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['attach_tfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('attach_tfile'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['attach_tfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $tfile_new = implode(',', array_column($uploadData, 'attach_tfile2'));
                        $tfile_new_upload = implode(',', array_column($uploadData, 'attach_tfile2'));
                        $pdetail = $this->Front_model->getProjectById($getTasksDetail->tproject_assign);
                        $pdetail_member = $this->Front_model->getMemberProject($getTasksDetail->tproject_assign);
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($tfile_old))
                    {
                      $tfile_old_array = explode(', ', $tfile_old);
                      $tfile_new_array = explode(', ', $tfile_new);
                      $merge_tfile = array_merge($tfile_old_array,$tfile_new_array);
                      $tfile_upload = implode(',',$merge_tfile);                      
                    }
                    else
                    {
                      $tfile_upload = $tfile_new;
                    }
            }

                    $data = array(
                                    'tfile' => $tfile_upload,
                                    'new_file' => $tfile_new_upload,
                                    'tfnotify' => $final_mem,
                                    'tfnotify_clear' => $final_mem,
                                    'tfnotify_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewTask($data,$tid);
                                if(!empty($getTasksDetail->tproject_assign))
                                {
                                  $hdata = array(
                                                      'pid' => $getTasksDetail->tproject_assign,
                                                      'gid' => $getTasksDetail->gid,
                                                      'sid' => $getTasksDetail->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $powner->reg_id,
                                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                      'h_description' => 'Task Code: '.$get_tcode.' , New File Uploaded by '.$powner->first_name.' '.$powner->last_name,
                                                      'task_id' =>$tid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                                }

                              $message = 'Task File Uploaded Successfully!';
                              $this->session->set_flashdata('message', $message);
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function subtask_attachmentModal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
      if($data['stdetail'])
      {
        $this->load->view('user/subtasks-attachment-modal',$data); 
      }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function subtask_commentmodal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['stdetail'] = $this->Front_model->SubtaskDetail($id);
      if($data['stdetail'])
      {
        $this->load->view('user/subtasks-comment-modal',$data); 
      }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_attach_stfile()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $stid = $this->input->post('stid');
          $get_stcode = $this->input->post('stcode');
          $powner = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
          $check_subtask = $this->Front_model->check_subtask($stid);

      if($check_subtask)
      {
          $tfile_old = $this->input->post('stfile_old');

           $tfile_upload=$tfile_old;

           $tfile_new_upload = "";
           $final_mem = "";
            if(!empty($_FILES['attach_stfile']['name'][0]))
            {
              $tfile_upload= "";
              $cpt = count($_FILES['attach_stfile']['name']);
              $files = $_FILES;
              $config['upload_path'] = 'assets/task_files/';
              $config['allowed_types'] = '*';
              $maxsize=2000000;
              //Load upload library and initialize configuration
              $this->load->library('upload', $config);

              for($i=0; $i<$cpt; $i++)
                {          
                  //$_FILES['attach_stfile']['name']= time().'_'.$files['attach_stfile']['name'][$i];
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$files['attach_stfile']['name'][$i])));
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name)); 
                  $_FILES['attach_stfile']['name']= time().'_'.strtolower($new_file_name);
                  $_FILES['attach_stfile']['type']= $files['attach_stfile']['type'][$i];
                  $_FILES['attach_stfile']['tmp_name']= $files['attach_stfile']['tmp_name'][$i];
                  $_FILES['attach_stfile']['error']= $files['attach_stfile']['error'][$i];
                  $_FILES['attach_stfile']['size']= $files['attach_stfile']['size'][$i];   

                  $this->upload->initialize($config);
                  if($_FILES['attach_stfile']['size'] >= $maxsize)
                        {
                                $response['status'] = 'file_uploadSizeErr';
                                header('Content-type: application/json');
                                exit(json_encode($response));
                        }
                  else
                        {
                            if($this->upload->do_upload('attach_stfile'))
                              {
                                $fileData = $this->upload->data();
                                $uploadData[$i]['attach_stfile2'] = $fileData['file_name'];
                              }
                              else 
                              {
                                $response['status'] = 'Error_Uploading';
                                header('Content-type: application/json');
                                //echo json_encode($response);
                                exit(json_encode($response));
                              } 
                        }                                  
                }

                if(is_array($uploadData))
                    {
                        $tfile_new = implode(',', array_column($uploadData, 'attach_stfile2'));
                        $tfile_new_upload = implode(',', array_column($uploadData, 'attach_stfile2'));
                        $pdetail = $this->Front_model->getProjectById($check_subtask->stproject_assign);
                        $pdetail_member = $this->Front_model->getMemberProject($check_subtask->stproject_assign);
                        $pro_member = "";
                        $pro_member2[] = "";
                        if($pdetail || $pdetail_member)
                        {
                          if($pdetail)
                          {
                            $pro_member1 = $pdetail->pcreated_by;
                          }
                          if($pdetail_member)
                          {
                            foreach($pdetail_member as $pm)
                            {
                              $pro_member2[] = $pm->pmember;
                            }
                          }
                        }
                      $new_pro_member1 = explode(', ', $pro_member1);
                      $pro_member = array_merge($pro_member2,$new_pro_member1);
                      $implode_pro_member = implode(',', $pro_member);
                      $check_mem = explode(',', $implode_pro_member);        
                      $index = array_search($this->session->userdata('d168_id'),$check_mem);
                      if($index !== FALSE){
                          unset($check_mem[$index]);
                      }
                      $final_mem = implode(',', $check_mem); 
                    }
                    if(!empty($tfile_old))
                    {
                      $tfile_old_array = explode(', ', $tfile_old);
                      $tfile_new_array = explode(', ', $tfile_new);
                      $merge_tfile = array_merge($tfile_old_array,$tfile_new_array);
                      $tfile_upload = implode(',',$merge_tfile);                      
                    }
                    else
                    {
                      $tfile_upload = $tfile_new;
                    }
            }

                    $data = array(
                                    'stfile' => $tfile_upload,
                                    'snew_file' => $tfile_new_upload,
                                    'stfnotify' => $final_mem,
                                    'stfnotify_clear' => $final_mem,
                                    'stfnotify_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_NewSubtask($data,$stid);
                                if(!empty($check_subtask->stproject_assign))
                                {
                                  $hdata = array(
                                                      'pid' => $check_subtask->stproject_assign,
                                                      'gid' => $check_subtask->gid,
                                                      'sid' => $check_subtask->sid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $powner->reg_id,
                                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                                      'h_description' => 'Subtask Code: '.$get_stcode.' , New File Uploaded by '.$powner->first_name.' '.$powner->last_name,
                                                      'subtask_id' =>$stid
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
                                }

                              $message = 'Subtask File Uploaded Successfully!';
                              $this->session->set_flashdata('message', $message);
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function portfolio_projects_content_search()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $this->form_validation->set_rules('pid_contentplan','Publish Date','trim|required');
  //     if ($this->form_validation->run() == FALSE)
  //     {
  //         //$errors = array();
  //         $errors = $this->form_validation->error_array();
  //         // Loop through $_POST and get the keys
  //         foreach ($errors as $key => $value)
  //         {
  //         // Add the error message for this field
  //         $errors[$key] = form_error($key);
  //         }
                  
  //         $response['errors'] = array_filter($errors); // Some might be empty
  //         $response['status'] = FALSE;
  //         // You can use the Output class here too
  //         header('Content-type: application/json');
  //         //echo json_encode($response);
  //         exit(json_encode($response));
  //       }
  //       else
  //       {
  //         $this->session->set_userdata('searched_content_port_id',$this->input->post('port_id'));
  //         $this->session->set_userdata('searched_content_date',$this->input->post('pid_contentplan'));
                
  //         if((!empty($this->session->userdata('searched_content_port_id'))) && (!empty($this->session->userdata('searched_content_date'))))
  //         {
  //           $response['status'] = TRUE;
  //           header('Content-type: application/json');
  //           echo json_encode($response); 
  //         }
  //       }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function portfolio_project_content_search_list()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     if((!empty($this->session->userdata('searched_content_port_id'))) && (!empty($this->session->userdata('searched_content_date'))))
  //     {
  //         $cport_id = $this->session->userdata('searched_content_port_id');
  //         $cdate = $this->session->userdata('searched_content_date');
  //         $data['plist'] = $this->Front_model->ProjectList();
  //         $data['accepted_plist'] = $this->Front_model->AcceptedProjectList();
  //         //$data['contentPlanningPublishDate'] = $this->Front_model->contentPlanningPublishDate($cport_id);
  //         $data['contentPlanningDetails'] = $this->Front_model->PortfoliocontentPlanningDetails2($cport_id,$cdate);  
  //         $this->load->view('user/portfolio-project-content-search-list',$data);
  //     }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function contents_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['plist'] = $this->Front_model->ProjectListContent();
      $data['accepted_plist'] = $this->Front_model->AcceptedProjectListContent();
      $data['pending_plist'] = $this->Front_model->PendingProjectListContent();
      $data['readmore_plist'] = $this->Front_model->ReadMoreProjectListContent();
      $this->load->view('user/contents-list',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_contents()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['c_id'] = $this->uri->segment(2);
      $data['portfolio_projects'] = $this->Front_model->portfolio_projectsContent($data['c_id']);
      $this->load->view('user/portfolio-contents',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function select_Portfolio_to_work()
  {
    $port_id = trim($this->input->post('id'));
    if($port_id != '0')
    {
      setcookie("d168_selectedportfolio",$port_id,time()+ (10 * 365 * 24 * 60 * 60),'/');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
  }

  public function content_request_send_by_tm_to_owner()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $p_id = $this->input->post('id');
      $check_content_request_user = $this->Front_model->check_content_request_user($p_id);
      if(empty($check_content_request_user))
      {
        $pdetail = $this->Front_model->getProjectById($p_id);
        $getEmailID = $this->Front_model->getEmailID($pdetail->pcreated_by);
        $Request_From = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

        $check = $this->Front_model->check_request_member($p_id,$this->session->userdata('d168_id'));
        if($check > 0)
        {
          $this->session->set_flashdata('message', 'Request Already Sent!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        else
        {
          $data = array(
                          'pid' => $p_id,
                          'member' => $this->session->userdata('d168_id'),
                          'status' => 'sent',
                          'mode' => 'sent_req',
                          'mreq_notify' => 'yes',
                          'mreq_notify_clear' => 'no',
                          'date' => date('Y-m-d H:i:s'),
                      );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insert_project_request_member($data);
        $RequestEmailID = $getEmailID->email_address;
          $email_to = $RequestEmailID;
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Request for Add as Team Member in Content Project | Decision 168');
          $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Request for Add as Team Member in Content Project</title>
            <meta name="description" content="Project Edit Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">How awesome is that...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($Request_From->first_name).' '.ucfirst($Request_From->last_name).' has requested to add as a Team Member in '.$pdetail->pname.' content project. Just click the button below to Add as Team Member.
                                                </p>
                                                <a href="'.base_url('add-team-member/'.$p_id.'/'.$this->session->userdata('d168_id').'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Add In Team</a>
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
          if($this->email->send())
          {
            $this->session->set_flashdata('message', 'Request Sent To Project Owner!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          else
          {
            echo $this->email->print_debugger();
          }
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function add_team_member()
  {
    $pid = $this->uri->segment(2);
    $member_id = $this->uri->segment(3);
    $flag_num = $this->uri->segment(4);
    if($flag_num == '1')
    {
      $res = $this->Front_model->check_user_request($pid,$member_id);
      if($res > 0)
      {
        $data['req'] = 'already_accepted';
        $this->load->view('user/already_accepted_team_member',$data);
      }
      else
      {
        $pdetail = $this->Front_model->getProjectById($pid);
        if($pdetail)
        {
          $check_if_requested = $this->Front_model->RequestAsProjectMember($pid,$member_id);
              if($check_if_requested)
              {
                $data = array(
                                    'status' => 'added',
                                );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_project_request_member($data,$pid,$member_id);
              }

          $data2 = array(
                        'pid' => $pid,
                        'portfolio_id' => $pdetail->portfolio_id,
                        'pmember' => trim($member_id),
                        'status' => 'send',
                        'pcreated_by' => $this->session->userdata('d168_id'),
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'no',
                                          );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->insert_TeamMember($data2);
          $inserted_pm_id = $this->db->insert_id();
        //get email id from member id
        $getEmailID = $this->Front_model->getEmailID($member_id);
        $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $hdata = array(
                        'pid' => $pid,
                        'gid' => $pdetail->gid,
                        'sid' => $pdetail->sid,
                        'h_date' => date('Y-m-d H:i:s'),
                        'h_resource_id' => $P_Owner->reg_id,
                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                        'pmember_id' =>$inserted_pm_id
                    );
          $hdata = $this->security->xss_clean($hdata); // xss filter
          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

          $RequestEmailID = $getEmailID->email_address;
          $email_to = $RequestEmailID;
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Project Request | Decision 168');
          $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($member_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($member_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
          $this->email->send();

        $data['req'] = 'accepted';
        $this->load->view('user/already_accepted_team_member',$data);
        }
      }
    }
  }

  public function sentReq_to_RequestedPMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $member_id = $this->input->post('member');
    $check = $this->Front_model->check_TeamRequestSend($member_id,$pid);
    if($check > 0)
    {
      $this->session->set_flashdata('message', 'Already Added in Team!');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      $pdetail = $this->Front_model->getProjectById($pid);
      $data = array(
                      'status' => 'added',
                  );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_project_request_member($data,$pid,$member_id);

      $data2 = array(
                        'pid' => $pid,
                        'portfolio_id' => $pdetail->portfolio_id,
                        'pmember' => trim($member_id),
                        'status' => 'send',
                        'pcreated_by' => $this->session->userdata('d168_id'),
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'no',
                                          );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->insert_TeamMember($data2);
          $inserted_pm_id = $this->db->insert_id();
          //get email id from member id
        $getEmailID = $this->Front_model->getEmailID($member_id);
        $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $hdata = array(
                        'pid' => $pid,
                        'gid' => $pdetail->gid,
                        'sid' => $pdetail->sid,
                        'h_date' => date('Y-m-d H:i:s'),
                        'h_resource_id' => $P_Owner->reg_id,
                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                        'pmember_id' =>$inserted_pm_id
                    );
          $hdata = $this->security->xss_clean($hdata); // xss filter
          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}


          $RequestEmailID = $getEmailID->email_address;
          $email_to = $RequestEmailID;
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Project Request | Decision 168');
          $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Request</title>
            <meta name="description" content="Project Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$pdetail->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($member_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                <a href="'.base_url('project-request/'.$pid.'/'.trim($member_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
          $this->email->send();
          $this->session->set_flashdata('message', 'Request Sent To User!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function update_my_ccd()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $this->form_validation->set_rules('card_number','Card Number','trim|required');
  //     $this->form_validation->set_rules('card_exp_month','Card Expiry Month','trim|required|numeric|exact_length[2]',array('exact_length' => 'Please Enter Valid Card Expiry Month.'));
  //     $this->form_validation->set_rules('card_exp_year','Card Expiry Year','trim|required|numeric|exact_length[4]',array('exact_length' => 'Please Enter Valid Card Expiry Year.'));
  //     $this->form_validation->set_rules('card_cvc','Card CVC','trim|required|numeric|max_length[4]');
      
  //     if ($this->form_validation->run() == FALSE)
  //     {
  //         //$errors = array();

  //         $errors = $this->form_validation->error_array();
  //         // Loop through $_POST and get the keys
  //         foreach ($errors as $key => $value)
  //         {
  //           // Add the error message for this field
  //           $errors[$key] = form_error($key);
  //         }
        
  //         $response['errors'] = array_filter($errors); // Some might be empty
  //         $response['status'] = FALSE;
  //         // You can use the Output class here too
  //         header('Content-type: application/json');
  //         //echo json_encode($response);
  //         exit(json_encode($response));
  //     }
  //     else
  //     {
  //       $id = $this->session->userdata('d168_id');
  //       $card_number = $this->input->post('card_number');
  //       $card_number = preg_replace('/\s+/', '', $card_number);
  //       $card_exp_month = $this->input->post('card_exp_month');
  //       $card_exp_year = $this->input->post('card_exp_year');
  //       $card_cvc = $this->input->post('card_cvc');
  //       $current_month = date('m');
  //       $current_year = date('Y');
  //       $current = $current_year.'-'.$current_month;
  //       $input = $card_exp_year.'-'.$card_exp_month;
  //       // echo $current.'<br>';
  //       // echo $input;
  //       if($current <= $input)
  //       {
  //         $data = array(  
  //             'card_number' => $card_number,
  //             'card_exp_month' => $card_exp_month,
  //             'card_exp_year' => $card_exp_year,
  //             'card_cvc' =>  base64_encode($card_cvc),
  //           );
  //             $data = $this->security->xss_clean($data); // xss filter
  //             $this->Front_model->updateRegistration($data,$id);
  //             $this->session->set_flashdata('message', 'Credit Card Updated Successfully!');
  //               $response['status'] = TRUE;              
  //               header('Content-type: application/json');
  //               echo json_encode($response); 
  //       }
  //       else
  //       {
  //         $response['status'] = 'validError';
  //         header('Content-type: application/json');
  //         exit(json_encode($response));
  //       }
  //     }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   } 
  // }


  function set_price_id_session()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->set_userdata('d168_stripe_price_id',$this->input->post('price_id')); 
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function checkout_payment_initialize()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $getCusID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
        $stripe_cusID = "";
        if($getCusID)
        {
          $stripe_cusID = $getCusID->stripe_cus_id;
        }
        $pack = $this->Front_model->getPackByPriceID($this->session->userdata('d168_stripe_price_id'));
        $packPrice = $pack->pack_price;
        $packName = $pack->pack_name;
        $packID = $pack->pack_id;
        $packVal = $pack->pack_validity;
        // $currency = 'usd';

        // Set API key
      \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

      $response = array(
          'status' => 0,
          'error' => array(
              'message' => 'Invalid Request!'   
          )
      );

      if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        $input = file_get_contents('php://input');
        $request = json_decode($input); 
      }

      if (json_last_error() !== JSON_ERROR_NONE) {
        http_response_code(400);
        echo json_encode($response);
        exit;
      }

      if(!empty($request->createCheckoutSession)){
          // Convert product price to cent
          $stripeAmount = round($packPrice*100, 2);

          // Create new Checkout Session for the order
          try {
            // if(is_numeric($packVal))
            // {
              if(!empty($stripe_cusID))
              {
                 $checkout_session = \Stripe\Checkout\Session::create([
                    'line_items' => [[
                      'price' => $this->session->userdata('d168_stripe_price_id'),
                      'quantity' => 1,
                        'description' => $packName,
                    ]],
                    'mode' => 'subscription',
                    'customer' =>  $stripe_cusID,
                    'allow_promotion_codes' => true,
                    'success_url' => $this->config->item('STRIPE_SUCCESS_URL').'?session_id={CHECKOUT_SESSION_ID}',
                    'cancel_url' => $this->config->item('STRIPE_CANCEL_URL'),
                ]);
              }
              else
              {
                $checkout_session = \Stripe\Checkout\Session::create([
                    'line_items' => [[
                      'price' => $this->session->userdata('d168_stripe_price_id'),
                      'quantity' => 1,
                        'description' => $packName,
                    ]],
                    'mode' => 'subscription',
                    'allow_promotion_codes' => true,
                    'success_url' => $this->config->item('STRIPE_SUCCESS_URL').'?session_id={CHECKOUT_SESSION_ID}',
                    'cancel_url' => $this->config->item('STRIPE_CANCEL_URL'),
                ]);
              }
            //}
            // else
            // {
            //   if(!empty($stripe_cusID))
            //   {
            //      $checkout_session = \Stripe\Checkout\Session::create([
            //         'line_items' => [[
            //           'price' => $this->session->userdata('d168_stripe_price_id'),
            //           'quantity' => 1,
            //             'description' => $packName,
            //         ]],
            //         'mode' => 'payment',
            //         'customer' =>  $stripe_cusID,
            //         'allow_promotion_codes' => true,
            //         'success_url' => $this->config->item('STRIPE_SUCCESS_URL').'?session_id={CHECKOUT_SESSION_ID}',
            //         'cancel_url' => $this->config->item('STRIPE_CANCEL_URL'),
            //     ]);
            //   }
            //   else
            //   {
            //     $checkout_session = \Stripe\Checkout\Session::create([
            //         'line_items' => [[
            //           'price' => $this->session->userdata('d168_stripe_price_id'),
            //           'quantity' => 1,
            //             'description' => $packName,
            //         ]],
            //         'mode' => 'payment',
            //         'allow_promotion_codes' => true,
            //         'success_url' => $this->config->item('STRIPE_SUCCESS_URL').'?session_id={CHECKOUT_SESSION_ID}',
            //         'cancel_url' => $this->config->item('STRIPE_CANCEL_URL'),
            //     ]);
            //   }
            // }           
              
          } catch(Exception $e) { 
              $api_error = $e->getMessage(); 
          }
          
          if(empty($api_error) && $checkout_session){
              $response = array(
                  'status' => 1,
                  'message' => 'Checkout Session created successfully!',
                  'sessionId' => $checkout_session->id
              );
          }else{
              $response = array(
                  'status' => 0,
                  'error' => array(
                      'message' => 'Checkout Session creation failed! '.$api_error   
                  )
              );
          }
      }

      // Return response
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function insert_checkout_payment_data()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pack = $this->Front_model->getPackByPriceID($this->session->userdata('d168_stripe_price_id'));
      $packVal = $pack->pack_validity;
      $payment_id = $statusMsg = '';
      $status = 'error';

      // Check whether stripe checkout session is not empty
      if(!empty($_GET['session_id'])){
          $session_id = $_GET['session_id'];  

              // Set API key
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
              
              // Fetch the Checkout Session to display the JSON result on the success page
              try {
                  $checkout_session = \Stripe\Checkout\Session::retrieve($session_id);
              } catch(Exception $e) { 
                  $api_error = $e->getMessage(); 
              }
              if(empty($api_error) && $checkout_session){
                  // Retrieve the details of a PaymentIntent
                  try {
                    // if(is_numeric($packVal))
                    // {
                      $paymentIntent = \Stripe\Subscription::retrieve($checkout_session->subscription);
                    //}
                    // else
                    // {
                    //   $paymentIntent = \Stripe\PaymentIntent::retrieve($checkout_session->payment_intent);
                    // }
                  } catch (\Stripe\Exception\ApiErrorException $e) {
                      $api_error = $e->getMessage();
                  }
                  
                  // Retrieves the details of customer
                  try {
                      $customer = \Stripe\Customer::retrieve($checkout_session->customer);
                  } catch (\Stripe\Exception\ApiErrorException $e) {
                      $api_error = $e->getMessage();
                  }
                  if(empty($api_error) && $paymentIntent){ 
                      // Check whether the payment was successful
                      if(!empty($paymentIntent) && $paymentIntent->status == 'active'){
                  
                          // Transaction details 
                          $transactionID = $paymentIntent->id;
                          $paidAmount = $paymentIntent['plan']->amount;
                          $paidAmount = ($paidAmount/100);
                          $paidCurrency = $paymentIntent['plan']->currency;
                          $payment_status = $paymentIntent->status;
                           
                          // Customer details
                         $customer_id = $customer_name = $customer_email = '';
                          if(!empty($customer)){
                             //echo "<pre>";
                             //print_r($customer);
                            // die();
                            $getCusID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                            $customer_id = "";
                            if($getCusID)
                            {
                              if(!empty($getCusID->stripe_cus_id))
                              {
                                $customer_id = $getCusID->stripe_cus_id;
                              }
                              else
                              {
                                $customer_id = !empty($customer->id)?$customer->id:''; 
                              }
                            }
                            else
                            {
                              $customer_id = !empty($customer->id)?$customer->id:''; 
                            }                              
                              $customer_name = !empty($customer->name)?$customer->name:'';
                              $customer_email = !empty($customer->email)?$customer->email:'';
                          }
                          
                          $check_type = is_numeric(trim($packVal));
                          if($check_type == 'true')
                          {
                            $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($packVal).' day'));
                          }
                          else
                          {
                            $pack_expire = $packVal;
                          } 
                        if($getCusID->package_coupon_id != '0')
                        {
                          $used_coupons = $getCusID->used_package_coupon_id.','.$getCusID->package_coupon_id;
                        }
                        else
                        {                          
                          $used_coupons = $getCusID->used_package_coupon_id;
                        }
                        // Insert tansaction data into the database
                        $upData = array(
                          'stripe_cus_id' => $customer_id,
                          'package_id' => $pack->pack_id,
                          'package_start' => date('Y-m-d H:i:s'),
                          'package_expiry' => $pack_expire,
                          'card_number' => '',
                          'card_exp_month' => '',
                          'card_exp_year' => '',
                          'card_cvc' =>  '',
                          'balance_amount' => '',
                          'paid_amount' => $paidAmount,
                          'paid_amount_currency' => $paidCurrency,
                          'txn_id' => $transactionID,
                          'payment_status' => $payment_status,
                          'renew' => 'auto',
                          'sub_cancel_reason_notify' => '',
                          'package_coupon_id' => '',
                          'used_package_coupon_id' => $used_coupons,
                        );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
                          
                          $status = 'success';
                          $statusMsg = 'Your Payment has been Successful!';
                          $this->session->set_flashdata('message', 'Package Updated Successfully!');
                          redirect(base_url('dashboard'));
                      } elseif(!empty($paymentIntent) && $paymentIntent->status == 'succeeded'){
                          // Transaction details 
                          $transactionID = $paymentIntent->id;
                          $paidAmount = $paymentIntent->amount;
                          $paidAmount = ($paidAmount/100);
                          $paidCurrency = $paymentIntent->currency;
                          $payment_status = $paymentIntent->status;
                           
                          // Customer details
                         $customer_id = $customer_name = $customer_email = '';
                          if(!empty($customer)){
                             //echo "<pre>";
                             //print_r($customer);
                            // die();
                            $getCusID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
                            $customer_id = "";
                            if($getCusID)
                            {
                              if(!empty($getCusID->stripe_cus_id))
                              {
                                $customer_id = $getCusID->stripe_cus_id;
                              }
                              else
                              {
                                $customer_id = !empty($customer->id)?$customer->id:''; 
                              }
                            }
                            else
                            {
                              $customer_id = !empty($customer->id)?$customer->id:''; 
                            }                              
                              $customer_name = !empty($customer->name)?$customer->name:'';
                              $customer_email = !empty($customer->email)?$customer->email:'';
                          }
                          
                          $check_type = is_numeric(trim($packVal));
                          if($check_type == 'true')
                          {
                            $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($packVal).' day'));
                          }
                          else
                          {
                            $pack_expire = $packVal;
                          }
                        if($getCusID->package_coupon_id != '0')
                        {
                          $used_coupons = $getCusID->used_package_coupon_id.','.$getCusID->package_coupon_id;
                        }
                        else
                        {                          
                          $used_coupons = $getCusID->used_package_coupon_id;
                        }
                        // Insert tansaction data into the database
                        $upData = array(
                          'stripe_cus_id' => $customer_id,
                          'package_id' => $pack->pack_id,
                          'package_start' => date('Y-m-d H:i:s'),
                          'package_expiry' => $pack_expire,
                          'card_number' => '',
                          'card_exp_month' => '',
                          'card_exp_year' => '',
                          'card_cvc' =>  '',
                          'balance_amount' => '',
                          'paid_amount' => $paidAmount,
                          'paid_amount_currency' => $paidCurrency,
                          'txn_id' => $transactionID,
                          'payment_status' => $payment_status,
                          'renew' => 'auto',
                          'sub_cancel_reason_notify' => '',
                          'package_coupon_id' => '',
                          'used_package_coupon_id' => $used_coupons,
                        );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
                          
                          $status = 'success';
                          $statusMsg = 'Your Payment has been Successful!';
                          $this->session->set_flashdata('message', 'Package Updated Successfully!');
                          redirect(base_url('dashboard'));
                      }else{
                          $statusMsg = "Transaction has been failed!";
                      }
                  }else{
                      $statusMsg = "Unable to fetch the transaction details! $api_error"; 
                  }
              }else{
                  $statusMsg = "Invalid Transaction! $api_error"; 
              }
      }else{
        $statusMsg = "Invalid Request!";
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function update_subscription()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->set_userdata('d168_stripe_price_id',$this->input->post('price_id')); 
      $my_package = $this->Front_model->getStudentById($this->session->userdata('d168_id'));//current pack
      
      // Set API key
      \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

      $subscription = \Stripe\Subscription::retrieve($my_package->txn_id);
      // echo "<pre>";
      //               print_r($subscription);
      //               die();
      $new_subscription = \Stripe\Subscription::update($my_package->txn_id, [
                      'cancel_at_period_end' => false,
                      'proration_behavior' => 'always_invoice',
                      'items' => [
                        [
                          'id' => $subscription->items->data[0]->id,
                          'price' => $this->session->userdata('d168_stripe_price_id'),
                        ],
                      ],
                    ]);
                    
            $pack = $this->Front_model->getPackByPriceID($this->session->userdata('d168_stripe_price_id'));
            $getCusID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
            $customer_id = $getCusID->stripe_cus_id;
            $check_type = is_numeric(trim($pack->pack_validity));
                  if($check_type == 'true')
                  {
                    $pack_expire = date('Y-m-d h:i:s', strtotime('+'.trim($pack->pack_validity).' day'));
                  }
                  else
                  {
                    $pack_expire = $pack->pack_validity;
                  }
                  // Transaction details 
                  $transactionID = $new_subscription->id;
                  $paidAmount = $new_subscription['plan']->amount;
                  $paidAmount = ($paidAmount/100);
                  //echo $paidAmount;
                  $paidCurrency = $new_subscription['plan']->currency;
                  $payment_status = $new_subscription->status;
                  
                // Insert tansaction data into the database
                $upData = array(
                  'stripe_cus_id' => $customer_id,
                  'package_id' => $pack->pack_id,
                  'package_start' => date('Y-m-d H:i:s'),
                  'package_expiry' => $pack_expire,
                  'card_number' => '',
                  'card_exp_month' => '',
                  'card_exp_year' => '',
                  'card_cvc' =>  '',
                  'balance_amount' => '',
                  'paid_amount' => $paidAmount,
                  'paid_amount_currency' => $paidCurrency,
                  'txn_id' => $transactionID,
                  'payment_status' => $payment_status,
                  'renew' => 'auto',
                );
                $upData = $this->security->xss_clean($upData); // xss filter
                $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
        $this->session->set_flashdata('message', 'Package Updated Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_view_all_departments()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['id'] = $this->input->post('id');
      $data['allportd'] = $this->Front_model->get_PortfolioAllDepartment($data['id']);
      $this->load->view('user/portfolio-view-all-departments',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function editable_table_pdept()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $div_class = $this->input->post('div_class');
    $div_field = $this->input->post('div_field');
    $div_id = $this->input->post('div_id');
    $txt = trim($this->input->post('txt'));
    $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if(!empty($txt))
    {
      //for task
      if($div_class == "pdept_editable")
      {
            //pdname_field field
            if($div_field == "pdname_field")
            {
              $data = array(
                            'department' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_PortfolioDepartment($data,$div_id);
              $response['new_pdname'] = $txt;
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
      }
    }
    else
    {
      $response['status'] = FALSE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function change_portfolio_department_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $status = $this->input->post('status');
      $pdept = $this->Front_model->get_PDepartment($id);
      if($status == "active")
      {
          $data2 = array(
                              'dstatus' => $status,
                        );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->edit_PortfolioDepartment($data2,$id);
          $response['pdep_name'] = $pdept->department;
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
      }
      elseif($status == "inactive")
      {        
        $data2 = array(
                            'dstatus' => $status,
                      );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->edit_PortfolioDepartment($data2,$id);
        $response['pdep_name'] = $pdept->department;
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);           
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function portfolio_view_members()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['id'] = $this->input->post('id');
      $data['allporttm'] = $this->Front_model->getAll_Accepted_PortTM($data['id']);
      $this->load->view('user/portfolio-view-members',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function change_portfolio_member_status()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $portfolio_id = $_COOKIE["d168_selectedportfolio"];
      $pim_id = $this->input->post('id');
      $data['get_pim_id'] = $pim_id;
      $status = $this->input->post('status');
      $check = $this->Front_model->check_PPMToClear($pim_id);
      if($check)
      { 
        if($status == "active")
        {
            $data2 = array(
                                'working_status' => $status,
                          );
                            $data2 = $this->security->xss_clean($data2); // xss filter
                            $this->Front_model->update_PortfolioMember($data2,$pim_id);
            $response['pim_id'] = $pim_id;
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        elseif($status == "inactive")
        {        
          $pm = $this->Front_model->selectLogin($check->sent_to);
          $data['mem_detail'] = $pm;
          if($pm)
          {
            $reg_id = $pm->reg_id;

            $getGoals = $this->Front_model->TMOpenGoals($reg_id,$portfolio_id);
            $goal_count = 0;
            if($getGoals)
            {
              foreach($getGoals as $gg)
              {
                $goal_count++;
              }
            }

            $getGoalTM = $this->Front_model->getGoalOpenTM($reg_id,$portfolio_id);
            $goal_tm_count = 0;
            if($getGoalTM)
            {
              foreach($getGoalTM as $ggtm)
              {
                $goal_tm_count++;
              }
            }

            $getStrategies = $this->Front_model->TMOpenStrategies($reg_id,$portfolio_id);
            $strategies_count = 0;
            if($getStrategies)
            {
              foreach($getStrategies as $ggs)
              {
                $strategies_count++;
              }
            }

            $getProjects = $this->Front_model->TMOpenProjects($reg_id,$portfolio_id);
            $pro_count = 0;
            if($getProjects)
            {
              foreach($getProjects as $gp)
              {
                $pro_count++;
              }
            }
            $getPlannedContent = $this->Front_model->TMOpenPlannedContent($reg_id,$portfolio_id);
            $plan_count = 0;
            if($getPlannedContent)
            {
              foreach($getPlannedContent as $gpc)
              {
                $plan_count++;
              }
            }
            $getTasks = $this->Front_model->TMOpenTasks($reg_id,$portfolio_id);
            $task_count = 0;
            if($getTasks)
            {
              foreach($getTasks as $gt)
              {
                $task_count++;
              }
            }
            $getSubtasks = $this->Front_model->TMOpenSubtasks($reg_id,$portfolio_id);
            $subtask_count = 0;
            if($getSubtasks)
            {
              foreach($getSubtasks as $gs)
              {
                $subtask_count++;
              }
            }
            $getProjectTM = $this->Front_model->getProjectOpenTM($reg_id,$portfolio_id);
            $pro_tm_count = 0;
            if($getProjectTM)
            {
              foreach($getProjectTM as $gtm)
              {
                $pro_tm_count++;
              }
            }
 
            if(($goal_count == 0) && ($strategies_count == 0) && ($pro_count == 0) && ($task_count == 0) && ($subtask_count == 0) && ($plan_count == 0) && ($pro_tm_count == 0) && ($goal_tm_count == 0))
            {              
              $data2 = array(
                                'working_status' => $status,
                          );
                            $data2 = $this->security->xss_clean($data2); // xss filter
                            $this->Front_model->update_PortfolioMember($data2,$pim_id);
              $response['pim_id'] = $pim_id;
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            else
            {              
                $this->load->view('user/assign-open-work',$data);           
            }            
          }            
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function open_work_new_assignee()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('new_open_work_assignee','New Assignee','trim|required'); 
      $this->form_validation->set_rules('old_open_work_assignee','Old Assignee','trim|required');  
      $this->form_validation->set_rules('get_pim_id_to_inactive','Member ID','trim|required');       
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $portfolio_id = $_COOKIE["d168_selectedportfolio"];
          $pim_id = $this->input->post('get_pim_id_to_inactive');
          $new_reg_id = $this->input->post('new_open_work_assignee');
          $status = 'inactive';
          $check = $this->Front_model->check_PPMToClear($pim_id);
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $new_mem = $this->Front_model->getStudentById($new_reg_id);
          if($check)
          { 
            $reg_id = $this->input->post('old_open_work_assignee');

            $getGoals = $this->Front_model->TMOpenGoals($reg_id,$portfolio_id);
            if($getGoals)
            {
              foreach($getGoals as $gg)
              {
                if($gg->gcreated_by == $reg_id)
                {
                  $check_if_goaltm = $this->Front_model->check_if_goaltm($gg->gid,$new_reg_id);
                  if($check_if_goaltm)
                  {
                    $this->Front_model->delete_gMember_mem_id($gg->gid,$new_reg_id);
                  }
                  $data = array(
                          'gcreated_by' => $new_reg_id,
                      );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->editGoal($data,$gg->gid);
                  $hdata = array(
                              'gid' => $gg->gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Goal '.$gg->gname.' Ownership to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);

                    $data2 = array(
                        'gid' => $gg->gid,
                        'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                        'gmember' => $new_reg_id,
                        'status' => 'accepted',
                        'gcreated_by' => $new_reg_id,
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'yes',
                                          );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_GoalTeamMember($data2);
                }
                if($gg->gmanager == $reg_id)
                {
                  $data2 = array(
                                        'gmanager' => $new_reg_id,
                                    );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->editGoal($data2,$gg->gid);

                    $hdata = array(
                              'gid' => $gg->gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Goal '.$gg->gname.' Manager to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                } 
                //check if team member in any goal  
                $check_tm = $this->Front_model->CheckOpenGoalTM($reg_id,$gg->gid);
                if($check_tm) 
                {
                  $this->Front_model->delete_gMember_mem_id($gg->gid,$reg_id);
                } 
              }
            }

            $getGoalTM = $this->Front_model->getGoalOpenTM($reg_id,$portfolio_id);
            if($getGoalTM)
            {
              foreach($getGoalTM as $ggtm)
              {                
                $check_if_already_goaltm = $this->Front_model->check_if_already_goaltm($new_reg_id,$portfolio_id,$ggtm->gid);
                if($check_if_already_goaltm == 0)
                {                  
                  $check_if_goalowner = $this->Front_model->check_if_goalowner($ggtm->gid,$new_reg_id);
                  if($check_if_goalowner == 0)
                  {
                    $data2 = array(
                      'gid' => $ggtm->gid,
                      'portfolio_id' => $ggtm->portfolio_id,
                      'gmember' => trim($new_reg_id),
                      'status' => $ggtm->status,
                      'gcreated_by' => $this->session->userdata('d168_id'),
                      'sent_date' => date('Y-m-d H:i:s'),
                      'sent_notify_clear' => $ggtm->sent_notify_clear,
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_GoalTeamMember($data2);

                    $get_gs_gid = $this->Front_model->getProjectById($ggtm->gid);
                    $hdata = array(
                              'gid' => $ggtm->gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Added '.$new_mem->first_name.' '.$new_mem->last_name.' as a team member',
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                  }                  
                }
                $this->Front_model->delete_gMember_with_port_id($reg_id,$portfolio_id);
              }
            }

            $getStrategies = $this->Front_model->TMOpenStrategies($reg_id,$portfolio_id);
            if($getStrategies)
            {
              foreach($getStrategies as $ggs)
              {
                $data = array(
                        'screated_by' => $new_reg_id,
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editStrategies($data,$ggs->sid);
                $hdata = array(
                              'sid' => $ggs->sid,
                              'gid' => $ggs->gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer KPI '.$ggs->sname.' Ownership to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }

            $getProjects = $this->Front_model->TMOpenProjects($reg_id,$portfolio_id);
            if($getProjects)
            {
              foreach($getProjects as $gp)
              {
                if($gp->pcreated_by == $reg_id)
                {
                  $check_if_tm = $this->Front_model->check_if_tm($gp->pid,$new_reg_id);
                  if($check_if_tm)
                  {
                    $this->Front_model->delete_pMember_mem_id($gp->pid,$new_reg_id);
                  }
                  $data2 = array(
                                        'pcreated_by' => $new_reg_id,
                                    );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->edit_Project($data2,$gp->pid);

                    $get_gs_pid = $this->Front_model->getProjectById($gp->pid);
                    $hdata = array(
                              'pid' => $gp->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Project '.$gp->pname.' Ownership to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                }
                if($gp->pmanager == $reg_id)
                {
                  $data2 = array(
                                        'pmanager' => $new_reg_id,
                                    );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->edit_Project($data2,$gp->pid);

                    $get_gs_pid = $this->Front_model->getProjectById($gp->pid);
                    $hdata = array(
                              'pid' => $gp->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Project '.$gp->pname.' Manager to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                }   
                //check if team member in any project  
                $check_tm = $this->Front_model->CheckOpenTM($reg_id,$gp->pid);
                if($check_tm) 
                {
                  $this->Front_model->delete_pMember_mem_id($gp->pid,$reg_id);
                }          
              }
            }
            $getProjectTM = $this->Front_model->getProjectOpenTM($reg_id,$portfolio_id);
            if($getProjectTM)
            {
              foreach($getProjectTM as $gtm)
              {                
                $check_if_already_tm = $this->Front_model->check_if_already_tm($new_reg_id,$portfolio_id,$gtm->pid);
                if($check_if_already_tm == 0)
                {                  
                  $check_if_powner = $this->Front_model->check_if_powner($gtm->pid,$new_reg_id);
                  if($check_if_powner == 0)
                  {
                    $data2 = array(
                      'pid' => $gtm->pid,
                      'portfolio_id' => $gtm->portfolio_id,
                      'pmember' => trim($new_reg_id),
                      'status' => $gtm->status,
                      'pcreated_by' => $this->session->userdata('d168_id'),
                      'sent_date' => date('Y-m-d H:i:s'),
                      'sent_notify_clear' => $gtm->sent_notify_clear,
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_TeamMember($data2);

                    $get_gs_pid = $this->Front_model->getProjectById($gtm->pid);
                    $hdata = array(
                              'pid' => $gtm->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Added '.$new_mem->first_name.' '.$new_mem->last_name.' as a team member',
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                  }                  
                }
                $this->Front_model->delete_pMember_with_port_id($reg_id,$portfolio_id);
              }
            }
            $getPlannedContent = $this->Front_model->TMOpenPlannedContent($reg_id,$portfolio_id);
            if($getPlannedContent)
            {
              foreach($getPlannedContent as $gpc)
              {
                if($gpc->written_content_assignee == $reg_id)
                {
                    $data = array(
                      'written_content_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Written Content Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->pc_file_assignee == $reg_id)
                {
                    $data = array(
                      'pc_file_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Media File Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->submit_to_approval == $reg_id)
                {
                    $data = array(
                      'submit_to_approval' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Submit for Approval Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->pc_assignee == $reg_id)
                {
                    $data = array(
                      'pc_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Scheduler of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
              }
            }
            $getTasks = $this->Front_model->TMOpenTasks($reg_id,$portfolio_id);
            if($getTasks)
            {
              foreach($getTasks as $gt)
              {
                $data = array(
                                        'tassignee' => $new_reg_id,
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_OpenTask($data,$gt->tid,$reg_id);
                $data1 = array(
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                    );
                $data1 = $this->security->xss_clean($data1); // xss filter
                $this->Front_model->edit_NewTask($data1,$gt->tid);
                $hdata = array(
                              'pid' => $gt->tproject_assign,
                              'gid' => $gt->gid,
                              'sid' => $gt->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Task '.$gt->tname.' ( '.$gt->tcode.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }
            $getSubtasks = $this->Front_model->TMOpenSubtasks($reg_id,$portfolio_id);
            if($getSubtasks)
            {
              foreach($getSubtasks as $gs)
              {
                $data = array(
                                        'stassignee' => $new_reg_id,
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_OpenSubtask($data,$gs->stid,$reg_id);
                $data1 = array(
                                        'stcreated_by' => $this->session->userdata('d168_id'),
                                    );
                $data1 = $this->security->xss_clean($data1); // xss filter
                $this->Front_model->edit_NewSubtask($data1,$gs->stid);
                $hdata = array(
                              'pid' => $gs->stproject_assign,
                              'gid' => $gs->gid,
                              'sid' => $gs->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Subtask '.$gs->stname.' ( '.$gs->stcode.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }
                $data2 = array(
                                  'working_status' => $status,
                            );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->update_PortfolioMember($data2,$pim_id);
              $response['pim_id'] = $pim_id;
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function assign_manager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $pm_id = $this->input->post('pm_id');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      $check_mem = $this->Front_model->check_ProPMToClear($pm_id);
      if($check_mem)
      {
            $data2 = array(
                                    'pmanager' => $check_mem->pmember,
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->edit_Project($data2,$pid);

        $pdetail = $this->Front_model->ProjectDetail2($pid);
          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $pdetail->gid,
                                    'sid' => $pdetail->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Assigned '.$first_name.' '.$last_name.' as a Project Manager',
                                    'pmember_id' =>$pm_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $pro_manager = $check_mem->pmember;

        if($pro_manager != $this->session->userdata('d168_id'))
        {
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($pdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

          $getEmailID = $this->Front_model->getEmailID($pro_manager);
          $RequestEmailID = $getEmailID->email_address;

          $email_to = $RequestEmailID;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('Project Manager | Decision 168');
            $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Project Manager</title>
            <meta name="description" content="Project Manager">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re Now a Project Manager...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($powner->first_name).' '.ucfirst($powner->last_name).' has assigned you as a project manager in '.$pdetail->pname.' project.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Project Short Description: '.substr($pdetail->pdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                            );
              $this->email->send();
        }

        $this->session->set_flashdata('message','Project Manager Assigned Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function remove_manager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $pm_id = $this->input->post('pm_id');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      $check_mem = $this->Front_model->check_ProPMToClear($pm_id);
      if($check_mem)
      {
              $data2 = array(
                                    'pmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->edit_Project($data2,$pid);

          $get_gs_pid = $this->Front_model->getProjectById($pid);
          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' as a Project Manager',
                                    'pmember_id' =>$pm_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $this->session->set_flashdata('message','Project Manager Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function direct_remove_manager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pid = $this->input->post('pid');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

              $data2 = array(
                                    'pmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->edit_Project($data2,$pid);

          $get_gs_pid = $this->Front_model->getProjectById($pid);
          $hdata = array(
                                    'pid' => $pid,
                                    'gid' => $get_gs_pid->gid,
                                    'sid' => $get_gs_pid->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' as a Project Manager',
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $this->session->set_flashdata('message','Project Manager Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function dont_display_mid_in_tm()
  {
    $porttm = $this->Front_model->getAccepted_PortTM($_COOKIE["d168_selectedportfolio"]);
    if(empty($this->input->post('m_id')))
    {
      if($porttm){
      foreach ($porttm as $ptm) {
          $m = $this->Front_model->selectLogin($ptm->sent_to);
          if($m){
          if($m->reg_id != $this->session->userdata('d168_id'))
              {
          ?>
          <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
          <?php
              }
          }
          }
      }
    }
    else
    {
      if($porttm){
      foreach ($porttm as $ptm) {
          $m = $this->Front_model->selectLogin($ptm->sent_to);
          if($m){
          if($m->reg_id != $this->session->userdata('d168_id'))
              {
                if($this->input->post('m_id') != $m->reg_id)
                {
          ?>
          <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
          <?php
                }
              }
          }
          }
      }
    }
  }

  public function dont_display_mid_in_goaltmlist()
  {
    $porttm = $this->Front_model->GoalTeamMemberAccepted($this->input->post('gid'));
    if(empty($this->input->post('m_id')))
    {
      if($porttm){
      foreach ($porttm as $ptm) {
          $m = $this->Front_model->getStudentById($ptm->gmember);
          if($m){
          if($m->reg_id != $this->session->userdata('d168_id'))
              {
          ?>
          <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
          <?php
              }
            }
          }
      }
    }
    else
    {
      if($porttm){
      foreach ($porttm as $ptm) {
          $m = $this->Front_model->getStudentById($ptm->gmember);
          if($m){
          if($m->reg_id != $this->session->userdata('d168_id'))
              {
                if($this->input->post('m_id') != $m->reg_id)
                {
          ?>
          <option value="<?php echo $m->reg_id;?>"><span><?php echo $m->first_name." ".$m->last_name; ?></span></option>
          <?php
                }
              }
            }
          }
      }
    }
  }

  public function MembershipReqNotificationModal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $req_id = $this->input->post('req_id');
      $pid = $this->input->post('pid');
      $detail = $this->Front_model->check_project_membership_req($req_id,$pid);
      if($detail)
      {
          $data2 = array(
                              'mreq_notify' => 'seen',
                              'mreq_notify_clear' => 'yes',
                                );
          $data2 = $this->security->xss_clean($data2); // xss filter
          $this->Front_model->edit_project_membership_req_notify($data2,$req_id);
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="MembershipReqNotificationModal">'.$detail->pname.'</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body"><b> '.$detail->first_name.' '.$detail->last_name.' </b> Sent Membership Request of project <b> '.$detail->pname.' </b>&nbsp;&nbsp;';
                    if($detail->pcreated_by == $this->session->userdata('d168_id'))
                    {
                      echo '<a href="'.base_url('projects-overview/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a></div>';
                    }
                    else
                    {
                      echo '<a href="'.base_url('projects-overview-accepted/'.$pid).'" class="btn btn-sm btn-d text-white">Open</a></div>';
                    }
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function MeetingMemberNotificationModal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $unique_key = $this->input->post('uid');
      $evt_detail = $this->Front_model->getEventMeetingDetail($unique_key);
      if($evt_detail)
      {
            $mee_owner = $this->Front_model->getStudentById($evt_detail->student_id);
            $get_portfolio_name = $this->Front_model->getPortfolioName($evt_detail->portfolio_id);
              if($get_portfolio_name)
              {
                if($get_portfolio_name->portfolio_user == 'company')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
                elseif($get_portfolio_name->portfolio_user == 'individual')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name.' '.$get_portfolio_name->portfolio_lname;
                }
                else
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
              }
            $member = $this->session->userdata('d168_id');
            $data2 = array(
                                'm_notify_clear' => 'yes',
                                  );
            $data2 = $this->security->xss_clean($data2); // xss filter
            $this->Front_model->update_meeting_invites($data2,$member,$unique_key);
            $evt_date_time = '';
            if($evt_detail->event_allDay == 'true')
            {
              if($evt_detail->event_start_date == $evt_detail->event_end_date)
              {
                $sd = date_create($evt_detail->event_start_date);
                $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
              }
              else
              {
                $sd = date_create($evt_detail->event_start_date);
                $ed = date_create($evt_detail->event_end_date);
                $evt_start_d = date_format($sd,"l, F d Y");
                $evt_end_d = date_format($ed,"l, F d Y");
                $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
              }
            }
            else
            {
              if($evt_detail->event_start_date == $evt_detail->event_end_date)
              {
                $sd = date_create($evt_detail->event_start_date);
                $evt_start_d = date_format($sd,"l, F d Y");
                $st = date_create($evt_detail->event_start_time);
                $evt_start_t = date_format($st,"H:i A");
                $et = date_create($evt_detail->event_end_time);
                $evt_end_t = date_format($et,"H:i A");
                $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
              }
              else
              {
                $sd = date_create($evt_detail->event_start_date);
                $evt_start_d = date_format($sd,"l, F d Y");
                $st = date_create($evt_detail->event_start_time);
                $evt_start_t = date_format($st,"H:i A");
                $ed = date_create($evt_detail->event_end_date);
                $evt_end_d = date_format($ed,"l, F d Y");
                $et = date_create($evt_detail->event_end_time);
                $evt_end_t = date_format($et,"H:i A");
                $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
              }
            }
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="MeetingMemberNotificationModal">You\'re invited to a Meeting...</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                    <div class="card-body">
                        <p class="card-text"> <strong>'.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).'</strong> has invited you to join a meeting of <strong>'.$mee_portfolio.' portfolio</strong>. Just click the appropriate button below.
                        </p>
                        <a href="'.base_url('meeting-request2/'.$unique_key.'/'.$member.'/'.'1').'" class="btn btn-d btn-sm me-1">Accept</a>
                        <a href="'.base_url('meeting-request2/'.$unique_key.'/'.$member.'/'.'2').'" class="btn bg-d btn-sm text-white">Reject</a>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Title : '.$evt_detail->event_name.'</li>
                        <li class="list-group-item">Link: <a href="'.$evt_detail->meeting_link.'" target="_blank">'.$evt_detail->meeting_link.'</a></li>
                        <li class="list-group-item">Location: '.$evt_detail->meeting_location.'</li>
                        <li class="list-group-item">Date: '.$evt_date_time.'</li>
                        <li class="list-group-item">Reminder: '.$evt_detail->event_reminder.'</li>
                        <li class="list-group-item">Type: '.$evt_detail->event_repeat_option_type.'</li>
                    </ul>
                    </div>';
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function ProjectMembershipReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $check = $this->Front_model->check_project_membership_req2($id);
      if($check)
      {
          $data2 = array(
                                'mreq_notify' => 'seen',
                                'mreq_notify_clear' => 'yes',
                                  );
            $data2 = $this->security->xss_clean($data2); // xss filter
            $this->Front_model->edit_project_membership_req_notify($data2,$id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function MeetingMemberReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $unique_key = $this->input->post('uid');
      $member = $this->session->userdata('d168_id');
      $check = $this->Front_model->CheckMeetingInvite($unique_key,$member);
      if($check)
      {
            $data2 = array(
                                'm_notify_clear' => 'yes',
                                  );
            $data2 = $this->security->xss_clean($data2); // xss filter
            $this->Front_model->update_meeting_invites($data2,$member,$unique_key);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function sub_cancel_reason_notify_seen()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
              $upData = array(
                      'sub_cancel_reason_notify' => 'seen',
                    );
              $upData = $this->security->xss_clean($upData); // xss filter
              $this->Front_model->updateRegistration($upData,$this->session->userdata('d168_id'));
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function task_date_filter()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('tf_start_date','Start date','trim|required');
      $this->form_validation->set_rules('tf_end_date','Start date','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $this->session->set_userdata('searched_tf_start_date',$this->input->post('tf_start_date'));
          $this->session->set_userdata('searched_tf_end_date',$this->input->post('tf_end_date'));
          if(!empty(trim($this->input->post('port_id'))))
          {
            $this->session->set_userdata('searched_port_id',$this->input->post('port_id'));
          }
          else
          {
            $this->session->set_userdata('searched_port_id','');
          } 
          $this->session->set_userdata('searched_date_filter_page_name',$this->input->post('date_filter_page_name'));
          if((!empty($this->session->userdata('searched_tf_start_date'))) && (!empty($this->session->userdata('searched_tf_end_date'))))
          {
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response); 
          }
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function task_date_filter_search()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if((!empty($this->session->userdata('searched_tf_start_date'))) && (!empty($this->session->userdata('searched_tf_end_date'))))
      {
          $data['port_id'] = $this->session->userdata('searched_port_id');
          $data['tf_start_date'] = $this->session->userdata('searched_tf_start_date');
          $data['tf_end_date'] = $this->session->userdata('searched_tf_end_date');
          $page_name = $this->session->userdata('searched_date_filter_page_name');          
          if($page_name == "my_assigned")
          {
            $data['check_port_id'] = $data['port_id'];
            $data['AssignedTasklist'] = $this->Front_model->AssignedTasklistDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $data['AssignedSubtasklist_Task'] = $this->Front_model->AssignedSubtasklist_TaskDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $data['AssignedSubtasklist'] = $this->Front_model->AssignedSubtasklistDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $this->load->view('user/tasks-date-filter-search',$data);
          }
          elseif($page_name == "my_created")
          {
            $data['CreatedTaskList'] = $this->Front_model->CreatedTaskListDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $data['CreatedSubTaskList'] = $this->Front_model->CreatedSubTaskListDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']); 
            $this->load->view('user/tasks-filter-list',$data);
          }
          elseif($page_name == "portfolio_tasks")
          {
            $data['port_id_tl'] = $data['port_id'];
            $data['portfolio_tasks'] = $this->Front_model->portfolio_tasksNewDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $data['portfolio_subtasks'] = $this->Front_model->portfolio_subtasksNewDateFilter($data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $this->load->view('user/portfolio_tasks_filter',$data);
          }
          elseif($page_name == "all_tasks")
          {
            $data['AssignedTasklist'] = $this->Front_model->All_AssignedTasklistDateFilter($data['tf_start_date'],$data['tf_end_date']);
            $data['AssignedSubtasklist_Task'] = $this->Front_model->All_AssignedSubtasklist_TaskDateFilter($data['tf_start_date'],$data['tf_end_date']);
            $data['AssignedSubtasklist'] = $this->Front_model->All_AssignedSubtasklistDateFilter($data['tf_start_date'],$data['tf_end_date']);
            $this->load->view('user/all-tasks-filter',$data); 
          }
          elseif($page_name == "project_tasks")
          {
            $data['pid'] = $this->session->userdata('searched_project_id');    
            $data['pdetail'] = $this->Front_model->ProjectDetail2($data['pid']);
            $data['tlist'] = $this->Front_model->project_tasks_listNewDateFilter($data['pid'],$data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $data['stlist'] = $this->Front_model->project_subtasks_listNewDateFilter($data['pid'],$data['port_id'],$data['tf_start_date'],$data['tf_end_date']);
            $this->load->view('user/project-tasks-filter-list',$data); 
          }
          elseif($page_name == "team_member_tasks")
          {
            $data['pid'] = $this->session->userdata('searched_project_id');
            $data['tassignee'] = $this->session->userdata('searched_project_assignee_id');
            $data['pdetail'] = $this->Front_model->ProjectDetail2($data['pid']);
            $data['tlist'] = $this->Front_model->team_member_tasks_listNewDateFilter($data['pid'],$data['port_id'],$data['tassignee'],$data['tf_start_date'],$data['tf_end_date']);
            $data['stlist'] = $this->Front_model->team_member_subtasks_listNewDateFilter($data['pid'],$data['port_id'],$data['tassignee'],$data['tf_start_date'],$data['tf_end_date']);
            $this->load->view('user/team-member-tasks-filter-list',$data); 
          }
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function insert_request_logo()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('clogo','Logo','trim|required');
      $this->form_validation->set_rules('logo_link','Link','trim|required');
      $pattern = "/\b(?:(?:http?|https?|ftp):\/\/)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
      if ($this->form_validation->run() == FALSE)
        {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
            {
              // Add the error message for this field
              $errors[$key] = form_error($key);
            }
            
            $response['errors'] = array_filter($errors); // Some might be empty
            $response['status'] = FALSE;
            // You can use the Output class here too
            header('Content-type: application/json');
            //echo json_encode($response);
            exit(json_encode($response));
        }
        elseif(!preg_match($pattern, $this->input->post('logo_link')))
        {
          $response['status'] = 'link_valid';
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {
          $get_User = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $clogo = "";
          $send_if_clogo = "";
          if(!empty($_POST['clogo']))
          {   
            $data = $_POST['clogo'];
            list($type, $data) = explode(';', $data);
            list(, $data)      = explode(',', $data);
            $data = base64_decode($data);
            $imageName = time().'_'.$this->session->userdata('d168_id').'.png';
            if(file_put_contents('./assets/clogo_photos/'.$imageName, $data))
            {
             $clogo = $imageName;
             $send_if_clogo = '<img src="'.base_url("assets/clogo_photos/".$clogo).'">';          
            }
          }
          $data2 = array(
                          'clogo' => $clogo,
                          'logo_link' => $this->input->post('logo_link'),
                          'lcreated_by' => $this->session->userdata('d168_id'), 
                          'lcreated_date' => date('Y-m-d H:i:s'),
                          'status' => 'sent',
                          'status_date' => date('Y-m-d H:i:s'),
                          'qnotify' => 'yes',
                          'qnotify_clear' => 'no'
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_ad_logo($data2);
                      $inserted_id = $this->db->insert_id();
      $email_to = 'don@z2squared.com';
      $email_from = 'hello@decision168.com'; 
      //$email_from = 'saramaazkhan123@gmail.com'; 
      $email_name = 'Decision 168';

      $this->load->library('email');  
      $config=array(
        'charset'=>'utf-8',
        'wordwrap'=> TRUE,
        'mailtype' => 'html'
        );
      $this->email->initialize($config);
      $this->email->from($email_from, $email_name);
      $this->email->set_header('Reply-To', $email_from."\r\n");
      $this->email->set_header('Return-Path', $email_from."\r\n");
      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
      $this->email->to($email_to);
      $this->email->set_mailtype('html');
      $this->email->subject('Logo Request | Decision 168');
      $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Logo Request</title>
            <meta name="description" content="Logo Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Logo Request</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello SuperAdmin,<br><br>
                                                   '.ucfirst($get_User->first_name).' '.ucfirst($get_User->last_name).' has requested you to add logo. Just click the appropriate button to Approve or Deny Request.
                                                    <br><br>
                                                    Link: '.$this->input->post('logo_link').'
                                                    <br><br>
                                                    Logo: <br><br> '.$send_if_clogo.'
                                                    <br><br> 
                                                </p>
                                                <a href="'.base_url('logo-approve-request/'.$inserted_id.'/'.$this->session->userdata('d168_id').'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Approve</a>
                                                <a href="'.base_url('logo-deny-request/'.$inserted_id.'/'.$this->session->userdata('d168_id').'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
        );
          $this->email->send();   

            $this->session->set_flashdata('message','Logo Request Sent Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function auto_email_happy_birthday()
  {
    $getUsers = $this->Front_model->getAllRegisteredUserBday();
    if($getUsers)
    {
      $get_Cmonth = date('m');
      $get_Cday = date('d');
      foreach($getUsers as $user)
      {
        $get_Hmonth = date('m', strtotime($user->dob));
        $get_Hday = date('d', strtotime($user->dob));
        if($get_Cmonth == $get_Hmonth)
        {
          if($get_Cday == $get_Hday)
          {
            $email_to = $user->email_address;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('Happy Birthday! | Decision 168');
            $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>Happy Birthday!</title>
                  <meta name="description" content="Happy Birthday!">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Did you really think that we forgot?</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         The word out there is that there\'s something special happening. As a small token of our appreciation for being a valued user of the DECISION 168 Platform we wanted to offer you our sincerest heartfelt wishes for continued health, wealth and success!
                                                          <br><br>
                                                          <center>
                                                            <img width="70%" src="'.base_url("assets/images/d168_bday.png").'" title="Happy Birthday" alt="Happy Birthday">
                                                          </center>
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Happy Birthday,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
              );
               $this->email->send(); 
          }          
        }
      }
    }
  }

  public function auto_email_inactivity_account()
  {
    $getUsers = $this->Front_model->getAllRegisteredUser();
    if($getUsers)
    {
      foreach($getUsers as $user)
      {
        if($user->last_login !== "0000-00-00 00:00:00")
        {
          $user_last_login = date('Y-m-d',strtotime($user->last_login));          
        }
        else
        {
          $user_last_login = date('Y-m-d',strtotime($user->reg_date));
        }
          $deactive_date = date('Y-m-d', strtotime($user_last_login. '+120 day'));
          $delete_date = date('Y-m-d', strtotime($user_last_login. '+180 day'));
          //echo $delete_date.'<br>';
          $today = date('Y-m-d');
          $date1=date_create($user_last_login);
          //echo $user_last_login;
          $date2=date_create($today);
          $diff=date_diff($date1,$date2);

          $inactivity_days = $diff->format("%a");
          echo $inactivity_days.'<br>';
          if($inactivity_days == "60")
          {
            $email_to = $user->email_address;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('[Action Required] Log in to keep your account active | Decision 168');
            $this->email->message(' 
              <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>[Action Required] Log in to keep your account active</title>
                  <meta name="description" content="[Action Required] Log in to keep your account active">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:30px;font-family:Rubik,sans-serif;">Where\'d you go, we miss you around...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         It looks like you haven\'t accessed your Decision 168 Platform account for some time now and we wanted to check in. If your account remains inactive, it will be deactivated on '.$deactive_date.'.
                                                          <br><br>
                                                          <ul style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            <li>If you need any help in getting re-started, or maybe some helpful tips or hints, remember to check out our <a href="#" style="color:#c7df19;text-decoration: none;font-weight: 500px;"><strong>FAQs</strong></a>.</li>
                                                            <li>If you don\'t find what you\'re looking for in the FAQs, open a ticket in our support system for a quick response.</li>
                                                          </ul>
                                                      </p>
                                                      <a href="'.base_url().'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Login to My Account
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          We\'re here to help,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>
            ');
            $this->email->send();
            $upData = array(
                              'inactivity_mail_days' => $inactivity_days,
                              'deactive_date' => $deactive_date,
                              'delete_date' => $delete_date
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$user->reg_id);
          }
          if($inactivity_days == "90")
          {
            $email_to = $user->email_address;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('[Action Required] Your Decision 168 account will be cancelled in 30 days | Decision 168');
            $this->email->message(' 
            <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>[Action Required] Your Decision 168 account will be cancelled in 30 days</title>
                  <meta name="description" content="[Action Required] Your Decision 168 account will be cancelled in 30 days">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Oh no, your account <br> will be cancelled soon...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hi '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         It looks like you haven\'t accessed your Decision 168 Platform account for some time now and we wanted to check in. Log back in to enjoy what your account offers.
                                                          <br><br>
                                                        <strong>Please remember, if your account remains inactive, it will be deactivated on '.$deactive_date.'.</strong> You will not be able to access products once unsubscribed. Any data will be permanently deleted soon afterwards.
                                                      </p>
                                                      <a href="'.base_url().'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Login to My Account
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          We\'re here to help,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>
            ');
            $this->email->send();
            $upData = array(
                              'inactivity_mail_days' => $inactivity_days,
                              'deactive_date' => $deactive_date,
                              'delete_date' => $delete_date
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$user->reg_id);
          }
          if($inactivity_days == "113")
          {
            $email_to = $user->email_address;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('[Action Required] Your Decision 168 account will be cancelled in one week | Decision 168');
            $this->email->message(' 
            <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>[Action Required] Your Decision 168 account will be cancelled in one week</title>
                  <meta name="description" content="[Action Required] Your Decision 168 account will be cancelled in one week">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Uh oh, your account <br> will be cancelled soon...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hi '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         This is a <strong>final reminder that your Decision 168 account will be deactivated on '.$deactive_date.'</strong>. You will not be able to access products and any data will be permanently deleted soon afterwards.
                                                         <br><br>
                                                         You can maintain access to your Decision 168 platform account by logging in before '.$deactive_date.'.
                                                      </p>
                                                      <a href="'.base_url().'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Login to My Account
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>
            ');
            $this->email->send();
            $upData = array(
                              'inactivity_mail_days' => $inactivity_days,
                              'deactive_date' => $deactive_date,
                              'delete_date' => $delete_date
                            );
                  $upData = $this->security->xss_clean($upData); // xss filter
                  $this->Front_model->updateRegistration($upData,$user->reg_id);
          }
          if($inactivity_days == "121")
          {
            $upData1 = array(
                              'inactivity_mail_days' => $inactivity_days,
                              'deactive_date' => $deactive_date,
                              'reg_acc_status' => 'deactivated',
                              'delete_date' => $delete_date
                            );
                  $upData1 = $this->security->xss_clean($upData1); // xss filter
                  $this->Front_model->updateRegistration($upData1,$user->reg_id);

            $upData2 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData2 = $this->security->xss_clean($upData2); // xss filter
                  $this->Front_model->updateAd_logo($upData2,$user->reg_id);

            $upData3 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData3 = $this->security->xss_clean($upData3); // xss filter
                  $this->Front_model->updateComments2($upData3,$user->reg_id);

            $upData4 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData4 = $this->security->xss_clean($upData4); // xss filter
                  $this->Front_model->updateMotivator($upData4,$user->reg_id);

            $upDatac4 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upDatac4 = $this->security->xss_clean($upDatac4); // xss filter
                  $this->Front_model->updateContactSales($upDatac4,$user->reg_id);

            $get_all_user_portfolio = $this->Front_model->get_all_user_portfolio($user->reg_id);
            if($get_all_user_portfolio)
            {
              foreach($get_all_user_portfolio as $gaup)
              {
                  $gupData5 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $gupData5 = $this->security->xss_clean($gupData5); // xss filter
                  $this->Front_model->updateGoals($gupData5,$gaup->portfolio_id);

                  $get_all_goals = $this->Front_model->get_all_goals($gaup->portfolio_id);
                  if($get_all_goals)
                  {
                    foreach($get_all_goals as $ggap)
                    {
                      $upData8 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData8 = $this->security->xss_clean($upData8); // xss filter
                      $this->Front_model->updateGoal_members($upData8,$ggap->gid);

                      $upData10 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData10 = $this->security->xss_clean($upData10); // xss filter
                      $this->Front_model->updateGoal_invited_members($upData10,$ggap->gid);

                      $upData12 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData12 = $this->security->xss_clean($upData12); // xss filter
                      $this->Front_model->updateGoal_suggested_members($upData12,$ggap->gid);
                    }
                  }

                  $supData5 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $supData5 = $this->security->xss_clean($supData5); // xss filter
                  $this->Front_model->updateStartegies($supData5,$gaup->portfolio_id);

                  $upData5 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData5 = $this->security->xss_clean($upData5); // xss filter
                  $this->Front_model->updateProject_portfolio($upData5,$gaup->portfolio_id);

                  $upData6 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData6 = $this->security->xss_clean($upData6); // xss filter
                  $this->Front_model->updateProject_portfolio_member($upData6,$gaup->portfolio_id);

                  $upData7 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData7 = $this->security->xss_clean($upData7); // xss filter
                  $this->Front_model->updateProject($upData7,$gaup->portfolio_id);

                  $get_all_project = $this->Front_model->get_all_project($gaup->portfolio_id);
                  if($get_all_project)
                  {
                    foreach($get_all_project as $gap)
                    {
                      $upData8 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData8 = $this->security->xss_clean($upData8); // xss filter
                      $this->Front_model->updateProject_members($upData8,$gap->pid);

                      $upData9 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData9 = $this->security->xss_clean($upData9); // xss filter
                      $this->Front_model->updateProject_files($upData9,$gap->pid);

                      $upData10 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData10 = $this->security->xss_clean($upData10); // xss filter
                      $this->Front_model->updateProject_invited_members($upData10,$gap->pid);

                      $upData11 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData11 = $this->security->xss_clean($upData11); // xss filter
                      $this->Front_model->updateProject_request_member($upData11,$gap->pid);

                      $upData12 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData12 = $this->security->xss_clean($upData12); // xss filter
                      $this->Front_model->updateProject_suggested_members($upData12,$gap->pid);

                      $upData13 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData13 = $this->security->xss_clean($upData13); // xss filter
                      $this->Front_model->updateTask($upData13,$gap->pid);

                      $upData14 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData14 = $this->security->xss_clean($upData14); // xss filter
                      $this->Front_model->updateSubtask($upData14,$gap->pid);

                      $upData16 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                      $upData16 = $this->security->xss_clean($upData16); // xss filter
                      $this->Front_model->updateComments($upData16,$gap->pid);
                    }
                  }

                  $upData15 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upData15 = $this->security->xss_clean($upData15); // xss filter
                  $this->Front_model->updateContent_planning($upData15,$gaup->portfolio_id);
              }
            }

            $get_all_goals2 = $this->Front_model->get_all_goals2($user->reg_id);
            if($get_all_goals2)
            {
              foreach($get_all_goals2 as $gag2)
              {
                $portfolio_owner = $user->reg_id;

                $check_getPortfolio_Owner = $this->Front_model->check_getPortfolio_Owner($gag2->portfolio_id);

                if($check_getPortfolio_Owner)
                {
                  $portfolio_owner = $check_getPortfolio_Owner->portfolio_createdby;
                }
                if($portfolio_owner != $user->reg_id)
                {
                  $check_if_tm = $this->Front_model->check_if_gtm2($gag2->gid,$portfolio_owner);
                  if($check_if_tm)
                  {
                    $this->Front_model->delete_gMember_mem_id($gag2->gid,$portfolio_owner);
                  }
                  $check_if_psm = $this->Front_model->check_if_gsm2($gag2->gid,$portfolio_owner);
                  if($check_if_psm)
                  {
                    $this->Front_model->delete_if_gsm2($gag2->gid,$portfolio_owner);
                  }                 

                  $data = array(
                      'gcreated_by' => $portfolio_owner,
                  );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->editGoal($data,$gag2->gid);

                  $data2 = array(
                        'gid' => $gag2->gid,
                        'portfolio_id' => $gag2->portfolio_id,
                        'gmember' => $portfolio_owner,
                        'status' => 'accepted',
                        'gcreated_by' => $portfolio_owner,
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'yes',
                                          );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_GoalTeamMember($data2);

                  $upDataP8 = array(
                        'gcreated_by' => $portfolio_owner,
                      );
                  $upDataP8 = $this->security->xss_clean($upDataP8); // xss filter
                  $this->Front_model->updateGoal_members($upDataP8,$gag2->gid);

                  $upDataP10 = array(
                        'sent_from' => $portfolio_owner,
                      );
                  $upDataP10 = $this->security->xss_clean($upDataP10); // xss filter
                  $this->Front_model->updateGoal_invited_members($upDataP10,$gag2->gid);

                  $upDataP12 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP12 = $this->security->xss_clean($upDataP12); // xss filter
                  $this->Front_model->updateGoal_suggested_members($upDataP12,$gag2->gid);

                }
                else
                {
                    $data = array(
                        'reg_acc_status' => 'deactivated',
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editGoal($data,$gag2->gid);

                    $upDataP8 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                    $upDataP8 = $this->security->xss_clean($upDataP8); // xss filter
                    $this->Front_model->updateGoal_members($upDataP8,$gag2->gid);

                    $upDataP10 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                    $upDataP10 = $this->security->xss_clean($upDataP10); // xss filter
                    $this->Front_model->updateGoal_invited_members($upDataP10,$gag2->gid);

                    $upDataP12 = array(
                            'reg_acc_status' => 'deactivated',
                          );
                    $upDataP12 = $this->security->xss_clean($upDataP12); // xss filter
                    $this->Front_model->updateGoal_suggested_members($upDataP12,$gag2->gid);
                }
              }
            }

            $get_all_strategies2 = $this->Front_model->get_all_strategies2($user->reg_id);
            if($get_all_strategies2)
            {
              foreach($get_all_strategies2 as $gas2)
              {
                $portfolio_owner = $user->reg_id;

                $check_getPortfolio_Owner = $this->Front_model->check_getPortfolio_Owner($gas2->portfolio_id);

                if($check_getPortfolio_Owner)
                {
                  $portfolio_owner = $check_getPortfolio_Owner->portfolio_createdby;
                }
                if($portfolio_owner != $user->reg_id)
                {
                    $data = array(
                        'screated_by' => $portfolio_owner,
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editStrategies($data,$gas2->sid);
                }
                else
                {
                    $data = array(
                        'reg_acc_status' => 'deactivated',
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editStrategies($data,$gas2->sid);
                }
              }
            }

            $get_all_project2 = $this->Front_model->get_all_project2($user->reg_id);
            if($get_all_project2)
            {
              foreach($get_all_project2 as $gap2)
              {
                $portfolio_owner = $user->reg_id;

                $check_getPortfolio_Owner = $this->Front_model->check_getPortfolio_Owner($gap2->portfolio_id);

                if($check_getPortfolio_Owner)
                {
                  $portfolio_owner = $check_getPortfolio_Owner->portfolio_createdby;
                }

                if($portfolio_owner != $user->reg_id)
                {
                  $check_if_tm = $this->Front_model->check_if_tm2($gap2->pid,$portfolio_owner);
                  if($check_if_tm)
                  {
                    $this->Front_model->delete_pMember_mem_id($gap2->pid,$portfolio_owner);
                  }
                  $check_if_psm = $this->Front_model->check_if_psm2($gap2->pid,$portfolio_owner);
                  if($check_if_psm)
                  {
                    $this->Front_model->delete_if_psm2($gap2->pid,$portfolio_owner);
                  }
                  $check_if_prm = $this->Front_model->check_if_prm2($gap2->pid,$portfolio_owner);
                  if($check_if_prm)
                  {
                    $this->Front_model->delete_if_prm2($gap2->pid,$portfolio_owner);
                  }
                  $upDataP7 = array(
                        'pcreated_by' => $portfolio_owner,
                      );
                  $upDataP7 = $this->security->xss_clean($upDataP7); // xss filter
                  $this->Front_model->updateProject2($upDataP7,$gap2->pid);

                  $upDataP8 = array(
                        'pcreated_by' => $portfolio_owner,
                      );
                  $upDataP8 = $this->security->xss_clean($upDataP8); // xss filter
                  $this->Front_model->updateProject_members($upDataP8,$gap2->pid);

                  $upDataP9 = array(
                        'pcreated_by' => $portfolio_owner,
                      );
                  $upDataP9 = $this->security->xss_clean($upDataP9); // xss filter
                  $this->Front_model->updateProject_files($upDataP9,$gap2->pid);

                  $upDataP10 = array(
                        'sent_from' => $portfolio_owner,
                      );
                  $upDataP10 = $this->security->xss_clean($upDataP10); // xss filter
                  $this->Front_model->updateProject_invited_members($upDataP10,$gap2->pid);

                  $upDataP11 = array(
                        'reg_acc_status' => 'deactivated',
                      );
                  $upDataP11 = $this->security->xss_clean($upDataP11); // xss filter
                  $this->Front_model->updateProject_request_member($upDataP11,$gap2->pid);

                  $upDataP12 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP12 = $this->security->xss_clean($upDataP12); // xss filter
                  $this->Front_model->updateProject_suggested_members($upDataP12,$gap2->pid);

                  $upDataP13 = array(
                          'tassignee' => $portfolio_owner,
                          'tcreated_by' => $portfolio_owner,
                        );
                  $upDataP13 = $this->security->xss_clean($upDataP13); // xss filter
                  $this->Front_model->updateTask($upDataP13,$gap2->pid);

                  $upDataP14 = array(
                          'stassignee' => $portfolio_owner,
                          'stcreated_by' => $portfolio_owner,
                        );
                  $upDataP14 = $this->security->xss_clean($upDataP14); // xss filter
                  $this->Front_model->updateSubtask($upDataP14,$gap2->pid);

                  $upDataP16 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP16 = $this->security->xss_clean($upDataP16); // xss filter
                  $this->Front_model->updateComments($upDataP16,$gap2->pid);

                  $upDataCP = array(
                              'written_content_assignee' => $portfolio_owner,
                              'pc_file_assignee' => $portfolio_owner,
                              'submit_to_approval' => $portfolio_owner,
                              'pc_assignee' => $portfolio_owner,
                              'pc_created_by' => $portfolio_owner,
                            );
                  $upDataCP = $this->security->xss_clean($upDataCP); // xss filter
                  $this->Front_model->updateCP_Proj($upDataCP,$gap2->pid);
                }
                else
                {
                  $upDataP7 = array(
                        'reg_acc_status' => 'deactivated',
                      );
                  $upDataP7 = $this->security->xss_clean($upDataP7); // xss filter
                  $this->Front_model->updateProject2($upDataP7,$gap2->pid);

                  $upDataP8 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP8 = $this->security->xss_clean($upDataP8); // xss filter
                  $this->Front_model->updateProject_members($upDataP8,$gap2->pid);

                  $upDataP9 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP9 = $this->security->xss_clean($upDataP9); // xss filter
                  $this->Front_model->updateProject_files($upDataP9,$gap2->pid);

                  $upDataP10 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP10 = $this->security->xss_clean($upDataP10); // xss filter
                  $this->Front_model->updateProject_invited_members($upDataP10,$gap2->pid);

                  $upDataP11 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP11 = $this->security->xss_clean($upDataP11); // xss filter
                  $this->Front_model->updateProject_request_member($upDataP11,$gap2->pid);

                  $upDataP12 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP12 = $this->security->xss_clean($upDataP12); // xss filter
                  $this->Front_model->updateProject_suggested_members($upDataP12,$gap2->pid);

                  $upDataP13 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP13 = $this->security->xss_clean($upDataP13); // xss filter
                  $this->Front_model->updateTask($upDataP13,$gap2->pid);

                  $upDataP14 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP14 = $this->security->xss_clean($upDataP14); // xss filter
                  $this->Front_model->updateSubtask($upDataP14,$gap2->pid);

                  $upDataP16 = array(
                          'reg_acc_status' => 'deactivated',
                        );
                  $upDataP16 = $this->security->xss_clean($upDataP16); // xss filter
                  $this->Front_model->updateComments($upDataP16,$gap2->pid);
                }                
              }
            }

                  $upDataP15 = array(
                              'reg_acc_status' => 'deactivated',
                            );
                  $upDataP15 = $this->security->xss_clean($upDataP15); // xss filter
                  $this->Front_model->updateContent_planning2($upDataP15,$user->reg_id);

            $singData1 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData1 = $this->security->xss_clean($singData1); // xss filter
            $this->Front_model->updateProject_portfolio_member2($singData1,$user->email_address);

            $singData2 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData2 = $this->security->xss_clean($singData2); // xss filter
            $this->Front_model->updateProject_members2($singData2,$user->reg_id);

            $singData3 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData3 = $this->security->xss_clean($singData3); // xss filter
            $this->Front_model->updateProject_files2($singData3,$user->reg_id);

            $singData4 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData4 = $this->security->xss_clean($singData4); // xss filter
            $this->Front_model->updateProject_invited_members2($singData4,$user->reg_id);

            $singData5 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData5 = $this->security->xss_clean($singData5); // xss filter
            $this->Front_model->updateProject_request_member2($singData5,$user->reg_id);

            $singData6 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData6 = $this->security->xss_clean($singData6); // xss filter
            $this->Front_model->updateProject_suggested_members2($singData6,$user->reg_id);

            $singData7 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData7 = $this->security->xss_clean($singData7); // xss filter
            $this->Front_model->updateTask2($singData7,$user->reg_id);

            $singData8 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData8 = $this->security->xss_clean($singData8); // xss filter
            $this->Front_model->updateSubtask2($singData8,$user->reg_id);

            $singData9 = array(
                        'pmanager' => '0',
                      );
            $singData9 = $this->security->xss_clean($singData9); // xss filter
            $this->Front_model->updateProjectManager($singData9,$user->reg_id);

            $singData2 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData2 = $this->security->xss_clean($singData2); // xss filter
            $this->Front_model->updateGoal_members2($singData2,$user->reg_id);

            $singData4 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData4 = $this->security->xss_clean($singData4); // xss filter
            $this->Front_model->updateGoal_invited_members2($singData4,$user->reg_id);

            $singData6 = array(
                        'reg_acc_status' => 'deactivated',
                      );
            $singData6 = $this->security->xss_clean($singData6); // xss filter
            $this->Front_model->updateGoal_suggested_members2($singData6,$user->reg_id);

            $singData9 = array(
                        'gmanager' => '0',
                      );
            $singData9 = $this->security->xss_clean($singData9); // xss filter
            $this->Front_model->updateGoalManager($singData9,$user->reg_id);
            
           $email_to = $user->email_address;
            $email_from = 'hello@decision168.com'; 
            //$email_from = 'saramaazkhan123@gmail.com'; 
            $email_name = 'Decision 168';

            $this->load->library('email');  
            $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
            $this->email->initialize($config);
            $this->email->from($email_from, $email_name);
            $this->email->set_header('Reply-To', $email_from."\r\n");
            $this->email->set_header('Return-Path', $email_from."\r\n");
            $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
            $this->email->set_header('MIME-Version', '1.0' . "\r\n");
            $this->email->to($email_to);
            $this->email->set_mailtype('html');
            $this->email->subject('[Action Required] Your Decision 168 account has been de-activated | Decision 168');
            $this->email->message(' 
            <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>[Action Required] Your Decision 168 account has been de-activated</title>
                  <meta name="description" content="[Action Required] Your Decision 168 account has been de-activated">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:30px;font-family:Rubik,sans-serif;">Your account has been de-activated,<br>but there\'s still hope...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hi '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         This is a <strong>final notification that your Decision 168 account has been deactivated on '.$deactive_date.'</strong>. You will not be able to access products and any data will be permanently deleted soon.
                                                         <br><br>
                                                         You can still re-gain access to your Decision 168 platform account by reactivating your account before '.$delete_date.'. All data will be deleted at that time.
                                                      </p>
                                                      <a href="'.base_url('send-activate-account-request/'.$user->reg_id.'/1').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">RE-ACTIVATE MY ACCOUNT
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>
            ');
            $this->email->send(); 

          }
          if($inactivity_days > "180")
          {
            //echo $delete_date;
            //cancel subscription if any
            if($user->package_id != '1')
            {
              // Set API key
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

              $subscription = \Stripe\Subscription::retrieve($user->txn_id);
              if($subscription)
              {
                //print_r($subscription);
                $subscription->cancel();
              }              
            }
                $data = array(  
                                'stripe_cus_id' => $user->stripe_cus_id,
                                'reg_id' => $user->reg_id,
                                'first_name' => $user->first_name,
                                'middle_name' => $user->middle_name,
                                'last_name' => $user->last_name,
                                'email_address' => $user->email_address,
                                'phone_number' => $user->phone_number,
                                'deleted_date' => date('Y-m-d H:i:s'),
                             );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->insertDeletedRegistration($data);
            //delete data
            $this->Front_model->deleteAd_logo($user->reg_id);
            $this->Front_model->deleteComments2($user->reg_id);
            $this->Front_model->deleteMotivator($user->reg_id);
            $this->Front_model->deleteContactSales($user->reg_id);
            $get_all_user_portfolio = $this->Front_model->get_all_user_portfolio($user->reg_id);
            if($get_all_user_portfolio)
            {
              foreach($get_all_user_portfolio as $gaup)
              {
                $get_all_goals = $this->Front_model->get_all_goals($gaup->portfolio_id);
                if($get_all_goals)
                {
                  foreach($get_all_goals as $ggap)
                  {
                    $this->Front_model->deleteGoals($ggap->gid);
                    $this->Front_model->deleteGoal_members($ggap->gid);
                    $this->Front_model->deleteGoal_invited_members($ggap->gid);
                    $this->Front_model->deleteGoal_suggested_members($ggap->gid);
                  }
                }
                $this->Front_model->deleteStartegies_portfolio($gaup->portfolio_id);
                $this->Front_model->deleteProject_portfolio($gaup->portfolio_id);
                $this->Front_model->deleteProject_portfolio_member($gaup->portfolio_id);
                $get_all_project = $this->Front_model->get_all_project($gaup->portfolio_id);
                if($get_all_project)
                  {
                    foreach($get_all_project as $gap)
                    {
                      $this->Front_model->deleteProject($gap->pid);
                      $this->Front_model->deleteProject_members($gap->pid);
                      $this->Front_model->deleteProject_files($gap->pid); 
                      $this->Front_model->deleteProject_invited_members($gap->pid);
                      $this->Front_model->deleteProject_request_member($gap->pid); 
                      $this->Front_model->deleteProject_suggested_members($gap->pid); 
                      $this->Front_model->deleteTask($gap->pid);
                      $this->Front_model->deleteSubtask($gap->pid);  
                      $this->Front_model->deleteComments($gap->pid);
                      $this->Front_model->deleteProject_history($gap->pid);
                      $this->Front_model->deleteProject_management($gap->pid);
                      $this->Front_model->deleteProject_management_fields($gap->pid);
                    }
                  }
                  $this->Front_model->deleteContent_planning($gaup->portfolio_id);
              }
            }

            $get_all_goals2 = $this->Front_model->get_all_goals2($user->reg_id);
            if($get_all_goals2)
            {
              foreach($get_all_goals2 as $gag2)
              {
                $this->Front_model->deleteGoals($gag2->gid);
                $this->Front_model->deleteGoal_members($gag2->gid);
                $this->Front_model->deleteGoal_invited_members($gag2->gid);
                $this->Front_model->deleteGoal_suggested_members($gag2->gid);
              }
            }

            $get_all_strategies2 = $this->Front_model->get_all_strategies2($user->reg_id);
            if($get_all_strategies2)
            {
              foreach($get_all_strategies2 as $gas2)
              {
                $this->Front_model->deleteStartegies($gas2->pid);
              }
            }

            $get_all_project2 = $this->Front_model->get_all_project2($user->reg_id);
            if($get_all_project2)
            {
              foreach($get_all_project2 as $gap2)
              {
                $this->Front_model->deleteProject($gap2->pid);
                $this->Front_model->deleteProject_members($gap2->pid);
                $this->Front_model->deleteProject_files($gap2->pid); 
                $this->Front_model->deleteProject_invited_members($gap2->pid);
                $this->Front_model->deleteProject_request_member($gap2->pid); 
                $this->Front_model->deleteProject_suggested_members($gap2->pid); 
                $this->Front_model->deleteTask($gap2->pid);
                $this->Front_model->deleteSubtask($gap2->pid);  
                $this->Front_model->deleteComments($gap2->pid); 
                $this->Front_model->deleteProject_history($gap2->pid);
                $this->Front_model->deleteProject_management($gap2->pid);
                $this->Front_model->deleteProject_management_fields($gap2->pid);
              }
            }
            $this->Front_model->deleteProject_portfolio_member2($user->email_address);
            $this->Front_model->deleteProject_members2($user->reg_id);
            $this->Front_model->deleteProject_files2($user->reg_id);
            $this->Front_model->deleteProject_invited_members2($user->reg_id);
            $this->Front_model->deleteProject_request_member2($user->reg_id);
            $this->Front_model->deleteProject_suggested_members2($user->reg_id);
            $this->Front_model->deleteProject_history2($user->reg_id);
            $this->Front_model->deleteProject_management2($user->reg_id);
            $this->Front_model->deleteProject_management_fields2($user->reg_id);
            $this->Front_model->deleteGoal_members2($user->reg_id);
            $this->Front_model->deleteGoal_invited_members2($user->reg_id);
            $this->Front_model->deleteGoal_suggested_members2($user->reg_id);
            //change assignee
            $get_all_task = $this->Front_model->get_all_task($user->reg_id);
            {
              foreach($get_all_task as $gat)
              {
                $task_getProjectById = $this->Front_model->check_getProjectById($gat->tproject_assign);
                if(!empty($task_getProjectById))
                {
                      $upDataT = array(
                              'tassignee' => $task_getProjectById->pcreated_by,
                              'tcreated_by' => $task_getProjectById->pcreated_by,
                            );
                      $upDataT = $this->security->xss_clean($upDataT); // xss filter
                      $this->Front_model->updateOnlyTask($upDataT,$gat->tid);

                      $task_getSubtaskId = $this->Front_model->task_getSubtaskId($gat->tid);
                      if($task_getSubtaskId > 0)
                      {
                        $upDataSub = array(
                              'stassignee' => $task_getProjectById->pcreated_by,
                              'stcreated_by' => $task_getProjectById->pcreated_by,
                            );
                        $upDataSub = $this->security->xss_clean($upDataSub); // xss filter
                        $this->Front_model->updateOnlyTaskSubtask($upDataSub,$gat->tid);
                        $this->Front_model->deleteTaskSubtask_trash($gat->tid);
                      }
                      $this->Front_model->deleteTask_trash($gat->tid);
                }
                else
                {
                  $task_getSubtaskId = $this->Front_model->task_getSubtaskId($gat->tid);
                    if($task_getSubtaskId > 0)
                    {
                      $this->Front_model->deleteOnlyTaskSubtask($gat->tid);
                      $this->Front_model->deleteTaskSubtask_trash($gat->tid);
                    }
                   $this->Front_model->deleteOnlyTask($gat->tid);
                   $this->Front_model->deleteTask_trash($gat->tid);
                }
              }
            }

            $get_all_subtask = $this->Front_model->get_all_subtask($user->reg_id);
            {
              foreach($get_all_subtask as $gast)
              {
                $subtask_getProjectById = $this->Front_model->check_getProjectById($gast->stproject_assign);
                if(!empty($subtask_getProjectById))
                {
                      $upDataST = array(
                              'stassignee' => $subtask_getProjectById->pcreated_by,
                              'stcreated_by' => $subtask_getProjectById->pcreated_by,
                            );
                      $upDataST = $this->security->xss_clean($upDataST); // xss filter
                      $this->Front_model->updateOnlySubtask($upDataST,$gast->stid);
                      $this->Front_model->deleteSubtask_trash($gast->stid);
                }
                else
                {
                   $this->Front_model->deleteOnlySubtask($gast->stid);
                   $this->Front_model->deleteSubtask_trash($gast->stid);
                }
              }
            }

            $get_all_cp = $this->Front_model->get_all_cp($user->reg_id);
            {
              foreach($get_all_cp as $gacp)
              {
                $cp_getProjectById = $this->Front_model->check_getProjectById($gacp->pc_project_assign);
                if(!empty($cp_getProjectById))
                {
                      $upDataCP = array(
                              'written_content_assignee' => $cp_getProjectById->pcreated_by,
                              'pc_file_assignee' => $cp_getProjectById->pcreated_by,
                              'submit_to_approval' => $cp_getProjectById->pcreated_by,
                              'pc_assignee' => $cp_getProjectById->pcreated_by,
                              'pc_created_by' => $cp_getProjectById->pcreated_by,
                            );
                      $upDataCP = $this->security->xss_clean($upDataCP); // xss filter
                      $this->Front_model->updateOnlyCP($upDataCP,$gacp->pc_id);
                      $this->Front_model->deletecontent_planning_trash($gacp->pc_id);
                }
                else
                {
                   $this->Front_model->deleteOnlyCP($gacp->pc_id);
                   $this->Front_model->deletecontent_planning_trash($gacp->pc_id);
                }
              }
            }
            $this->Front_model->deleteRegistration($user->reg_id);
          }
      }
    }
  }

  public function send_activate_account_request()
  {
      $get_user_id = $this->uri->segment(2);
      $get_flag = $this->uri->segment(3);
      $userD = $this->Front_model->getStudentById($get_user_id);
      if((!empty($userD)) && ($get_flag === '1'))
      {
        if($userD->reg_acc_status == 'deactivated')
        {
              $upData1 = array(
                            'send_activate_req' => 'yes',
                            'send_activate_req_date' => date('Y-m-d'),
                          );
              $upData1 = $this->security->xss_clean($upData1); // xss filter
              $this->Front_model->updateRegistration($upData1,$get_user_id);

          $email_to = 'don@z2squared.com';
          $email_from = 'hello@decision168.com'; 
          //$email_from = 'saramaazkhan123@gmail.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('[Action Required] Decision 168 Account Re-Activation Request | Decision 168');
          $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>[Action Required] Decision 168 Account Re-Activation Request</title>
            <meta name="description" content="[Action Required] Decision 168 Account Re-Activation Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Account Re-Activation Request</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello SuperAdmin,<br><br>
                                                   '.ucfirst($userD->first_name).' '.ucfirst($userD->last_name).' has requested to re-activate his/her Decision 168 account. Just click the button below to activate the account.
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('user-activate-account-request/'.$userD->reg_id.'/1/1').'"
                                                  style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">RE-ENABLE USER ACCOUNT
                                                </a>
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
        );
          $this->email->send();   

          $this->session->set_flashdata('message','Activate Account Request Sent Successfully!');
          redirect(base_url('login'));
        }
        else
        {
          redirect(base_url('login'));
        }
      }
      else
      {
        redirect(base_url('login'));
      }
  }

  //////Calendar Part Start///////

  public function calendar()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $data['stud_del'] = $this->Front_model->getStudentById($student_id);
      $data['events'] = $this->Front_model->getActiveEvents($student_id);
      $data['draggable_events'] = $this->Front_model->getDraggableEvents($student_id);
      $data['time_24hrs'] = $this->Front_model->gettime_24hrs();
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();
      $data['motivator'] = $this->Front_model->Motivator();
      //$data['ad_logo'] = $this->Front_model->ad_logo();
      $this->load->view('user/calendar',$data);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function displayDates($date1, $date2, $format = 'Y-m' ) 
  {
    $dates = array();
    $date1  = date("Y-m", strtotime($date1));
    $date2  = date("Y-m", strtotime($date2));
    $current = strtotime($date1);
    $date2 = strtotime($date2);
    $stepVal = '+1 months';
    while( $current <= $date2 ) {
       $dates[] = date($format, $current);
       $current = strtotime($stepVal, $current);
    }
    return $dates;
  }

  public function insert_draggable_event($unique_key ="1234") //Insert Draggable Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      // print_r($this->input->post());
      // die;
      if($this->input->post('event_repeat_option') == 'Daily' || $this->input->post('event_repeat_option') == 'Does not repeat'){
            if($this->input->post('created_type') == 'meeting')
            {
              $_POST['draggable_event'] = '';
            }
            else
            {
              $_POST['draggable_event'] = $this->input->post('draggable_event');
            }
        }else{
            $_POST['draggable_event'] = '';
        }
        
      if($this->input->post('event_allDay') == 'on'){
          $event_reminder = $this->input->post('event_reminder_new');
      }else{
          $event_reminder = $this->input->post('event_reminder') ;
      }
      if($unique_key == "1234"){
          $unique_key = uniqid();
      }else{
          $unique_key = $unique_key;
      }
      
      $this->form_validation->set_rules('event_name','Event Name','trim|required');
      $this->form_validation->set_rules('event_color','Event Color','trim|required');
      // if($this->input->post('event_repeat_option') == 'Does not repeat'){
      //     $this->form_validation->set_rules('event_start_end_date_new','event_start_end_date_new','trim|required');       
      // }      
      // if($this->input->post('created_type') == 'meeting')
      // {
      //   $this->form_validation->set_rules('meeting_link','Meeting Link','trim|required');
      // }
      
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {  
          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
            $this->form_validation->set_rules('portfolio_id','Portfolio','trim|required');

            if ($this->form_validation->run() == FALSE)
            {
                //$errors = array();

                $errors = $this->form_validation->error_array();
                // Loop through $_POST and get the keys
                foreach ($errors as $key => $value)
                {
                  // Add the error message for this field
                  $errors[$key] = form_error($key);
                }
              
                $response['errors'] = array_filter($errors); // Some might be empty
                $response['status'] = FALSE;
                // You can use the Output class here too
                header('Content-type: application/json');
                //echo json_encode($response);
                exit(json_encode($response));
            }
            else
            {
              $imemail_array = implode(',', $this->input->post('imemail'));
            } 
          }                 

          if($this->input->post('created_type') == 'meeting')
          {            
            if(empty($this->input->post('mfile_old'))) 
            {
              //files through js
              $added_files = array();
              if(!empty($this->input->post('mfile_add_create')))
              {
                $all_mfiles = $this->input->post('mfile_add_create');
                $all_mfilenames = $this->input->post('mfile_add_create_fname');
                $cnt_files = count($all_mfiles);
                //$cnt = 1;
                for($f = 0; $f < $cnt_files; $f++)
                {
                  $data = $all_mfiles[$f];
                  $ex_filename = strtolower(pathinfo($all_mfilenames[$f], PATHINFO_FILENAME));
                  $file_name =trim((preg_replace("/\([^)]+\)/","",$ex_filename))); 
                  $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                  $extension = pathinfo($all_mfilenames[$f], PATHINFO_EXTENSION);
                  //$data = $amf;
                  // echo $data.'<br>';                  
                  //$extension = explode('/', mime_content_type($data))[1];
                  list($type, $data) = explode(';', $data);
                  list(, $data)      = explode(',', $data);
                  $data = base64_decode($data);
                  //$fName = time().$cnt.'_'.$this->session->userdata('d168_id').'.'.$extension;
                  $fName =  time().'_'.$new_file_name.'.'.$extension;
                  if(file_put_contents('./assets/meeting_files/'.$fName, $data))
                  {
                   $added_files[] = $fName;
                  }
                  //$cnt++;
                }
              }
              //files through js
              if(!empty($_FILES['mfile']['name'][0]))
              {
                $cpt = count($_FILES['mfile']['name']);
                $files = $_FILES;
                $config['upload_path'] = 'assets/meeting_files/';
                $config['allowed_types'] = '*';
                $maxsize=2000000;
                //Load upload library and initialize configuration
                $this->load->library('upload', $config);

                for($i=0; $i<$cpt; $i++)
                  {          
                    //$_FILES['mfile']['name']= time().'_'.$files['mfile']['name'][$i];
                    $file_name =trim((preg_replace("/\([^)]+\)/","",$files['mfile']['name'][$i]))); 
                    $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                    $_FILES['mfile']['name']= time().'_'.strtolower($new_file_name);
                    $_FILES['mfile']['type']= $files['mfile']['type'][$i];
                    $_FILES['mfile']['tmp_name']= $files['mfile']['tmp_name'][$i];
                    $_FILES['mfile']['error']= $files['mfile']['error'][$i];
                    $_FILES['mfile']['size']= $files['mfile']['size'][$i];   

                    $this->upload->initialize($config);
                    if($_FILES['mfile']['size'] >= $maxsize)
                          {
                                  $response['status'] = 'file_uploadSizeErr';
                                  header('Content-type: application/json');
                                  exit(json_encode($response));
                          }
                    else
                          {
                              if($this->upload->do_upload('mfile'))
                                {
                                  $fileData = $this->upload->data();
                                  $uploadData[$i]['mfile2'] = $fileData['file_name'];
                                }
                                else 
                                {
                                  $response['status'] = 'Error_Uploading';
                                  header('Content-type: application/json');
                                  //echo json_encode($response);
                                  exit(json_encode($response));
                                } 
                          }                                  
                  }

                  if(is_array($uploadData))
                      {
                        if(!empty($added_files))
                        {
                          $mfile_new = implode(',', array_column($uploadData, 'mfile2'));
                          $mfile_new_array = explode(',', $mfile_new);
                          //$mfiles = implode(',',$added_files);
                          $merge_mfile = array_merge($added_files,$mfile_new_array);
                          $mfile_upload = implode(',',$merge_mfile); 
                        }
                        else
                        {
                          $mfile_upload = implode(',', array_column($uploadData, 'mfile2'));
                        }
                      }
              }
              else
              {
                if(!empty($added_files))
                {
                  $mfiles = implode(',',$added_files);
                  $mfile_upload = $mfiles;
                }
                else
                {
                  $mfile_upload = "";
                }
                
              }             
            } 
            else
            {
              if(!empty($_FILES['mfile']['name'][0]))
              {
                $cpt = count($_FILES['mfile']['name']);
                $files = $_FILES;
                $config['upload_path'] = 'assets/meeting_files/';
                $config['allowed_types'] = '*';
                $maxsize=2000000;
                //Load upload library and initialize configuration
                $this->load->library('upload', $config);

                for($i=0; $i<$cpt; $i++)
                  {          
                    //$_FILES['mfile']['name']= time().'_'.$files['mfile']['name'][$i];
                    $file_name =trim((preg_replace("/\([^)]+\)/","",$files['mfile']['name'][$i]))); 
                    $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
                    $_FILES['mfile']['name']= time().'_'.strtolower($new_file_name);
                    $_FILES['mfile']['type']= $files['mfile']['type'][$i];
                    $_FILES['mfile']['tmp_name']= $files['mfile']['tmp_name'][$i];
                    $_FILES['mfile']['error']= $files['mfile']['error'][$i];
                    $_FILES['mfile']['size']= $files['mfile']['size'][$i];   

                    $this->upload->initialize($config);
                    if($_FILES['mfile']['size'] >= $maxsize)
                          {
                                  $response['status'] = 'file_uploadSizeErr';
                                  header('Content-type: application/json');
                                  exit(json_encode($response));
                          }
                    else
                          {
                              if($this->upload->do_upload('mfile'))
                                {
                                  $fileData = $this->upload->data();
                                  $uploadData[$i]['mfile2'] = $fileData['file_name'];
                                }
                                else 
                                {
                                  $response['status'] = 'Error_Uploading';
                                  header('Content-type: application/json');
                                  //echo json_encode($response);
                                  exit(json_encode($response));
                                } 
                          }                                  
                  }

                  if(is_array($uploadData))
                      {
                          $mfile_old_array = explode(',', $this->input->post('mfile_old'));
                          $mfile_new = implode(',', array_column($uploadData, 'mfile2'));
                          $mfile_new_array = explode(',', $mfile_new);
                          $merge_mfile = array_merge($mfile_old_array,$mfile_new_array);
                          $mfile_upload = implode(',',$merge_mfile); 
                      }
              }
              else
              {
                $mfile_upload = $this->input->post('mfile_old');
              } 
            }             
          }
          else
          {
            $mfile_upload = "";
          } 

          $type = $this->input->post('type');         
             // $event_start_end_date = $this->input->post('event_start_end_date');
              $event_start_end_date = $this->input->post('event_start_date_nn')." - ".$this->input->post('event_end_date_nn');
              $sdd = explode(' - ',$event_start_end_date);
              $event_start_date = $sdd[0];
              $event_end_date = $sdd[1];
              // echo $event_start_date;
              // echo $event_end_date;
              // die();
              if($this->input->post('event_repeat_option') == 'Does not repeat') 
                  {
                  $end_date = $event_end_date;
                  }
                  else
                  {
                  if($event_start_date <= $this->input->post('end_date'))
                      {
                      $end_date = $this->input->post('end_date');
                      }
                      else
                      {
                      $end_date = $event_end_date;
                      }
                  }

              // $date = $this->displayDates($event_start_date, $end_date);
              $date = $this->displayDates($event_start_date, $event_end_date);
              $date_array = json_encode($date);
              // print_r($date_array);
              // die;

              $event_start_time  = date("H:i:s", strtotime($this->input->post('event_start_time')));
              $event_end_time  = date("H:i:s", strtotime($this->input->post('event_end_time')));

              $allDay = $this->input->post('event_allDay');
              if($allDay == 'on'){
                  $allDay = 'true';
                  $event_start_time  = '00:00:00';
                  $event_end_time  = '00:00:00';
              }else{
                  $allDay = 'false';
                  $event_start_date = $event_start_date.' '.$event_start_time;
                  $event_end_date = $event_end_date.' '.$event_end_time;
              }

              $de = $this->Front_model->getDraggableEventsCount($this->session->userdata('d168_id'),$this->input->post('event_name'));
              // if(($this->input->post('draggable_event') != "") && ($de <= 0)){
              //     $data = array(  'student_id' => $this->session->userdata('d168_id'),
              //                     'event_name' => $this->input->post('event_name'),
              //                     'event_color' => $this->input->post('event_color'),
              //                     'event_note' => $this->input->post('event_note'),
              //                     'event_start_date' => $sdd[0],
              //                     'event_end_date' => $sdd[1],
              //                     'event_start_time' => $event_start_time,
              //                     'event_end_time' => $event_end_time,
              //                     'event_repeat_option' => $this->input->post('event_repeat_option'),
              //                     'event_allDay' => $allDay,
              //                     'event_reminder' => $event_reminder,
              //                     'show_draggable_event' => 1,
              //                     'status' => 'active',
              //                     'date' => date('Y-m-d H:i:s'),
              //                     'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
              //                     // 'event_repeat_option_type' => $this->input->post('event_repeat_option'),
              //                     // 'created_type' => $this->input->post('created_type'),
              //                     // 'task_priority' => $this->input->post('task_priority'),
              //                  );
              //     $data = $this->security->xss_clean($data); // xss filter
              //     $this->Front_model->insertDraggableEvent($data);
              //     $inserted_id = $this->db->insert_id();
              //     $response['drag_id'] = $inserted_id;
              // }else{
              //     $response['drag_id'] = 'no_drag_id';
              // }

              $response['drag_id'] = 'no_drag_id';
              if($this->input->post('event_repeat_option') == 'Does not repeat'){
                  $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $sdd[0],
                                  'event_end_date' => $sdd[1],
                                  'date_array' => $date_array,
                                  // 'end_date' => $end_date,
                                  'end_date' => $sdd[1],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  // 'event_repeat_option' => $this->input->post('event_repeat_option'),
                                  'unique_key' => $unique_key,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'date' => date('Y-m-d H:i:s'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                              );

              }else{
                  $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $sdd[0],
                                  'event_end_date' => $sdd[1],
                                  'date_array' => $date_array,
                                  // 'end_date' => $end_date,
                                  'end_date' => $sdd[1],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  // 'event_repeat_option' => $this->input->post('event_repeat_option'),
                                  'unique_key' => $unique_key,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                              );
              }
              
              if($this->input->post('event_repeat_option') == 'Every Weekday')
                  {
                  $start=$event_start_date;
                  $end=$event_end_date;
                  $format = 'Y-m-d';

                  // Declare an empty array
                  $array = array();
                    
                  // Variable that store the date interval
                  // of period 1 day
                  $interval = new DateInterval('P1D');
                
                  $realEnd = new DateTime($end);
                  //$realEnd->add($interval);

                  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
                
                  // Use loop to store date into array
                  foreach($period as $date) {                 
                      $timestamp = strtotime($date->format($format));
                      $day = date('D', $timestamp);

                      $array[] = [$date->format($format),$day]; 
                  }
                
                  // Return the array elements
                  $d_array=$array;
                  $weekday_date=[];
                  foreach($d_array as $d)
                      {
                      if($d[1]!='Sat' and $d[1]!='Sun')
                          {
                          $weekday_date[]=$d;  
                          }
                      }

                  $final=[];
                  $array_key=0;
                  foreach($weekday_date as $wd)
                      {
                      $final[$array_key][]=$wd[0];
                      if($wd[1]=='Fri'){$array_key++;}    
                      } 

                  $data1=[];    
                  foreach($final as $d)
                      {
                      $da = $this->displayDates($d[0], $d[array_key_last($d)]);
                      $date_array = json_encode($da);
                  
                      $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $d[0],
                                  'event_end_date' => $d[array_key_last($d)],
                                  'date_array' => $date_array,
                                  'end_date' => $end_date,
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'unique_key' => $unique_key,
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                               );
                      }

                  }
                  //////////custom store
                  if($this->input->post('event_repeat_option') == 'Custom')
                  {
                  $start=$event_start_date;
                  $end=$event_end_date;
                  $format = 'Y-m-d';

                  // Declare an empty array
                  $array = array();
                    
                  // Variable that store the date interval
                  // of period 1 day
                  $interval = new DateInterval('P1D');
                
                  $realEnd = new DateTime($end);
                  //$realEnd->add($interval);

                  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
                
                  // Use loop to store date into array
                  foreach($period as $date) {                 
                      $timestamp = strtotime($date->format($format));
                      $day = date('D', $timestamp);

                      $array[] = [$date->format($format),$day]; 
                  }
                
                  // Return the array elements
                  $d_array=$array;
                  $weekday_date=[];
                 
                  $custom_check_array = $this->input->post('custom_check');
                  $custom_all_day = implode(",",$custom_check_array);
                  foreach($d_array as $d)
                      {
                          foreach($custom_check_array as $custom_check_array_new){
                          if($d[1]==$custom_check_array_new)
                              {
                              $weekday_date[]=$d;  
                              }
                          }
                      }
                // print_r ($weekday_date);
                  //die;   

                  $final=[];
                  $array_key=0;
                  foreach($weekday_date as $wd)
                      {
                      $final[$array_key][]=$wd[0];
                      if($wd[1]=='Fri'){$array_key++;}    
                      } 

                  $data1=[];    
                  foreach($weekday_date as $d)
                      {
                          
                          // $da = $this->displayDates($d[0], $d[array_key_last($d)]);
                          $da = $this->displayDates($d[0], $d[0]);
                          $date_array = json_encode($da);
                          // print_r($date_array);
                          // die;
                  
                          $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $d[0],
                                  'event_end_date' => $d[0],
                                  'date_array' => $date_array,
                                  'end_date' => $d[0],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'unique_key' => $unique_key,
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'custom_all_day' => $custom_all_day,
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                               );
                      }

                  }
                  //////////Weekly  store
                  if($this->input->post('event_repeat_option') == 'Weekly')
                  {
                  $start=$event_start_date;
                  $end=$event_end_date;
                  $format = 'Y-m-d';

                  // Declare an empty array
                  $array = array();
                    
                  // Variable that store the date interval
                  // of period 1 day
                  $interval = new DateInterval('P1D');
                
                  $realEnd = new DateTime($end);
                  $realEnd->add($interval);

                  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
                
                  // Use loop to store date into array
                  foreach($period as $date) {                 
                      $timestamp = strtotime($date->format($format));
                      $day = date('D', $timestamp);

                      $array[] = [$date->format($format),$day]; 
                  }
                  $custom_date_weekly = $array[0][1];
                  
                  // Return the array elements
                  $d_array=$array;
                  $weekday_date=[];
                 
                  // foreach($d_array as $d)
                  //     {
                  //     if($d[1]='Sat')
                  //         {
                  //         $weekday_date[]=$d;  
                  //         }
                  //     }

                  //$custom_check_array = $this->input->post('custom_check');
                  $custom_check_array = array($custom_date_weekly);
                  // print_r($custom_check_array);
                  // die;
                
                 foreach($d_array as $d)
                      {
                          foreach($custom_check_array as $custom_check_array_new){
                          if($d[1]==$custom_check_array_new)
                              {
                              $weekday_date[]=$d;  
                              }
                          }
                      }
                // print_r ($weekday_date);
                  //die;   

                  $final=[];
                  $array_key=0;
                  foreach($weekday_date as $wd)
                      {
                      $final[$array_key][]=$wd[0];
                      if($wd[1]=='Fri'){$array_key++;}    
                      } 

                  $data1=[];    
                  foreach($weekday_date as $d)
                      {
                          
                          // $da = $this->displayDates($d[0], $d[array_key_last($d)]);
                          $da = $this->displayDates($d[0], $d[0]);
                          $date_array = json_encode($da);
                          // print_r($date_array);
                          // die;
                  
                          $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $d[0],
                                  'event_end_date' => $d[0],
                                  'date_array' => $date_array,
                                  'end_date' => $d[0],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'unique_key' => $unique_key,
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                               );
                      }

                  }
                  //////////Monthly  store
                  if($this->input->post('event_repeat_option') == 'Monthly')
                  {
                  $start=$event_start_date;
                  $end=$event_end_date;
                  $format = 'Y-m-d';

                  // Declare an empty array
                  $array = array();
                    
                  // Variable that store the date interval
                  // of period 1 day
                  $interval = new DateInterval('P1D');
                
                  $realEnd = new DateTime($end);
                  $realEnd->add($interval);

                  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
                
                  // Use loop to store date into array
                  foreach($period as $date) {                 
                      $timestamp = strtotime($date->format($format));
                      $day = date('D', $timestamp);

                      $array[] = [$date->format($format),$day]; 
                  }
                  $custom_date_monthly = $array;
                  $first_date_get = $custom_date_monthly[0][0];
                  foreach($custom_date_monthly as $custom_date_monthly_new){
                      $new_date_get[] = $custom_date_monthly_new[0];
                  }
                  $i =0;
                  foreach($new_date_get as $new_date_get_new){
                      $newDate = date('Y-m-d', strtotime($first_date_get. ' + '.$i.' months'));
                      // print_r($new_date_get_new);
                      //     die;
                      if($newDate === $new_date_get_new){
                          $new_array_monthly_date[] = $newDate;
                          $i++;
                      }else{
                      }
                  }
                  $d_array=$array;
                  $weekday_date=[];
                 $custom_check_array = $new_array_monthly_date;
                 foreach($d_array as $d)
                      {
                          foreach($custom_check_array as $custom_check_array_new){
                          if($d[0]==$custom_check_array_new)
                              {
                              $weekday_date[]=$d;  
                              }
                          }
                      }
                  $final=[];
                  $array_key=0;
                  foreach($weekday_date as $wd)
                      {
                      $final[$array_key][]=$wd[0];
                      if($wd[1]=='Fri'){$array_key++;}    
                      } 

                  $data1=[];    
                  foreach($weekday_date as $d)
                      {
                          $da = $this->displayDates($d[0], $d[0]);
                          $date_array = json_encode($da);
                          $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $d[0],
                                  'event_end_date' => $d[0],
                                  'date_array' => $date_array,
                                  'end_date' => $d[0],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'unique_key' => $unique_key,
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                               );
                      }

                  }
                  //////////Yearly  store
                  if($this->input->post('event_repeat_option') == 'Yearly')
                  {
                  $start=$event_start_date;
                  $end=$event_end_date;
                  $format = 'Y-m-d';

                  // Declare an empty array
                  $array = array();
                    
                  // Variable that store the date interval
                  // of period 1 day
                  $interval = new DateInterval('P1D');
                
                  $realEnd = new DateTime($end);
                  $realEnd->add($interval);

                  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
                
                  // Use loop to store date into array
                  foreach($period as $date) {                 
                      $timestamp = strtotime($date->format($format));
                      $day = date('D', $timestamp);

                      $array[] = [$date->format($format),$day]; 
                  }
                  $custom_date_monthly = $array;
                  $first_date_get = $custom_date_monthly[0][0];
                  foreach($custom_date_monthly as $custom_date_monthly_new){
                      $new_date_get[] = $custom_date_monthly_new[0];
                  }
                  $i =0;
                  foreach($new_date_get as $new_date_get_new){
                      $newDate = date('Y-m-d', strtotime($first_date_get. ' + '.$i.' year'));
                      // print_r($new_date_get_new);
                      //     die;
                      if($newDate === $new_date_get_new){
                          $new_array_monthly_date[] = $newDate;
                          $i++;
                      }else{
                      }
                  }
                  $d_array=$array;
                  $weekday_date=[];
                  //print_r($new_array_monthly_date);
                 $custom_check_array = $new_array_monthly_date;
                 foreach($d_array as $d)
                      {
                          foreach($custom_check_array as $custom_check_array_new){
                          if($d[0]==$custom_check_array_new)
                              {
                              $weekday_date[]=$d;  
                              }
                          }
                      }
                  $final=[];
                  $array_key=0;
                  foreach($weekday_date as $wd)
                      {
                      $final[$array_key][]=$wd[0];
                      if($wd[1]=='Fri'){$array_key++;}    
                      } 

                  $data1=[];    
                  foreach($weekday_date as $d)
                      {
                          $da = $this->displayDates($d[0], $d[0]);
                          $date_array = json_encode($da);
                          $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'event_name' => $this->input->post('event_name'),
                                  'event_color' => $this->input->post('event_color'),
                                  'event_note' => $this->input->post('event_note'),
                                  'event_start_date' => $d[0],
                                  'event_end_date' => $d[0],
                                  'date_array' => $date_array,
                                  'end_date' => $d[0],
                                  'event_start_time' => $event_start_time,
                                  'event_end_time' => $event_end_time,
                                  'event_repeat_option' => 'Does not repeat',
                                  'event_allDay' => $allDay,
                                  'event_reminder' => $event_reminder,
                                  'draggable_event' => $this->input->post('draggable_event'),
                                  'draggable_id' => $response['drag_id'],
                                  'unique_key' => $unique_key,
                                  'type' => $this->input->post('type'),
                                  'status' => 'active',
                                  'date' => date('Y-m-d H:i:s'),
                                  'event_repeat_option_type' => $this->input->post('event_repeat_option'),
                                  'created_type' => $this->input->post('created_type'),
                                  'task_priority' => $this->input->post('task_priority'),
                                  'id' => $this->input->post('delete_check') == 0 ? $this->input->post('event_id') :'',
                                  'event_reminder_send' => '',
                                  'in_app_reminder' => '',
                                  'meeting_link' => $this->input->post('meeting_link'),
                                  'meeting_location' => $this->input->post('meeting_location'),
                                  'meeting_agenda' => $this->input->post('meeting_agenda'),
                                  'portfolio_id' => $this->input->post('portfolio_id'),
                                  'mfile' => $mfile_upload,
                               );
                      }

                  }
              
              $data1 = $this->security->xss_clean($data1); // xss filter
              $this->db->insert_batch('events', $data1); 
              $org_inserted_id = $this->db->insert_id();
              $inserted_id = 1;
              $response['event_id'] = $inserted_id;

              $count_new_d1 = count($data1);
              //$last_id = $org_inserted_id + ($count_new_d1-1);
              // echo $count_new_d1.'<br>';
              // echo $last_id;
              // echo $org_inserted_id;
              // die();

              if(empty($this->session->userdata('get_existing_id_sess')))
              {
                if($this->input->post('created_type') == 'meeting')
                {
                  $myTMArray = explode(',', $this->input->post('selected_T_member'));
                  if(!empty($myTMArray[0]))
                  {
                    for($ind=0; $ind<$count_new_d1; $ind++) 
                    { 
                      $get_ind = $org_inserted_id + $ind;
                      foreach($myTMArray as $m)
                      {
                        $data = array(
                            'event_id' => $get_ind,
                            'event_unique_key' => $unique_key,
                            'member' => trim($m),
                            'status' => 'invite',
                            'status_date' => date('Y-m-d H:i:s'),
                            'created_by' => $this->session->userdata('d168_id'),
                            'created_type' => $this->input->post('created_type'),
                            'm_date' => date('Y-m-d H:i:s'),
                                              );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_events_meeting($data);
                      }
                    }                  
                  }
                }
              }
              
              // delete all existing members and insert new if meeting type changed
              if(!empty($this->session->userdata('get_existing_id_sess_created_type')))
              {
                if($this->input->post('created_type') == 'meeting')
                {
                  $this->Front_model->delete_meeting($unique_key);
                  $myTMArray = explode(',', $this->input->post('selected_T_member'));
                  if(!empty($myTMArray[0]))
                  {
                    for($ind=0; $ind<$count_new_d1; $ind++) 
                    { 
                      $get_ind = $org_inserted_id + $ind;
                      foreach($myTMArray as $m)
                      {
                        $data = array(
                            'event_id' => $get_ind,
                            'event_unique_key' => $unique_key,
                            'member' => trim($m),
                            'status' => 'invite',
                            'status_date' => date('Y-m-d H:i:s'),
                            'created_by' => $this->session->userdata('d168_id'),
                            'created_type' => $this->input->post('created_type'),
                            'm_date' => date('Y-m-d H:i:s'),
                                              );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_events_meeting($data);
                      }
                    }                  
                  }
                }
              }

              $myTMArray_new = explode(',', $this->input->post('selected_T_member'));
                // for email send or not to removed mem
                  $removedeventmem = '';
                  $removedmem = array();
                  $get_removedmem = '';
                // for email send or not to removed mem
              //update members + add new members on existing meeting
              if(!empty($this->session->userdata('get_existing_id_sess')))
              {
                $extract_id = explode(',',$this->session->userdata('get_existing_id_sess'));
                // echo '<pre>';
                // print_r($extract_id).'<br>';
                if($extract_id)
                {
                  $count_eid = count($extract_id);
                  //echo $count_eid.'<br>';
                  for($chkem=0; $chkem<$count_eid; $chkem++)
                  {
                    // check existing members remove from selected values
                    $check_if_meeting = $this->Front_model->getEventMeeting($extract_id[$chkem]);
                    $all_ptm = array();
                    if($check_if_meeting)
                    {
                      //echo "1";
                      foreach($check_if_meeting as $all_tm)
                      {
                        $all_ptm[] = $all_tm->member;
                      }
                    }
                    $no_more_mem = array_diff($all_ptm,$myTMArray_new);
                    foreach($no_more_mem as $no_mem)
                    {
                      // echo "2";
                      // for email send or not to removed mem
                        $removedeventmem = 'yes';
                        $removedmem[] = $no_mem;
                      // for email send or not to removed mem
                      //$this->Front_model->delete_meeting_member($extract_id[$chkem],$no_mem);
                    }
                    // check existing members remove from selected values

                    // update existing members id
                    if(!empty($check_if_meeting))
                    {
                      //echo "4";
                      //echo "yes2";
                      for($new_id_m=0; $new_id_m<$count_new_d1; $new_id_m++)
                      {
                        if($new_id_m == $chkem)
                        {
                        //echo "yes3";
                          $new_inserted_id = $org_inserted_id + $new_id_m;
                          $sql_qm = $this->db->query("UPDATE `events_meeting` SET `event_id` = '".$new_inserted_id."' WHERE `event_id` = '".$extract_id[$chkem]."'");
                        }
                      }
                    }
                    // update existing members id
                  }

                  // add new members
                  for($eid=0; $eid<$count_new_d1; $eid++)
                  {
                    $new_ids = $org_inserted_id + $eid;
                    //echo $new_ids.'<br>';                    
                    if((!empty($myTMArray_new[0])) && (empty($this->session->userdata('get_existing_id_sess_created_type'))))
                    {
                      //echo "3";
                     //$new_ids = $extract_id[$eid] + 1;
                      foreach($myTMArray_new as $m_new)
                      {
                        // echo $m_new;
                        $check_pm = $this->Front_model->check_evt_meeting_pm($m_new,$new_ids);
                        //print_r($check_pm);
                        if(empty($check_pm))
                        {
                          $getEID = $this->Front_model->getStudentById($m_new);
                          $newID = 'yes';
                          if($getEID)
                          {
                            $check_mids = $this->Front_model->check_evt_meeting_invited_ids($unique_key,$getEID->email_address);
                            if(!empty($check_mids))
                            {
                              $newID = 'no';
                            }
                          }

                          if($newID == 'yes')
                          {
                            //echo 'yes';
                            $data = array(
                                'event_id' => $new_ids,
                                'event_unique_key' => $unique_key,
                                'member' => trim($m_new),
                                'status' => 'invite',
                                'status_date' => date('Y-m-d H:i:s'),
                                'created_by' => $this->session->userdata('d168_id'),
                                'created_type' => $this->input->post('created_type'),
                                'm_date' => date('Y-m-d H:i:s'),
                                                  );
                            $data = $this->security->xss_clean($data); // xss filter
                            //print_r($data);
                            $this->Front_model->insert_events_meeting($data);
                          }                          
                        }
                      }                
                    }                    
                  }
                  // add new members
                }
              }
              
              /// for inside todo
              if(!empty($this->session->userdata('get_existing_id_sess')))
              {
                $extract_id = explode(',',$this->session->userdata('get_existing_id_sess'));
                //print_r($extract_id);
                if($extract_id)
                {
                  $count_eid = count($extract_id);
                  //echo $count_eid;
                  for($eid=0; $eid<$count_eid; $eid++)
                  {
                    //echo 'yes';
                    $check_if_org_id_exists = $this->Front_model->getEventData($extract_id[$eid]);
                    if(empty($check_if_org_id_exists))
                    {
                      //echo "yes";
                      $check_if_inside_todo = $this->Front_model->getEventTodo($this->session->userdata('d168_id'),$extract_id[$eid]);
                      if(!empty($check_if_inside_todo))
                      {
                        //echo "yes2";
                        for($new_id=0; $new_id<$count_new_d1; $new_id++)
                        {
                          if($new_id == $eid)
                          {
                          //echo "yes3";
                            $new_inserted_id = $org_inserted_id + $new_id;
                            // $data = array(
                            //            'event_id' => $new_inserted_id,
                            //            'parent_event_id' => $new_inserted_id,
                            //             );
                            // $data = $this->security->xss_clean($data); // xss filter
                            //print_r($data);
                            //echo $extract_id[$eid];
                            //$this->Front_model->edit_events_todo($data,$extract_id[$eid]);

                            $sql_q = $this->db->query("UPDATE `events_todo` SET `event_id` = '".$new_inserted_id."', `parent_event_id` = '".$new_inserted_id."' WHERE `event_id` = '".$extract_id[$eid]."'");
                          }
                        }
                      }
                    }                    
                  }
                }
              $this->session->unset_userdata('get_existing_id_sess');
              }
              $this->session->unset_userdata('get_existing_id_sess_created_type');

              //Send Meeting invites
              $sent_invites = $this->Front_model->SentMeetingInvites($unique_key);
              $evt_detail = $this->Front_model->getEventMeetingDetail($unique_key);
              $mee_owner = $this->Front_model->getStudentById($evt_detail->student_id);
              $get_portfolio_name = $this->Front_model->getPortfolioName($evt_detail->portfolio_id);
              if($get_portfolio_name)
              {
                if($get_portfolio_name->portfolio_user == 'company')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
                elseif($get_portfolio_name->portfolio_user == 'individual')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name.' '.$get_portfolio_name->portfolio_lname;
                }
                else
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
              }
              $evt_date_time = '';
              if($evt_detail->event_allDay == 'true')
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                }
              }
              else
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                }
              }
              if($sent_invites)
              {
                foreach($sent_invites as $si)
                {
                  $mem = $this->Front_model->getStudentById($si->member);
                  if($mem)
                  {
                    //echo $si->member.'<br>';
                    $InviteEmailID = $mem->email_address;
                    $email_to = $InviteEmailID;
                    $email_from = 'hello@decision168.com'; 
                    //$email_from = 'saramaazkhan123@gmail.com'; 
                    $email_name = 'Decision 168';

                    $this->load->library('email');  
                    $config=array(
                      'charset'=>'utf-8',
                      'wordwrap'=> TRUE,
                      'mailtype' => 'html'
                      );
                    $this->email->initialize($config);
                    $this->email->from($email_from, $email_name);
                    $this->email->set_header('Reply-To', $email_from."\r\n");
                    $this->email->set_header('Return-Path', $email_from."\r\n");
                    $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                    $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                    $this->email->to($email_to);
                    $this->email->set_mailtype('html');
                    $this->email->subject('Meeting Request | Decision 168');
                    $this->email->message('                 
                        <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>Meeting Request</title>
                  <meta name="description" content="Meeting Request">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Meeting...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.ucfirst($mem->first_name).',<br><br>
                                                         '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).' has invited you to join a meeting of '.$mee_portfolio.' portfolio. Just click the appropriate button below.
                                                          <br><br>
                                                          Title: '.$evt_detail->event_name.'
                                                          <br>
                                                          Link: <a href="'.$evt_detail->meeting_link.'" target="_blank">'.$evt_detail->meeting_link.'</a>
                                                          <br>
                                                          Location: '.$evt_detail->meeting_location.'
                                                          <br>
                                                          Date: '.$evt_date_time.'
                                                          <br>
                                                          Reminder: '.$evt_detail->event_reminder.'
                                                          <br>
                                                          Type: '.$evt_detail->event_repeat_option_type.'
                                                          <br>
                                                          Agenda: <div style="color: #fff !important;text-align: left;">'.$evt_detail->meeting_agenda.'</div>
                                                          <br><br>
                                                      </p>
                                                      <a href="'.base_url('meeting-request/'.$unique_key.'/'.$si->member.'/'.'1').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept</a>
                                                      <a href="'.base_url('meeting-request/'.$unique_key.'/'.$si->member.'/'.'2').'"
                                                          style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reject</a> 
                                                          <br><br>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                                  );
                    $this->email->send();
                    //echo $this->email->print_debugger();
                    $updata = array(
                        'status' => 'invited',
                        'status_date' => date('Y-m-d H:i:s'),
                                          );
                    $updata = $this->security->xss_clean($updata); // xss filter
                    $this->Front_model->update_meeting_invites($updata,$si->member,$unique_key);
                  }
                    //echo 'check';
                }
              }


              //invite more meeting member
              if(!empty($imemail_array[0]))
              {
                  $get_meeting_members_emailids = $this->Front_model->get_meeting_members_emailids($unique_key);
                  if($get_meeting_members_emailids)
                  {
                    $myIM_Array = explode(',', $imemail_array);//invite team member array                    
                    $all_itm = array();
                    foreach($get_meeting_members_emailids as $all_itms)
                    {
                      //echo $all_itms->member;
                      $all_itm[] = $all_itms->member;
                    }
                    $no_more_imem = array_diff($all_itm,$myIM_Array);
                    if(!empty($no_more_imem))
                    {
                      $myIM_Array_extracted = array();
                      foreach($no_more_imem as $no_imem)
                      {
                        // for email send or not to removed mem
                          $removedeventmem = 'yes';
                          $removedmem[] = $no_imem;
                          if (($key = array_search($no_imem, $myIM_Array)) !== false) {
                              unset($myIM_Array[$key]);
                          }
                          //$myIM_Array_extracted[] = $no_imem;
                        // for email send or not to removed mem
                      }
                      $myIM_Array_extracted = $myIM_Array;
                    }
                    else
                    {
                      $myIM_Array_extracted = explode(',', $imemail_array);//invite team member array                    
                    }                    
                    //print_r($myIM_Array_extracted);
                  }
                  else
                  {
                    $myIM_Array_extracted = explode(',', $imemail_array);//invite team member array                    
                  }
                  //print_r($myIM_Array_extracted);
                  foreach($myIM_Array_extracted as $im)
                  {
                    $check_if_invited = $this->Front_model->check_events_meeting_invited_members($im,$unique_key);
                    if($check_if_invited == 0)
                    {                    
                      $check_if_registered = $this->Front_model->selectLogin($im);
                      if($check_if_registered)
                      {
                        if($check_if_registered->reg_id != $this->session->userdata('d168_id'))
                        {
                          if(!in_array($check_if_registered->reg_id, $myTMArray_new))
                          {
                            $data = array(
                              'event_unique_key' => $unique_key,
                              'member' => trim($im),
                              'status' => 'invited',
                              'status_date' => date('Y-m-d H:i:s'),
                              'sent_by' => $this->session->userdata('d168_id'),
                              'invite_date' => date('Y-m-d H:i:s'),
                              'portfolio_id' => $this->input->post('portfolio_id'),
                                                );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_events_meeting_invited_members($data);
                          $im_minserted_id = $this->db->insert_id();  

                          $InviteEmailID = $check_if_registered->email_address;
                          $email_to = $InviteEmailID;
                          $email_from = 'hello@decision168.com'; 
                          //$email_from = 'saramaazkhan123@gmail.com'; 
                          $email_name = 'Decision 168';

                          $this->load->library('email');  
                          $config=array(
                            'charset'=>'utf-8',
                            'wordwrap'=> TRUE,
                            'mailtype' => 'html'
                            );
                          $this->email->initialize($config);
                          $this->email->from($email_from, $email_name);
                          $this->email->set_header('Reply-To', $email_from."\r\n");
                          $this->email->set_header('Return-Path', $email_from."\r\n");
                          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                          $this->email->to($email_to);
                          $this->email->set_mailtype('html');
                          $this->email->subject('Meeting Request | Decision 168');
                          $this->email->message('                 
                  <!doctype html>
                  <html lang="en-US">

                  <head>
                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                    <title>Meeting Request</title>
                    <meta name="description" content="Meeting Request">
                    <style type="text/css">
                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                    </style>
                  </head>

                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                    <!--100% body table-->

                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                        <tr>
                            <td>
                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                          </a>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                                <tr>
                                                    <td style="padding:0 35px;">
                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Meeting...</h1>
                                                        <span
                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Hello '.ucfirst($check_if_registered->first_name).',<br><br>
                                                           '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).' has invited you to join a meeting of '.$mee_portfolio.' portfolio. Just click the appropriate button below.
                                                            <br><br>
                                                            Title: '.$evt_detail->event_name.'
                                                            <br>
                                                            Link: <a href="'.$evt_detail->meeting_link.'" target="_blank">'.$evt_detail->meeting_link.'</a>
                                                            <br>
                                                            Location: '.$evt_detail->meeting_location.'
                                                            <br>
                                                            Date: '.$evt_date_time.'
                                                            <br>
                                                            Reminder: '.$evt_detail->event_reminder.'
                                                            <br>
                                                            Type: '.$evt_detail->event_repeat_option_type.'
                                                            <br>
                                                            Agenda: <div style="color: #fff !important;text-align: left;">'.$evt_detail->meeting_agenda.'</div>
                                                            <br><br>
                                                        </p>
                                                        <a href="'.base_url('meeting-request-invited-member/'.$unique_key.'/'.$im_minserted_id.'/'.'1').'"
                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept</a>
                                                        <a href="'.base_url('meeting-request-invited-member/'.$unique_key.'/'.$im_minserted_id.'/'.'2').'"
                                                            style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reject</a> 
                                                            <br><br>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            Thanks,
                                                            <br>
                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                            </p>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                            <br>
                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                            </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                        <br>
                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <!--/100% body table-->
                  </body>

                  </html>' 
                                    );
                          $this->email->send();
                          }
                        }
                      }
                      else
                      {
                      $data = array(
                            'event_unique_key' => $unique_key,
                            'member' => trim($im),
                            'status' => 'invited',
                            'status_date' => date('Y-m-d H:i:s'),
                            'sent_by' => $this->session->userdata('d168_id'),
                            'invite_date' => date('Y-m-d H:i:s'),
                            'portfolio_id' => $this->input->post('portfolio_id'),
                                              );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_events_meeting_invited_members($data);
                        $im_minserted_id = $this->db->insert_id();  

                        $InviteEmailID = trim($im);
                        $email_to = $InviteEmailID;
                        $email_from = 'hello@decision168.com'; 
                        //$email_from = 'saramaazkhan123@gmail.com'; 
                        $email_name = 'Decision 168';

                        $this->load->library('email');  
                        $config=array(
                          'charset'=>'utf-8',
                          'wordwrap'=> TRUE,
                          'mailtype' => 'html'
                          );
                        $this->email->initialize($config);
                        $this->email->from($email_from, $email_name);
                        $this->email->set_header('Reply-To', $email_from."\r\n");
                        $this->email->set_header('Return-Path', $email_from."\r\n");
                        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                        $this->email->to($email_to);
                        $this->email->set_mailtype('html');
                        $this->email->subject('Meeting Request | Decision 168');
                        $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>Meeting Request</title>
                  <meta name="description" content="Meeting Request">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Meeting...</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello ,<br><br>
                                                         '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).' has invited you to join a meeting of '.$mee_portfolio.' portfolio. Just click the appropriate button below.
                                                          <br><br>
                                                          Title: '.$evt_detail->event_name.'
                                                          <br>
                                                          Link: <a href="'.$evt_detail->meeting_link.'" target="_blank">'.$evt_detail->meeting_link.'</a>
                                                          <br>
                                                          Location: '.$evt_detail->meeting_location.'
                                                          <br>
                                                          Date: '.$evt_date_time.'
                                                          <br>
                                                          Reminder: '.$evt_detail->event_reminder.'
                                                          <br>
                                                          Type: '.$evt_detail->event_repeat_option_type.'
                                                          <br>
                                                          Agenda: <div style="color: #fff !important;text-align: left;">'.$evt_detail->meeting_agenda.'</div>
                                                          <br><br>
                                                      </p>
                                                      <a href="'.base_url('meeting-request-invited-member/'.$unique_key.'/'.$im_minserted_id.'/'.'1').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept</a>
                                                      <a href="'.base_url('meeting-request-invited-member/'.$unique_key.'/'.$im_minserted_id.'/'.'2').'"
                                                          style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reject</a> 
                                                          <br><br>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                                  );
                        $this->email->send();
                      }
                    }
                  }
                }
                else
                {
                  $get_meeting_members_emailids = $this->Front_model->get_meeting_members_emailids($unique_key);
                  if($get_meeting_members_emailids)
                  {
                    foreach($get_meeting_members_emailids as $all_itms)
                    {
                      // for email send or not to removed mem
                        $removedeventmem = 'yes';
                        $removedmem[] = $all_itms->member;
                      // for email send or not to removed mem
                    }                 
                  }
                }

              // print_r($sql_q);
              //die();
            //$this->Front_model->update_events_todo_series($sql_q);

              //echo $get_res;

              //die();
 

      //     if($this->input->post('task_name') != ""){
      //       $task_start_date  = $this->input->post('task_start_date');
      //       $task_start_time  = date("H:i:s", strtotime($this->input->post('task_start_time')));

      //       $task_allDay = $this->input->post('task_allDay');
      //       if($task_allDay == 'on'){
      //         $task_allDay = 'true';
      //         $task_start_time  = '00:00:00';
      //       }else{
      //         $task_allDay = 'false';
      //       }

      //     $data = array( 'student_id' => $this->session->userdata('d168_id'),
      //                  'event_id' => $inserted_id,
      //                  'task_name' => $this->input->post('task_name'),
      //                  'task_note' => $this->input->post('task_note'),
      //                  'task_start_date' => $this->input->post('task_start_date'),
      //                  'task_start_time' => $task_start_time,
      //                  'task_allDay' => $task_allDay,
      //                  'task_reminder' => $this->input->post('task_reminder'),
      //                  'task_category' => $this->input->post('task_category'),
      //                  'priority' => $this->input->post('priority'),
      //                  'status' => 'active',
      //                  'date' => date('Y-m-d H:i:s')
      //               );
      //     $data = $this->security->xss_clean($data); // xss filter
      //     $this->Front_model->insertTask($data);
      //     $inserted_id = $this->db->insert_id();
      //     $response['task_id'] = $inserted_id;
      //     $response['task_allDay'] = $task_allDay;
      // }

          // for email send or not to removed mem
            $get_removedmem = implode(',',array_unique($removedmem));
            $response['removedeventmem'] = $removedeventmem;
            $response['removedmem'] = $get_removedmem;              
            $response['removedunique_key'] = $unique_key; 
          // for email send or not to removed mem

          $response['type'] = $type;
          $response['allDay'] = $allDay;              
          $response['start_date'] = $event_start_date;                
          $response['end_date'] = $event_end_date;                
          $response['event_start_date'] = $sdd[0];                
          $response['event_end_date'] = $sdd[1];              
          $response['event_note'] = $this->input->post('event_note');             
          $response['event_start_time'] = $event_start_time;              
          $response['event_end_time'] = $event_end_time;              
          $response['event_repeat_option'] = $this->input->post('event_repeat_option');
          $response['event_allDay'] = $allDay; 
          $response['event_reminder'] = $event_reminder;         
          $response['draggable_event'] = $this->input->post('draggable_event');       
          $response['draggable_id'] = $response['drag_id'];                   
          $response['status'] = TRUE;
          $response['event_repeat_option_type'] = $this->input->post('event_repeat_option');
          $response['created_type'] = $this->input->post('created_type');
          $response['task_priority'] = $this->input->post('task_priority');
          //$this->session->set_flashdata('message', 'Successfully Created'); 
          header('Content-type: application/json');
          echo json_encode($response); 
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function get_calendar_events()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $month_year = $this->input->post('month_year');
      // if(($month_year != 'undefined') && ($month_year != '')){
      //  $month_year = str_replace('GMT+0530 (India Standard Time)','',$month_year);
      //  $month_year = date("Y-m", strtotime($month_year));
      // }else{
      //  $month_year = date('Y-m');
      // }
      $month_year = date('Y-m');
      $data = $this->Front_model->getCalendarMonthEvents($student_id,$month_year);
      //$data1 = $this->Front_model->getMontsWithcycle($student_id,$month_year);
      
      // foreach ($data1 as $data12) {
      // $data_array_cyc = array();
      // $data15 = array('start_cycle' => $data12->start_cycle);
      // } 

      //$data_array_cyc[] = $data15;
      $format = 'Y-m-d';
      $data_array = array();
      $data_array_1 = array();
      $data_array_2 = array();
      $data_array_3 = array();
      $data_array_4 = array();
      $data_array_5 = array();  
      $data_array_6 = array();
      if($data){
          foreach ($data as $d)
              {
              $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
              $array_count = count($all_data);
              $isLast = $this->Front_model->getDataIsLast($d->id);
              $isLastCount = count($isLast);
              if($d->event_repeat_option == 'Does not repeat')
              {              
                  $event_start_date = date($format, strtotime($d->event_start_date));
                  $event_end_date = date($format, strtotime($d->event_end_date));
                  
                  $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'id' => $d->id,
                                  'event_name' => $d->event_name,
                                  'event_color' => $d->event_color,
                                  'event_note' => $d->event_note,
                                  'event_start_date' => $event_start_date,
                                  'event_end_date' => $event_end_date,
                                  'event_start_time' => $d->event_start_time,
                                  'event_end_time' => $d->event_end_time,
                                  'event_repeat_option' => $d->event_repeat_option,
                                  'event_allDay' => $d->event_allDay,
                                  'event_reminder' => $d->event_reminder,
                                  'draggable_event' => $d->draggable_event,
                                  'draggable_id' => $d->draggable_id,
                                  'type' => $d->type,
                                  'unique_key' => $d->unique_key,
                                  'custom_all_day' => $d->custom_all_day,
                                  'event_repeat_option_type' => $d->event_repeat_option_type,
                                  'array_count' => $array_count,
                                  'isLastCount' => $isLastCount,
                                  'created_type' => $d->created_type,
                                  'task_priority' => $d->task_priority,                                  
                                  'meeting_link' => $d->meeting_link,                                  
                                  'meeting_location' => $d->meeting_location,
                                  'meeting_agenda' => $d->meeting_agenda,
                                  'portfolio_id' => $d->portfolio_id,
                                  'mowner' => $d->student_id,
                                  'call_id' => $d->call_id, 
                                  'cm_id' => $d->cm_id,                         
                                  'call_rate' => $d->call_rate,
                               );
                  $data_array_1[] = $data1;
              }
              else if($d->event_repeat_option == 'Daily'){
                  $event_start_date = strtotime($d->event_start_date);
                  $event_end_date = strtotime($d->event_end_date);
                  $start_date = strtotime($d->event_start_date);  
                  $end_date = strtotime($d->end_date);  
                  if(date('Y-m',$start_date) != date('Y-m',$end_date))
                  {
                      if(date('Y-m',$start_date) < $month_year){
                          $start_date = date("Y-m-01", strtotime($month_year));
                          $start_date = strtotime($start_date);                            
                      }else{
                          $end_date = date("Y-m-t", strtotime($month_year));
                          $end_date = strtotime($end_date);
                      }
                  }
                  // Formulate the Difference between two dates
                  $diff = abs($event_start_date - $event_end_date); 
                  $years = floor($diff / (365*60*60*24));   
                  $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                  $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                  $day = '+'.$days.' days';
                  $stepVal = '+1 day';                  
                  while( $start_date <= $end_date ) {
                      $event_start_date = date($format, $start_date);
                      $event_end_date = date($format, strtotime($day, $start_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'custom_all_day' => $d->custom_all_day,
                                      'type' => $d->type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id, 
                                      'cm_id' => $d->cm_id,                         
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array_2[] = $data1;
                      $start_date = strtotime($stepVal, $start_date);
                  }
              }
          }
      }

      $mdata = $this->Front_model->getCalendarMonthMeetings($student_id,$month_year);
      if($mdata){
          foreach ($mdata as $d)
              {
              $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
              $array_count = count($all_data);
              $isLast = $this->Front_model->getDataIsLast($d->id);
              $isLastCount = count($isLast);
              if($d->event_repeat_option == 'Does not repeat')
              {              
                  $event_start_date = date($format, strtotime($d->event_start_date));
                  $event_end_date = date($format, strtotime($d->event_end_date));
                  
                  $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'id' => $d->id,
                                  'event_name' => $d->event_name,
                                  'event_color' => $d->event_color,
                                  'event_note' => $d->event_note,
                                  'event_start_date' => $event_start_date,
                                  'event_end_date' => $event_end_date,
                                  'event_start_time' => $d->event_start_time,
                                  'event_end_time' => $d->event_end_time,
                                  'event_repeat_option' => $d->event_repeat_option,
                                  'event_allDay' => $d->event_allDay,
                                  'event_reminder' => $d->event_reminder,
                                  'draggable_event' => $d->draggable_event,
                                  'draggable_id' => $d->draggable_id,
                                  'type' => $d->type,
                                  'unique_key' => $d->unique_key,
                                  'custom_all_day' => $d->custom_all_day,
                                  'event_repeat_option_type' => $d->event_repeat_option_type,
                                  'array_count' => $array_count,
                                  'isLastCount' => $isLastCount,
                                  'created_type' => $d->created_type,
                                  'task_priority' => $d->task_priority,                                  
                                  'meeting_link' => $d->meeting_link,                           
                                  'meeting_location' => $d->meeting_location,
                                  'meeting_agenda' => $d->meeting_agenda,
                                  'portfolio_id' => $d->portfolio_id,
                                  'mowner' => $d->student_id,
                                  'call_id' => $d->call_id, 
                                  'cm_id' => $d->cm_id,                         
                                  'call_rate' => $d->call_rate,
                               );
                  $data_array_3[] = $data1;
              }
              else if($d->event_repeat_option == 'Daily'){
                  $event_start_date = strtotime($d->event_start_date);
                  $event_end_date = strtotime($d->event_end_date);
                  $start_date = strtotime($d->event_start_date);  
                  $end_date = strtotime($d->end_date);  
                  if(date('Y-m',$start_date) != date('Y-m',$end_date))
                  {
                      if(date('Y-m',$start_date) < $month_year){
                          $start_date = date("Y-m-01", strtotime($month_year));
                          $start_date = strtotime($start_date);                            
                      }else{
                          $end_date = date("Y-m-t", strtotime($month_year));
                          $end_date = strtotime($end_date);
                      }
                  }
                  // Formulate the Difference between two dates
                  $diff = abs($event_start_date - $event_end_date); 
                  $years = floor($diff / (365*60*60*24));   
                  $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                  $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                  $day = '+'.$days.' days';
                  $stepVal = '+1 day';                  
                  while( $start_date <= $end_date ) {
                      $event_start_date = date($format, $start_date);
                      $event_end_date = date($format, strtotime($day, $start_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'custom_all_day' => $d->custom_all_day,
                                      'type' => $d->type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id, 
                                      'cm_id' => $d->cm_id,                         
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array_4[] = $data1;
                      $start_date = strtotime($stepVal, $start_date);
                  }
              }
          }
      }

      $bdata = $this->Front_model->getCalendarMonthCallBookings($student_id,$month_year);
      if($bdata){
          foreach ($bdata as $d)
              {
              $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
              $array_count = count($all_data);
              $isLast = $this->Front_model->getDataIsLast($d->id);
              $isLastCount = count($isLast);
              if($d->event_repeat_option == 'Does not repeat')
              {              
                  $event_start_date = date($format, strtotime($d->event_start_date));
                  $event_end_date = date($format, strtotime($d->event_end_date));
                  
                  $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                  'id' => $d->id,
                                  'event_name' => $d->event_name,
                                  'event_color' => $d->event_color,
                                  'event_note' => $d->event_note,
                                  'event_start_date' => $event_start_date,
                                  'event_end_date' => $event_end_date,
                                  'event_start_time' => $d->event_start_time,
                                  'event_end_time' => $d->event_end_time,
                                  'event_repeat_option' => $d->event_repeat_option,
                                  'event_allDay' => $d->event_allDay,
                                  'event_reminder' => $d->event_reminder,
                                  'draggable_event' => $d->draggable_event,
                                  'draggable_id' => $d->draggable_id,
                                  'type' => $d->type,
                                  'unique_key' => $d->unique_key,
                                  'custom_all_day' => $d->custom_all_day,
                                  'event_repeat_option_type' => $d->event_repeat_option_type,
                                  'array_count' => $array_count,
                                  'isLastCount' => $isLastCount,
                                  'created_type' => $d->created_type,
                                  'task_priority' => $d->task_priority,                                  
                                  'meeting_link' => $d->meeting_link,                           
                                  'meeting_location' => $d->meeting_location,
                                  'meeting_agenda' => $d->meeting_agenda,
                                  'portfolio_id' => $d->portfolio_id,
                                  'mowner' => $d->student_id,
                                  'call_id' => $d->call_id,
                                  'cm_id' => $d->cm_id,                        
                                  'call_rate' => $d->call_rate,
                               );
                  $data_array_5[] = $data1;
              }
              else if($d->event_repeat_option == 'Daily'){
                  $event_start_date = strtotime($d->event_start_date);
                  $event_end_date = strtotime($d->event_end_date);
                  $start_date = strtotime($d->event_start_date);  
                  $end_date = strtotime($d->end_date);  
                  if(date('Y-m',$start_date) != date('Y-m',$end_date))
                  {
                      if(date('Y-m',$start_date) < $month_year){
                          $start_date = date("Y-m-01", strtotime($month_year));
                          $start_date = strtotime($start_date);                            
                      }else{
                          $end_date = date("Y-m-t", strtotime($month_year));
                          $end_date = strtotime($end_date);
                      }
                  }
                  // Formulate the Difference between two dates
                  $diff = abs($event_start_date - $event_end_date); 
                  $years = floor($diff / (365*60*60*24));   
                  $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                  $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                  $day = '+'.$days.' days';
                  $stepVal = '+1 day';                  
                  while( $start_date <= $end_date ) {
                      $event_start_date = date($format, $start_date);
                      $event_end_date = date($format, strtotime($day, $start_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'custom_all_day' => $d->custom_all_day,
                                      'type' => $d->type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id,
                                      'cm_id' => $d->cm_id,                        
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array_6[] = $data1;
                      $start_date = strtotime($stepVal, $start_date);
                  }
              }
          }
      }  

      $data_array = array_merge($data_array_1,$data_array_2,$data_array_3,$data_array_4,$data_array_5,$data_array_6);
      header('Content-type: application/json');
      echo json_encode($data_array);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function get_allcalendar_events()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $month_year = $this->input->post('month_year');
      $button = $this->input->post('button');
      $words = explode(' ', $month_year);
      $count_my = count($words);
      // if($button == 'prev'){
      //     if($count_my == 2){
      //       $month_year = date("Y-m", strtotime($month_year. " -1 month"));
      //       $data = $this->Front_model->getCalendarMonthEvents($student_id,$month_year);
      //       $format = 'Y-m-d';
      //       $data_array = array();
      //       if($data){
      //           foreach ($data as $d) {
      //               $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
      //               $array_count = count($all_data);
      //               $isLast = $this->Front_model->getDataIsLast($d->id);
      //               $isLastCount = count($isLast);
      //               if($d->event_repeat_option == 'Does not repeat')
      //               {              
      //                   $event_start_date = date($format, strtotime($d->event_start_date));
      //                   $event_end_date = date($format, strtotime($d->event_end_date));
      //                   $data1 = array( 'student_id' => $this->session->userdata('student_id'),
      //                                   'id' => $d->id,
      //                                   'event_name' => $d->event_name,
      //                                   'event_color' => $d->event_color,
      //                                   'event_note' => $d->event_note,
      //                                   'event_start_date' => $event_start_date,
      //                                   'event_end_date' => $event_end_date,
      //                                   'event_start_time' => $d->event_start_time,
      //                                   'event_end_time' => $d->event_end_time,
      //                                   'event_repeat_option' => $d->event_repeat_option,
      //                                   'event_allDay' => $d->event_allDay,
      //                                   'event_reminder' => $d->event_reminder,
      //                                   'draggable_event' => $d->draggable_event,
      //                                   'draggable_id' => $d->draggable_id,
      //                                   'type' => $d->type,
      //                                   'custom_all_day' => $d->custom_all_day,
      //                                   'unique_key' => $d->unique_key,
      //                                   'event_repeat_option_type' => $d->event_repeat_option_type,
      //                                   'array_count' => $array_count,
      //                                   'isLastCount' => $isLastCount,
      //                                   'created_type' => $d->created_type,
      //                                   'task_priority' => $d->task_priority,
      //                                );
      //                   $data_array[] = $data1;
      //               }
      //               else if($d->event_repeat_option == 'Daily'){
      //                   $event_start_date = strtotime($d->event_start_date);
      //                   $event_end_date = strtotime($d->event_end_date);

      //                   $start_date = strtotime($d->event_start_date);  
      //                   $end_date = strtotime($d->end_date);  
      //                   if(date('Y-m',$start_date) != date('Y-m',$end_date))
      //                   {
      //                       if(date('Y-m',$start_date) < $month_year){
      //                           if(date('Y-m',$end_date) != $month_year){
      //                               $start_date = date("Y-m-01", strtotime($month_year));
      //                               $start_date = strtotime($start_date);

      //                               $end_date = date("Y-m-t", strtotime($month_year));
      //                               $end_date = strtotime($end_date);
      //                           }else{
      //                               $start_date = date("Y-m-01", $end_date);
      //                               $start_date = strtotime($start_date);
      //                           }
      //                       }else{
      //                           $end_date = date("Y-m-t", $start_date);
      //                           $end_date = strtotime($end_date);
      //                       }
                            
      //                   }

      //                   // Formulate the Difference between two dates
      //                   $diff = abs($event_start_date - $event_end_date); 
      //                   $years = floor($diff / (365*60*60*24));   
      //                   $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
      //                   $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
      //                   $day = '+'.$days.' days';
      //                   $stepVal = '+1 day';                    
      //                   while( $start_date <= $end_date ) {
      //                       $event_start_date = date($format, $start_date);
      //                       $event_end_date = date($format, strtotime($day, $start_date));
      //                       $data1 = array( 'student_id' => $this->session->userdata('student_id'),
      //                                       'id' => $d->id,
      //                                       'event_name' => $d->event_name,
      //                                       'event_color' => $d->event_color,
      //                                       'event_note' => $d->event_note,
      //                                       'event_start_date' => $event_start_date,
      //                                       'event_end_date' => $event_end_date,
      //                                       'event_start_time' => $d->event_start_time,
      //                                       'event_end_time' => $d->event_end_time,
      //                                       'event_repeat_option' => $d->event_repeat_option,
      //                                       'event_allDay' => $d->event_allDay,
      //                                       'event_reminder' => $d->event_reminder,
      //                                       'draggable_event' => $d->draggable_event,
      //                                       'draggable_id' => $d->draggable_id,
      //                                       'type' => $d->type,
      //                                       'unique_key' => $d->unique_key,
      //                                       'custom_all_day' => $d->custom_all_day,
      //                                       'event_repeat_option_type' => $d->event_repeat_option_type,
      //                                       'array_count' => $array_count,
      //                                       'isLastCount' => $isLastCount,
      //                                       'created_type' => $d->created_type,
      //                                       'task_priority' => $d->task_priority,
      //                                    );
      //                       $data_array[] = $data1;
      //                       $start_date = strtotime($stepVal, $start_date);
      //                   }
      //               }
      //           }
      //       }
      //     }else if($count_my == 3){
      //       $day_list = date("Y-m-d", strtotime($month_year. " -1 days"));
      //       $data = $this->Front_model->getCalendarDlEvents($student_id,$day_list);
      //       $data_array = $data;
      //     }else if($count_my == 5){
      //       $d = $this->input->post('month_year'); //Jul 4 – 10, 2021
      //       $s = explode(" – ", $d);// Array ( [0] => Jul 4 [1] => 10, 2021 )
      //       $m = explode(" ", $s[0]);// Array ( [0] => Jul [1] => 4 )
      //       $y = explode(", ", $s[1]);// Array ( [0] => 10 [1] => 2021 )

      //       $date1 = $s[0].' '.$y[1];//jul 4 2021
      //       $date2 = $m[0].' '.$y[0].' '.$y[1];//jul 10 2021

      //       $date1 = date('Y-m-d', strtotime($date1. " -1 weeks"));
      //       $date2 = date('Y-m-d', strtotime($date2. " -1 weeks"));
      //       $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
      //       $data_array = $data;
      //     }else{
      //       $l = $this->input->post('month_year'); //May 30 – Jun 5, 2021
      //       $s = explode(" – ", $l);//Array ( [0] => May 30 [1] => Jun 5, 2021 )
      //       $m = explode(" ", $s[0]);// Array ( [0] => May [1] => 30 )
      //       $y = explode(", ", $s[1]);//Array ( [0] => Jun 5 [1] => 2021 )

      //       $date1 = $s[0].' '.$y[1];//May 30 2021
      //       $date2 = $y[0].' '.$y[1];//Jun 5 2021

      //       $date1 = date('Y-m-d', strtotime($date1 . " -1 weeks"));
      //       $date2 = date('Y-m-d', strtotime($date2 . " -1 weeks"));
      //       $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
      //       $data_array = $data;
      //     }
      //   }else if($button == 'next'){
      //     if($count_my == 2){
      //       $month_year = date("Y-m", strtotime($month_year. " +1 month"));
      //       $data = $this->Front_model->getCalendarMonthEvents($student_id,$month_year);
      //       $format = 'Y-m-d';
      //       $data_array = array();
      //       if($data){
      //           foreach ($data as $d) {
      //               $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
      //               $array_count = count($all_data);
      //               $isLast = $this->Front_model->getDataIsLast($d->id);
      //               $isLastCount = count($isLast);
      //               if($d->event_repeat_option == 'Does not repeat')
      //               {              
      //                   $event_start_date = date($format, strtotime($d->event_start_date));
      //                   $event_end_date = date($format, strtotime($d->event_end_date));
      //                   $data1 = array( 'student_id' => $this->session->userdata('student_id'),
      //                                   'id' => $d->id,
      //                                   'event_name' => $d->event_name,
      //                                   'event_color' => $d->event_color,
      //                                   'event_note' => $d->event_note,
      //                                   'event_start_date' => $event_start_date,
      //                                   'event_end_date' => $event_end_date,
      //                                   'event_start_time' => $d->event_start_time,
      //                                   'event_end_time' => $d->event_end_time,
      //                                   'event_repeat_option' => $d->event_repeat_option,
      //                                   'event_allDay' => $d->event_allDay,
      //                                   'event_reminder' => $d->event_reminder,
      //                                   'draggable_event' => $d->draggable_event,
      //                                   'draggable_id' => $d->draggable_id,
      //                                   'type' => $d->type,
      //                                   'unique_key' => $d->unique_key,
      //                                   'custom_all_day' => $d->custom_all_day,
      //                                   'event_repeat_option_type' => $d->event_repeat_option_type,
      //                                   'array_count' => $array_count,
      //                                   'isLastCount' => $isLastCount,
      //                                   'created_type' => $d->created_type,
      //                                   'task_priority' => $d->task_priority,
      //                                );
      //                   $data_array[] = $data1;
      //               }
      //               else if($d->event_repeat_option == 'Daily'){
      //                   $event_start_date = strtotime($d->event_start_date);
      //                   $event_end_date = strtotime($d->event_end_date);

      //                   $start_date = strtotime($d->event_start_date);  
      //                   $end_date = strtotime($d->end_date);  
      //                   if(date('Y-m',$start_date) != date('Y-m',$end_date))
      //                   {
      //                       if(date('Y-m',$start_date) < $month_year){
      //                           if(date('Y-m',$end_date) != $month_year){
      //                               $start_date = date("Y-m-01", strtotime($month_year));
      //                               $start_date = strtotime($start_date);

      //                               $end_date = date("Y-m-t", strtotime($month_year));
      //                               $end_date = strtotime($end_date);
      //                           }else{
      //                               $start_date = date("Y-m-01", $end_date);
      //                               $start_date = strtotime($start_date);
      //                           }
      //                       }else{
      //                           $end_date = date("Y-m-t", $start_date);
      //                           $end_date = strtotime($end_date);
      //                       }  
      //                   }
      //                   // Formulate the Difference between two dates
      //                   $diff = abs($event_start_date - $event_end_date);
      //                   $years = floor($diff / (365*60*60*24));
      //                   $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24));
      //                   $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
      //                   $day = '+'.$days.' days';
      //                   $stepVal = '+1 day';            
      //                   while( $start_date <= $end_date ) {
      //                       $event_start_date = date($format, $start_date);
      //                       $event_end_date = date($format, strtotime($day, $start_date));
      //                       $data1 = array( 'student_id' => $this->session->userdata('student_id'),
      //                                       'id' => $d->id,
      //                                       'event_name' => $d->event_name,
      //                                       'event_color' => $d->event_color,
      //                                       'event_note' => $d->event_note,
      //                                       'event_start_date' => $event_start_date,
      //                                       'event_end_date' => $event_end_date,
      //                                       'event_start_time' => $d->event_start_time,
      //                                       'event_end_time' => $d->event_end_time,
      //                                       'event_repeat_option' => $d->event_repeat_option,
      //                                       'event_allDay' => $d->event_allDay,
      //                                       'event_reminder' => $d->event_reminder,
      //                                       'draggable_event' => $d->draggable_event,
      //                                       'draggable_id' => $d->draggable_id,
      //                                       'type' => $d->type,
      //                                       'unique_key' => $d->unique_key,
      //                                       'custom_all_day' => $d->custom_all_day,
      //                                       'event_repeat_option_type' => $d->event_repeat_option_type,
      //                                       'array_count' => $array_count,
      //                                       'isLastCount' => $isLastCount,
      //                                       'created_type' => $d->created_type,
      //                                       'task_priority' => $d->task_priority,
      //                                   );
      //                       $data_array[] = $data1;
      //                       $start_date = strtotime($stepVal, $start_date);
      //                   }
      //               }
      //           }
      //       }
      //     }else if($count_my == 3){
      //       $day_list = date("Y-m-d", strtotime($month_year. " +1 days"));
      //       $data = $this->Front_model->getCalendarDlEvents($student_id,$day_list);
      //       $data_array = $data;
      //     }else if($count_my == 5){
      //       $d = $this->input->post('month_year'); //Jul 4 – 10, 2021
      //       $s = explode(" – ", $d);//Array ( [0] => Jul 4 [1] => 10, 2021 )
      //       $m = explode(" ", $s[0]);// Array ( [0] => Jul [1] => 4 )
      //       $y = explode(", ", $s[1]);//Array ( [0] => 10 [1] => 2021 )

      //       $date1 = $s[0].' '.$y[1];//jul 4 2021
      //       $date2 = $m[0].' '.$y[0].' '.$y[1];//jul 10 2021

      //       $date1 = date('Y-m-d', strtotime($date1. " +1 weeks"));
      //       $date2 = date('Y-m-d', strtotime($date2. " +1 weeks"));
      //       $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
      //       $data_array = $data;
      //     }else{
      //       $l = $this->input->post('month_year'); //May 30 – Jun 5, 2021
      //       $s = explode(" – ", $l);//Array ( [0] => May 30 [1] => Jun 5, 2021 )
      //       $m = explode(" ", $s[0]);// Array ( [0] => May [1] => 30 )
      //       $y = explode(", ", $s[1]);//Array ( [0] => Jun 5 [1] => 2021 )

      //       $date1 = $s[0].' '.$y[1];//May 30 2021
      //       $date2 = $y[0].' '.$y[1];//Jun 5 2021

      //       $date1 = date('Y-m-d', strtotime($date1 . " +1 weeks"));
      //       $date2 = date('Y-m-d', strtotime($date2 . " +1 weeks"));
      //       $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
      //       $data_array = $data;
      //     }
      //   }else
      if($button)
      {
        if($count_my == 2){
          //echo '2';
          $month_year = date("Y-m", strtotime($month_year));
          $data = $this->Front_model->getCalendarMonthEvents($student_id,$month_year);
          $format = 'Y-m-d';
          $data_array = array();
          if($data){
              foreach ($data as $d) {
                  $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
                  $array_count = count($all_data);
                  $isLast = $this->Front_model->getDataIsLast($d->id);
                  $isLastCount = count($isLast);
                  if($d->event_repeat_option == 'Does not repeat')
                  {              
                      $event_start_date = date($format, strtotime($d->event_start_date));
                      $event_end_date = date($format, strtotime($d->event_end_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'type' => $d->type,
                                      'unique_key' => $d->unique_key,
                                      'custom_all_day' => $d->custom_all_day,
                                      'event_repeat_option_type' => $d->event_repeat_option_type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id, 
                                      'cm_id' => $d->cm_id,                         
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array[] = $data1;
                  }
                  else if($d->event_repeat_option == 'Daily'){
                      $event_start_date = strtotime($d->event_start_date);
                      $event_end_date = strtotime($d->event_end_date);

                      $start_date = strtotime($d->event_start_date);
                      $end_date = strtotime($d->end_date);
                      if(date('Y-m',$start_date) != date('Y-m',$end_date))
                      {
                          if(date('Y-m',$start_date) < $month_year){
                              if(date('Y-m',$end_date) != $month_year){
                                  $start_date = date("Y-m-01", strtotime($month_year));
                                  $start_date = strtotime($start_date);

                                  $end_date = date("Y-m-t", strtotime($month_year));
                                  $end_date = strtotime($end_date);
                              }else{
                                  $start_date = date("Y-m-01", $end_date);
                                  $start_date = strtotime($start_date);
                              }
                          }else{
                              $end_date = date("Y-m-t", $start_date);
                              $end_date = strtotime($end_date);
                          }
                      }

                      // Formulate the Difference between two dates
                      $diff = abs($event_start_date - $event_end_date); 
                      $years = floor($diff / (365*60*60*24));   
                      $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                      $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                      $day = '+'.$days.' days';
                      $stepVal = '+1 day';                    
                      while( $start_date <= $end_date ) {
                          $event_start_date = date($format, $start_date);
                          $event_end_date = date($format, strtotime($day, $start_date));
                          $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                          'id' => $d->id,
                                          'event_name' => $d->event_name,
                                          'event_color' => $d->event_color,
                                          'event_note' => $d->event_note,
                                          'event_start_date' => $event_start_date,
                                          'event_end_date' => $event_end_date,
                                          'event_start_time' => $d->event_start_time,
                                          'event_end_time' => $d->event_end_time,
                                          'event_repeat_option' => $d->event_repeat_option,
                                          'event_allDay' => $d->event_allDay,
                                          'event_reminder' => $d->event_reminder,
                                          'draggable_event' => $d->draggable_event,
                                          'draggable_id' => $d->draggable_id,
                                          'type' => $d->type,
                                          'unique_key' => $d->unique_key,
                                          'custom_all_day' => $d->custom_all_day,
                                          'event_repeat_option_type' => $d->event_repeat_option_type,
                                          'array_count' => $array_count,
                                          'isLastCount' => $isLastCount,
                                          'created_type' => $d->created_type,
                                          'task_priority' => $d->task_priority,
                                          'meeting_link' => $d->meeting_link,                           
                                          'meeting_location' => $d->meeting_location,
                                          'meeting_agenda' => $d->meeting_agenda,
                                          'portfolio_id' => $d->portfolio_id,
                                          'mowner' => $d->student_id,
                                          'call_id' => $d->call_id, 
                                          'cm_id' => $d->cm_id,                         
                                          'call_rate' => $d->call_rate,
                                       );
                          $data_array[] = $data1;
                          $start_date = strtotime($stepVal, $start_date);
                      }
                  }
              }
          }
        }else if($count_my == 3){
          //echo '3';
          $day_list = date("Y-m-d", strtotime($month_year));
          $data = $this->Front_model->getCalendarDlEvents($student_id,$day_list);
          $data_array[] = $data;
        }else if($count_my == 5){
          //echo '5';
          $d = $this->input->post('month_year'); //Jul 4 – 10, 2021   
          $s = explode(" – ", $d);//Array ( [0] => Jul 4 [1] => 10, 2021 ) 
          $m = explode(" ", $s[0]);// Array ( [0] => Jul [1] => 4 ) 
          $y = explode(", ", $s[1]);//Array ( [0] => 10 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//jul 4 2021
          $date2 = $m[0].' '.$y[0].' '.$y[1];//jul 10 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2)); 
          $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
          $data_array[] = $data;
        }else{
          //echo '6';
          $l = $this->input->post('month_year'); //May 30 – Jun 5, 2021
          $s = explode(" – ", $l);//Array ( [0] => May 30 [1] => Jun 5, 2021 )
          $m = explode(" ", $s[0]);// Array ( [0] => May [1] => 30 )
          $y = explode(", ", $s[1]);//Array ( [0] => Jun 5 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//May 30 2021
          $date2 = $y[0].' '.$y[1];//Jun 5 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2));
          $data = $this->Front_model->getCalendarWeekEvents($student_id,$date1,$date2);
          $data_array = $data;
        }

        if($count_my == 2){
          //echo '2';
          $month_year = date("Y-m", strtotime($month_year));
          $data = $this->Front_model->getCalendarMonthMeetings($student_id,$month_year);
          $format = 'Y-m-d';
          $data_array_tm = array();
          if($data){
              foreach ($data as $d) {
                  $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
                  $array_count = count($all_data);
                  $isLast = $this->Front_model->getDataIsLast($d->id);
                  $isLastCount = count($isLast);
                  if($d->event_repeat_option == 'Does not repeat')
                  {              
                      $event_start_date = date($format, strtotime($d->event_start_date));
                      $event_end_date = date($format, strtotime($d->event_end_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'type' => $d->type,
                                      'unique_key' => $d->unique_key,
                                      'custom_all_day' => $d->custom_all_day,
                                      'event_repeat_option_type' => $d->event_repeat_option_type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id, 
                                      'cm_id' => $d->cm_id,                         
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array_tm[] = $data1;
                  }
                  else if($d->event_repeat_option == 'Daily'){
                      $event_start_date = strtotime($d->event_start_date);
                      $event_end_date = strtotime($d->event_end_date);

                      $start_date = strtotime($d->event_start_date);
                      $end_date = strtotime($d->end_date);
                      if(date('Y-m',$start_date) != date('Y-m',$end_date))
                      {
                          if(date('Y-m',$start_date) < $month_year){
                              if(date('Y-m',$end_date) != $month_year){
                                  $start_date = date("Y-m-01", strtotime($month_year));
                                  $start_date = strtotime($start_date);

                                  $end_date = date("Y-m-t", strtotime($month_year));
                                  $end_date = strtotime($end_date);
                              }else{
                                  $start_date = date("Y-m-01", $end_date);
                                  $start_date = strtotime($start_date);
                              }
                          }else{
                              $end_date = date("Y-m-t", $start_date);
                              $end_date = strtotime($end_date);
                          }
                      }

                      // Formulate the Difference between two dates
                      $diff = abs($event_start_date - $event_end_date); 
                      $years = floor($diff / (365*60*60*24));   
                      $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                      $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                      $day = '+'.$days.' days';
                      $stepVal = '+1 day';                    
                      while( $start_date <= $end_date ) {
                          $event_start_date = date($format, $start_date);
                          $event_end_date = date($format, strtotime($day, $start_date));
                          $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                          'id' => $d->id,
                                          'event_name' => $d->event_name,
                                          'event_color' => $d->event_color,
                                          'event_note' => $d->event_note,
                                          'event_start_date' => $event_start_date,
                                          'event_end_date' => $event_end_date,
                                          'event_start_time' => $d->event_start_time,
                                          'event_end_time' => $d->event_end_time,
                                          'event_repeat_option' => $d->event_repeat_option,
                                          'event_allDay' => $d->event_allDay,
                                          'event_reminder' => $d->event_reminder,
                                          'draggable_event' => $d->draggable_event,
                                          'draggable_id' => $d->draggable_id,
                                          'type' => $d->type,
                                          'unique_key' => $d->unique_key,
                                          'custom_all_day' => $d->custom_all_day,
                                          'event_repeat_option_type' => $d->event_repeat_option_type,
                                          'array_count' => $array_count,
                                          'isLastCount' => $isLastCount,
                                          'created_type' => $d->created_type,
                                          'task_priority' => $d->task_priority,
                                          'meeting_link' => $d->meeting_link,                           
                                          'meeting_location' => $d->meeting_location,
                                          'meeting_agenda' => $d->meeting_agenda,
                                          'portfolio_id' => $d->portfolio_id,
                                          'mowner' => $d->student_id,
                                          'call_id' => $d->call_id, 
                                          'cm_id' => $d->cm_id,                         
                                          'call_rate' => $d->call_rate,
                                       );
                          $data_array_tm[] = $data1;
                          $start_date = strtotime($stepVal, $start_date);
                      }
                  }
              }
          }
        }else if($count_my == 3){
          //echo '3';
          $day_list = date("Y-m-d", strtotime($month_year));
          $data = $this->Front_model->getCalendarDlMeetings($student_id,$day_list);
          $data_array_tm[] = $data;
        }else if($count_my == 5){
          //echo '5';
          $d = $this->input->post('month_year'); //Jul 4 – 10, 2021   
          $s = explode(" – ", $d);//Array ( [0] => Jul 4 [1] => 10, 2021 ) 
          $m = explode(" ", $s[0]);// Array ( [0] => Jul [1] => 4 ) 
          $y = explode(", ", $s[1]);//Array ( [0] => 10 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//jul 4 2021
          $date2 = $m[0].' '.$y[0].' '.$y[1];//jul 10 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2)); 
          $data = $this->Front_model->getCalendarWeekMeetings($student_id,$date1,$date2);
          $data_array_tm[] = $data;
        }else{
          //echo '6';
          $l = $this->input->post('month_year'); //May 30 – Jun 5, 2021
          $s = explode(" – ", $l);//Array ( [0] => May 30 [1] => Jun 5, 2021 )
          $m = explode(" ", $s[0]);// Array ( [0] => May [1] => 30 )
          $y = explode(", ", $s[1]);//Array ( [0] => Jun 5 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//May 30 2021
          $date2 = $y[0].' '.$y[1];//Jun 5 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2));
          $data = $this->Front_model->getCalendarWeekMeetings($student_id,$date1,$date2);
          $data_array_tm = $data;
        }

      if($count_my == 2){
          //echo '2';
          $month_year = date("Y-m", strtotime($month_year));
          $data = $this->Front_model->getCalendarMonthCallBookings($student_id,$month_year);
          $format = 'Y-m-d';
          $data_array_tc = array();
          if($data){
              foreach ($data as $d) {
                  $all_data = $this->Front_model->getDataByUniqueId($d->unique_key);
                  $array_count = count($all_data);
                  $isLast = $this->Front_model->getDataIsLast($d->id);
                  $isLastCount = count($isLast);
                  if($d->event_repeat_option == 'Does not repeat')
                  {              
                      $event_start_date = date($format, strtotime($d->event_start_date));
                      $event_end_date = date($format, strtotime($d->event_end_date));
                      $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                      'id' => $d->id,
                                      'event_name' => $d->event_name,
                                      'event_color' => $d->event_color,
                                      'event_note' => $d->event_note,
                                      'event_start_date' => $event_start_date,
                                      'event_end_date' => $event_end_date,
                                      'event_start_time' => $d->event_start_time,
                                      'event_end_time' => $d->event_end_time,
                                      'event_repeat_option' => $d->event_repeat_option,
                                      'event_allDay' => $d->event_allDay,
                                      'event_reminder' => $d->event_reminder,
                                      'draggable_event' => $d->draggable_event,
                                      'draggable_id' => $d->draggable_id,
                                      'type' => $d->type,
                                      'unique_key' => $d->unique_key,
                                      'custom_all_day' => $d->custom_all_day,
                                      'event_repeat_option_type' => $d->event_repeat_option_type,
                                      'array_count' => $array_count,
                                      'isLastCount' => $isLastCount,
                                      'created_type' => $d->created_type,
                                      'task_priority' => $d->task_priority,                                  
                                      'meeting_link' => $d->meeting_link,                           
                                      'meeting_location' => $d->meeting_location,
                                      'meeting_agenda' => $d->meeting_agenda,
                                      'portfolio_id' => $d->portfolio_id,
                                      'mowner' => $d->student_id,
                                      'call_id' => $d->call_id,
                                      'cm_id' => $d->cm_id,                        
                                      'call_rate' => $d->call_rate,
                                   );
                      $data_array_tc[] = $data1;
                  }
                  else if($d->event_repeat_option == 'Daily'){
                      $event_start_date = strtotime($d->event_start_date);
                      $event_end_date = strtotime($d->event_end_date);

                      $start_date = strtotime($d->event_start_date);
                      $end_date = strtotime($d->end_date);
                      if(date('Y-m',$start_date) != date('Y-m',$end_date))
                      {
                          if(date('Y-m',$start_date) < $month_year){
                              if(date('Y-m',$end_date) != $month_year){
                                  $start_date = date("Y-m-01", strtotime($month_year));
                                  $start_date = strtotime($start_date);

                                  $end_date = date("Y-m-t", strtotime($month_year));
                                  $end_date = strtotime($end_date);
                              }else{
                                  $start_date = date("Y-m-01", $end_date);
                                  $start_date = strtotime($start_date);
                              }
                          }else{
                              $end_date = date("Y-m-t", $start_date);
                              $end_date = strtotime($end_date);
                          }
                      }

                      // Formulate the Difference between two dates
                      $diff = abs($event_start_date - $event_end_date); 
                      $years = floor($diff / (365*60*60*24));   
                      $months = floor(($diff - $years * 365*60*60*24)/ (30*60*60*24)); 
                      $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
                      $day = '+'.$days.' days';
                      $stepVal = '+1 day';                    
                      while( $start_date <= $end_date ) {
                          $event_start_date = date($format, $start_date);
                          $event_end_date = date($format, strtotime($day, $start_date));
                          $data1 = array( 'student_id' => $this->session->userdata('d168_id'),
                                          'id' => $d->id,
                                          'event_name' => $d->event_name,
                                          'event_color' => $d->event_color,
                                          'event_note' => $d->event_note,
                                          'event_start_date' => $event_start_date,
                                          'event_end_date' => $event_end_date,
                                          'event_start_time' => $d->event_start_time,
                                          'event_end_time' => $d->event_end_time,
                                          'event_repeat_option' => $d->event_repeat_option,
                                          'event_allDay' => $d->event_allDay,
                                          'event_reminder' => $d->event_reminder,
                                          'draggable_event' => $d->draggable_event,
                                          'draggable_id' => $d->draggable_id,
                                          'type' => $d->type,
                                          'unique_key' => $d->unique_key,
                                          'custom_all_day' => $d->custom_all_day,
                                          'event_repeat_option_type' => $d->event_repeat_option_type,
                                          'array_count' => $array_count,
                                          'isLastCount' => $isLastCount,
                                          'created_type' => $d->created_type,
                                          'task_priority' => $d->task_priority,
                                          'meeting_link' => $d->meeting_link,                           
                                          'meeting_location' => $d->meeting_location,
                                          'meeting_agenda' => $d->meeting_agenda,
                                          'portfolio_id' => $d->portfolio_id,
                                          'mowner' => $d->student_id,
                                          'call_id' => $d->call_id,
                                          'cm_id' => $d->cm_id,                        
                                          'call_rate' => $d->call_rate,
                                       );
                          $data_array_tc[] = $data1;
                          $start_date = strtotime($stepVal, $start_date);
                      }
                  }
              }
          }
        }else if($count_my == 3){
          //echo '3';
          $day_list = date("Y-m-d", strtotime($month_year));
          $data = $this->Front_model->getCalendarDlCallBookings($student_id,$day_list);
          $data_array_tc[] = $data;
        }else if($count_my == 5){
          //echo '5';
          $d = $this->input->post('month_year'); //Jul 4 – 10, 2021   
          $s = explode(" – ", $d);//Array ( [0] => Jul 4 [1] => 10, 2021 ) 
          $m = explode(" ", $s[0]);// Array ( [0] => Jul [1] => 4 ) 
          $y = explode(", ", $s[1]);//Array ( [0] => 10 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//jul 4 2021
          $date2 = $m[0].' '.$y[0].' '.$y[1];//jul 10 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2)); 
          $data = $this->Front_model->getCalendarWeekCallBookings($student_id,$date1,$date2);
          $data_array_tc[] = $data;
        }else{
          //echo '6';
          $l = $this->input->post('month_year'); //May 30 – Jun 5, 2021
          $s = explode(" – ", $l);//Array ( [0] => May 30 [1] => Jun 5, 2021 )
          $m = explode(" ", $s[0]);// Array ( [0] => May [1] => 30 )
          $y = explode(", ", $s[1]);//Array ( [0] => Jun 5 [1] => 2021 )

          $date1 = $s[0].' '.$y[1];//May 30 2021
          $date2 = $y[0].' '.$y[1];//Jun 5 2021

          $date1 = date('Y-m-d', strtotime($date1));
          $date2 = date('Y-m-d', strtotime($date2));
          $data = $this->Front_model->getCalendarWeekCallBookings($student_id,$date1,$date2);
          $data_array_tc = $data;
        }
      }
      $data_array = array_merge(array_filter($data_array),array_filter($data_array_tm),array_filter($data_array_tc));
      header('Content-type: application/json');
      echo json_encode($data_array);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_selected_event_info() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $event_id = $this->input->post('event_id');
      $event_data  = $this->Front_model->view_selected_event_info($event_id);
      $event_dataf  = $this->Front_model->view_selected_single_event_info($event_id);

      $start_nn = $event_data[0]->event_start_date;
      foreach($event_data as $row)
      {
          $d1 = new DateTime($row->event_start_date);
          $d2 = new DateTime($start_nn);
          if($d1 < $d2){
              $start_nn = $row->event_start_date;
          }

      }
      $end_nn = $event_data[0]->event_end_date;
      foreach($event_data as $row)
      {
          $d1 = new DateTime($row->event_end_date);
          $d2 = new DateTime($end_nn);
          if($d1 > $d2){
              $end_nn = $row->event_end_date;
          }

      }

      $response['call_rate'] = "";
      $response['expert_name'] = "";
      $response['book_user_name'] = "";
      $response['call_payment'] = "";
      $response['call_status'] = "";
      $response['reject_reason'] = "";

      if($event_dataf->created_type == 'Video Session'){
        $get_expert_name = $this->Front_model->get_events_call_booking($event_id);
        if($get_expert_name){
          $get_user_name = $this->Front_model->getStudentById($event_dataf->student_id);
          $response['expert_name'] = ucwords($get_expert_name->first_name.' '.$get_expert_name->last_name);
          $response['book_user_name'] = ucwords($get_user_name->first_name.' '.$get_user_name->last_name);
          $response['call_rate'] = $event_dataf->call_rate;
          if($event_dataf->paid == 1){
            $response['call_payment'] = "Paid";
          }else{
            $response['call_payment'] = "Not Paid";
          }
          if($event_dataf->expert_approval == 1){
            $response['call_status'] = "Accepted";
          }else if(($event_dataf->expert_approval == 0) && ($event_dataf->reject_reason != "")){
            $response['call_status'] = "Rejected";
            $response['reject_reason'] = $event_dataf->reject_reason;
          }else{
            $response['call_status'] = "Pending";
          }
        }
      }

      $response['get_port_name'] = "";
      $response['get_meeting_members_invitees'] = "";
      $response['get_meeting_members_attendees'] = "";
      $response['get_meeting_Owner_name'] = "";
      if($event_data[0]->portfolio_id != '0')
      {
        $check_portfolio_name = $this->Front_model->getPortfolioName($event_data[0]->portfolio_id);
        if($check_portfolio_name)
        {
          if($check_portfolio_name->portfolio_user == 'company')
          { 
            $response['get_port_name'] = $check_portfolio_name->portfolio_name;
          }
          elseif($check_portfolio_name->portfolio_user == 'individual')
          { 
            $response['get_port_name'] = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
          }
          else
          { 
            $response['get_port_name'] = $check_portfolio_name->portfolio_name;
          }
        }

        if($event_data[0]->student_id == $this->session->userdata('d168_id'))
        {
          $check_meeting_members = $this->Front_model->get_events_meeting_invitees($event_id);
          if($check_meeting_members)
          {
            // $i = 0;
            // $len = count($check_meeting_members);
            foreach($check_meeting_members as $mm)
            {
              $response['get_meeting_members_invitees'] .= '<span class="badge badge-soft-info p-1 ms-1 mb-2 font-size-12 mm'.$mm->mid.'">'.$mm->first_name.' '.$mm->last_name.'<i class="fas fa-times ms-1" style="cursor:pointer;" onclick="return remove_eventMember('.$mm->member.','.$mm->mid.')"></i></span>';
              // if ($i != $len - 1) 
              // {
              //   $response['get_meeting_members_invitees'] .= ' , ';
              // }
              // $i++;
            }
          }
          $check_meeting_members_more_invited = $this->Front_model->get_events_meeting_more_invited($event_data[0]->unique_key);
          if($check_meeting_members_more_invited)
          {
            // if($check_meeting_members)
            // {
            //   $response['get_meeting_members_invitees'] .= ' , ';
            // }
            // $mi = 0;
            // $len_mi = count($check_meeting_members_more_invited);
            foreach($check_meeting_members_more_invited as $mmi)
            {
              $response['get_meeting_members_invitees'] .= '<span class="badge badge-soft-info p-1 ms-1 font-size-12 mb-2 mmi'.$mmi->imid.'">'.$mmi->member.'<i class="fas fa-times ms-1" style="cursor:pointer;" onclick="return remove_eventInvitedMember('.$mmi->imid.')"></i></span>';
              // if ($mi != $len_mi - 1) 
              // {
              //   $response['get_meeting_members_invitees'] .= ' , ';
              // }
              // $mi++;
            }
          }
          $check_meeting_members_attendees = $this->Front_model->get_events_meeting_attendees($event_id);
          if($check_meeting_members_attendees)
          {
            // $ia = 0;
            // $lena = count($check_meeting_members_attendees);
            foreach($check_meeting_members_attendees as $mma)
            {
              $response['get_meeting_members_attendees'] .= '<span class="badge badge-soft-success p-1 ms-1 font-size-12 mm'.$mma->mid.'">'.$mma->first_name.' '.$mma->last_name.'<i class="fas fa-times ms-1" style="cursor:pointer;" onclick="return remove_eventMember('.$mma->member.','.$mma->mid.')"></i></span>';
              // if ($ia != $lena - 1) 
              // {
              //   $response['get_meeting_members_attendees'] .= ' , ';
              // }
              // $ia++;
            }
          }
          $get_events_meeting_more_invited_accpeted = $this->Front_model->get_events_meeting_more_invited_accpeted($event_data[0]->unique_key);
          if($get_events_meeting_more_invited_accpeted)
          {
            // if($check_meeting_members)
            // {
            //   $response['get_meeting_members_invitees'] .= ' , ';
            // }
            // $mi = 0;
            // $len_mi = count($check_meeting_members_more_invited);
            foreach($get_events_meeting_more_invited_accpeted as $mmi)
            {
              $check_reg = $this->Front_model->selectLogin($mmi->member);
              if(empty($check_reg))
              {
                $response['get_meeting_members_attendees'] .= '<span class="badge badge-soft-success p-1 ms-1 font-size-12 mmi'.$mmi->imid.'">'.$mmi->member.'<i class="fas fa-times ms-1" style="cursor:pointer;" onclick="return remove_eventInvitedMember('.$mmi->imid.')"></i></span>';
                // if ($mi != $len_mi - 1) 
                // {
                //   $response['get_meeting_members_invitees'] .= ' , ';
                // }
                // $mi++;
              }
            }
          }
        }
        else
        {
          $check_meeting_members = $this->Front_model->get_events_meeting_invitees($event_id);
          if($check_meeting_members)
          {
            // $i = 0;
            // $len = count($check_meeting_members);
            foreach($check_meeting_members as $mm)
            {
              $response['get_meeting_members_invitees'] .= '<span class="badge badge-soft-info p-1 ms-1 font-size-12 mb-2">'.$mm->first_name.' '.$mm->last_name.'</span>';
              // if ($i != $len - 1) 
              // {
              //   $response['get_meeting_members_invitees'] .= ' , ';
              // }
              // $i++;
            }
          }
          $check_meeting_members_more_invited = $this->Front_model->get_events_meeting_more_invited($event_data[0]->unique_key);
          if($check_meeting_members_more_invited)
          {
            // if($check_meeting_members)
            // {
            //   $response['get_meeting_members_invitees'] .= ' , ';
            // }
            // $mi = 0;
            // $len_mi = count($check_meeting_members_more_invited);
            foreach($check_meeting_members_more_invited as $mmi)
            {
              $response['get_meeting_members_invitees'] .= '<span class="badge badge-soft-info p-1 ms-1 font-size-12 mb-2">'.$mmi->member.'</span>';
              // if ($mi != $len_mi - 1) 
              // {
              //   $response['get_meeting_members_invitees'] .= ' , ';
              // }
              // $mi++;
            }
          }
          $check_meeting_members_attendees = $this->Front_model->get_events_meeting_attendees($event_id);
          if($check_meeting_members_attendees)
          {
            // $ia = 0;
            // $lena = count($check_meeting_members_attendees);
            foreach($check_meeting_members_attendees as $mma)
            {
              $response['get_meeting_members_attendees'] .= '<span class="badge badge-soft-success p-1 ms-1 font-size-12">'.$mma->first_name.' '.$mma->last_name.'</span>';
              // if ($ia != $lena - 1) 
              // {
              //   $response['get_meeting_members_attendees'] .= ' , ';
              // }
              // $ia++;
            }
          }
          $get_events_meeting_more_invited_accpeted = $this->Front_model->get_events_meeting_more_invited_accpeted($event_data[0]->unique_key);
          if($get_events_meeting_more_invited_accpeted)
          {
            // if($check_meeting_members)
            // {
            //   $response['get_meeting_members_invitees'] .= ' , ';
            // }
            // $mi = 0;
            // $len_mi = count($check_meeting_members_more_invited);
            foreach($get_events_meeting_more_invited_accpeted as $mmi)
            {
              $check_reg = $this->Front_model->selectLogin($mmi->member);
              if(empty($check_reg))
              {
                $response['get_meeting_members_attendees'] .= '<span class="badge badge-soft-success p-1 ms-1 font-size-12">'.$mmi->member.'</span>';
                // if ($mi != $len_mi - 1) 
                // {
                //   $response['get_meeting_members_invitees'] .= ' , ';
                // }
                // $mi++;
              }
            }
          }
        }        

        $stud = $this->Front_model->getStudentById($event_data[0]->student_id);
        if($stud)
        {
          $response['get_meeting_Owner_name'] .= $stud->first_name.' '.$stud->last_name;
        }
      }

      $response['get_meeting_owner'] = "";
      if($event_data[0]->student_id == $this->session->userdata('d168_id'))
      {
        $response['get_meeting_owner'] = 'yes';
      }
      else
      {
        $response['get_meeting_owner'] = 'no';
      }

      $response['portfolio_update'] = "";
      $response['meeting_members'] = "";
      $response['meeting_members_selected'] = "";
      $response['meeting_files'] = "";
      $response['meeting_old_files'] = "";
      $response['meeting_members_emailids'] = "";
      if($event_data[0]->created_type == "meeting")
      {
        $Portfolio = $this->Front_model->Portfolio();
        $AcceptedProjectList = $this->Front_model->AcceptedProjectListPortfolio();       
        if($Portfolio || $AcceptedProjectList)
        {
            if($event_data[0]->portfolio_id == '0')
            {
              $response['portfolio_update'] .= '<option value="">Select Portfolio</option>';
            }
            foreach($Portfolio as $c)
            {
              $response['portfolio_update'] .= '<option value="'.$c->portfolio_id.'"';
              if($event_data[0]->portfolio_id == $c->portfolio_id)
              {
                $response['portfolio_update'] .= ' selected';
              }
              $response['portfolio_update'] .= '><span>';
              if($c->portfolio_user == "company"){ $response['portfolio_update'] .= $c->portfolio_name;}elseif($c->portfolio_user == "individual"){ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;}else{ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;};
              $response['portfolio_update'] .= '</span></option>';
            }
            foreach($AcceptedProjectList as $al)
            {
                $c_id = $al->portfolio_id;
                if($c_id != 0)
                {
                  $getAllPortfolio = $this->Front_model->getAllPortfolio($c_id);
                  if($getAllPortfolio->portfolio_createdby != $this->session->userdata('d168_id'))
                  {
                  
                  $response['portfolio_update'] .= '<option value="'.$getAllPortfolio->portfolio_id.'"';
                  if($event_data[0]->portfolio_id == $getAllPortfolio->portfolio_id)
                  {
                    $response['portfolio_update'] .= ' selected';
                  }
                  $response['portfolio_update'] .= '><span>';
                  if($getAllPortfolio->portfolio_user == "company"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;}elseif($getAllPortfolio->portfolio_user == "individual"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name.' '.$getAllPortfolio->portfolio_lname;}else{ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;};
                  $response['portfolio_update'] .= '</span></option>';
                  
                  }
                }
            }
        }

        $porttm = $this->Front_model->getAccepted_PortTM($event_data[0]->portfolio_id); 
            // print_r($porttm);                       
        if($porttm)
        {
          foreach ($porttm as $ptm) 
          {
            $m = $this->Front_model->selectLogin($ptm->sent_to);
            $check_pm = $this->Front_model->check_evt_meeting_pm($m->reg_id,$event_id);
            if($m)
            {
              $check_pm_pmember = "";
              if($check_pm)
              {
                $check_pm_pmember = $check_pm->member;
              }
              if(($m->reg_id != $this->session->userdata('d168_id')) && ($m->reg_id != $check_pm_pmember))
              {
                $response['meeting_members'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name." ".$m->last_name.'</span></option>';
              }
            }
            if($check_pm && $m)
            {
              $response['meeting_members'] .= '<option value="'.$m->reg_id.'" selected><span>'.$m->first_name." ".$m->last_name.'</span></option>';
            }
          }
        }
      
        $get_meeting_members = $this->Front_model->get_events_meeting($event_id);
        if($get_meeting_members)
        {
          $i2 = 0;
          $len2 = count($get_meeting_members);
          foreach($get_meeting_members as $gmm)
          {
            $response['meeting_members_selected'] .= $gmm->member;
            if ($i2 != $len2 - 1) 
            {
              $response['meeting_members_selected'] .= ',';
            }
            $i2++;
          }
        }
        $get_meeting_members_emailids = $this->Front_model->get_meeting_members_emailids($event_data[0]->unique_key);
        if($get_meeting_members_emailids)
        {
          foreach($get_meeting_members_emailids as $gmme)
          {
            $response['meeting_members_emailids'] .= '<div class="row mb-2"><div class="col-lg-8"><input type="email" id="imemail_up" name="imemail[]" class="form-control" value='.$gmme->member.' placeholder="Enter Email ID to Invite Member..."><span id="imemailErr" class="text-danger"></span></div><div class="col-lg-4 card-title mb-2"><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle add_dup_member_up2" style="margin-left: 30px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-plus"></i></span></button><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle remove_dup_member" style="margin-left: 15px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-minus"></i></span></button></div></div>';
          }
        }
        //display meeting files
        if(!empty($event_dataf->mfile))
        {
          if($event_dataf->student_id == $this->session->userdata('d168_id'))
          {
            $all_mfile = explode(',', $event_dataf->mfile);
            if($all_mfile)
            {
              $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
              $count = 0;
              foreach($all_mfile as $file)
              {
                  $response['meeting_files'] .= '<li id="field_id'.$count.'">
                      <div class="row">
                          <div class="col-8"> 
                             <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                          </div>
                          <div class="col-4">
                              <a href="javascript:void(0)" onclick="return delete_meeting_file('."'".$count."'".','."'".$event_id."'".');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
                              <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                              <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                          </div>
                      </div></li>';
                   $count++;
              }
              $response['meeting_files'] .= '</ul>';
            }  
          }
          else
          {
            $all_mfile = explode(',', $event_dataf->mfile);
            if($all_mfile)
            {
              $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
              $count = 0;
              foreach($all_mfile as $file)
              {
                  $response['meeting_files'] .= '<li id="field_id'.$count.'">
                      <div class="row">
                          <div class="col-8"> 
                             <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                          </div>
                          <div class="col-4">
                              <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                              <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                          </div>
                      </div></li>';
                   $count++;
              }
              $response['meeting_files'] .= '</ul>';
            }
          }

         $response['meeting_old_files'] = $event_dataf->mfile;       
        }
      }
      
      // $response['task_start_date'] = $event_data[0]->event_start_date;
      // $response['task_end_date'] = array_slice($event_data, -1)[0]->event_end_date;
      $response['task_evt_color'] = $event_data[0]->event_color;
      $response['task_start_date'] = $start_nn;
      $response['task_end_date'] = $end_nn;
      $response['timeZone'] = date_default_timezone_get();
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function preview_meeting_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $mfile = $this->input->post('mfile');
        $event_id = $this->input->post('event_id');
        $ext = pathinfo($mfile, PATHINFO_EXTENSION);
        $e_detail = $this->Front_model->view_selected_event_info($event_id); 

        if($e_detail)
        {
          if(($ext == strtolower('gif')) || ($ext == strtolower('jpg')) || ($ext == strtolower('png')) || ($ext == strtolower('jpeg')) || ($ext == strtolower('webp')) || ($ext == strtolower('svg')))
          {
            echo '<div class="modal-header">
                  <h5 class="modal-title mt-0" id="previewMeetingModalLabel">'.substr($mfile, strpos($mfile, '_') + 1).'</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img class="d-block img-fluid" src="'.base_url('assets/meeting_files/'.$mfile).'">                          
                </div>
                <div class="modal-footer">
                    <a href="'.base_url().'front/download_MeetingFileAttachment/'.$mfile.'/'.$event_id.'" class="btn btn-sm btn-d text-white">Download</a>
                </div>';
          }
          else if(($ext == strtolower('mp4')) || ($ext == strtolower('ts')) || ($ext == strtolower('3gp')) || ($ext == strtolower('avi')) || ($ext == strtolower('mov')) || ($ext == strtolower('wmv')) || ($ext == strtolower('flv')) || ($ext == strtolower('m3u8')))
          {
            echo '<div class="modal-header">
                  <h5 class="modal-title mt-0" id="previewMeetingModalLabel">'.substr($mfile, strpos($mfile, '_') + 1).'</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <video class="d-block img-fluid" controls><source src="'.base_url('assets/meeting_files/'.$mfile).'" type="video/'.$ext.'">Your browser does not support the video tag.</video>                          
                </div>
                <div class="modal-footer">
                    <a href="'.base_url().'front/download_MeetingFileAttachment/'.$mfile.'/'.$event_id.'" class="btn btn-sm btn-d text-white">Download</a>
                </div>';
          }
          elseif($ext == 'csv' || $ext == 'CSV')
          {
            $url = base_url().'assets/meeting_files/'.$mfile;
            echo "<div class='modal-header'>
                  <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($mfile, strpos($mfile, "_") + 1)."</h5>
                  <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                </div>
                <div class='modal-body' style='height:400px'>
                    <iframe src='https://docs.google.com/viewer?embedded=true&url=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                </div>
                <div class='modal-footer'>
                    <a href='".base_url()."front/download_MeetingFileAttachment/".$mfile."/".$event_id."' class='btn btn-sm btn-d text-white'>Download</a>
                </div>";
          } 
          elseif($ext == 'pdf' || $ext == 'PDF' || $ext == 'gif' || $ext == 'GIF' || $ext == 'txt' || $ext == 'TXT')
          {
            echo '<div class="modal-header">
                  <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($mfile, strpos($mfile, "_") + 1).'</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="height:400px">
                     <iframe src="'.base_url().'assets/meeting_files/'.$mfile.'" height="100%" width="100%"></iframe>                            
                </div>
                <div class="modal-footer">
                    <a href="'.base_url().'front/download_MeetingFileAttachment/'.$mfile.'/'.$event_id.'" class="btn btn-sm btn-d text-white">Download</a>
                </div>';
          }
          else
          {
            $url = base_url().'assets/meeting_files/'.$mfile;
            echo "<div class='modal-header'>
                  <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($mfile, strpos($mfile, "_") + 1)."</h5>
                  <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
                </div>
                <div class='modal-body' style='height:400px'>
                    <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>                          
                </div>
                <div class='modal-footer'>
                    <a href='".base_url()."front/download_MeetingFileAttachment/".$mfile."/".$event_id."' class='btn btn-sm btn-d text-white'>Download</a>
                </div>";
          } 
        }
        else
        {
          echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="previewMeetingModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body" style="height:400px">
                   File Not Found!                        
              </div>';
        }          
    } 
    else 
    {
        redirect(base_url('login'));
    }
  }

  public function add_meeting_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(empty($this->input->post('mfile_old'))) 
      {
        if(!empty($_FILES['mfile']['name'][0]))
        {
          $cpt = count($_FILES['mfile']['name']);
          $files = $_FILES;
          $config['upload_path'] = 'assets/meeting_files/';
          $config['allowed_types'] = '*';
          $maxsize=2000000;
          //Load upload library and initialize configuration
          $this->load->library('upload', $config);

          for($i=0; $i<$cpt; $i++)
            {          
              //$_FILES['mfile']['name']= time().'_'.$files['mfile']['name'][$i];
              $file_name =trim((preg_replace("/\([^)]+\)/","",$files['mfile']['name'][$i]))); 
              $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
              $_FILES['mfile']['name']= time().'_'.strtolower($new_file_name);
              $_FILES['mfile']['type']= $files['mfile']['type'][$i];
              $_FILES['mfile']['tmp_name']= $files['mfile']['tmp_name'][$i];
              $_FILES['mfile']['error']= $files['mfile']['error'][$i];
              $_FILES['mfile']['size']= $files['mfile']['size'][$i];   

              $this->upload->initialize($config);
              if($_FILES['mfile']['size'] >= $maxsize)
                    {
                            $response['status'] = 'file_uploadSizeErr';
                            header('Content-type: application/json');
                            exit(json_encode($response));
                    }
              else
                    {
                        if($this->upload->do_upload('mfile'))
                          {
                            $fileData = $this->upload->data();
                            $uploadData[$i]['mfile2'] = $fileData['file_name'];
                          }
                          else 
                          {
                            $response['status'] = 'Error_Uploading';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                          } 
                    }                                  
            }

            if(is_array($uploadData))
                {
                    $mfile_upload = implode(',', array_column($uploadData, 'mfile2'));
                }
        }
        else
        {
          $mfile_upload = "";
        }             
      } 
      else
      {
        if(!empty($_FILES['mfile']['name'][0]))
        {
          $cpt = count($_FILES['mfile']['name']);
          $files = $_FILES;
          $config['upload_path'] = 'assets/meeting_files/';
          $config['allowed_types'] = '*';
          $maxsize=2000000;
          //Load upload library and initialize configuration
          $this->load->library('upload', $config);

          for($i=0; $i<$cpt; $i++)
            {          
              //$_FILES['mfile']['name']= time().'_'.$files['mfile']['name'][$i];
              $file_name =trim((preg_replace("/\([^)]+\)/","",$files['mfile']['name'][$i]))); 
              $new_file_name = preg_replace('/[ ,]+/', '-', trim($file_name));
              $_FILES['mfile']['name']= time().'_'.strtolower($new_file_name);
              $_FILES['mfile']['type']= $files['mfile']['type'][$i];
              $_FILES['mfile']['tmp_name']= $files['mfile']['tmp_name'][$i];
              $_FILES['mfile']['error']= $files['mfile']['error'][$i];
              $_FILES['mfile']['size']= $files['mfile']['size'][$i];   

              $this->upload->initialize($config);
              if($_FILES['mfile']['size'] >= $maxsize)
                    {
                            $response['status'] = 'file_uploadSizeErr';
                            header('Content-type: application/json');
                            exit(json_encode($response));
                    }
              else
                    {
                        if($this->upload->do_upload('mfile'))
                          {
                            $fileData = $this->upload->data();
                            $uploadData[$i]['mfile2'] = $fileData['file_name'];
                          }
                          else 
                          {
                            $response['status'] = 'Error_Uploading';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                          } 
                    }                                  
            }

            if(is_array($uploadData))
                {
                    $mfile_old_array = explode(',', $this->input->post('mfile_old'));
                    $mfile_new = implode(',', array_column($uploadData, 'mfile2'));
                    $mfile_new_array = explode(',', $mfile_new);
                    $merge_mfile = array_merge($mfile_old_array,$mfile_new_array);
                    $mfile_upload = implode(',',$merge_mfile); 
                }
        }
        else
        {
          $mfile_upload = $this->input->post('mfile_old');
        } 
      }
      //print_r($_FILES['mfile']['name']);
      // echo $this->input->post('mfile_old').'<br>';
      // echo $mfile_upload;
      // echo '<br>'.$this->input->post('event_id');
      // die();
      $event_id = $this->input->post('event_id');

      $data = array(  'mfile' => $mfile_upload,
                       );
      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->updateEvent($data,$event_id);

      $get_ed = $this->Front_model->view_selected_single_event_info($event_id);
      $all_mfile = explode(',', $get_ed->mfile);
      $old_mfile = count($all_mfile); 
      $response['meeting_old_files_up'] = $get_ed->mfile;
      $response['all_files'] = "";
      if($all_mfile)
      {
        $response['all_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
        $count = 0;
        foreach($all_mfile as $mfile)
        {
            $response['all_files'] .= '<li id="field_id'.$count.'">
                <div class="row">
                    <div class="col-8"> 
                       <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$mfile."'".','."'".$get_ed->id."'".')" title="Preview">'.substr($mfile, strpos($mfile, "_") + 1).'</a>
                    </div>
                    <div class="col-4">
                        <a href="javascript:void(0)" onclick="return delete_meeting_file('."'".$count."'".','."'".$get_ed->id."'".');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
                        <a href="'.base_url().'front/download_MeetingFileAttachment/'.$mfile."/".$get_ed->id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                        <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$mfile."'".','."'".$get_ed->id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                    </div>
                </div></li>';
             $count++;
        }
        $response['all_files'] .= '</ul>';
      } 
      else
      {
       $response['all_files'] .= '<ul class="list-unstyled fw-medium refresh_pcf_remove">
              <li></li>
        </ul>';
      }

      header('Content-type: application/json');
      echo json_encode($response); 
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_meeting_file()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $index_id = $this->input->post('index_id');
    $event_id = $this->input->post('event_id');
   
    $e_detail = $this->Front_model->view_selected_single_event_info($event_id);
    // print_r($e_detail);
    // die();
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($e_detail)
    {
      // echo $e_detail->mfile;
      // die();
      $mfile = explode(',', $e_detail->mfile);
      $mfile_name = $mfile[$index_id];
                          
            $getAllfile = explode(',', $e_detail->mfile);
            $count = count($getAllfile);
            $new_files = array();
            if($count > 0)
            {
              for ($i=0; $i<$count; $i++)
                {
                  $get_file_name = $getAllfile[$i];
                  if($get_file_name == $mfile_name)
                  {
                    $get_file_name = "";
                  }
                  $new_files[] = $get_file_name;
                }
                //echo "<br>";
                $new = implode(',', $new_files);
                //echo $new;
                //echo "<br>";
                $string_file = preg_replace("/,+/", ",", $new);
                $new_string_file = rtrim($string_file, ',');
                $final_string_file = ltrim($new_string_file, ',');
                //echo $string_file;
                          $data = array(
                                            'mfile' => $final_string_file
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->update_EventFile($data,$event_id);
            }

            unlink("assets/meeting_files/".$mfile_name);

            $get_ed = $this->Front_model->view_selected_single_event_info($event_id);

            $all_mfile = explode(',', $get_ed->mfile);
            $old_mfile = count($all_mfile); 
            $response['meeting_old_files_up'] = $get_ed->mfile;
            $response['all_files'] = "";
            if(!empty($get_ed->mfile))
            {
              if($all_mfile)
              {
                $response['all_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
                $count = 0;
                foreach($all_mfile as $mfile)
                {
                    $response['all_files'] .= '<li id="field_id'.$count.'">
                        <div class="row">
                            <div class="col-8"> 
                               <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$mfile."'".','."'".$get_ed->id."'".')" title="Preview">'.substr($mfile, strpos($mfile, "_") + 1).'</a>
                            </div>
                            <div class="col-4">
                                <a href="javascript:void(0)" onclick="return delete_meeting_file('."'".$count."'".','."'".$get_ed->id."'".');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
                                <a href="'.base_url().'front/download_MeetingFileAttachment/'.$mfile."/".$get_ed->id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                                <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$mfile."'".','."'".$get_ed->id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                            </div>
                        </div></li>';
                     $count++;
                }
                $response['all_files'] .= '</ul>';
              }
              else
              {
               $response['all_files'] .= '<ul class="list-unstyled fw-medium refresh_pcf_remove">
                      <li></li>
                </ul>';
              }
            } 
            else
            {
             $response['all_files'] .= '<ul class="list-unstyled fw-medium refresh_pcf_remove">
                    <li></li>
              </ul>';
            }

            header('Content-type: application/json');
            echo json_encode($response);           
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function download_MeetingFileAttachment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $mfile = $this->uri->segment(3);
      $event_id = $this->uri->segment(4);
      $e_detail = $this->Front_model->view_selected_event_info($event_id);      
      if($e_detail)
      {
        $file = 'assets/meeting_files/'.$mfile;
        //print_r($file);
        //force download
        force_download($file,NULL);
      }      
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function update_event_form() //Update Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      try {
          $delete_check = $this->input->post('delete_check');

          $get_events = $this->Front_model->get_events($this->input->post('event_id'));

          $this->session->set_userdata('get_existing_id_sess','');
          $this->session->set_userdata('get_existing_id_sess_created_type','');
          if($get_events)
          {
            $get_unique_key = $get_events->unique_key;
            if($delete_check == 2)
            {
              $get_events_series = $this->Front_model->get_events_series($this->input->post('event_id'),$get_unique_key);
            }
            else
            {
              $get_events_series = $this->Front_model->get_events_all_series($get_unique_key);
            }
            
            $get_existing_id_array = array();
            if($get_events_series)
            {
              foreach($get_events_series as $ges)
              {
                $get_existing_id_array[] = $ges->id;
              }
              $get_existing_id = implode(',',$get_existing_id_array);
              $this->session->unset_userdata('get_existing_id_sess');              
              $this->session->set_userdata('get_existing_id_sess',$get_existing_id);
            }

            if($get_events->event_repeat_option_type != $this->input->post('event_repeat_option'))
            {
              $this->session->set_userdata('get_existing_id_sess_created_type','changed');
            }
          }          

          $result = $this->Front_model->deleteEvent($this->input->post('event_id'),$delete_check);
          $unique_key = $result[0]->unique_key;
          $this->insert_draggable_event($unique_key);
        }
        
        //catch exception
        catch(Exception $e) {
          $this->session->set_flashdata('message', 'Something went wrong'); 
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function event_data_single_event() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $event_id = $this->input->post('event_id');
      $event_data  = $this->Front_model->getEventData($event_id);
      $event_dataf  = $this->Front_model->view_selected_single_event_info($event_id);
      $response['portfolio_update'] = "";
      $response['meeting_members'] = "";
      $response['meeting_members_selected'] = "";
      $response['meeting_old_files'] = "";
      $response['meeting_members_emailids'] = "";
      if($event_data[0]->created_type == "meeting")
      {
        $Portfolio = $this->Front_model->Portfolio();
        $AcceptedProjectList = $this->Front_model->AcceptedProjectListPortfolio();       
        if($Portfolio || $AcceptedProjectList)
        {
            if($event_data[0]->portfolio_id == '0')
            {
              $response['portfolio_update'] .= '<option value="">Select Portfolio</option>';
            }
            foreach($Portfolio as $c)
            {
              $response['portfolio_update'] .= '<option value="'.$c->portfolio_id.'"';
              if($event_data[0]->portfolio_id == $c->portfolio_id)
              {
                $response['portfolio_update'] .= ' selected';
              }
              $response['portfolio_update'] .= '><span>';
              if($c->portfolio_user == "company"){ $response['portfolio_update'] .= $c->portfolio_name;}elseif($c->portfolio_user == "individual"){ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;}else{ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;};
              $response['portfolio_update'] .= '</span></option>';
            }
            foreach($AcceptedProjectList as $al)
            {
                $c_id = $al->portfolio_id;
                if($c_id != 0)
                {
                  $getAllPortfolio = $this->Front_model->getAllPortfolio($c_id);
                  if($getAllPortfolio->portfolio_createdby != $this->session->userdata('d168_id'))
                  {
                  
                  $response['portfolio_update'] .= '<option value="'.$getAllPortfolio->portfolio_id.'"';
                  if($event_data[0]->portfolio_id == $getAllPortfolio->portfolio_id)
                  {
                    $response['portfolio_update'] .= ' selected';
                  }
                  $response['portfolio_update'] .= '><span>';
                  if($getAllPortfolio->portfolio_user == "company"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;}elseif($getAllPortfolio->portfolio_user == "individual"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name.' '.$getAllPortfolio->portfolio_lname;}else{ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;};
                  $response['portfolio_update'] .= '</span></option>';
                  
                  }
                }
            }
        }

        $porttm = $this->Front_model->getAccepted_PortTM($event_data[0]->portfolio_id); 
                                   
        if($porttm)
        {
          foreach ($porttm as $ptm) 
          {
            $m = $this->Front_model->selectLogin($ptm->sent_to);
            $check_pm = $this->Front_model->check_evt_meeting_pm($m->reg_id,$event_id);
            if($m)
            {
              $check_pm_pmember = "";
              if($check_pm)
              {
                $check_pm_pmember = $check_pm->member;
              }
              if(($m->reg_id != $this->session->userdata('d168_id')) && ($m->reg_id != $check_pm_pmember))
              {
                $response['meeting_members'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name." ".$m->last_name.'</span></option>';
              }
            }
            if($check_pm && $m)
            {
              $response['meeting_members'] .= '<option value="'.$m->reg_id.'" selected><span>'.$m->first_name." ".$m->last_name.'</span></option>';
            }
          }
        }
      
        $get_meeting_members = $this->Front_model->get_events_meeting($event_id);
        if($get_meeting_members)
        {
          $i2 = 0;
          $len2 = count($get_meeting_members);
          foreach($get_meeting_members as $gmm)
          {
            $response['meeting_members_selected'] .= $gmm->member;
            if ($i2 != $len2 - 1) 
            {
              $response['meeting_members_selected'] .= ',';
            }
            $i2++;
          }
        }
        $get_meeting_members_emailids = $this->Front_model->get_meeting_members_emailids($event_data[0]->unique_key);
        if($get_meeting_members_emailids)
        {
          foreach($get_meeting_members_emailids as $gmme)
          {
            $response['meeting_members_emailids'] .= '<div class="row mb-2"><div class="col-lg-8"><input type="email" id="imemail_up" name="imemail[]" class="form-control" value='.$gmme->member.' placeholder="Enter Email ID to Invite Member..."><span id="imemailErr" class="text-danger"></span></div><div class="col-lg-4 card-title mb-2"><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle add_dup_member_up2" style="margin-left: 30px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-plus"></i></span></button><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle remove_dup_member" style="margin-left: 15px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-minus"></i></span></button></div></div>';
          }
        }
        $response['meeting_old_files'] = $event_data[0]->mfile;
      }
      $response['meeting_files'] = "";
      if(!empty($event_dataf->mfile))
      {
        if($event_dataf->student_id == $this->session->userdata('d168_id'))
        {
          $all_mfile = explode(',', $event_dataf->mfile);
          if($all_mfile)
          {
            $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
            $count = 0;
            foreach($all_mfile as $file)
            {
                $response['meeting_files'] .= '<li id="field_id'.$count.'">
                    <div class="row">
                        <div class="col-8"> 
                           <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                        </div>
                        <div class="col-4">
                            <a href="javascript:void(0)" onclick="return delete_meeting_file('."'".$count."'".','."'".$event_id."'".');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
                            <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                            <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                        </div>
                    </div></li>';
                 $count++;
            }
            $response['meeting_files'] .= '</ul>';
          }  
        }
        else
        {
          $all_mfile = explode(',', $event_dataf->mfile);
          if($all_mfile)
          {
            $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
            $count = 0;
            foreach($all_mfile as $file)
            {
                $response['meeting_files'] .= '<li id="field_id'.$count.'">
                    <div class="row">
                        <div class="col-8"> 
                           <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                        </div>
                        <div class="col-4">
                            <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                            <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                        </div>
                    </div></li>';
                 $count++;
            }
            $response['meeting_files'] .= '</ul>';
          }
        }       
      }
      $response['task_evt_color'] = $event_data[0]->event_color;
      $response['task_start_date'] = $event_data[0]->event_start_date;
      $response['task_end_date'] = $event_data[0]->event_end_date;
      // print_r($response);
      // die;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function event_data_following_event() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $event_id = $this->input->post('event_id');
      $event_data  = $this->Front_model->getEventDataFollowing($event_id);
      $event_dataf  = $this->Front_model->view_selected_single_event_info($event_id);
      $start_nn = $event_data[0]->event_start_date;
      foreach($event_data as $row)
      {
          $d1 = new DateTime($row->event_start_date);
          $d2 = new DateTime($start_nn);
          if($d1 < $d2){
              $start_nn = $row->event_start_date;
          }

      }
      $end_nn = $event_data[0]->event_end_date;
      foreach($event_data as $row)
      {
          $d1 = new DateTime($row->event_end_date);
          $d2 = new DateTime($end_nn);
          if($d1 > $d2){
              $end_nn = $row->event_end_date;
          }

      }
      $response['portfolio_update'] = "";
      $response['meeting_members'] = "";
      $response['meeting_members_selected'] = "";
      $response['meeting_old_files'] = "";
      $response['meeting_members_emailids'] = "";
      if($event_data[0]->created_type == "meeting")
      {
        $Portfolio = $this->Front_model->Portfolio();
        $AcceptedProjectList = $this->Front_model->AcceptedProjectListPortfolio();       
        if($Portfolio || $AcceptedProjectList)
        {
            if($event_data[0]->portfolio_id == '0')
            {
              $response['portfolio_update'] .= '<option value="">Select Portfolio</option>';
            }
            foreach($Portfolio as $c)
            {
              $response['portfolio_update'] .= '<option value="'.$c->portfolio_id.'"';
              if($event_data[0]->portfolio_id == $c->portfolio_id)
              {
                $response['portfolio_update'] .= ' selected';
              }
              $response['portfolio_update'] .= '><span>';
              if($c->portfolio_user == "company"){ $response['portfolio_update'] .= $c->portfolio_name;}elseif($c->portfolio_user == "individual"){ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;}else{ $response['portfolio_update'] .= $c->portfolio_name.' '.$c->portfolio_lname;};
              $response['portfolio_update'] .= '</span></option>';
            }
            foreach($AcceptedProjectList as $al)
            {
                $c_id = $al->portfolio_id;
                if($c_id != 0)
                {
                  $getAllPortfolio = $this->Front_model->getAllPortfolio($c_id);
                  if($getAllPortfolio->portfolio_createdby != $this->session->userdata('d168_id'))
                  {
                  
                  $response['portfolio_update'] .= '<option value="'.$getAllPortfolio->portfolio_id.'"';
                  if($event_data[0]->portfolio_id == $getAllPortfolio->portfolio_id)
                  {
                    $response['portfolio_update'] .= ' selected';
                  }
                  $response['portfolio_update'] .= '><span>';
                  if($getAllPortfolio->portfolio_user == "company"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;}elseif($getAllPortfolio->portfolio_user == "individual"){ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name.' '.$getAllPortfolio->portfolio_lname;}else{ $response['portfolio_update'] .= $getAllPortfolio->portfolio_name;};
                  $response['portfolio_update'] .= '</span></option>';
                  
                  }
                }
            }
        }

        $porttm = $this->Front_model->getAccepted_PortTM($event_data[0]->portfolio_id); 
                                   
        if($porttm)
        {
          foreach ($porttm as $ptm) 
          {
            $m = $this->Front_model->selectLogin($ptm->sent_to);
            $check_pm = $this->Front_model->check_evt_meeting_pm($m->reg_id,$event_id);
            if($m)
            {
              $check_pm_pmember = "";
              if($check_pm)
              {
                $check_pm_pmember = $check_pm->member;
              }
              if(($m->reg_id != $this->session->userdata('d168_id')) && ($m->reg_id != $check_pm_pmember))
              {
                $response['meeting_members'] .= '<option value="'.$m->reg_id.'"><span>'.$m->first_name." ".$m->last_name.'</span></option>';
              }
            }
            if($check_pm && $m)
            {
              $response['meeting_members'] .= '<option value="'.$m->reg_id.'" selected><span>'.$m->first_name." ".$m->last_name.'</span></option>';
            }
          }
        }
      
        $get_meeting_members = $this->Front_model->get_events_meeting($event_id);
        if($get_meeting_members)
        {
          $i2 = 0;
          $len2 = count($get_meeting_members);
          foreach($get_meeting_members as $gmm)
          {
            $response['meeting_members_selected'] .= $gmm->member;
            if ($i2 != $len2 - 1) 
            {
              $response['meeting_members_selected'] .= ',';
            }
            $i2++;
          }
        }
        $get_meeting_members_emailids = $this->Front_model->get_meeting_members_emailids($event_data[0]->unique_key);
        if($get_meeting_members_emailids)
        {
          foreach($get_meeting_members_emailids as $gmme)
          {
            $response['meeting_members_emailids'] .= '<div class="row mb-2"><div class="col-lg-8"><input type="email" id="imemail_up" name="imemail[]" class="form-control" value='.$gmme->member.' placeholder="Enter Email ID to Invite Member..."><span id="imemailErr" class="text-danger"></span></div><div class="col-lg-4 card-title mb-2"><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle add_dup_member_up2" style="margin-left: 30px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-plus"></i></span></button><button type="button" class="btn btn-light position-relative p-0 avatar-xs rounded-circle remove_dup_member" style="margin-left: 15px;"><span class="avatar-title bg-transparent text-reset"><i class="bx bx-minus"></i></span></button></div></div>';
          }
        }
        $response['meeting_old_files'] = $event_data[0]->mfile;
      }
      $response['meeting_files'] = "";
      if(!empty($event_dataf->mfile))
      {
        if($event_dataf->student_id == $this->session->userdata('d168_id'))
        {
          $all_mfile = explode(',', $event_dataf->mfile);
          if($all_mfile)
          {
            $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
            $count = 0;
            foreach($all_mfile as $file)
            {
                $response['meeting_files'] .= '<li id="field_id'.$count.'">
                    <div class="row">
                        <div class="col-8"> 
                           <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                        </div>
                        <div class="col-4">
                            <a href="javascript:void(0)" onclick="return delete_meeting_file('."'".$count."'".','."'".$event_id."'".');" class="text-dark float-end" title="Delete"><i class="bx bxs-x-square h3 m-1"></i></a>
                            <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                            <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                        </div>
                    </div></li>';
                 $count++;
            }
            $response['meeting_files'] .= '</ul>';
          }  
        }
        else
        {
          $all_mfile = explode(',', $event_dataf->mfile);
          if($all_mfile)
          {
            $response['meeting_files'] .='<ul class="list-unstyled fw-medium refresh_pcf_remove">';
            $count = 0;
            foreach($all_mfile as $file)
            {
                $response['meeting_files'] .= '<li id="field_id'.$count.'">
                    <div class="row">
                        <div class="col-8"> 
                           <a href="javascript: void(0);" class="nameLink" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview">'.substr($file, strpos($file, "_") + 1).'</a>
                        </div>
                        <div class="col-4">
                            <a href="'.base_url().'front/download_MeetingFileAttachment/'.$file."/".$event_id.'" class="text-dark float-end" title="Download"><i class="bx bx-download h3 m-1 text-d"></i></a>
                            <a href="javascript: void(0);" class="text-dark float-end" onclick="return PreviewMeetingFile('."'".$file."'".','."'".$event_id."'".')" title="Preview"><i class="bx bx-search-alt h3 m-1 text-d"></i></a>
                        </div>
                    </div></li>';
                 $count++;
            }
            $response['meeting_files'] .= '</ul>';
          }
        }      
      }
      $response['task_evt_color'] = $event_data[0]->event_color;
      $response['task_start_date'] = $start_nn;
      $response['task_end_date'] = $end_nn;
      // $response['task_start_date'] = $event_data[0]->event_start_date;
      // $response['task_end_date'] = array_slice($event_data, -1)[0]->event_end_date;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function delete_event() //Delete Event
  { 
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $event_id = $this->input->post('event_id');
      $delete_check = $this->input->post('delete_check');
      $this->Front_model->deleteEventTodo($event_id,$delete_check);
      $this->Front_model->deleteEventMeeting($event_id,$delete_check);
      $query_result = $this->Front_model->deleteEvent($event_id,$delete_check);
      $response['status'] = TRUE;
      $response['data'] = $query_result;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_drag_from() //Insert Draggable Form Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if($this->input->post('event_allDay_drag') == 'on')
      {
          $event_reminder = $this->input->post('event_reminder_new');
      }
      else
      {
          $event_reminder = $this->input->post('event_reminder') ;
      }
      //$event_reminder = str_replace(PHP_EOL, '', $event_reminder);
      $this->form_validation->set_rules('event_name','Event Name','trim|required');
      $this->form_validation->set_rules('event_color','Event Color','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }

          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $type = $this->input->post('type');

        $unique_key = uniqid();

        //$event_start_end_date = $this->input->post('event_start_end_date_drag');
        $event_start_end_date = date('Y-m-d');
        $date = $this->displayDates($event_start_end_date, $event_start_end_date);
                $date_array = json_encode($date);

                $event_start_time  = date("H:i:s", strtotime($this->input->post('event_start_time')));
                $event_end_time  = date("H:i:s", strtotime($this->input->post('event_end_time')));

                $allDay = $this->input->post('event_allDay_drag');

                if($allDay == 'on')
                {
                    $allDay = 'true';
                    $event_start_time  = '00:00:00';
                    $event_end_time  = '00:00:00';
                }
                else
                {
                    $allDay = 'false';
                    if($event_start_time >= $event_end_time)
                    {
                      $response['status'] = 'event_end_timeErr';
                      header('Content-type: application/json');
                      //echo json_encode($response);
                      exit(json_encode($response));
                    }
                    else
                    {
                      $event_start_date = $this->input->post('event_start_time');
                      $event_end_date = $this->input->post('event_end_time');
                    }
                }

        $de = $this->Front_model->getDraggableEventsCount($this->session->userdata('d168_id'),$this->input->post('event_name'));
                if(($this->input->post('draggable_event_drag') != "") && ($de <= 0)){

                    $data = array(  'student_id' => $this->session->userdata('d168_id'),
                                    'event_name' => $this->input->post('event_name'),
                                    'event_color' => $this->input->post('event_color'),
                                    'event_note' => $this->input->post('event_note'),
                                    'event_start_date' => $event_start_end_date,
                                    'event_end_date' => $event_start_end_date,
                                    'event_start_time' => $event_start_time,
                                    'event_end_time' => $event_end_time,
                                    'event_repeat_option' => $this->input->post('event_repeat_option_drag'),
                                    'event_allDay' => $allDay,
                                    'event_reminder' => $event_reminder,
                                    'show_draggable_event' => 1,
                                    'status' => 'active',
                                    'date' => date('Y-m-d H:i:s'),
                                 );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insertDraggableEvent($data);
                    $inserted_id = $this->db->insert_id();
                    $response['drag_id'] = $inserted_id;
                }else{
                    $response['drag_id'] = 'no_drag_id';
                }

                // if($this->input->post('event_repeat_option_drag') == 'Does not repeat'){
                //     $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                //                     'event_name' => $this->input->post('event_name'),
                //                     'event_color' => $this->input->post('event_color'),
                //                     'event_note' => $this->input->post('event_note'),
                //                     'event_start_date' => $event_start_end_date,
                //                     'event_end_date' => $event_start_end_date,
                //                     'date_array' => $date_array,
                //                     'end_date' => $event_start_end_date,
                //                     'event_start_time' => $event_start_time,
                //                     'event_end_time' => $event_end_time,
                //                     'unique_key' => $unique_key,
                //                     'event_repeat_option' => 'Does not repeat',
                //                     'event_allDay' => $allDay,
                //                     'event_reminder' => $event_reminder,
                //                     'draggable_event' => $this->input->post('draggable_event_drag'),
                //                     'draggable_id' => $response['drag_id'],
                //                     'type' => $this->input->post('type'),
                //                     'status' => 'active',
                //                     'event_repeat_option_type' => $this->input->post('event_repeat_option_drag'),
                //                     'date' => date('Y-m-d H:i:s'),
                //                     'created_type' => $this->input->post('type'),
                //                 );

                // }else{
                //     $data1[] = array( 'student_id' => $this->session->userdata('d168_id'),
                //                     'event_name' => $this->input->post('event_name'),
                //                     'event_color' => $this->input->post('event_color'),
                //                     'event_note' => $this->input->post('event_note'),
                //                     'event_start_date' => $event_start_end_date,
                //                     'event_end_date' => $event_start_end_date,
                //                     'date_array' => $date_array,
                //                     'end_date' => $event_start_end_date,
                //                     'event_start_time' => $event_start_time,
                //                     'event_end_time' => $event_end_time,
                //                     'unique_key' => $unique_key,
                //                     'event_repeat_option' => 'Does not repeat',
                //                     'event_allDay' => $allDay,
                //                     'event_reminder' => $event_reminder,
                //                     'draggable_event' => $this->input->post('draggable_event_drag'),
                //                     'draggable_id' => $response['drag_id'],
                //                     'type' => $this->input->post('type'),
                //                     'status' => 'active',
                //                     'date' => date('Y-m-d H:i:s'),
                //                     'event_repeat_option_type' => $this->input->post('event_repeat_option_drag'),
                //                     'created_type' => $this->input->post('type'),
                //                     'task_priority' => $this->input->post('task_priority'),
                //                 );
                // }                
                // $data1 = $this->security->xss_clean($data1); // xss filter
                // $this->db->insert_batch('events', $data1);

                $response['status'] = true;
                //$this->session->set_flashdata('message', 'Successfully Created');
                header('Content-type: application/json');
                echo json_encode($response);
      }    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function get_drag_event_data() //Draggable Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $drag_id = $this->input->post('drag_id');
      $de = $this->Front_model->getDraggableEventById($drag_id);
      $response['student_id'] = $this->session->userdata('d168_id');
      $response['event_name'] = $de->event_name;
      $response['event_color'] = $de->event_color;
      $response['event_note'] = $de->event_note;
      $response['allDay'] = $de->event_allDay;
      $response['event_start_date'] = $de->event_start_date;
      $response['event_end_date'] = $de->event_end_date;
      $response['event_start_time'] = $de->event_start_time;
      $response['event_end_time'] = $de->event_end_time;
      $response['event_repeat_option'] = $de->event_repeat_option;
      $response['event_reminder'] = $de->event_reminder;
      $response['drag_id'] = $drag_id;
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_drag_event() //Update Draggable Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('event_name','Event Name','trim|required');
      $this->form_validation->set_rules('event_color','Event Color','trim|required');

      if($this->input->post('event_allDay_drag_update') == 'on')
      {
          $event_reminder = $this->input->post('event_reminder_new');
      }
      else
      {
          $event_reminder = $this->input->post('event_reminder') ;
      }
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }

          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $drag_id = $this->input->post('drag_id');
          // $esdate = date('Y-m-d');
          $esdate = $this->input->post('event_start_end_date_drag_update');
          $event_start_time  = date("H:i:s", strtotime($this->input->post('event_start_time')));
          $event_end_time  = date("H:i:s", strtotime($this->input->post('event_end_time')));

          $allDay = $this->input->post('event_allDay_drag_update');
          if($allDay == 'on'){
              $allDay = 'true';
              $event_start_time  = '00:00:00';
              $event_end_time  = '00:00:00';
        // echo 'yes';
        // die();
          }else{
              $allDay = 'false';
              if($event_start_time >= $event_end_time)
              {
                $response['status'] = 'event_end_timeErr';
                header('Content-type: application/json');
                //echo json_encode($response);
                exit(json_encode($response));
        // echo 'yes2';
        // die();
              }
        // echo 'yes3';
        // die();
          }
          $data = array(  'event_name' => $this->input->post('event_name'),
                          'event_color' => $this->input->post('event_color'),
                          'event_note' => $this->input->post('event_note'),
                          'event_start_date' => $esdate,
                          'event_end_date' => $esdate,
                          'event_start_time' => $event_start_time,
                          'event_end_time' => $event_end_time,
                          'event_repeat_option' => $this->input->post('event_repeat_option_update'),
                          'event_allDay' => $allDay,
                          'event_reminder' => $event_reminder,
                          'show_draggable_event' => 1,
                       );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->updateDraggableEvent($data,$drag_id);
          $response['drag_id'] = $drag_id;
          //$this->session->set_flashdata('message', 'Successfully Updated');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function delete_draggable_event() //delete Draggable Event
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $drag_id = $this->input->post('drag_id');
      $this->Front_model->deleteDraggableEvent($drag_id);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_drop_event() //Insert Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $drag_start_date = $this->input->post('drag_date');
      $start_date_array = explode(' ', $drag_start_date);

      $drag_id = $this->input->post('drag_id');
      $de = $this->Front_model->getDraggableEventById($drag_id);       
      $unique_key = uniqid();
      $allDay = $this->input->post('allDay');
      if($allDay == 'false')
      {
          $end_date_array = strtotime("+15 minutes", strtotime($drag_start_date));
          $end_date_array = date('Y-m-d h:i:s', $end_date_array);
          $end_date_array = explode(' ', $end_date_array);

          $drag_end_date = strtotime("+15 minutes", strtotime($drag_start_date));
          $drag_end_date = date('Y-m-d h:i:s', $drag_end_date);

          $start_date = $start_date_array[0];
          $end_date = $end_date_array[0];

          $start_time = $start_date_array[1];
          $end_time = $end_date_array[1];


      }
      else if($allDay == 'true'){
          $end_date_array = $start_date_array;

          $start_date = $start_date_array[0];
          $end_date = $end_date_array[0];

          $start_time = $start_date_array[1];
          $end_time = $end_date_array[1];

          $drag_end_date = $drag_start_date;
      }
      else{
          $end_date_array = $start_date_array;
          $start_date = $start_date_array[0];
          $end_date = $end_date_array[0];

          if($de->event_start_time){
              $start_time = $de->event_start_time;
          }else{
              $start_time = $start_date_array[1];
          }
          if($de->event_end_time){
              $end_time = $de->event_end_time;
          }else{
              $end_time = $end_date_array[1];
          }
          $drag_start_date = $start_date.' '.$start_time;
          $drag_end_date = $end_date.' '.$end_time;
          $allDay = $de->event_allDay;
      }

      if($de->event_repeat_option == 'Does not repeat'){
          $end_date1 = $end_date;
      }else{
          if($start_date <= $de->end_date){
              $end_date1 = $de->end_date;
          }else{
            $end_date1 = $end_date;
          }
      }

      function displayDates($date1, $date2, $format = 'Y-m' ) {
        $dates = array();
        $date1  = date("Y-m", strtotime($date1));
        $date2  = date("Y-m", strtotime($date2));
        $current = strtotime($date1);
        $date2 = strtotime($date2);
        $stepVal = '+1 months';
        while( $current <= $date2 ) {
           $dates[] = date($format, $current);
           $current = strtotime($stepVal, $current);
        }
        return $dates;
      }
      $date = displayDates($start_date, $end_date1);

      $date_array = json_encode($date);

      if($de){
          $data = array(  'student_id' => $this->session->userdata('d168_id'),
                          'event_name' => $de->event_name,
                          'event_color' => $de->event_color,
                          'event_note' => $de->event_note,
                          'event_start_date' => $start_date,
                          'event_end_date' => $end_date,
                          'date_array' => $date_array,
                          'end_date' => $end_date1,
                          'event_start_time' => $start_time,
                          'event_end_time' => $end_time,
                          'unique_key' => $unique_key,
                          'event_repeat_option' => $de->event_repeat_option,
                          'event_repeat_option_type' => $de->event_repeat_option,
                          'event_allDay' => $allDay,
                          'event_reminder' => $de->event_reminder,
                          'draggable_event' => 'on',
                          'draggable_id' => $this->input->post('drag_id'),
                          'type' => 'event',
                          'created_type' => 'event',
                          'task_priority' => 'No Priority',
                          'status' => 'active',
                          'date' => date('Y-m-d H:i:s')
                       );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insertEvent($data);
          $inserted_id = $this->db->insert_id();
          //$this->session->set_flashdata('message', 'Successfully Added');
          $response['student_id'] = $this->session->userdata('d168_id');
          $response['event_id'] = $inserted_id;
          $response['event_name'] = $de->event_name;
          $response['event_color'] = $de->event_color;
          $response['event_note'] = $de->event_note;
          $response['allDay'] = $allDay;
          $response['type'] = 'event';
          $response['start_date'] = $drag_start_date;
          $response['end_date'] = $drag_end_date;
          $response['event_start_date'] = $start_date;
          $response['event_end_date'] = $end_date;
          $response['event_start_time'] = $start_time;
          $response['event_end_time'] = $end_time;
          $response['event_repeat_option'] = $de->event_repeat_option;
          $response['event_repeat_option_type'] = $de->event_repeat_option;
          $response['created_type'] = 'event';
          $response['event_reminder'] = $de->event_reminder;
          $response['draggable_event'] = 'on';
          $response['draggable_id'] = $this->input->post('drag_id');
          $response['drag_id'] = $drag_id;

          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_event() //Update Event Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('event_name','Event Name','trim|required');
      $this->form_validation->set_rules('event_color','Event Color','trim|required');

      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }

          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $start_date = explode(' ',$this->input->post('start_date'));
          $end_date = explode(' ',$this->input->post('end_date'));
          $event_id = $this->input->post('event_id');
          $data = array(  'student_id' => $this->session->userdata('d168_id'),
                          'event_name' => $this->input->post('event_name'),
                          'event_color' => $this->input->post('event_color'),
                          'event_start_date' => $start_date[0],
                          'event_end_date' => $end_date[0],
                          'event_start_time' => $start_date[1],
                          'event_end_time' => $end_date[1],
                          'event_allDay' => $this->input->post('allDay'),
                       );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->updateEvent($data,$event_id);
          $this->session->set_flashdata('message', 'Successfully Updated');
          $response['event_start_date'] = $start_date[0];
          $response['event_end_date'] = $end_date[0];
          $response['event_start_time'] = $start_date[1];
          $response['event_end_time'] = $end_date[1];
          $response['event_allDay'] = $this->input->post('allDay');
          $response['status'] = TRUE;

          header('Content-type: application/json');
          echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function auto_email_calendar_reminder()
  {
    $getEvents = $this->Front_model->getAllEventsReminder();
    if($getEvents)
    {
      foreach($getEvents as $evt)
      {
        if($evt->event_allDay == 'true')
        {
          $get_CDate = date('Y-m-d');
          if($get_CDate == $evt->event_start_date)
          {
            $get_CTime = date("h:i A");
            // echo $get_CTime;
            // echo $evt->event_reminder;
            if($get_CTime == $evt->event_reminder)
            {
              $user = $this->Front_model->getRemEventUser($evt->student_id);
              if($user)
              {
                $email_to = $user->email_address;
                $email_from = 'hello@decision168.com'; 
                //$email_from = 'saramaazkhan123@gmail.com'; 
                $email_name = 'Decision 168';

                $evt_date_time = '';
                if($evt->event_start_date == $evt->event_end_date)
                {
                  $sd = date_create($evt->event_start_date);
                  $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                }
                else
                {
                  $sd = date_create($evt->event_start_date);
                  $ed = date_create($evt->event_end_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                }

                if($evt->created_type == 'event')
                {
                  $subject = 'Event Reminder! | Decision 168';
                  $title = 'Hey there, You have an Event Reminder!';
                  $message = 'You have an event coming up, here\'s your reminder and details:';
                  $msd_des = 'Event : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                }
                elseif($evt->created_type == 'task')
                {
                  $subject = 'To Do Reminder! | Decision 168';
                  $title = 'Hey there, You have a To Do Reminder!';
                  $message = 'You have a to do that needs your attention, here\'s your reminder and details:';
                  $msd_des = 'To Do : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Priority: '.$evt->task_priority.'<br>';
                }
                elseif($evt->created_type == 'meeting')
                {
                  $subject = 'Meeting Reminder! | Decision 168';
                  $title = 'Hey there, You have a Meeting Reminder!';
                  $message = 'You have a meeting, here\'s your meeting details:';
                  $msd_des = 'Title : '.$evt->event_name.'<br> Link: <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a><br> Location: '.$evt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$evt->meeting_agenda.'</div><br>';
                }
                else
                {
                  $subject = 'Reminder! | Decision 168';
                  $title = 'Hey there, You have a Reminder!';
                  $message = 'You set yourself a reminder, here it is:';
                  $msd_des = 'Reminder : '.$evt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                }
                // echo $subject;
                // die();
                $this->load->library('email');  
                $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
                $this->email->initialize($config);
                $this->email->from($email_from, $email_name);
                $this->email->set_header('Reply-To', $email_from."\r\n");
                $this->email->set_header('Return-Path', $email_from."\r\n");
                $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                $this->email->to($email_to);
                $this->email->set_mailtype('html');
                $this->email->subject($subject);
                $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>'.$subject.'</title>
                  <meta name="description" content="'.$subject.'">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         '.$message.'.
                                                          <br><br>
                                                        '.$msd_des.'
                                                      </p>
                                                      <a href="'.base_url('calendar').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                );
                $this->email->send();

                $data = array(  'event_reminder_send' => 'sent'
                       );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateEvent($data,$evt->id);
              } 
              //meeting notification for members
              $meet_evt = $this->Front_model->get_all_evt_meetings($evt->id);
              if($meet_evt)
              {
                foreach($meet_evt as $mevt)
                {
                  $user = $this->Front_model->getStudentById($mevt->member);
                  if($user)
                  {
                    $email_to = $user->email_address;
                    $email_from = 'hello@decision168.com'; 
                    //$email_from = 'saramaazkhan123@gmail.com'; 
                    $email_name = 'Decision 168';

                    $evt_date_time = '';
                    if($mevt->event_start_date == $mevt->event_end_date)
                    {
                      $sd = date_create($mevt->event_start_date);
                      $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                    }
                    else
                    {
                      $sd = date_create($mevt->event_start_date);
                      $ed = date_create($mevt->event_end_date);
                      $evt_start_d = date_format($sd,"l, F d Y");
                      $evt_end_d = date_format($ed,"l, F d Y");
                      $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                    }

                    if($mevt->created_type == 'event')
                    {
                      $subject = 'Event Reminder! | Decision 168';
                      $title = 'Hey there, You have an Event Reminder!';
                      $message = 'You have an event coming up, here\'s your reminder and details:';
                      $msd_des = 'Event : '.$mevt->event_name.'<br> Note: '.$mevt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br>';
                    }
                    elseif($mevt->created_type == 'task')
                    {
                      $subject = 'To Do Reminder! | Decision 168';
                      $title = 'Hey there, You have a To Do Reminder!';
                      $message = 'You have a to do that needs your attention, here\'s your reminder and details:';
                      $msd_des = 'To Do : '.$mevt->event_name.'<br> Note: '.$mevt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br> Priority: '.$mevt->task_priority.'<br>';
                    }
                    elseif($mevt->created_type == 'meeting')
                    {
                      $subject = 'Meeting Reminder! | Decision 168';
                      $title = 'Hey there, You have a Meeting Reminder!';
                      $message = 'You have a meeting, here\'s your meeting details:';
                      $msd_des = 'Title : '.$mevt->event_name.'<br> Link: <a href="'.$mevt->meeting_link.'" target="_blank">'.$mevt->meeting_link.'</a><br> Location: '.$mevt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$mevt->meeting_agenda.'</div><br>';
                    }
                    else
                    {
                      $subject = 'Reminder! | Decision 168';
                      $title = 'Hey there, You have a Reminder!';
                      $message = 'You set yourself a reminder, here it is:';
                      $msd_des = 'Reminder : '.$mevt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br>';
                    }
                    // echo $subject;
                    // die();
                    $this->load->library('email');  
                    $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                    $this->email->initialize($config);
                    $this->email->from($email_from, $email_name);
                    $this->email->set_header('Reply-To', $email_from."\r\n");
                    $this->email->set_header('Return-Path', $email_from."\r\n");
                    $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                    $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                    $this->email->to($email_to);
                    $this->email->set_mailtype('html');
                    $this->email->subject($subject);
                    $this->email->message('                 
                    <!doctype html>
                    <html lang="en-US">

                    <head>
                      <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                      <title>'.$subject.'</title>
                      <meta name="description" content="'.$subject.'">
                      <style type="text/css">
                          a:hover {text-decoration: underline !important;pointer:cursor !important;}
                      </style>
                    </head>

                    <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                      <!--100% body table-->

                      <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                          style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                          <tr>
                              <td>
                                  <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                      <tr>
                                          <td style="height:80px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td style="text-align:center;">
                                            <a href="'.base_url().'" title="Decision 168" target="_blank">
                                              <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                            </a>
                                          </td>
                                      </tr>
                                      <tr>
                                          <td style="height:20px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td>
                                              <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                  style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                  <tr>
                                                      <td style="height:40px;">&nbsp;</td>
                                                  </tr>
                                                  <tr>
                                                      <td style="padding:0 35px;">
                                                          <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                          <span
                                                              style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                             '.$message.'.
                                                              <br><br>
                                                            '.$msd_des.'
                                                          </p>
                                                          <a href="'.base_url('calendar').'"
                                                          style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                        </a> 
                                                        <br><br>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                              Thanks,
                                                              <br>
                                                              The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                              </p>
                                                              <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                              <br>
                                                              <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                              </p>
                                                      </td>
                                                  </tr>
                                                  <tr>
                                                      <td style="height:40px;">&nbsp;</td>
                                                  </tr>
                                              </table>
                                          </td>
                                      <tr>
                                          <td style="height:20px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td style="text-align:center;">
                                          <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                          <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                          <br>
                                              <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                          </td>
                                      </tr>
                                      <tr>
                                          <td style="height:80px;">&nbsp;</td>
                                      </tr>
                                  </table>
                              </td>
                          </tr>
                      </table>
                      <!--/100% body table-->
                    </body>

                    </html>' 
                    );
                    $this->email->send();

                    $data = array(  'm_event_reminder_send' => 'sent'
                           );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->updateEventMeeting($data,$mevt->mid);
                  } 
                }
              }
            }
          }
        }
        else
        {
          $evt_reminder_type = $evt->event_reminder;
          $evt_rem = $evt->event_start_date.' '.$evt->event_start_time;
          $get_CDateTime = date('Y-m-d H:i');
          //echo $evt_reminder_type.'<br>';
          // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
          $evt_reminder = "";
          if($evt_reminder_type == "5 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-5 minutes"));
            // echo $evt_reminder.'<br>';
            // echo $get_CDateTime;
          }
          elseif($evt_reminder_type == "15 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-15 minutes"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "30 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-30 minutes"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 hour before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 hours"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "4 hours before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-4 hours"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 day before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 days"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "2 days before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-2 days"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 week before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 weeks"));
            //echo $evt_reminder;
          }

          if($get_CDateTime == $evt_reminder)
          {
            $user = $this->Front_model->getRemEventUser($evt->student_id);
            if($user)
            {
              $email_to = $user->email_address;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $evt_date_time = '';
              if($evt->event_start_date == $evt->event_end_date)
              {
                $sd = date_create($evt->event_start_date);
                $evt_start_d = date_format($sd,"l, F d Y");
                $st = date_create($evt->event_start_time);
                $evt_start_t = date_format($st,"H:i A");
                $et = date_create($evt->event_end_time);
                $evt_end_t = date_format($et,"H:i A");
                $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
              }
              else
              {
                $sd = date_create($evt->event_start_date);
                $evt_start_d = date_format($sd,"l, F d Y");
                $st = date_create($evt->event_start_time);
                $evt_start_t = date_format($st,"H:i A");
                $ed = date_create($evt->event_end_date);
                $evt_end_d = date_format($ed,"l, F d Y");
                $et = date_create($evt->event_end_time);
                $evt_end_t = date_format($et,"H:i A");
                $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
              }

              if($evt->created_type == 'event')
              {
                $subject = 'Event Reminder! | Decision 168';
                $title = 'Hey there, You have an Event Reminder!';
                $message = 'You have an event coming up, here\'s your reminder and details:';
                $msd_des = 'Event : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
              }
              elseif($evt->created_type == 'task')
              {
                $subject = 'To Do Reminder! | Decision 168';
                $title = 'Hey there, You have a To Do Reminder!';
                $message = 'You have a To Do that needs your attention, here\'s your reminder and details:';
                $msd_des = 'To Do : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Priority: '.$evt->task_priority.'<br>';
              }
              elseif($evt->created_type == 'meeting')
              {
                $subject = 'Meeting Reminder! | Decision 168';
                $title = 'Hey there, You have a Meeting Reminder!';
                $message = 'You have a meeting, here\'s your meeting details:';
                $msd_des = 'Title : '.$evt->event_name.'<br> Link: <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a><br> Location: '.$evt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$evt->meeting_agenda.'</div><br>';
              }
              else
              {
                $subject = 'Reminder! | Decision 168';
                $title = 'Hey there, You have a Reminder!';
                $message = 'You set yourself a reminder, here it is:';
                $msd_des = 'Reminder : '.$evt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
              }
              
              // echo $subject;
              // die();
              $this->load->library('email');  
              $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject($subject);
              $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>'.$subject.'</title>
                  <meta name="description" content="'.$subject.'">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         '.$message.'.
                                                          <br><br>
                                                        '.$msd_des.'
                                                      </p>
                                                      <a href="'.base_url('calendar').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                );
              $this->email->send();

              $data = array(  'event_reminder_send' => 'sent'
                     );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->updateEvent($data,$evt->id);
            }
            //meeting notification for members
            $meet_evt = $this->Front_model->get_all_evt_meetings($evt->id);
            if($meet_evt)
            {
              foreach($meet_evt as $mevt)
              {
                $user = $this->Front_model->getStudentById($mevt->member);
                if($user)
                {
                  $email_to = $user->email_address;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $evt_date_time = '';
                  if($mevt->event_start_date == $mevt->event_end_date)
                  {
                    $sd = date_create($mevt->event_start_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $st = date_create($mevt->event_start_time);
                    $evt_start_t = date_format($st,"H:i A");
                    $et = date_create($mevt->event_end_time);
                    $evt_end_t = date_format($et,"H:i A");
                    $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                  }
                  else
                  {
                    $sd = date_create($mevt->event_start_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $st = date_create($mevt->event_start_time);
                    $evt_start_t = date_format($st,"H:i A");
                    $ed = date_create($mevt->event_end_date);
                    $evt_end_d = date_format($ed,"l, F d Y");
                    $et = date_create($mevt->event_end_time);
                    $evt_end_t = date_format($et,"H:i A");
                    $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                  }

                  if($mevt->created_type == 'event')
                  {
                    $subject = 'Event Reminder! | Decision 168';
                    $title = 'Hey there, You have an Event Reminder!';
                    $message = 'You have an event coming up, here\'s your reminder and details:';
                    $msd_des = 'Event : '.$mevt->event_name.'<br> Note: '.$mevt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br>';
                  }
                  elseif($mevt->created_type == 'task')
                  {
                    $subject = 'To Do Reminder! | Decision 168';
                    $title = 'Hey there, You have a To Do Reminder!';
                    $message = 'You have a to do that needs your attention, here\'s your reminder and details:';
                    $msd_des = 'To Do : '.$mevt->event_name.'<br> Note: '.$mevt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br> Priority: '.$mevt->task_priority.'<br>';
                  }
                  elseif($mevt->created_type == 'meeting')
                  {
                    $subject = 'Meeting Reminder! | Decision 168';
                    $title = 'Hey there, You have a Meeting Reminder!';
                    $message = 'You have a meeting, here\'s your meeting details:';
                    $msd_des = 'Title : '.$mevt->event_name.'<br> Link: <a href="'.$mevt->meeting_link.'" target="_blank">'.$mevt->meeting_link.'</a><br> Location: '.$mevt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$mevt->meeting_agenda.'</div><br>';
                  }
                  else
                  {
                    $subject = 'Reminder! | Decision 168';
                    $title = 'Hey there, You have a Reminder!';
                    $message = 'You set yourself a reminder, here it is:';
                    $msd_des = 'Reminder : '.$mevt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$mevt->event_reminder.'<br> Type: '.$mevt->event_repeat_option_type.'<br>';
                  }
                  // echo $subject;
                  // die();
                  $this->load->library('email');  
                  $config=array(
                  'charset'=>'utf-8',
                  'wordwrap'=> TRUE,
                  'mailtype' => 'html'
                  );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject($subject);
                  $this->email->message('                 
                  <!doctype html>
                  <html lang="en-US">

                  <head>
                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                    <title>'.$subject.'</title>
                    <meta name="description" content="'.$subject.'">
                    <style type="text/css">
                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                    </style>
                  </head>

                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                    <!--100% body table-->

                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                        <tr>
                            <td>
                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                          </a>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                                <tr>
                                                    <td style="padding:0 35px;">
                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                        <span
                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                           '.$message.'.
                                                            <br><br>
                                                          '.$msd_des.'
                                                        </p>
                                                        <a href="'.base_url('calendar').'"
                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                      </a> 
                                                      <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            Thanks,
                                                            <br>
                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                            </p>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                            <br>
                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                            </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                        <br>
                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <!--/100% body table-->
                  </body>

                  </html>' 
                  );
                  $this->email->send();

                  $data = array(  'm_event_reminder_send' => 'sent'
                         );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->updateEventMeeting($data,$mevt->mid);
                } 
              }
            }
          }
        }
      }
    }
  }

  public function auto_in_app_calendar_reminder()
  {    
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {  
      $getEvents = $this->Front_model->getUserEventsReminder();
      $meet_evt = $this->Front_model->getUserEventsMeetingReminder();
      // echo '<pre>';
      // print_r($getEvents);
      // echo '<br><pre>';
      // print_r($meet_evt);
      // die();
      if($getEvents)
      {
        foreach($getEvents as $evt)
        {
          if($evt->event_allDay == 'true')
          {
            $get_CDate = date('Y-m-d');
            if($get_CDate == $evt->event_start_date)
            {
              $get_CTime = date("h:i A");
              // echo $get_CTime;
              // echo $evt->event_reminder;
              if($get_CTime == $evt->event_reminder)
              {
                  $evt_date_time = '';
                  if($evt->event_start_date == $evt->event_end_date)
                  {
                    $sd = date_create($evt->event_start_date);
                    $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                  }
                  else
                  {
                    $sd = date_create($evt->event_start_date);
                    $ed = date_create($evt->event_end_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $evt_end_d = date_format($ed,"l, F d Y");
                    $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                  }

                  if($evt->created_type == 'event')
                  {
                    $heading = 'Event Reminder!';
                    $title = 'Hey there, You have an Event Reminder!';
                    $msd_des = '<p class="card-text"><strong>Event : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$evt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-calendar-check"></i>';
                  }
                  elseif($evt->created_type == 'task')
                  {
                    $heading = 'To Do Reminder!';
                    $title = 'Hey there, You have a To Do Reminder!';
                    $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$evt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p> <p class="card-text"><strong>Priority : </strong>'.$evt->task_priority.'</p>';
                    $icon = '<i class="fas fa-dot-circle"></i>';
                  }
                  elseif($evt->created_type == 'meeting')
                  {
                    $heading = 'Meeting Reminder!';
                    $title = 'Hey there, You have a Meeting Reminder!';
                    $msd_des = '<p class="card-text"><strong>Title : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Link : </strong> <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a></p> <p class="card-text"><strong>Location : </strong>'.$evt->meeting_location.'</p> <p class="card-text"><strong>Agenda : </strong>'.$evt->meeting_agenda.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-link"></i>';
                  }
                  else
                  {
                    $heading = 'Reminder!';
                    $title = 'Hey there, You have a Reminder!';
                    $msd_des = '<p class="card-text"><strong>Reminder : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-bell"></i>';
                  }                

                  $data = array(  'in_app_reminder' => 'shown'
                         );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->updateEvent($data,$evt->id);

                  $response['reminder_detail'] = '<div class="modal fade calendarReminderModal'.$evt->id.'" tabindex="-1" aria-labelledby="calendarReminderModalLabel'.$evt->id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                    $response['get_evt_id'] =  $evt->id;
                    $response['get_evt_rem'] =  'new_evt_rem';
                    header('Content-type: application/json');
                    exit(json_encode($response));                              
              }
              else
              {
                $response['get_evt_rem'] =  'no_evt_rem';
              }
            }
            else
            {
              $response['get_evt_rem'] =  'no_evt_rem';
            }
          }
          elseif($evt->event_allDay == 'false')
          {
            $evt_reminder_type = $evt->event_reminder;
            $evt_rem = $evt->event_start_date.' '.$evt->event_start_time;
            $get_CDateTime = date('Y-m-d H:i');
            //echo $evt_reminder_type.'<br>';
            // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
            $evt_reminder = "";
            if($evt_reminder_type == "5 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-5 minutes"));
              // echo $evt_reminder.'<br>';
              // echo $get_CDateTime;
            }
            elseif($evt_reminder_type == "15 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-15 minutes"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "30 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-30 minutes"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 hour before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 hours"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "4 hours before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-4 hours"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 day before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 days"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "2 days before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-2 days"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 week before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 weeks"));
              //echo $evt_reminder;
            }

            if($get_CDateTime == $evt_reminder)
            {        
                $evt_date_time = '';
                if($evt->event_start_date == $evt->event_end_date)
                {
                  $sd = date_create($evt->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $et = date_create($evt->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                }
                else
                {
                  $sd = date_create($evt->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $ed = date_create($evt->event_end_date);
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $et = date_create($evt->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                }

                if($evt->created_type == 'event')
                {
                  $heading = 'Event Reminder!';
                  $title = 'Hey there, You have an Event Reminder!';
                  $msd_des = '<p class="card-text"><strong>Event : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$evt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-calendar-check"></i>';
                }
                elseif($evt->created_type == 'task')
                {
                  $heading = 'To Do Reminder!';
                  $title = 'Hey there, You have a To Do Reminder!';
                  $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$evt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p> <p class="card-text"><strong>Priority : </strong>'.$evt->task_priority.'</p>';
                  $icon = '<i class="fas fa-dot-circle"></i>';
                }
                elseif($evt->created_type == 'meeting')
                {
                  $heading = 'Meeting Reminder!';
                  $title = 'Hey there, You have a Meeting Reminder!';
                  $msd_des = '<p class="card-text"><strong>Title : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Link : </strong> <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a></p> <p class="card-text"><strong>Location : </strong>'.$evt->meeting_location.'</p> <p class="card-text"><strong>Agenda : </strong>'.$evt->meeting_agenda.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-link"></i>';
                }
                else
                {
                  $heading = 'Reminder!';
                  $title = 'Hey there, You have a Reminder!';
                  $msd_des = '<p class="card-text"><strong>Reminder : </strong>'.$evt->event_name.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$evt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$evt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-bell"></i>';
                }

                $data = array(  'in_app_reminder' => 'shown'
                       );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateEvent($data,$evt->id);

                $response['reminder_detail'] = '<div class="modal fade calendarReminderModal'.$evt->id.'"'.$evt->id.' tabindex="-1" aria-labelledby="calendarReminderModalLabel'.$evt->id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                  $response['get_evt_id'] =  $evt->id;
                  $response['get_evt_rem'] =  'new_evt_rem';
                  header('Content-type: application/json');
                  exit(json_encode($response));
            }
            else
            {
              $response['get_evt_rem'] =  'no_evt_rem';
            }
          }
          else
          {
            $response['get_evt_rem'] =  'no_evt_rem';
          }
        }
      }
      if($meet_evt)
      {
        foreach($meet_evt as $mevt)
        {
          if($mevt->event_allDay == 'true')
          {
            $get_CDate = date('Y-m-d');
            if($get_CDate == $mevt->event_start_date)
            {
              $get_CTime = date("h:i A");
              // echo $get_CTime;
              // echo $mevt->event_reminder;
              if($get_CTime == $mevt->event_reminder)
              {
                  $evt_date_time = '';
                  if($mevt->event_start_date == $mevt->event_end_date)
                  {
                    $sd = date_create($mevt->event_start_date);
                    $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                  }
                  else
                  {
                    $sd = date_create($mevt->event_start_date);
                    $ed = date_create($mevt->event_end_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $evt_end_d = date_format($ed,"l, F d Y");
                    $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                  }

                  if($mevt->created_type == 'event')
                  {
                    $heading = 'Event Reminder!';
                    $title = 'Hey there, You have an Event Reminder!';
                    $msd_des = '<p class="card-text"><strong>Event : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$mevt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-calendar-check"></i>';
                  }
                  elseif($mevt->created_type == 'task')
                  {
                    $heading = 'To Do Reminder!';
                    $title = 'Hey there, You have a To Do Reminder!';
                    $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$mevt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p> <p class="card-text"><strong>Priority : </strong>'.$mevt->task_priority.'</p>';
                    $icon = '<i class="fas fa-dot-circle"></i>';
                  }
                  elseif($mevt->created_type == 'meeting')
                  {
                    $heading = 'Meeting Reminder!';
                    $title = 'Hey there, You have a Meeting Reminder!';
                    $msd_des = '<p class="card-text"><strong>Title : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Link : </strong> <a href="'.$mevt->meeting_link.'" target="_blank">'.$mevt->meeting_link.'</a></p> <p class="card-text"><strong>Location : </strong>'.$mevt->meeting_location.'</p> <p class="card-text"><strong>Agenda : </strong>'.$mevt->meeting_agenda.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-link"></i>';
                  }
                  else
                  {
                    $heading = 'Reminder!';
                    $title = 'Hey there, You have a Reminder!';
                    $msd_des = '<p class="card-text"><strong>Reminder : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                    $icon = '<i class="fas fa-bell"></i>';
                  }                

                  $data = array(  'm_in_app_reminder' => 'shown'
                         );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->updateEventMeeting($data,$mevt->mid);

                  $response['reminder_detail'] = '<div class="modal fade calendarReminderModal'.$mevt->event_id.'" tabindex="-1" aria-labelledby="calendarReminderModalLabel'.$mevt->event_id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                    $response['get_evt_id'] =  $mevt->event_id;
                    $response['get_evt_rem'] =  'new_evt_rem';
                    header('Content-type: application/json');
                    exit(json_encode($response));                              
              }
              else
              {
                $response['get_evt_rem'] =  'no_evt_rem';
              }
            }
            else
            {
              $response['get_evt_rem'] =  'no_evt_rem';
            }
          }
          elseif($mevt->event_allDay == 'false')
          {
            $evt_reminder_type = $mevt->event_reminder;
            $evt_rem = $mevt->event_start_date.' '.$mevt->event_start_time;
            $get_CDateTime = date('Y-m-d H:i');
            //echo $evt_reminder_type.'<br>';
            // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
            $evt_reminder = "";
            if($evt_reminder_type == "5 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-5 minutes"));
              // echo $evt_reminder.'<br>';
              // echo $get_CDateTime;
            }
            elseif($evt_reminder_type == "15 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-15 minutes"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "30 minutes before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-30 minutes"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 hour before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 hours"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "4 hours before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-4 hours"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 day before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 days"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "2 days before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-2 days"));
              //echo $evt_reminder;
            }
            elseif($evt_reminder_type == "1 week before")
            {
              $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 weeks"));
              //echo $evt_reminder;
            }

            if($get_CDateTime == $evt_reminder)
            {        
                $evt_date_time = '';
                if($mevt->event_start_date == $mevt->event_end_date)
                {
                  $sd = date_create($mevt->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($mevt->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $et = date_create($mevt->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                }
                else
                {
                  $sd = date_create($mevt->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($mevt->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $ed = date_create($mevt->event_end_date);
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $et = date_create($mevt->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                }

                if($mevt->created_type == 'event')
                {
                  $heading = 'Event Reminder!';
                  $title = 'Hey there, You have an Event Reminder!';
                  $msd_des = '<p class="card-text"><strong>Event : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$mevt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-calendar-check"></i>';
                }
                elseif($mevt->created_type == 'task')
                {
                  $heading = 'To Do Reminder!';
                  $title = 'Hey there, You have a To Do Reminder!';
                  $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Note : </strong>'.$mevt->event_note.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p> <p class="card-text"><strong>Priority : </strong>'.$mevt->task_priority.'</p>';
                  $icon = '<i class="fas fa-dot-circle"></i>';
                }
                elseif($mevt->created_type == 'meeting')
                {
                  $heading = 'Meeting Reminder!';
                  $title = 'Hey there, You have a Meeting Reminder!';
                  $msd_des = '<p class="card-text"><strong>Title : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Link : </strong> <a href="'.$mevt->meeting_link.'" target="_blank">'.$mevt->meeting_link.'</a></p> <p class="card-text"><strong>Location : </strong>'.$mevt->meeting_location.'</p> <p class="card-text"><strong>Agenda : </strong>'.$mevt->meeting_agenda.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-link"></i>';
                }
                else
                {
                  $heading = 'Reminder!';
                  $title = 'Hey there, You have a Reminder!';
                  $msd_des = '<p class="card-text"><strong>Reminder : </strong>'.$mevt->event_name.'</p> <p class="card-text"><strong>Date : </strong>'.$evt_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$mevt->event_reminder.'</p> <p class="card-text"><strong>Type : </strong>'.$mevt->event_repeat_option_type.'</p>';
                  $icon = '<i class="fas fa-bell"></i>';
                }

                $data = array(  'm_in_app_reminder' => 'shown'
                       );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateEventMeeting($data,$mevt->mid);

                $response['reminder_detail'] = '<div class="modal fade calendarReminderModal'.$mevt->event_id.'"'.$mevt->event_id.' tabindex="-1" aria-labelledby="calendarReminderModalLabel'.$mevt->event_id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                  $response['get_evt_id'] =  $mevt->event_id;
                  $response['get_evt_rem'] =  'new_evt_rem';
                  header('Content-type: application/json');
                  exit(json_encode($response));
            }
            else
            {
              $response['get_evt_rem'] =  'no_evt_rem';
            }
          }
          else
          {
            $response['get_evt_rem'] =  'no_evt_rem';
          }
        }
      }
      if(empty($meet_evt) && empty($getEvents))
      {
        $response['get_evt_rem'] =  'no_evt_rem';        
      }
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function auto_email_calendar_reminder_non_register_user()
  {
    $getEvents = $this->Front_model->getAllEventsReminder();
    if($getEvents)
    {
      foreach($getEvents as $evt)
      {
        if($evt->event_allDay == 'true')
        {
          $get_CDate = date('Y-m-d');
          if($get_CDate == $evt->event_start_date)
          {
            $get_CTime = date("h:i A");
            // echo $get_CTime;
            // echo $evt->event_reminder;
            if($get_CTime == $evt->event_reminder)
            {
              //meeting notification for non register users
              $meet_evt = $this->Front_model->get_all_evt_meetings_invited_users($evt->unique_key);
              if($meet_evt)
              {
                foreach($meet_evt as $mevt)
                {
                  $user = $this->Front_model->selectLogin($mevt->member);
                  if(empty($user))
                  {
                    $email_to = $mevt->member;
                    $email_from = 'hello@decision168.com'; 
                    //$email_from = 'saramaazkhan123@gmail.com'; 
                    $email_name = 'Decision 168';

                    $evt_date_time = '';
                    if($evt->event_start_date == $evt->event_end_date)
                    {
                      $sd = date_create($evt->event_start_date);
                      $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                    }
                    else
                    {
                      $sd = date_create($evt->event_start_date);
                      $ed = date_create($evt->event_end_date);
                      $evt_start_d = date_format($sd,"l, F d Y");
                      $evt_end_d = date_format($ed,"l, F d Y");
                      $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                    }

                    if($evt->created_type == 'event')
                    {
                      $subject = 'Event Reminder! | Decision 168';
                      $title = 'Hey there, You have an Event Reminder!';
                      $message = 'You have an event coming up, here\'s your reminder and details:';
                      $msd_des = 'Event : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                    }
                    elseif($evt->created_type == 'task')
                    {
                      $subject = 'To Do Reminder! | Decision 168';
                      $title = 'Hey there, You have a To Do Reminder!';
                      $message = 'You have a to do that needs your attention, here\'s your reminder and details:';
                      $msd_des = 'To Do : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Priority: '.$evt->task_priority.'<br>';
                    }
                    elseif($evt->created_type == 'meeting')
                    {
                      $subject = 'Meeting Reminder! | Decision 168';
                      $title = 'Hey there, You have a Meeting Reminder!';
                      $message = 'You have a meeting, here\'s your meeting details:';
                      $msd_des = 'Title : '.$evt->event_name.'<br> Link: <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a><br> Location: '.$evt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$evt->meeting_agenda.'</div><br>';
                    }
                    else
                    {
                      $subject = 'Reminder! | Decision 168';
                      $title = 'Hey there, You have a Reminder!';
                      $message = 'You set yourself a reminder, here it is:';
                      $msd_des = 'Reminder : '.$evt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                    }
                    // echo $subject;
                    // die();
                    $this->load->library('email');  
                    $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                    $this->email->initialize($config);
                    $this->email->from($email_from, $email_name);
                    $this->email->set_header('Reply-To', $email_from."\r\n");
                    $this->email->set_header('Return-Path', $email_from."\r\n");
                    $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                    $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                    $this->email->to($email_to);
                    $this->email->set_mailtype('html');
                    $this->email->subject($subject);
                    $this->email->message('                 
                    <!doctype html>
                    <html lang="en-US">

                    <head>
                      <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                      <title>'.$subject.'</title>
                      <meta name="description" content="'.$subject.'">
                      <style type="text/css">
                          a:hover {text-decoration: underline !important;pointer:cursor !important;}
                      </style>
                    </head>

                    <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                      <!--100% body table-->

                      <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                          style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                          <tr>
                              <td>
                                  <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                      <tr>
                                          <td style="height:80px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td style="text-align:center;">
                                            <a href="'.base_url().'" title="Decision 168" target="_blank">
                                              <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                            </a>
                                          </td>
                                      </tr>
                                      <tr>
                                          <td style="height:20px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td>
                                              <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                  style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                  <tr>
                                                      <td style="height:40px;">&nbsp;</td>
                                                  </tr>
                                                  <tr>
                                                      <td style="padding:0 35px;">
                                                          <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                          <span
                                                              style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Hello ,<br><br>
                                                             '.$message.'.
                                                              <br><br>
                                                            '.$msd_des.'
                                                          </p> 
                                                        <br><br>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                              Thanks,
                                                              <br>
                                                              The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                              </p>
                                                              <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                              <br>
                                                              <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                              </p>
                                                      </td>
                                                  </tr>
                                                  <tr>
                                                      <td style="height:40px;">&nbsp;</td>
                                                  </tr>
                                              </table>
                                          </td>
                                      <tr>
                                          <td style="height:20px;">&nbsp;</td>
                                      </tr>
                                      <tr>
                                          <td style="text-align:center;">
                                          <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                          <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                          <br>
                                              <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                          </td>
                                      </tr>
                                      <tr>
                                          <td style="height:80px;">&nbsp;</td>
                                      </tr>
                                  </table>
                              </td>
                          </tr>
                      </table>
                      <!--/100% body table-->
                    </body>

                    </html>' 
                    );
                    $this->email->send();
                  } 
                }
              }
            }
          }
        }
        else
        {
          $evt_reminder_type = $evt->event_reminder;
          $evt_rem = $evt->event_start_date.' '.$evt->event_start_time;
          $get_CDateTime = date('Y-m-d H:i');
          //echo $evt_reminder_type.'<br>';
          // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
          $evt_reminder = "";
          if($evt_reminder_type == "5 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-5 minutes"));
            // echo $evt_reminder.'<br>';
            // echo $get_CDateTime;
          }
          elseif($evt_reminder_type == "15 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-15 minutes"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "30 minutes before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-30 minutes"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 hour before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 hours"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "4 hours before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-4 hours"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 day before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 days"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "2 days before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-2 days"));
            //echo $evt_reminder;
          }
          elseif($evt_reminder_type == "1 week before")
          {
            $evt_reminder = date('Y-m-d H:i',strtotime($evt_rem. "-1 weeks"));
            //echo $evt_reminder;
          }

          if($get_CDateTime == $evt_reminder)
          {
            // echo '<pre>';
            // print_r($evt);
            //meeting notification for non register users
            $meet_evt = $this->Front_model->get_all_evt_meetings_invited_users($evt->unique_key);
            if($meet_evt)
            {
              // echo '<pre>';
              // print_r($meet_evt);
              foreach($meet_evt as $mevt)
              {
                $user = $this->Front_model->selectLogin($mevt->member);
                if(empty($user))
                {
                  // echo 'non';
                  $email_to = $mevt->member;
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $evt_date_time = '';
                  if($evt->event_start_date == $evt->event_end_date)
                  {
                    $sd = date_create($evt->event_start_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $st = date_create($evt->event_start_time);
                    $evt_start_t = date_format($st,"H:i A");
                    $et = date_create($evt->event_end_time);
                    $evt_end_t = date_format($et,"H:i A");
                    $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                  }
                  else
                  {
                    $sd = date_create($evt->event_start_date);
                    $evt_start_d = date_format($sd,"l, F d Y");
                    $st = date_create($evt->event_start_time);
                    $evt_start_t = date_format($st,"H:i A");
                    $ed = date_create($evt->event_end_date);
                    $evt_end_d = date_format($ed,"l, F d Y");
                    $et = date_create($evt->event_end_time);
                    $evt_end_t = date_format($et,"H:i A");
                    $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                  }

                  if($evt->created_type == 'event')
                  {
                    $subject = 'Event Reminder! | Decision 168';
                    $title = 'Hey there, You have an Event Reminder!';
                    $message = 'You have an event coming up, here\'s your reminder and details:';
                    $msd_des = 'Event : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                  }
                  elseif($evt->created_type == 'task')
                  {
                    $subject = 'To Do Reminder! | Decision 168';
                    $title = 'Hey there, You have a To Do Reminder!';
                    $message = 'You have a to do that needs your attention, here\'s your reminder and details:';
                    $msd_des = 'To Do : '.$evt->event_name.'<br> Note: '.$evt->event_note.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Priority: '.$evt->task_priority.'<br>';
                  }
                  elseif($evt->created_type == 'meeting')
                  {
                    $subject = 'Meeting Reminder! | Decision 168';
                    $title = 'Hey there, You have a Meeting Reminder!';
                    $message = 'You have a meeting, here\'s your meeting details:';
                    $msd_des = 'Title : '.$evt->event_name.'<br> Link: <a href="'.$evt->meeting_link.'" target="_blank">'.$evt->meeting_link.'</a><br> Location: '.$evt->meeting_location.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br> Agenda: <div style="color: #fff !important;text-align: left;">'.$evt->meeting_agenda.'</div><br>';
                  }
                  else
                  {
                    $subject = 'Reminder! | Decision 168';
                    $title = 'Hey there, You have a Reminder!';
                    $message = 'You set yourself a reminder, here it is:';
                    $msd_des = 'Reminder : '.$evt->event_name.'<br> Date: '.$evt_date_time.'<br> Reminder: '.$evt->event_reminder.'<br> Type: '.$evt->event_repeat_option_type.'<br>';
                  }
                  // echo $subject;
                  // die();
                  $this->load->library('email');  
                  $config=array(
                  'charset'=>'utf-8',
                  'wordwrap'=> TRUE,
                  'mailtype' => 'html'
                  );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject($subject);
                  $this->email->message('                 
                  <!doctype html>
                  <html lang="en-US">

                  <head>
                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                    <title>'.$subject.'</title>
                    <meta name="description" content="'.$subject.'">
                    <style type="text/css">
                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                    </style>
                  </head>

                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                    <!--100% body table-->

                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                        <tr>
                            <td>
                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                          </a>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                                <tr>
                                                    <td style="padding:0 35px;">
                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                        <span
                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Hello ,<br><br>
                                                           '.$message.'.
                                                            <br><br>
                                                          '.$msd_des.'
                                                        </p> 
                                                      <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                            Thanks,
                                                            <br>
                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                            </p>
                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                            <br>
                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                            </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="height:40px;">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                    <tr>
                                        <td style="height:20px;">&nbsp;</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align:center;">
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                        <br>
                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="height:80px;">&nbsp;</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <!--/100% body table-->
                  </body>

                  </html>' 
                  );
                  $this->email->send();
                  // echo $this->email->print_debugger();
                } 
              }
            }
          }
        }
      }
    }
  }

  public function insert_events_todo() //Insert Inside todo
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('task_name','Title','trim|required');
      $this->form_validation->set_rules('task_start_date','Start Date','trim|required');
      $this->form_validation->set_rules('priority','Priority','trim|required');

      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }

          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $task_start_date  = $this->input->post('task_start_date');

          $task_start_time  = date("H:i:s", strtotime($this->input->post('task_start_time')));
          //$task_start_time  = $this->input->post('task_start_time');

          $allDay = $this->input->post('task_allDay');
          // echo $allDay;
          // die(); 
          if($allDay == 'true'){
              $allDay = 'true';
              $task_start_time  = '00:00:00';
          }else{
              $allDay = 'false';
          }

          if($this->input->post('event_id') != 0)
          {
              //$get_date = $this->input->post('get_udata');
              $parent_event_id = $this->input->post('event_id');
              $event_id = $this->input->post('event_id');
              $data_parts2 = $this->input->post('event_unique_key');
              $multiple_events = '0';
          }
          else
          {
              $parent_event_id = '';
              $event_id = '';
              $data_parts2 = '';
              $multiple_events = '0';
          }
          $data = array(  'student_id' => $this->session->userdata('d168_id'),
                          'parent_event_id' => $parent_event_id,
                          'event_id' => $event_id,
                          'task_name' => $this->input->post('task_name'),
                          'task_note' => $this->input->post('task_note'),
                          'task_start_date' => $this->input->post('task_start_date'),
                          'task_start_time' => $task_start_time,
                          'task_allDay' => $allDay,
                          'task_reminder' => $this->input->post('task_reminder'),
                          'task_category' => $this->input->post('task_category'),
                          'priority' => $this->input->post('priority'),
                          'event_unique_key' => $data_parts2,
                          'multiple_events' => $multiple_events,
                          'status' => 'active',
                          'date' => date('Y-m-d H:i:s')
                       );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insert_eventsTodo($data);
          $inserted_id = $this->db->insert_id();

          $get_another_todo = $this->input->post('another-todo');  
          

          if($get_another_todo == "on")
          {
            $response['another_todo'] = "on";
            $response['new_another_todo_cnt'] = $this->input->post('another-todo-cnt') + 1;
            header('Content-type: application/json');
            echo json_encode($response);
          }
          else
          {
            // $response['another_todo'] = "off";
            // $response['new_another_todo_cnt'] = $this->input->post('another-todo-cnt');

            $data['student_id'] = $this->session->userdata('d168_id');
            $data['event_id']  = $this->input->post('event_id');
            $this->load->view('user/calendar_get_inside_event_todo',$data);
          }          

          // $response['task_id'] = $inserted_id;
          // $response['allDay'] = $allDay;
          // $response['priority'] = $this->input->post('priority');

          // if($this->input->post('event_id') != "")
          // {
          //   $response['hidden_event_id'] = $this->input->post('event_id');
          // }
          // else{
          //   $response['hidden_event_id'] = '0';
          // }
          // $this->session->set_flashdata('message', 'Successfully Created');
          // $response['status'] = TRUE;
          // header('Content-type: application/json');
          // echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function calendar_get_inside_event_todo() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['student_id'] = $this->session->userdata('d168_id');
      $data['event_id']  = $this->input->post('event_id');
      $response['task_data'] = $this->load->view('user/calendar_get_inside_event_todo',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function editable_todo()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $div_class = $this->input->post('div_class');
    $div_field = $this->input->post('div_field');
    $div_id = $this->input->post('div_id');
    $txt = trim($this->input->post('txt'));
    $stud = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if(!empty($txt))
    {
      //for task
      if($div_class == "todo_editable")
      {
            //task_name field
            if($div_field == "task_name")
            {
              $data = array(
                            'task_name' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$div_id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            
            //task_note field
            if($div_field == "task_note")
            {
              $data = array(
                            'task_note' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$div_id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }

            //priority field
            if($div_field == "priority")
            {
              $data = array(
                            'priority' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$div_id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }

            //task_reminder field
            if($div_field == "task_reminder")
            {
              $data = array(
                            'task_reminder' =>  $txt,        
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$div_id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
            
            //task_start_date field
            if($div_field == "task_start_date")
            {
              if(preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$txt))
              {
                $data = array(
                              'task_start_date' =>  $txt,        
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_events_todo($data,$div_id);

                $response['new_time'] = '';
                $event_id = $this->input->post('event_id');
                // echo $event_id;
                // die();
                $get_edetail = $this->Front_model->getEventTime($event_id);
                $get_etime = $this->Front_model->getEventTimeUniqueKey($get_edetail->unique_key);
                if($get_etime)
                {
                  // echo $get_etime->event_end_date;
                  // echo $txt;
                  // die();
                  if($get_etime->event_end_date == $txt)
                  {
                    if($get_etime->event_allDay == 'true'){
                      $tallDay = 'true';
                      $ttask_start_time  = '00:00:00';
                      $itd_t12hrs = 'All day';
                    }else{
                          $tallDay = 'false';
                          $ttask_start_time  = date("H:i:s", strtotime($get_etime->event_start_time));
                          $itd_t12hrs = date('h:i A',strtotime($get_etime->event_start_time));
                    }
                    $data2 = array(
                            'task_start_time' =>  $ttask_start_time,
                            'task_allDay' =>  $tallDay,
                            'task_in_app_reminder' => '',
                            'task_reminder_send' => '', 
                            );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->edit_events_todo($data2,$div_id);
                    $response['new_time'] = $itd_t12hrs;
                  }
                }

                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
              else
              {
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
            }

            //task_reminder field
            if($div_field == "task_start_time")
            {
                if($txt == 'true'){
                      $allDay = 'true';
                      $task_start_time  = '00:00:00';
                }else{
                      $allDay = 'false';
                      $task_start_time  = date("H:i:s", strtotime($txt));
                  }
              $data = array(
                            'task_start_time' =>  $task_start_time,
                            'task_allDay' =>  $allDay,
                            'task_in_app_reminder' => '',
                            'task_reminder_send' => '', 
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$div_id);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
            }
      }
    }
    else
    {
      $response['status'] = FALSE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_inside_todo() //Delete Task
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $this->Front_model->delete_events_todo($id);

      $student_id = $this->session->userdata('d168_id');
      $event_id = $this->input->post('event_id');
      $tasks = $this->Front_model->getEventTodo($student_id,$event_id);
      $task_count = count($tasks);
      if($task_count > 0)
      {
        $comp_tasks = $this->Front_model->getCompleteEventTodoCount($student_id,$event_id);
        $todo_percent = round(($comp_tasks/$task_count)*100);
      }
      else
      {
        $todo_percent = '0';
      }

      $response['task_count'] = $task_count;
      $response['todo_percent'] = $todo_percent;

      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function inside_events_todo_complete() //Complete Task
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $student_id = $this->session->userdata('d168_id');
      $complete = $this->input->post('complete');
      $id = $this->input->post('id');
      $event_id = $this->input->post('event_id');

              $data = array(
                           'is_completed' => $complete
                            );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$id);
      
      $tasks = $this->Front_model->getEventTodo($student_id,$event_id);
      $task_count = count($tasks);
      $comp_tasks = $this->Front_model->getCompleteEventTodoCount($student_id,$event_id);
      $todo_percent = round(($comp_tasks/$task_count)*100);

      $response['todo_percent'] = $todo_percent;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function auto_email_calendar_inside_todo_reminder()
  {
    $getItodo = $this->Front_model->getAllEventsInsideTodoReminder();
    if($getItodo)
    {
      foreach($getItodo as $itd)
      {
        if($itd->task_allDay == 'true')
        {
          $itd_reminder_type = $itd->task_reminder;
          $itd_rem = $itd->task_start_date.' '.$itd->task_start_time;
          $get_CDateTime = date('Y-m-d H:i');
          //echo $itd_reminder_type.'<br>';
          // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
          $itd_reminder = "";
          if($itd_reminder_type == "5 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-5 minutes"));
            // echo $itd_reminder.'<br>';
            // echo $get_CDateTime;
          }
          elseif($itd_reminder_type == "15 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-15 minutes"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "30 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-30 minutes"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 hour before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 hours"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "4 hours before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-4 hours"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 day before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 days"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "2 days before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-2 days"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 week before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 weeks"));
            //echo $itd_reminder;
          }

          if($get_CDateTime == $itd_reminder)
          {
            $user = $this->Front_model->getRemEventUser($itd->student_id);
            if($user)
            {
              $email_to = $user->email_address;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $itd_date_time = $itd->task_start_date.' , All Day';

                  if($itd->is_completed == 'yes')
                  {
                    $status = 'Completed';
                  }
                  else
                  {
                    $status = 'Incomplete';
                  }

                $subject = 'To Do Reminder! | Decision 168';
                $title = 'Hey there, You have a To Do Reminder!';
                $message = 'You have a To Do that needs your attention, here\'s your reminder and details:';
                $msd_des = 'To Do : '.$itd->task_name.'<br> Note: '.$itd->task_note.'<br> Date: '.$itd_date_time.'<br> Reminder: '.$itd->task_reminder.'<br> Status: '.$status.'<br> Priority: '.$itd->priority.'<br>';
                            
              // echo $subject;
              // die();
              $this->load->library('email');  
              $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject($subject);
              $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>'.$subject.'</title>
                  <meta name="description" content="'.$subject.'">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         '.$message.'.
                                                          <br><br>
                                                        '.$msd_des.'
                                                      </p>
                                                      <a href="'.base_url('calendar').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                );
              $this->email->send();

              $data = array(  'task_reminder_send' => 'sent'
                     );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$itd->id);
            }
          }              
        }
        else
        {
          $itd_reminder_type = $itd->task_reminder;
          $itd_rem = $itd->task_start_date.' '.$itd->task_start_time;
          $get_CDateTime = date('Y-m-d H:i');
          //echo $itd_reminder_type.'<br>';
          // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
          $itd_reminder = "";
          if($itd_reminder_type == "5 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-5 minutes"));
            // echo $itd_reminder.'<br>';
            // echo $get_CDateTime;
          }
          elseif($itd_reminder_type == "15 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-15 minutes"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "30 minutes before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-30 minutes"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 hour before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 hours"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "4 hours before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-4 hours"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 day before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 days"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "2 days before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-2 days"));
            //echo $itd_reminder;
          }
          elseif($itd_reminder_type == "1 week before")
          {
            $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 weeks"));
            //echo $itd_reminder;
          }

          if($get_CDateTime == $itd_reminder)
          {
            $user = $this->Front_model->getRemEventUser($itd->student_id);
            if($user)
            {
              $email_to = $user->email_address;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

                $itd_date_time = $itd->task_start_date.' , '.date('h:i A',strtotime($itd->task_start_time));

                  if($itd->is_completed == 'yes')
                  {
                    $status = 'Completed';
                  }
                  else
                  {
                    $status = 'Incomplete';
                  }

              
                $subject = 'To Do Reminder! | Decision 168';
                $title = 'Hey there, You have a To Do Reminder!';
                $message = 'You have a To Do that needs your attention, here\'s your reminder and details:';
                $msd_des = 'To Do : '.$itd->task_name.'<br> Note: '.$itd->task_note.'<br> Date: '.$itd_date_time.'<br> Reminder: '.$itd->task_reminder.'<br> Status: '.$status.'<br> Priority: '.$itd->priority.'<br>';
                            
              // echo $subject;
              // die();
              $this->load->library('email');  
              $config=array(
              'charset'=>'utf-8',
              'wordwrap'=> TRUE,
              'mailtype' => 'html'
              );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject($subject);
              $this->email->message('                 
                <!doctype html>
                <html lang="en-US">

                <head>
                  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                  <title>'.$subject.'</title>
                  <meta name="description" content="'.$subject.'">
                  <style type="text/css">
                      a:hover {text-decoration: underline !important;pointer:cursor !important;}
                  </style>
                </head>

                <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                  <!--100% body table-->

                  <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                      style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                      <tr>
                          <td>
                              <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                        <a href="'.base_url().'" title="Decision 168" target="_blank">
                                          <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                        </a>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td>
                                          <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                              style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                              <tr>
                                                  <td style="padding:0 35px;">
                                                      <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">'.$title.'</h1>
                                                      <span
                                                          style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Hello '.$user->first_name.' '.$user->last_name.',<br><br>
                                                         '.$message.'.
                                                          <br><br>
                                                        '.$msd_des.'
                                                      </p>
                                                      <a href="'.base_url('calendar').'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px;color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Go To Calendar
                                                    </a> 
                                                    <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                          Thanks,
                                                          <br>
                                                          The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                          </p>
                                                          <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                          <br>
                                                          <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                          </p>
                                                  </td>
                                              </tr>
                                              <tr>
                                                  <td style="height:40px;">&nbsp;</td>
                                              </tr>
                                          </table>
                                      </td>
                                  <tr>
                                      <td style="height:20px;">&nbsp;</td>
                                  </tr>
                                  <tr>
                                      <td style="text-align:center;">
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                      <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                      <br>
                                          <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                      </td>
                                  </tr>
                                  <tr>
                                      <td style="height:80px;">&nbsp;</td>
                                  </tr>
                              </table>
                          </td>
                      </tr>
                  </table>
                  <!--/100% body table-->
                </body>

                </html>' 
                );
              $this->email->send();

              $data = array(  'task_reminder_send' => 'sent'
                     );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->edit_events_todo($data,$itd->id);
            }
          }
        }
      }
    }
  }

  public function auto_in_app_calendar_inside_todo_reminder()
  {    
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {  
      $getItodo = $this->Front_model->getUserEventsInsideTodoReminder();
      // print_r($getItodo);
      // die();
      if($getItodo)
      {
        foreach($getItodo as $itd)
        {
          if($itd->task_allDay == 'true')
          {
            //echo 'yes';
            $itd_reminder_type = $itd->task_reminder;
            $itd_rem = $itd->task_start_date.' '.$itd->task_start_time;
            $get_CDateTime = date('Y-m-d H:i');
            //echo $itd_reminder_type.'<br>';
            // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
            $itd_reminder = "";
            if($itd_reminder_type == "5 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-5 minutes"));
              // echo $itd_reminder.'<br>';
              // echo $get_CDateTime;
              // die();
            }
            elseif($itd_reminder_type == "15 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-15 minutes"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "30 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-30 minutes"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 hour before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 hours"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "4 hours before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-4 hours"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 day before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 days"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "2 days before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-2 days"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 week before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 weeks"));
              //echo $itd_reminder;
            }

            if($get_CDateTime == $itd_reminder)
            {        
                  $itd_date_time = $itd->task_start_date.' , All Day';

                  if($itd->is_completed == 'yes')
                  {
                    $status = 'Completed';
                  }
                  else
                  {
                    $status = 'Incomplete';
                  }

                  $heading = 'To Do Reminder!';
                  $title = 'Hey there, You have a To Do Reminder!';
                  $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$itd->task_name.'</p> <p class="card-text"><strong>Note : </strong>'.$itd->task_note.'</p> <p class="card-text"><strong>Date : </strong>'.$itd_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$itd->task_reminder.'</p> <p class="card-text"><strong>Status : </strong>'.$status.'</p> <p class="card-text"><strong>Priority : </strong>'.$itd->priority.'</p>';
                $icon = '<i class="fas fa-dot-circle"></i>';                

                $data = array(  'task_in_app_reminder' => 'shown'
                       );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_events_todo($data,$itd->id);

                $response['inside_todo_reminder_detail'] = '<div class="modal fade calendarInsideTodoReminderModal'.$itd->id.'"'.$itd->id.' tabindex="-1" aria-labelledby="calendarInsideTodoReminderModalLabel'.$itd->id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                  $response['get_inside_todo_id'] =  $itd->id;
                  $response['get_inside_todo_rem'] =  'new_inside_todo_rem';
                  header('Content-type: application/json');
                  exit(json_encode($response));
            }
            else
            {
              $response['get_inside_todo_rem'] =  'no_inside_todo_rem';
            }
          }
          elseif($itd->task_allDay == 'false')
          {
            $itd_reminder_type = $itd->task_reminder;
            $itd_rem = $itd->task_start_date.' '.$itd->task_start_time;
            $get_CDateTime = date('Y-m-d H:i');
            //echo $itd_reminder_type.'<br>';
            // echo date('Y-m-d H:i:s',strtotime("-10 minutes")).'<br>';
            $itd_reminder = "";
            if($itd_reminder_type == "5 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-5 minutes"));
              // echo $itd_rem.'<br>';
              // echo $itd_reminder.'<br>';
              // echo $get_CDateTime;
            }
            elseif($itd_reminder_type == "15 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-15 minutes"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "30 minutes before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-30 minutes"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 hour before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 hours"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "4 hours before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-4 hours"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 day before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 days"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "2 days before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-2 days"));
              //echo $itd_reminder;
            }
            elseif($itd_reminder_type == "1 week before")
            {
              $itd_reminder = date('Y-m-d H:i',strtotime($itd_rem. "-1 weeks"));
              //echo $itd_reminder;
            }

            if($get_CDateTime == $itd_reminder)
            {        
                  $itd_date_time = $itd->task_start_date.' , '.date('h:i A',strtotime($itd->task_start_time));

                  if($itd->is_completed == 'yes')
                  {
                    $status = 'Completed';
                  }
                  else
                  {
                    $status = 'Incomplete';
                  }

                  $heading = 'To Do Reminder!';
                  $title = 'Hey there, You have a To Do Reminder!';
                  $msd_des = '<p class="card-text"><strong>To Do : </strong>'.$itd->task_name.'</p> <p class="card-text"><strong>Note : </strong>'.$itd->task_note.'</p> <p class="card-text"><strong>Date : </strong>'.$itd_date_time.'</p> <p class="card-text"><strong>Reminder : </strong>'.$itd->task_reminder.'</p> <p class="card-text"><strong>Status : </strong>'.$status.'</p> <p class="card-text"><strong>Priority : </strong>'.$itd->priority.'</p>';
                  $icon = '<i class="fas fa-dot-circle"></i>';
                
                $data = array(  'task_in_app_reminder' => 'shown'
                       );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_events_todo($data,$itd->id);

                $response['inside_todo_reminder_detail'] = '<div class="modal fade calendarInsideTodoReminderModal'.$itd->id.'"'.$itd->id.' tabindex="-1" aria-labelledby="calendarInsideTodoReminderModalLabel'.$itd->id.'" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                          <div class="modal-content">
                              <div class="modal-body">
                                  <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                                  <div class="text-center mt-2">
                                      <div class="avatar-md mx-auto mb-4">
                                          <div class="avatar-title bg-d-light rounded-circle text-d h1">
                                              '.$icon.'
                                          </div>
                                      </div>

                                      <div class="row justify-content-center">
                                          <div class="col-xl-10">
                                              <h4 class="text-d mt-2">'.$heading.'</h4>
                                              <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="card-body mb-2" style="padding: 0rem 1.25rem !important;">
                                     '.$msd_des.'
                                  </div>
                                  <div class="text-center mb-2">
                                    <a href="'.base_url('calendar').'" class="btn btn-sm btn-d waves-effect waves-light">
                                        Go To Calendar
                                    </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                      </div>';
                  $response['get_inside_todo_id'] =  $itd->id;
                  $response['get_inside_todo_rem'] =  'new_inside_todo_rem';
                  header('Content-type: application/json');
                  exit(json_encode($response));
            }
            else
            {
              $response['get_inside_todo_rem'] =  'no_inside_todo_rem';
            }
          }
          else
          {
            $response['get_inside_todo_rem'] =  'no_inside_todo_rem';
          }
        }
      }
      else
      {
        $response['get_inside_todo_rem'] =  'no_inside_todo_rem';        
      }
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function get_end_date_main_event()
  {
    $event_id = $this->input->post('event_id');
    $get_edetail = $this->Front_model->getEventTime($event_id);
    $get_etime = $this->Front_model->getEventTimeUniqueKey($get_edetail->unique_key);
    
      $response['endDate'] =  $get_etime->event_end_date; 
      header('Content-type: application/json');
      echo json_encode($response);
    
  }

  public function restrict_task_start_time()
  {
    $event_id = $this->input->post('event_id');
    $get_edetail = $this->Front_model->getEventTime($event_id);
    $get_etime = $this->Front_model->getEventTimeUniqueKey($get_edetail->unique_key);
    if($get_etime)
    {      
      if($get_etime->event_allDay == 'true')
      {
        $time_12hrs = $this->Front_model->gettime_12hrs();
        if($time_12hrs)
        {
          ?>
          <option value="">Select time *</option>
          <?php
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>"><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
      }
      else
      {
        $event_start_time = date('h:i A',strtotime($get_etime->event_start_time));
        $event_end_time = date('h:i A',strtotime($get_etime->event_end_time));
        $time_12hrs = $this->Front_model->gettime_12hrs_inside_todo($event_start_time,$event_end_time);
        if($time_12hrs)
        {
          ?>
          <option value="">Select time *</option>
          <?php
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>"><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
      }
    }
    else
    {
      ?>
      <option value="">Select time *</option>
      <?php
    }
  }

  public function restrict_task_start_time_editable()
  {
    $event_id = $this->input->post('event_id');
    $id = $this->input->post('id');
    $new_date = $this->input->post('new_date');

    $get_edetail = $this->Front_model->getEventTime($event_id);
    $get_etime = $this->Front_model->getEventTimeUniqueKey($get_edetail->unique_key);
    $tk = $this->Front_model->getEventSpecificTodo($id,$event_id);
    
    $itd_t12hrs = date('h:i A',strtotime($tk->task_start_time));      

    if($get_etime)
    {
     if($get_etime->event_end_date == $new_date)  
     {
        $event_start_time = date('h:i A',strtotime($get_etime->event_start_time));
        $event_end_time = date('h:i A',strtotime($get_etime->event_end_time));
        $time_12hrs = $this->Front_model->gettime_12hrs_inside_todo($event_start_time,$event_end_time);
        if($time_12hrs)
        {
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>" <?php if($t12hrs->time == $itd_t12hrs){ echo "selected"; }?>><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
     }
     else
     {
      $time_12hrs = $this->Front_model->gettime_12hrs();
        if($time_12hrs)
        {
          ?>
          <option value="true" <?php if($tk->task_allDay == 'true'){ echo "selected";}?>>All day</option>
          <?php
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>" <?php if($t12hrs->time == $itd_t12hrs){ echo "selected"; }?>><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
     }  
    }
    else
    {
      ?>
      <option value="<?php echo $itd_t12hrs; ?>"><?php echo $itd_t12hrs; ?></option>
      <?php
    } 
  }

  public function restrict_task_start_time_update_modal()
  {
    $event_id = $this->input->post('event_id');
    $id = $this->input->post('id');
    $new_date = $this->input->post('new_date');

    $get_edetail = $this->Front_model->getEventTime($event_id);
    $get_etime = $this->Front_model->getEventTimeUniqueKey($get_edetail->unique_key);
    $tk = $this->Front_model->getEventSpecificTodo($id,$event_id);
    
    $itd_t12hrs = date('h:i A',strtotime($tk->task_start_time));      
    ?>
    <option value="">Select time *</option>
    <?php
    if($get_etime)
    {
     if($get_etime->event_end_date == $new_date)  
     {
        $event_start_time = date('h:i A',strtotime($get_etime->event_start_time));
        $event_end_time = date('h:i A',strtotime($get_etime->event_end_time));
        $time_12hrs = $this->Front_model->gettime_12hrs_inside_todo($event_start_time,$event_end_time);
        if($time_12hrs)
        {
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>" <?php if($t12hrs->time == $itd_t12hrs){ echo "selected"; }?>><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
     }
     else
     {
      $time_12hrs = $this->Front_model->gettime_12hrs();
        if($time_12hrs)
        {
          ?>
          <option value="true" <?php if($tk->task_allDay == 'true'){ echo "selected";}?>>All day</option>
          <?php
          foreach ($time_12hrs as $t12hrs) 
          {
              ?>
              <option value="<?php echo $t12hrs->time; ?>" <?php if($t12hrs->time == $itd_t12hrs){ echo "selected"; }?>><?php echo $t12hrs->time; ?></option>
              <?php
          }
        }
     }  
    }
    else
    {
      ?>
      <option value="<?php echo $itd_t12hrs; ?>"><?php echo $itd_t12hrs; ?></option>
      <?php
    } 
  }

  public function calendar_event_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $today = date('Y-m-d');
      $data['getAll_NextEvents'] = $this->Front_model->getAll_NextEvents($today);
      $data['getAll_PrevEvents'] = $this->Front_model->getAll_PrevEvents($today);
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();
      $this->load->view('user/calendar_event_list',$data);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function calendar_todo_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $today = date('Y-m-d');
      $data['getAll_NextTodos'] = $this->Front_model->getAll_NextTodos($today);
      $data['getAll_PrevTodos'] = $this->Front_model->getAll_PrevTodos($today);
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();
      $this->load->view('user/calendar_todo_list',$data);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function calendar_reminder_list()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $today = date('Y-m-d');
      $data['getAll_NextReminders'] = $this->Front_model->getAll_NextReminders($today);
      $data['getAll_PrevReminders'] = $this->Front_model->getAll_PrevReminders($today);
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();
      $this->load->view('user/calendar_reminder_list',$data);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_selected_event_info_list() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $event_id = $this->input->post('event_id');
      $event_data  = $this->Front_model->view_selected_event_info_list($event_id);
      if($event_data)
      {
        $get_etime = $this->Front_model->getEventTimeUniqueKey($event_data[0]->unique_key);
        $get_stime = $this->Front_model->getEventTimeUniqueKeyFirst($event_data[0]->unique_key);
    
        $start_nn = $event_data[0]->event_start_date;
        foreach($event_data as $row)
        {
            $d1 = new DateTime($row->event_start_date);
            $d2 = new DateTime($start_nn);
            if($d1 < $d2){
                $start_nn = $row->event_start_date;
            }

        }
        $end_nn = $event_data[0]->event_end_date;
        foreach($event_data as $row)
        {
            $d1 = new DateTime($row->event_end_date);
            $d2 = new DateTime($end_nn);
            if($d1 > $d2){
                $end_nn = $row->event_end_date;
            }

        }
        // $response['task_start_date'] = $event_data[0]->event_start_date;
        // $response['task_end_date'] = array_slice($event_data, -1)[0]->event_end_date;
        $all_data = $this->Front_model->getDataByUniqueId($event_data[0]->unique_key);
        $array_count = count($all_data);

        $isLast = $this->Front_model->getDataIsLast($event_id);
        $isLastCount = count($isLast);

        $response['task_evt_color'] = $event_data[0]->event_color;
        $response['task_evt_title'] = $event_data[0]->event_name;
        $response['task_evt_allday'] = $event_data[0]->event_allDay;
        $response['task_evt_start_time'] = $event_data[0]->event_start_time;
        $response['task_evt_end_time'] = $event_data[0]->event_end_time;
        $response['task_evt_reminder'] = $event_data[0]->event_reminder;
        $response['task_evt_event_repeat_option_type'] = $event_data[0]->event_repeat_option_type;
        $response['task_evt_note'] = $event_data[0]->event_note;
        $response['task_evt_created_type'] = $event_data[0]->created_type;
        $response['task_evt_unique_key'] = $event_data[0]->unique_key;
        $response['task_evt_task_priority'] = $event_data[0]->task_priority;
        $response['task_evt_draggable_event'] = $event_data[0]->draggable_event;
        $response['task_evt_draggable_id'] = $event_data[0]->draggable_id;
        $response['task_evt_custom_all_day'] = $event_data[0]->custom_all_day;
        $response['task_evt_type'] = $event_data[0]->type;
        $response['task_evt_array_count'] = $array_count;
        $response['task_evt_isLastCount'] = $isLastCount;
        $response['task_start_date'] = $start_nn;
        $response['task_end_date'] = $end_nn;
        $response['endDate'] =  $get_etime->event_end_date; 
        $response['startDate'] =  $get_stime->event_start_date; 
        $response['status'] = true;
        header('Content-type: application/json');
        echo json_encode($response);
      }
      else
      {
        $response['status'] = false;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_selected_inside_todo_info_list() //Task Details
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $intodo_data  = $this->Front_model->view_selected_inside_todo_info_list($id);
      
      if($intodo_data->task_allDay == "true")
      {
        $itd_date_time = $intodo_data->task_start_date.' , All Day';
      }
      else
      {
        $itd_date_time = $intodo_data->task_start_date.' , '.date('h:i A',strtotime($intodo_data->task_start_time));
      }

      if($intodo_data->is_completed == 'yes')
      {
        $status = 'Completed';
        $icon = 'mdi-check-circle-outline';
      }
      else
      {
        $status = 'Incomplete';
        $icon = 'mdi-checkbox-blank-circle-outline';
      }

      $response['intodo_title'] = $intodo_data->task_name;
      $response['intodo_note'] = $intodo_data->task_note;
      $response['intodo_datetime'] = $itd_date_time;
      $response['intodo_reminder'] = $intodo_data->task_reminder;
      $response['intodo_status'] = $status;
      $response['intodo_icon'] = $icon;
      $response['intodo_priority'] = $intodo_data->priority;

      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_events_todo_data()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['intodo_data'] = $this->Front_model->view_selected_inside_todo_info_list($id);
      $this->load->view('user/calendar-inside-todo-edit-modal',$data);   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_events_todo() //Insert Inside todo
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('task_name','Title','trim|required');
      $this->form_validation->set_rules('task_start_date','Start Date','trim|required');
      $this->form_validation->set_rules('priority','Priority','trim|required');

      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }

          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $id = $this->input->post('id');
          $task_start_date  = $this->input->post('task_start_date');

          $task_start_time  = date("H:i:s", strtotime($this->input->post('task_start_time')));
          //$task_start_time  = $this->input->post('task_start_time');

          $allDay = $this->input->post('task_allDay');
          // echo $allDay;
          // die(); 
          if($allDay == 'true'){
              $allDay = 'true';
              $task_start_time  = '00:00:00';
              $up_task_start = 'All day';
          }else{
              $allDay = 'false';
              $up_task_start = $this->input->post('task_start_time');
          }

          $data = array(  'student_id' => $this->session->userdata('d168_id'),
                          'task_name' => $this->input->post('task_name'),
                          'task_note' => $this->input->post('task_note'),
                          'task_start_date' => $this->input->post('task_start_date'),
                          'task_start_time' => $task_start_time,
                          'task_allDay' => $allDay,
                          'task_reminder' => $this->input->post('task_reminder'),
                          'priority' => $this->input->post('priority'),
                       );
           $data = $this->security->xss_clean($data); // xss filter
           $this->Front_model->edit_events_todo($data,$id);
            
           $response['task_name'] = $this->input->post('task_name');
           $response['up_task_start'] = $up_task_start;
           $response['up_task_rem'] = $this->input->post('task_reminder');
           $response['up_task_date'] = $this->input->post('task_start_date');
           $response['up_task_priority'] = $this->input->post('priority');
           $response['status'] = TRUE;
           header('Content-type: application/json');
           echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function meeting_request()//accept or reject meeting request through email id
  {
    $unique_key = $this->uri->segment(2);
    $member = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $res = $this->Front_model->CheckMeetingInvite($unique_key,$member);

    if(!empty($res))
    {
      if($data['flag_num'] == '1')
      {
        $getMemDetail = $this->Front_model->getStudentById($member);
        if($getMemDetail)
        {
          $check_if_invited = $this->Front_model->check_events_meeting_invited_members2($getMemDetail->email_address,$unique_key);
          if($check_if_invited)
          {
            $updata = array(
              'status' => 'accepted',
              'status_date' => date('Y-m-d H:i:s'),
                                );
              $updata = $this->security->xss_clean($updata); // xss filter
              $this->Front_model->update_events_meeting_invited_members($updata,$check_if_invited->imid);
          }
        }       

        $updata = array(
            'status' => 'accepted',
            'status_date' => date('Y-m-d H:i:s'),
                              );
        $updata = $this->security->xss_clean($updata); // xss filter
        $this->Front_model->update_meeting_invites($updata,$member,$unique_key);
        $this->load->view('user/em_request_accept',$data);
      }
      elseif($data['flag_num'] == '2')
      {
        $getMemDetail = $this->Front_model->getStudentById($member);
        if($getMemDetail)
        {
          $check_if_invited = $this->Front_model->check_events_meeting_invited_members2($getMemDetail->email_address,$unique_key);
          if($check_if_invited)
          {
            $updata = array(
              'status' => 'rejected',
              'status_date' => date('Y-m-d H:i:s'),
                                );
              $updata = $this->security->xss_clean($updata); // xss filter
              $this->Front_model->update_events_meeting_invited_members($updata,$check_if_invited->imid);
          }
        } 

        $updata = array(
            'status' => 'rejected',
            'status_date' => date('Y-m-d H:i:s'),
                              );
        $updata = $this->security->xss_clean($updata); // xss filter
        $this->Front_model->update_meeting_invites($updata,$member,$unique_key);
        $this->load->view('user/em_request_reject',$data);
      }
      else
      {
        $this->load->view('user/em_request_invalid');
      }
    }
    else
    {
      $this->load->view('user/em_request_invalid');
    }
  }

  public function meeting_request2()//accept or reject meeting request through app site
  {
    $unique_key = $this->uri->segment(2);
    $member = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $res = $this->Front_model->CheckMeetingInvite($unique_key,$member);

    if(!empty($res))
    {
      if($data['flag_num'] == '1')
      {
        $getMemDetail = $this->Front_model->getStudentById($member);
        if($getMemDetail)
        {
          $check_if_invited = $this->Front_model->check_events_meeting_invited_members2($getMemDetail->email_address,$unique_key);
          if($check_if_invited)
          {
            $updata = array(
              'status' => 'accepted',
              'status_date' => date('Y-m-d H:i:s'),
                                );
              $updata = $this->security->xss_clean($updata); // xss filter
              $this->Front_model->update_events_meeting_invited_members($updata,$check_if_invited->imid);
          }
        } 

        $updata = array(
            'status' => 'accepted',
            'status_date' => date('Y-m-d H:i:s'),
                              );
        $updata = $this->security->xss_clean($updata); // xss filter
        $this->Front_model->update_meeting_invites($updata,$member,$unique_key);
        $this->session->set_flashdata('message', 'You\'ve accepted the meeting invitation!');
        redirect($_SERVER['HTTP_REFERER']);
      }
      elseif($data['flag_num'] == '2')
      {
        $getMemDetail = $this->Front_model->getStudentById($member);
        if($getMemDetail)
        {
          $check_if_invited = $this->Front_model->check_events_meeting_invited_members2($getMemDetail->email_address,$unique_key);
          if($check_if_invited)
          {
            $updata = array(
              'status' => 'rejected',
              'status_date' => date('Y-m-d H:i:s'),
                                );
              $updata = $this->security->xss_clean($updata); // xss filter
              $this->Front_model->update_events_meeting_invited_members($updata,$check_if_invited->imid);
          }
        } 

        $updata = array(
            'status' => 'rejected',
            'status_date' => date('Y-m-d H:i:s'),
                              );
        $updata = $this->security->xss_clean($updata); // xss filter
        $this->Front_model->update_meeting_invites($updata,$member,$unique_key);
        $this->session->set_flashdata('message', 'You\'ve rejected the meeting invitation!');
        redirect($_SERVER['HTTP_REFERER']);
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid Request Link!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }
    else
    {
      $this->session->set_flashdata('message', 'Invalid Request Link!');
      redirect($_SERVER['HTTP_REFERER']);
    }
  }

  public function meeting_request_invited_member()//accept or reject meeting invited request through email id
  {
    $unique_key = $this->uri->segment(2);
    $imid = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $res = $this->Front_model->CheckMeetingInvitedMembers($unique_key,$imid);

    if(!empty($res))
    {
      if($res->status == 'invited')
      {
      if($data['flag_num'] == '1')
      {
        $check_if_registered = $this->Front_model->selectLogin($res->member);
        if($check_if_registered)
        {
          $getEvts = $this->Front_model->getDataByUniqueId($unique_key);
          if($getEvts)
          {
            $check_portm = $this->Front_model->checkPortfolioMemberEmail($res->member,$res->portfolio_id);
            if($check_portm == 0)
            {
              $data = array(
                                      'portfolio_id' => $res->portfolio_id,
                                      'sent_to' => $res->member,
                                      'sent_from' => $res->sent_by,
                                      'status' => 'accepted',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s')
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);
            }

            $check_if_invitee = $this->Front_model->check_events_meeting_members2($check_if_registered->reg_id,$unique_key);
            if($check_if_invitee)
            {
              $this->Front_model->delete_meetingMember($unique_key,$check_if_registered->reg_id);
            }

            foreach($getEvts as $evt)
            {
              $data = array(
                            'event_id' => $evt->id,
                            'event_unique_key' => $unique_key,
                            'member' => $check_if_registered->reg_id,
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'created_by' => $evt->student_id,
                            'created_type' => $evt->created_type,
                            'm_date' => date('Y-m-d H:i:s'),
                                              );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_events_meeting($data);
            }

            // $updata = array(
            // 'status' => 'accepted',
            // 'status_date' => date('Y-m-d H:i:s'),
            //                   );
            // $updata = $this->security->xss_clean($updata); // xss filter
            // $this->Front_model->update_events_meeting_invited_members($updata,$imid);

            $this->Front_model->delete_meetingMemberInvited($imid);

            $this->load->view('user/em_request_accept',$data);
          }
          else
          {
            $this->load->view('user/em_request_invalid');
          }          
        }
        else
        {
          //$this->load->view('user/em_request_invalid');
            $updata = array(
            'status' => 'accepted',
            'status_date' => date('Y-m-d H:i:s'),
                              );
            $updata = $this->security->xss_clean($updata); // xss filter
            $this->Front_model->update_events_meeting_invited_members($updata,$imid);

            $this->load->view('user/em_request_accept',$data);
        }        
      }
      elseif($data['flag_num'] == '2')
      {
        $updata = array(
            'status' => 'rejected',
            'status_date' => date('Y-m-d H:i:s'),
                              );
        $updata = $this->security->xss_clean($updata); // xss filter
        $this->Front_model->update_events_meeting_invited_members($updata,$imid);
        $this->load->view('user/em_request_reject',$data);
      }
      else
      {
        $this->load->view('user/em_request_invalid');
      }
      }

    }
    else
    {
      $this->load->view('user/em_request_invalid');
    }
  }

  // public function remove_eventMember()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $member = $this->input->post('member');
  //     $mid = $this->input->post('mid');
  //     $res = $this->Front_model->getMeetingMemberDetail($mid);

  //     if($res)
  //     {
  //       $unique_key = $res->event_unique_key;
  //       $this->Front_model->delete_meetingMember($unique_key,$member);
  //     }

  //     $response['status'] = TRUE;
  //     header('Content-type: application/json');
  //     echo json_encode($response);
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   } 
  // }

  // public function remove_eventInvitedMember()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $imid = $this->input->post('imid');

  //     $this->Front_model->delete_meetingMemberInvited($imid);      

  //     $response['status'] = TRUE;
  //     header('Content-type: application/json');
  //     echo json_encode($response);
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   } 
  // }

  public function RemoveMemberFormSubmit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('memtype','Type','trim|required');
      $this->form_validation->set_rules('butsel','Option','trim|required');
      if($this->input->post('memtype') == 'eventmem')
      {
        $this->form_validation->set_rules('member','member','trim|required');
        $this->form_validation->set_rules('mid','mid','trim|required');
      } 
      if($this->input->post('memtype') == 'eventinvitedmem')
      {
        $this->form_validation->set_rules('imid','imid','trim|required');
      }  
      if ($this->form_validation->run() == FALSE)
      {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
        if($this->input->post('memtype') == 'eventmem')
        {
          $member = $this->input->post('member');
          $mid = $this->input->post('mid');
          $res = $this->Front_model->getMeetingMemberDetail($mid);
          if($this->input->post('butsel') == 'send')
          {
            if($res)
            {
              $unique_key = $res->event_unique_key;
              $evt_detail = $this->Front_model->getEventTimeUniqueKey($unique_key);
              $optional_msg = $this->input->post('optional_msg');
              $mem = $this->Front_model->getStudentById($res->member);

              $mee_owner = $this->Front_model->getStudentById($evt_detail->student_id);
              $get_portfolio_name = $this->Front_model->getPortfolioName($evt_detail->portfolio_id);
              if($get_portfolio_name)
              {
                if($get_portfolio_name->portfolio_user == 'company')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
                elseif($get_portfolio_name->portfolio_user == 'individual')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name.' '.$get_portfolio_name->portfolio_lname;
                }
                else
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
              }

              $evt_date_time = '';
              if($evt_detail->event_allDay == 'true')
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                }
              }
              else
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                }
              }

              $InviteEmailID = $mem->email_address;
              $email_to = $InviteEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Meeting Cancelled | Decision 168');
              $this->email->message('                 
              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Meeting Cancelled</title>
                <meta name="description" content="Meeting Cancelled">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Meeting Cancelled...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($mem->first_name).',<br><br>
                                                       This meeting has been cancelled and removed from your calendar:
                                                        <br><br>
                                                        Cancellation Note: '.$optional_msg.'
                                                        <br>
                                                        Portfolio: '.$mee_portfolio.'
                                                        <br>
                                                        Title: '.$evt_detail->event_name.'
                                                        <br>
                                                        Date: '.$evt_date_time.'
                                                        <br>
                                                        Facilitator: '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).'
                                                        <br><br>
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
              );
              $this->email->send();
              //echo $this->email->print_debugger();
              $this->Front_model->delete_meetingMember($unique_key,$member);
              $response['mid'] = $mid;
            }
          }
          else
          {
            if($res)
            {
              $unique_key = $res->event_unique_key;
              $this->Front_model->delete_meetingMember($unique_key,$member);
              $response['mid'] = $mid;
            }
          }
        } 
        if($this->input->post('memtype') == 'eventinvitedmem')
        {
          $imid = $this->input->post('imid');
          $res2 = $this->Front_model->getMeetingInvitedMembers($imid);
          if($this->input->post('butsel') == 'send')
          {
            if($res2)
            {
              $unique_key = $res2->event_unique_key;
              $evt_detail = $this->Front_model->getEventTimeUniqueKey($unique_key);
              $optional_msg = $this->input->post('optional_msg');

              $mee_owner = $this->Front_model->getStudentById($evt_detail->student_id);
              $get_portfolio_name = $this->Front_model->getPortfolioName($evt_detail->portfolio_id);
              if($get_portfolio_name)
              {
                if($get_portfolio_name->portfolio_user == 'company')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
                elseif($get_portfolio_name->portfolio_user == 'individual')
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name.' '.$get_portfolio_name->portfolio_lname;
                }
                else
                { 
                  $mee_portfolio = $get_portfolio_name->portfolio_name;
                }
              }

              $evt_date_time = '';
              if($evt_detail->event_allDay == 'true')
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
                }
              }
              else
              {
                if($evt_detail->event_start_date == $evt_detail->event_end_date)
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
                }
                else
                {
                  $sd = date_create($evt_detail->event_start_date);
                  $evt_start_d = date_format($sd,"l, F d Y");
                  $st = date_create($evt_detail->event_start_time);
                  $evt_start_t = date_format($st,"H:i A");
                  $ed = date_create($evt_detail->event_end_date);
                  $evt_end_d = date_format($ed,"l, F d Y");
                  $et = date_create($evt_detail->event_end_time);
                  $evt_end_t = date_format($et,"H:i A");
                  $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
                }
              }

              $InviteEmailID = $res2->member;
              $email_to = $InviteEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Meeting Cancelled | Decision 168');
              $this->email->message('                 
              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Meeting Cancelled</title>
                <meta name="description" content="Meeting Cancelled">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Meeting Cancelled...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello,<br><br>
                                                       This meeting has been cancelled and removed from your calendar:
                                                        <br><br>
                                                        Cancellation Note: '.$optional_msg.'
                                                        <br>
                                                        Portfolio: '.$mee_portfolio.'
                                                        <br>
                                                        Title: '.$evt_detail->event_name.'
                                                        <br>
                                                        Date: '.$evt_date_time.'
                                                        <br>
                                                        Facilitator: '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).'
                                                        <br><br>
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
              );
              $this->email->send();
              // echo $this->email->print_debugger();
              $this->Front_model->delete_meetingMemberInvited($imid);
              $response['imid'] = $imid;
            }
          }
          else
          {
            if($res2)
            {
              $this->Front_model->delete_meetingMemberInvited($imid); 
              $response['imid'] = $imid;
            }
          }
        }

        $response['memtype'] = $this->input->post('memtype');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function RemoveMemberUpdateFormSubmit()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('butsel_up','Option','trim|required');
      $this->form_validation->set_rules('removedmem','member','trim|required');
      $this->form_validation->set_rules('removedunique_key','unique key','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
        $allmembers = $this->input->post('removedmem');
        $member_Array = explode(',', $allmembers);
        $unique_key = $this->input->post('removedunique_key');

        if($this->input->post('butsel_up') == 'send')
        {
          $evt_detail = $this->Front_model->getEventTimeUniqueKey($unique_key);
          $optional_msg = $this->input->post('optional_msg_up');
          $mee_owner = $this->Front_model->getStudentById($evt_detail->student_id);
          $get_portfolio_name = $this->Front_model->getPortfolioName($evt_detail->portfolio_id);
          if($get_portfolio_name)
          {
            if($get_portfolio_name->portfolio_user == 'company')
            { 
              $mee_portfolio = $get_portfolio_name->portfolio_name;
            }
            elseif($get_portfolio_name->portfolio_user == 'individual')
            { 
              $mee_portfolio = $get_portfolio_name->portfolio_name.' '.$get_portfolio_name->portfolio_lname;
            }
            else
            { 
              $mee_portfolio = $get_portfolio_name->portfolio_name;
            }
          }
          $evt_date_time = '';
          if($evt_detail->event_allDay == 'true')
          {
            if($evt_detail->event_start_date == $evt_detail->event_end_date)
            {
              $sd = date_create($evt_detail->event_start_date);
              $evt_date_time = date_format($sd,"l, F d Y").' - All Day';
            }
            else
            {
              $sd = date_create($evt_detail->event_start_date);
              $ed = date_create($evt_detail->event_end_date);
              $evt_start_d = date_format($sd,"l, F d Y");
              $evt_end_d = date_format($ed,"l, F d Y");
              $evt_date_time = $evt_start_d.' - '.$evt_end_d.' - All Day';
            }
          }
          else
          {
            if($evt_detail->event_start_date == $evt_detail->event_end_date)
            {
              $sd = date_create($evt_detail->event_start_date);
              $evt_start_d = date_format($sd,"l, F d Y");
              $st = date_create($evt_detail->event_start_time);
              $evt_start_t = date_format($st,"H:i A");
              $et = date_create($evt_detail->event_end_time);
              $evt_end_t = date_format($et,"H:i A");
              $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_t;
            }
            else
            {
              $sd = date_create($evt_detail->event_start_date);
              $evt_start_d = date_format($sd,"l, F d Y");
              $st = date_create($evt_detail->event_start_time);
              $evt_start_t = date_format($st,"H:i A");
              $ed = date_create($evt_detail->event_end_date);
              $evt_end_d = date_format($ed,"l, F d Y");
              $et = date_create($evt_detail->event_end_time);
              $evt_end_t = date_format($et,"H:i A");
              $evt_date_time = $evt_start_d.', '.$evt_start_t.' - '.$evt_end_d.', '.$evt_end_t;
            }
          }

          foreach($member_Array as $member)
          {
            $check_type = is_numeric($member);
            if($check_type == 'true')//for meeting members
            {
              $mem = $this->Front_model->getStudentById($member);
              $InviteEmailID = $mem->email_address;
              $email_to = $InviteEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Meeting Cancelled | Decision 168');
              $this->email->message('                 
              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Meeting Cancelled</title>
                <meta name="description" content="Meeting Cancelled">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Meeting Cancelled...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($mem->first_name).',<br><br>
                                                       This meeting has been cancelled and removed from your calendar:
                                                        <br><br>
                                                        Cancellation Note: '.$optional_msg.'
                                                        <br>
                                                        Portfolio: '.$mee_portfolio.'
                                                        <br>
                                                        Title: '.$evt_detail->event_name.'
                                                        <br>
                                                        Date: '.$evt_date_time.'
                                                        <br>
                                                        Facilitator: '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).'
                                                        <br><br>
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
              );
              $this->email->send();
              //echo $this->email->print_debugger();
              $this->Front_model->delete_meetingMember($unique_key,$member);
            }
            else//for meeting members email id
            {
              $InviteEmailID = $member;
              $email_to = $InviteEmailID;
              $email_from = 'hello@decision168.com'; 
              //$email_from = 'saramaazkhan123@gmail.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Meeting Cancelled | Decision 168');
              $this->email->message('                 
              <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Meeting Cancelled</title>
                <meta name="description" content="Meeting Cancelled">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Meeting Cancelled...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello,<br><br>
                                                       This meeting has been cancelled and removed from your calendar:
                                                        <br><br>
                                                        Cancellation Note: '.$optional_msg.'
                                                        <br>
                                                        Portfolio: '.$mee_portfolio.'
                                                        <br>
                                                        Title: '.$evt_detail->event_name.'
                                                        <br>
                                                        Date: '.$evt_date_time.'
                                                        <br>
                                                        Facilitator: '.ucfirst($mee_owner->first_name).' '.ucfirst($mee_owner->last_name).'
                                                        <br><br>
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
              );
              $this->email->send();
              //echo $this->email->print_debugger();
              $this->Front_model->delete_meetingMemberInvitedEmail($unique_key,$member);
            }
          }
        }
        else
        {
          foreach($member_Array as $member)
          {
            $check_type = is_numeric($member);
            if($check_type == 'true')//for meeting members
            {
              $this->Front_model->delete_meetingMember($unique_key,$member);
            }
            else//for meeting members email id
            {
              $this->Front_model->delete_meetingMemberInvitedEmail($unique_key,$member);
            }            
          }            
        }

        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  //////Calendar Part End///////

  
  // public function clear_all_cache()
  // {
  //    $CI =& get_instance();
  //    $path = $CI->config->item('cache_path');
  //     //print_r($path);
        
  //       $cache_path = ($path == '') ? APPPATH.'cache/' : $path;
        
  //       $handle = opendir($cache_path);

  //       while (($file = readdir($handle))!== FALSE) 
  //       {
  //           //Leave the directory protection alone
  //           if ($file != '.htaccess' && $file != 'index.html')
  //           {
  //              @unlink($cache_path.'/'.$file);
  //           }
  //       }

  //       closedir($handle);
  // }

  // public function clear_all_cache2()
  // {
  //    $this->output->cache(60);
  //    $this->output->delete_cache('controller/front');
  // }

//////Goal & Strategies Part Start///////
  public function portfolio_goals()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $get_port_id = $this->uri->segment(2);
      $data['check_port_id'] = $this->uri->segment(2);
      $data['plist'] = $this->Front_model->GoalsList($get_port_id);
      $data['accepted_plist'] = $this->Front_model->AcceptedGoalsAllList($get_port_id);
      $data['pending_plist'] = $this->Front_model->PendingGoalsAllList($get_port_id);
      $data['readmore_plist'] = $this->Front_model->ReadMoreGoalsAllList($get_port_id);
      $this->load->view('user/portfolio-goals',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function goal_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
if(empty($this->session->userdata('d168_user_cor_id')))
{
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($getMydetail)
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
        {
          if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_goals = trim($getPackDetail->pack_goals);
              $used_goals = trim($getGoalCount['goal_count_rows']);
              $check_type = is_numeric($total_goals);
              if($check_type == 'true')
              {
                if($used_goals < $total_goals)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-create');
                  }
              }
            }
          }
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_goals = trim($getPackDetail->pack_goals);
            $used_goals = trim($getGoalCount['goal_count_rows']);
            $check_type = is_numeric($total_goals);
            if($check_type == 'true')
            {
              if($used_goals < $total_goals)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $this->load->view('user/goal-create');
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $this->load->view('user/goal-create');
                }
            }
          }
        }          
      }  
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('goals', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getGoalCount = $this->Front_model->getGoalCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_goals = trim($getPackDetail->pack_goals);
              $used_goals = trim($getGoalCount['goal_count_rows']);
              $check_type = is_numeric($total_goals);
              if($check_type == 'true')
              {
                if($used_goals < $total_goals)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-create');
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}    
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_goal()//create new goal
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('gname','Goal ','trim|required');
    $this->form_validation->set_rules('gdept','Department','trim|required');
    $this->form_validation->set_rules('gstart_date','Start Date','trim|required');
    $this->form_validation->set_rules('gend_date','End Date','trim|required');
         
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {

          $g_manager = $this->input->post('project_manager');
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
           $index1 = array_search($g_manager,$myTMArray);
            if($index1 !== FALSE){
                unset($myTMArray[$index1]);
            }

          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
              } 
          }
          
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
                  $data = array(
                        'gname' => $this->input->post('gname'),
                        'gdept' => $this->input->post('gdept'),
                        'gstart_date' => $this->input->post('gstart_date'),
                        'gend_date' => $this->input->post('gend_date'),
                        'gdes' => $this->input->post('gdes'),
                        'gcreated_by' => $this->session->userdata('d168_id'),
                        'gcreated_date' => date('Y-m-d H:i:s'),
                        'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                        'gmanager' => $g_manager,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewGoal($data);
                    //recent inserted id
                    $inserted_id = $this->db->insert_id();

                    $data2 = array(
                        'gid' => $inserted_id,
                        'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                        'gmember' => $this->session->userdata('d168_id'),
                        'status' => 'accepted',
                        'gcreated_by' => $this->session->userdata('d168_id'),
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'yes',
                                          );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_GoalTeamMember($data2);

                    $hdata = array(
                                    'gid' => $inserted_id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Goal Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

            if(!empty($g_manager))
            {
              if($g_manager != $this->session->userdata('d168_id'))
              {
                $data2 = array(
                    'gid' => $inserted_id,
                    'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                    'gmember' => trim($g_manager),
                    'status' => 'send',
                    'gcreated_by' => $this->session->userdata('d168_id'),
                    'sent_date' => date('Y-m-d H:i:s'),
                    'sent_notify_clear' => 'no',
                                      );
                $data2 = $this->security->xss_clean($data2); // xss filter
                $this->Front_model->insert_GoalTeamMember($data2);
                $inserted_pm_id = $this->db->insert_id();
                //get email id from member id
                $getEmailID = $this->Front_model->getEmailID($g_manager);
                $hdata = array(
                                  'gid' => $inserted_id,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                  'gmember_id' =>$inserted_pm_id
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$this->input->post('gname').' as a Goal manager. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($this->input->post('gdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($g_manager).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($g_manager).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
                    $this->email->send();
              }
            }

            if(!empty($myTMArray[0]))
            {
              foreach($myTMArray as $t)
              {
              $data2 = array(
                  'gid' => $inserted_id,
                  'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                  'gmember' => trim($t),
                  'status' => 'send',
                  'gcreated_by' => $this->session->userdata('d168_id'),
                  'sent_date' => date('Y-m-d H:i:s'),
                  'sent_notify_clear' => 'no',
                                    );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->insert_GoalTeamMember($data2);
              $inserted_pm_id = $this->db->insert_id();
              //get email id from member id
              $getEmailID = $this->Front_model->getEmailID($t);
              $hdata = array(
                                'gid' => $inserted_id,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                'gmember_id' =>$inserted_pm_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$this->input->post('gname').' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($this->input->post('gdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
                    $this->email->send();
            }
          }

          if(!empty($imemail_array[0]))
          {
              $myIM_Array = explode(',', $imemail_array);//invite team member array
              foreach($myIM_Array as $im)
              {
                $check_if_registered = $this->Front_model->selectLogin($im);
                if($check_if_registered)
                {
                  $check_Goal_members = $this->Front_model->check_GoalTeamRequestSend($check_if_registered->reg_id,$inserted_id);
                    if(empty($check_Goal_members))
                    {
                      if($this->session->userdata('d168_id') != $check_if_registered->reg_id)
                      {
                        $data2 = array(
                          'gid' => $inserted_id,
                          'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                          'gmember' => trim($check_if_registered->reg_id),
                          'status' => 'send',
                          'gcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_GoalTeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                      //get email id from member id
                      $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                      $getportfolio = $this->Front_model->check_PortfolioMember($_COOKIE["d168_selectedportfolio"],$getEmailID->email_address);
                            if(empty($getportfolio))
                            {
                            $data = array(
                                            'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                                            'sent_to' => $im,
                                            'sent_from' => $this->session->userdata('d168_id'),
                                            'status' => 'pending',
                                            'working_status' => 'active',
                                            'status_date' => date('Y-m-d H:i:s'),
                                            'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                          );
                            $data = $this->security->xss_clean($data); // xss filter
                            $this->Front_model->insert_PortfolioMember($data);
                            }
                      $hdata = array(
                                        'gid' => $inserted_id,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                        'gmember_id' =>$inserted_pm_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                              $email_from = 'hello@decision168.com'; 
                                              //$email_from = 'saramaazkhan123@gmail.com'; 
                                              $email_name = 'Decision 168';

                                              $this->load->library('email');  
                                              $config=array(
                                                'charset'=>'utf-8',
                                                'wordwrap'=> TRUE,
                                                'mailtype' => 'html'
                                                );
                                              $this->email->initialize($config);
                                              $this->email->from($email_from, $email_name);
                                              $this->email->set_header('Reply-To', $email_from."\r\n");
                                              $this->email->set_header('Return-Path', $email_from."\r\n");
                                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                              $this->email->to($email_to);
                                              $this->email->set_mailtype('html');
                                              $this->email->subject('Goal Request | Decision 168');
                                              $this->email->message('                 
                                                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$this->input->post('gname').' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($this->input->post('gdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$inserted_id.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                              );
                      $this->email->send();
                      }
                    }
                  }
                  else
                  {
                    $check_email = $this->Front_model->check_goal_invited_email($im,$inserted_id);
                    if(empty($check_email))
                    {
                      $data4 = array(
                                    'gid' => $inserted_id,
                                    'sent_from' => $this->session->userdata('d168_id'),
                                    'sent_to' => $im,
                                    'status' => 'pending',
                                    'invite_date' => date('Y-m-d H:i:s')
                                      );
                      $data4 = $this->security->xss_clean($data4); // xss filter
                      $this->Front_model->insert_GoalInviteMember($data4);
                      $inserted_im_id = $this->db->insert_id();
                      $getportfolio = $this->Front_model->check_PortfolioMember($_COOKIE["d168_selectedportfolio"],$im);
                      if(empty($getportfolio))
                      {
                      $data = array(
                                      'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                                      'sent_to' => $im,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'status' => 'pending',
                                      'working_status' => 'active',
                                      'status_date' => date('Y-m-d H:i:s'),
                                      'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                    );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->insert_PortfolioMember($data);
                      }
                      $hdata = array(
                            'gid' => $inserted_id,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $P_Owner->reg_id,
                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                            'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                            'ginvited_id' =>$inserted_im_id
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Goal Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$this->input->post('gname').' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($this->input->post('gdes'),0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-invite-reject-request/'.$inserted_id.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                      $this->email->send();
                  }
                }                
              }
          }
                                  
            $this->session->set_flashdata('message', 'Goal Created Successfully!');
            $response['status'] = TRUE;
            $response['gid'] = $inserted_id;
            $response['gdept'] = $this->input->post('gdept');
            header('Content-type: application/json');
            echo json_encode($response);
          
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function goal_request()//accept or readmore request through email id
  {
    $gid = $this->uri->segment(2);
    $reg_id = $this->uri->segment(3);
    $gmid = $this->uri->segment(4);
    $data['flag_num'] = $this->uri->segment(5);
    $getEmailID = $this->Front_model->getEmailID($reg_id);
    $gdetail = $this->Front_model->GoalDetail($gid);
    $res = $this->Front_model->goal_request($gid,$reg_id,$gmid);
    if($data['flag_num'] == '1')
    {
        if($res > 0) 
        {
          $res2 = $this->Front_model->goal_request_status($gid,$reg_id,$gmid);
          $check_status = $res2->status;
          if($check_status == 'send')
          {
            $data['status'] = 'accepted';
            $data['gid'] = $gid;
            $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_goal_request_member($data3,$gmid);
            $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
            $hdata = array(
                            'gid' => $gdetail->gid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'gmember_id' =>$gmid
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/grequest_accept',$data);
          }
          elseif($check_status == 'accepted')
          {
            $data['status'] = 'already_accepted';
            $data['gid'] = $gid;
            $this->load->view('user/grequest_accept',$data);
          }
          elseif($check_status == 'read_more')
          {            
            $data['status'] = 'accepted';
            $data['gid'] = $gid;
            $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_goal_request_member($data3,$gmid);
            $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
            $hdata = array(
                            'gid' => $gdetail->gid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'gmember_id' =>$gmid
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/grequest_accept',$data);
          }
        }
        else
        {
          $this->load->view('user/grequest_invalid');
        }
    }
    elseif($data['flag_num'] == '2')
    {
        if($res > 0)
        {
          $res2 = $this->Front_model->goal_request_status($gid,$reg_id,$gmid);
          $check_status = $res2->status;
          if($check_status == 'send')
          {
            $data['status'] = 'read_more';
            $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
            $data3 = $this->security->xss_clean($data3);
            $this->Front_model->update_goal_request_member($data3,$gmid);
            $hdata = array(
                            'gid' => $gdetail->gid,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $getEmailID->reg_id,
                            'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                            'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                            'gmember_id' =>$gmid
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            $this->load->view('user/grequest_readmore',$data);
          }
          elseif($check_status == 'read_more')
          {
            $data['status'] = 'already_read_more';
            $this->load->view('user/grequest_readmore',$data);
          }
          elseif($check_status == 'accepted')
          {
            $data['status'] = 'already_accepted';
            $data['gid'] = $gid;
            $this->load->view('user/grequest_accept',$data);
          }
        }
        else
        {
          $this->load->view('user/grequest_invalid');
        }
    }
    else
    {
      $this->load->view('user/grequest_invalid');
    }
  }

  public function goal_request2()//accept or readmore request through site
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->uri->segment(2);
    $gmid = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $getEmailID = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    $gdetail = $this->Front_model->GoalDetail($gid);
    $res = $this->Front_model->goal_request2($gid,$gmid);
     if($data['flag_num'] == '1')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->goal_request_status2($gmid);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Goal Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Goal Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Goal Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        // $this->session->set_userdata('d168_refresh_page','true');
        // echo "<script>window.history.go(-2);</script>";
      }
     }
     elseif($data['flag_num'] == '2')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->goal_request_status2($gmid);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Read More Goal Request Sent!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $this->session->set_flashdata('message', 'Read More Goal Request Already Sent!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Goal Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          // $this->session->set_userdata('d168_refresh_page','true');
          // echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        // $this->session->set_userdata('d168_refresh_page','true');
        // echo "<script>window.history.go(-2);</script>";
      }
     }
     else
     {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        // $this->session->set_userdata('d168_refresh_page','true');
        // echo "<script>window.history.go(-2);</script>";
     }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function goalModal_request2()//accept or readmore request through site (modal)
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->uri->segment(2);
    $gmid = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $getEmailID = $this->Front_model->getEmailID($this->session->userdata('d168_id'));
    $gdetail = $this->Front_model->GoalDetail($gid);
    $res = $this->Front_model->goal_request2($gid,$gmid);
     if($data['flag_num'] == '1')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->goal_request_status2($gmid);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Goal Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Goal Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $data3 = array(
                            'status' => 'accepted',
                            'status_date' => date('Y-m-d H:i:s'),
                            'status_notify' => 'yes',
                            'status_notify_clear' => 'no',
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $data2 = array(    'status' => 'accepted',
                              'working_status' => 'active',
                              'status_date' => date('Y-m-d H:i:s'),
                              'status_notify' => 'seen',
                              'status_notify_clear' => 'yes',
                         );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->update_PortfolioMemberPIM($data2,$getEmailID->email_address,$gdetail->portfolio_id);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Team Member Request Accepted By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Goal Request Successfully Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        //echo "<script>window.history.go(-2);</script>";
      }
     }
     elseif($data['flag_num'] == '2')
     {
      if($res > 0)
      {
        $res2 = $this->Front_model->goal_request_status2($gmid);
        $check = $res2->status;
        if($check == 'send')
        {
          $data3 = array(
                            'status' => 'read_more',
                            'status_date' => date('Y-m-d H:i:s')
                          );
          $data3 = $this->security->xss_clean($data3);
          $this->Front_model->update_goal_request_member($data3,$gmid);
          $hdata = array(
                          'gid' => $gdetail->gid,
                          'h_date' => date('Y-m-d H:i:s'),
                          'h_resource_id' => $getEmailID->reg_id,
                          'h_resource' => $getEmailID->first_name.' '.$getEmailID->last_name,
                          'h_description' => 'Project More Request By '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          'gmember_id' =>$gmid
                      );
                      $hdata = $this->security->xss_clean($hdata); // xss filter
                      $this->Front_model->insert_ProjectHistory($hdata);
          $this->session->set_flashdata('message', 'Read More Goal Request Sent!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'read_more')
        {
          $this->session->set_flashdata('message', 'Read More Goal Request Already Sent!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
        elseif($check == 'accepted')
        {
          $this->session->set_flashdata('message', 'Goal Request Already Accepted!');
          redirect($_SERVER['HTTP_REFERER']);
          //echo "<script>window.history.go(-2);</script>";
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        //echo "<script>window.history.go(-2);</script>";
      }
     }
     else
     {
        $this->session->set_flashdata('message', 'Invalid link or Removed from Goal!');
        redirect($_SERVER['HTTP_REFERER']);
        //echo "<script>window.history.go(-2);</script>";
     }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function goal_invite_reject_request()
  {
    $gid = $this->uri->segment(2);
    $igm_id = $this->uri->segment(3);
    $data['flag_num'] = $this->uri->segment(4);
    $r = $this->Front_model->check_goal_invite_request($igm_id);
    if($r > 0)
    {
      if($data['flag_num'] == '2')
        {
          $res = $this->Front_model->check_goal_invite_reject_request($igm_id);
          $check_status = $res->status;
            if($check_status == 'pending')
            {
              $gdetail = $this->Front_model->GoalDetail($gid);
                $data['status'] = 'rejected';
                $data = array(
                                'status' => 'rejected',
                                'accept_date' => date('Y-m-d H:i:s')
                              );
                $data = $this->security->xss_clean($data);
                $this->Front_model->update_goal_invite_request($data,$igm_id);
                $data2 = array(    'status' => 'pending',
                          'status_date' => date('Y-m-d H:i:s')
                     );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->update_PortfolioMemberPIM($data2,$res->sent_to,$gdetail->portfolio_id);
                $hdata = array(
                                'gid' => $gdetail->gid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource' => $res->sent_to,
                                'h_description' => 'Invite Rejected By'.$res->sent_to,
                                'ginvited_id' =>$igm_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
                $this->load->view('user/ginvite_request_reject',$data);
            }
            elseif($check_status == 'rejected')
            {
              $data['status'] = 'already_rejected';
              $this->load->view('user/ginvite_request_reject',$data);
            }
            elseif($check_status == 'accepted')
            {
              $data['status'] = 'accepted';
              $this->load->view('user/ginvite_request_reject',$data);          
            }
        }
        else
        {      
            $this->load->view('user/grequest_invalid');
        }
    }
    else
    {
      $this->load->view('user/grequest_invalid');
    }    
  }

  public function GoalOverview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $previous_url = $_SERVER['HTTP_REFERER'];
      $previous_url_array = explode('/', $previous_url);
      $previous_page_name = end($previous_url_array);
      $data['previous_page_name'] = $previous_page_name;

      if($previous_page_name == 'file-cabinet'){
        $privilege_only_view = 'no';
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
        $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
        if($getCompPackInfo)
        {
          $privilege = "no";
          if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
          {
            $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
            if($getCompRolesInfo)
            {
              if($getCompRolesInfo->privilege != 'all')
              {
                $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                if(in_array('view', $cus_privilege))
                {
                  $privilege_only_view = 'yes';
                }
              }
            }      
          }
        }
        }
        $g_strategies = $this->Front_model->file_itGoalsAllStrategiesList($id);
        $data['g_strategies'] = $g_strategies;
        $data['Goal_tasks'] = $this->Front_model->file_itGoal_tasks($id);
        $data['Goal_subtasks'] = $this->Front_model->file_itGoal_subtasks($id);
        $data['gdetail'] = $this->Front_model->file_itGoalDetail($id);
        $gid = $data['gdetail']->gid;
        echo '<div class="modal-header">
                <h5 class="modal-title mt-0 new_gname'.$gid.'" id="GoalOverviewModalLabel">'.$data['gdetail']->gname.'</h5>';
        if($data['gdetail']->gcreated_by == $this->session->userdata('d168_id'))
        {
          if($privilege_only_view == 'no')
          {
          echo '&nbsp;&nbsp;<a href="javascript:void(0);" onclick="reopenGoal('.$id.');" class="btn btn-sm btn-d text-white">Reopen</a>';
          }
        }
        echo '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">';
                    $this->load->view('user/goal-overview-modal',$data);                                       
        echo '</div>'; 
      }else{
        $g_strategies = $this->Front_model->GoalsAllStrategiesList($id);
        //change strategies progress start
        if($g_strategies)
        {
          foreach($g_strategies as $get_g_s)
          {
            $Strategy_tasks = $this->Front_model->Strategy_tasks($get_g_s->sid);
            $Strategy_subtasks = $this->Front_model->Strategy_subtasks($get_g_s->sid);      
            if($Strategy_tasks || $Strategy_subtasks)
            {
              $calculate_progress_done = $this->Front_model->Strategyprogress_done($get_g_s->sid);
              $calculate_progress_total = $this->Front_model->Strategyprogress_total($get_g_s->sid);
              $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($get_g_s->sid);
              $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($get_g_s->sid);
              if($calculate_progress_total || $calculate_sub_progress_total)
              {
                  $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
                  $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
                  if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
                  {
                    $cal_data = array(
                              'sprogress' => 'done',
                          );
                    $cal_data = $this->security->xss_clean($cal_data); // xss filter
                    $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                  }
                  elseif($calculate_total_pro_progress_done > '0')
                  {
                    $cal_data = array(
                              'sprogress' => 'in_progress',
                          );
                    $cal_data = $this->security->xss_clean($cal_data); // xss filter
                    $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                  }
                  elseif($calculate_total_pro_progress_done == '0')
                  {
                    $cal_data = array(
                              'sprogress' => 'to_do',
                          );
                    $cal_data = $this->security->xss_clean($cal_data); // xss filter
                    $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                  }
              }
            }
          }
        }
        //change strategies progress end
        $data['g_strategies'] = $g_strategies;
        $data['Goal_tasks'] = $this->Front_model->Goal_tasks($id);
        $data['Goal_subtasks'] = $this->Front_model->Goal_subtasks($id);
        $data['gdetail'] = $this->Front_model->GoalDetail($id);
        $gid = $data['gdetail']->gid;
        echo '<div class="modal-header">
                      <h5 class="modal-title mt-0 new_gname'.$gid.'" id="GoalOverviewModalLabel">'.$data['gdetail']->gname.'</h5>
                      &nbsp;&nbsp;<a href="'.base_url('goal-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">';
                    $this->load->view('user/goal-overview-modal',$data);                                       
        echo '</div>'; 
      } 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function goal_overview()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $g_strategies = $this->Front_model->GoalsAllStrategiesList($id);
      //change strategies progress start
      if($g_strategies)
      {
        foreach($g_strategies as $get_g_s)
        {
          $Strategy_tasks = $this->Front_model->Strategy_tasks($get_g_s->sid);
          $Strategy_subtasks = $this->Front_model->Strategy_subtasks($get_g_s->sid);      
          if($Strategy_tasks || $Strategy_subtasks)
          {
            $calculate_progress_done = $this->Front_model->Strategyprogress_done($get_g_s->sid);
            $calculate_progress_total = $this->Front_model->Strategyprogress_total($get_g_s->sid);
            $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($get_g_s->sid);
            $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($get_g_s->sid);
            if($calculate_progress_total || $calculate_sub_progress_total)
            {
                $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
                $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
                if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
                {
                  $cal_data = array(
                            'sprogress' => 'done',
                        );
                  $cal_data = $this->security->xss_clean($cal_data); // xss filter
                  $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                }
                elseif($calculate_total_pro_progress_done > '0')
                {
                  $cal_data = array(
                            'sprogress' => 'in_progress',
                        );
                  $cal_data = $this->security->xss_clean($cal_data); // xss filter
                  $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                }
                elseif($calculate_total_pro_progress_done == '0')
                {
                  $cal_data = array(
                            'sprogress' => 'to_do',
                        );
                  $cal_data = $this->security->xss_clean($cal_data); // xss filter
                  $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
                }
            }
          }
        }
      }
      //change strategies progress end
      $data['g_strategies'] = $g_strategies;
      $data['Goal_tasks'] = $this->Front_model->Goal_tasks($id);
      $data['Goal_subtasks'] = $this->Front_model->Goal_subtasks($id);
      $data['gdetail'] = $this->Front_model->GoalDetail($id);
      $data['view_history_date_goal'] = $this->Front_model->view_history_date_goal($id);
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['motivator'] = $this->Front_model->Motivator();
      //$data['ad_logo'] = $this->Front_model->ad_logo();
      $this->load->view('user/goal-overview',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function GoalEdit_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['gdetail'] = $this->Front_model->GoalDetail($id); 
      $this->load->view('user/goal-edit-modal',$data);   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_goal()//edit new goal
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('gname','Goal ','trim|required');
    $this->form_validation->set_rules('gdept','Department','trim|required');
    $this->form_validation->set_rules('gstart_date','Start Date','trim|required');
    $this->form_validation->set_rules('gend_date','End Date','trim|required');
         
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {          
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          $gid = $this->input->post('gid');
                  $data = array(
                        'gname' => $this->input->post('gname'),
                        'gdept' => $this->input->post('gdept'),
                        'gstart_date' => $this->input->post('gstart_date'),
                        'gend_date' => $this->input->post('gend_date'),
                        'gdes' => $this->input->post('gdes'),
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editGoal($data,$gid);

                    //strategies
                    $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($gid);//all stratgies to update
                    if($g_strategies)
                    {
                       foreach($g_strategies as $gs)
                       {
                          $sdata = array(
                                            'gdept_id' => $this->input->post('gdept'),
                                        );
                                        $sdata = $this->security->xss_clean($sdata); // xss filter
                                        $this->Front_model->editStrategies($sdata,$gs->sid);
                          $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to update
                          if($s_projects)
                          {
                             foreach($s_projects as $sp)
                             {
                              //project
                              $data = array(
                                            'dept_id' => $this->input->post('gdept'),
                                          );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$sp->pid);                      
                              //project tasks
                              $data8 = array(
                                              'dept_id' => $this->input->post('gdept'),
                                            );
                                        $data8 = $this->security->xss_clean($data8); // xss filter
                                        $this->Front_model->edit_project_tasks($data8,$sp->pid);
                              //project subtasks
                              $data9 = array(
                                              'dept_id' => $this->input->post('gdept'),
                                            );
                                        $data8 = $this->security->xss_clean($data9); // xss filter
                                        $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                              //project cp
                              $data10 = array(
                                              'dept_id' => $this->input->post('gdept'),
                                            );
                                        $data10 = $this->security->xss_clean($data10); // xss filter
                                        $this->Front_model->edit_project_cp($data10,$sp->pid);
                             }
                          }
                       }
                    }

                    $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Goal Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                  //pass <a> link in set_flashdata
                                  //$link = anchor(base_url('projects-overview/'.$inserted_id), 'View Created Project Details!');
                                  //$message = 'Project Created Successfully!' .' '. $link;
                                  $this->session->set_flashdata('message', 'Goal Edited Successfully!');
                              $port_dept = $this->Front_model->get_PDepartment($this->input->post('gdept'));
                              $response['new_gname'] = $this->input->post('gname');
                              $response['new_gdes'] = $this->input->post('gdes');
                              $response['new_gdept'] = $port_dept->department;
                              $response['new_gsd'] = $this->input->post('gstart_date');
                              $response['new_ged'] = $this->input->post('gend_date');
                              $response['gid'] = $gid;
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
          
        }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  // public function portfolio_goal_strategies()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $get_goal_id = $this->uri->segment(2);
  //     $data['get_goal_id'] = $this->uri->segment(2);
  //     $g_strategies = $this->Front_model->GoalsAllStrategiesList($get_goal_id);
  //     //change strategies progress start
  //     if($g_strategies)
  //     {
  //       foreach($g_strategies as $get_g_s)
  //       {
  //         $Strategy_tasks = $this->Front_model->Strategy_tasks($get_g_s->sid);
  //         $Strategy_subtasks = $this->Front_model->Strategy_subtasks($get_g_s->sid);      
  //         if($Strategy_tasks || $Strategy_subtasks)
  //         {
  //           $calculate_progress_done = $this->Front_model->Strategyprogress_done($get_g_s->sid);
  //           $calculate_progress_total = $this->Front_model->Strategyprogress_total($get_g_s->sid);
  //           $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($get_g_s->sid);
  //           $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($get_g_s->sid);
  //           if($calculate_progress_total || $calculate_sub_progress_total)
  //           {
  //               $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
  //               $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
  //               if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
  //               {
  //                 $cal_data = array(
  //                           'sprogress' => 'done',
  //                       );
  //                 $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //                 $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
  //               }
  //               elseif($calculate_total_pro_progress_done > '0')
  //               {
  //                 $cal_data = array(
  //                           'sprogress' => 'in_progress',
  //                       );
  //                 $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //                 $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
  //               }
  //               elseif($calculate_total_pro_progress_done == '0')
  //               {
  //                 $cal_data = array(
  //                           'sprogress' => 'to_do',
  //                       );
  //                 $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //                 $this->Front_model->editStrategies($cal_data,$get_g_s->sid);
  //               }
  //           }
  //         }
  //       }
  //     }
  //     //change strategies progress end
  //     $data['g_strategies'] = $g_strategies;
  //     $data['Goal_tasks'] = $this->Front_model->Goal_tasks($get_goal_id);
  //     $data['Goal_subtasks'] = $this->Front_model->Goal_subtasks($get_goal_id);
  //     $data['gdetail'] = $this->Front_model->GoalDetail($get_goal_id); 
  //     $data['plist'] = $this->Front_model->GoalsStrategiesList($get_goal_id);
  //     $data['accepted_plist'] = "";
  //     $data['pending_plist'] = "";
  //     $data['readmore_plist'] = "";
  //     $this->load->view('user/portfolio-goal-strategies',$data);
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function goal_strategies_create()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
      $get_goal_id = $this->input->post('gid');
if(empty($this->session->userdata('d168_user_cor_id')))
{
      $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($getMydetail)
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
        {
          if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
            if($getPackDetail)
            {
              $total_strategies = trim($getPackDetail->pack_goals_strategies);
              $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
              $check_type = is_numeric($total_strategies);
              if($check_type == 'true')
              {
                if($used_strategies < $total_strategies)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-strategies-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-strategies-create');
                  }
              }
            }
          }
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
          if($getPackDetail)
          {
            $total_strategies = trim($getPackDetail->pack_goals_strategies);
            $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
            $check_type = is_numeric($total_strategies);
            if($check_type == 'true')
            {
              if($used_strategies < $total_strategies)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $this->load->view('user/goal-strategies-create');
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $this->load->view('user/goal-strategies-create');
                }
            }
          }
        }          
      }
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('strategies', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getStrategiesCount = $this->Front_model->getStrategiesCountCorp($_COOKIE["d168_selectedportfolio"],$get_goal_id);
            if($getPackDetail)
            {
              $total_strategies = trim($getPackDetail->pack_goals_strategies);
              $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
              $check_type = is_numeric($total_strategies);
              if($check_type == 'true')
              {
                if($used_strategies < $total_strategies)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-strategies-create');
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $this->load->view('user/goal-strategies-create');
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}  
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_strategies()//create new strategies
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);

        $count = $this->input->post('increase_cnt') + 1;

        for($i='1'; $i<$count; $i++)
        {
          if(!empty($_POST['sname'.$i]))
          {
            $sname = $_POST['sname'.$i]; 
            $sdes = $_POST['sdes'.$i]; 

            $data = array(
                      'sname' => $sname,
                      'sdes' => $sdes,
                      'screated_by' => $this->session->userdata('d168_id'),
                      'screated_date' => date('Y-m-d H:i:s'),
                      'sprogress' => 'to_do',
                      'portfolio_id' => $this->input->post('portfolio_id'),
                      'gid' => $this->input->post('gid'),
                      'gdept_id' => $this->input->post('gdept'),
                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                  );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewStrategies($data);
                  //recent inserted id
                  $inserted_id = $this->db->insert_id();

            $hdata = array(
                            'sid' => $inserted_id,
                            'gid' => $this->input->post('gid'),
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $P_Owner->reg_id,
                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                            'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
          }
        }
                

                                //pass <a> link in set_flashdata
                                //$link = anchor(base_url('projects-overview/'.$inserted_id), 'View Created Project Details!');
                                //$message = 'Project Created Successfully!' .' '. $link;
                            $this->session->set_flashdata('message', 'KPI Created Successfully!');
                            $response['status'] = TRUE;
                            $response['gid'] = $this->input->post('gid');
                            header('Content-type: application/json');
                            echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function StrategiesOverview_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $previous_url = $_SERVER['HTTP_REFERER'];
      $previous_url_array = explode('/', $previous_url);
      $previous_page_name = end($previous_url_array);
      $data['previous_page_name'] = $previous_page_name;

      if($previous_page_name == 'file-cabinet'){
        $privilege_only_view = 'no';
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
        $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
        if($getCompPackInfo)
        {
          $privilege = "no";
          if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
          {
            $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
            if($getCompRolesInfo)
            {
              if($getCompRolesInfo->privilege != 'all')
              {
                $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
                if(in_array('view', $cus_privilege))
                {
                  $privilege_only_view = 'yes';
                }
              }
            }      
          }
        }
        }
        $Strategy_tasks = $this->Front_model->file_itStrategy_tasks($id);
        $Strategy_subtasks = $this->Front_model->file_itStrategy_subtasks($id);
        $data['Strategy_tasks'] = $Strategy_tasks;
        $data['Strategy_subtasks'] = $Strategy_subtasks;
        $data['sdetail'] = $this->Front_model->file_itStrategyDetail($id);
        $data['s_projects'] = $this->Front_model->file_itStrategyAllProjectsList($id);
        $sid = $data['sdetail']->sid;
        echo '<div class="modal-header">
                <h5 class="modal-title mt-0 new_sname'.$sid.'" id="StrategiesOverviewModalLabel">'.$data['sdetail']->sname.'</h5>';
        if($data['sdetail']->screated_by == $this->session->userdata('d168_id'))
        {
          if($privilege_only_view == 'no')
          {
          echo '&nbsp;&nbsp;<a href="javascript:void(0);" onclick="reopenStrategy('.$id.');" class="btn btn-sm btn-d text-white">Reopen</a>';
          }
        }        
        echo '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">';
        $this->load->view('user/strategies-overview-modal',$data);                                       
        echo '</div>'; 
      }else{
        $Strategy_tasks = $this->Front_model->Strategy_tasks($id);
        $Strategy_subtasks = $this->Front_model->Strategy_subtasks($id);
        //change strategies progress start
        if($Strategy_tasks || $Strategy_subtasks)
        {
          $calculate_progress_done = $this->Front_model->Strategyprogress_done($id);
          $calculate_progress_total = $this->Front_model->Strategyprogress_total($id);
          $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($id);
          $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($id);
          if($calculate_progress_total || $calculate_sub_progress_total)
          {
              $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
              $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
              if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
              {
                $cal_data = array(
                          'sprogress' => 'done',
                      );
                $cal_data = $this->security->xss_clean($cal_data); // xss filter
                $this->Front_model->editStrategies($cal_data,$id);
              }
              elseif($calculate_total_pro_progress_done > '0')
              {
                $cal_data = array(
                          'sprogress' => 'in_progress',
                      );
                $cal_data = $this->security->xss_clean($cal_data); // xss filter
                $this->Front_model->editStrategies($cal_data,$id);
              }
              elseif($calculate_total_pro_progress_done == '0')
              {
                $cal_data = array(
                          'sprogress' => 'to_do',
                      );
                $cal_data = $this->security->xss_clean($cal_data); // xss filter
                $this->Front_model->editStrategies($cal_data,$id);
              }
          }
        }
        //change strategies progress end
        $data['Strategy_tasks'] = $Strategy_tasks;
        $data['Strategy_subtasks'] = $Strategy_subtasks;
        $data['sdetail'] = $this->Front_model->StrategyDetail($id);
        $data['s_projects'] = $this->Front_model->StrategyAllProjectsList($id);
        $sid = $data['sdetail']->sid;
        echo '<div class="modal-header">
                      <h5 class="modal-title mt-0 new_sname'.$sid.'" id="StrategiesOverviewModalLabel">'.$data['sdetail']->sname.'</h5>
                      &nbsp;&nbsp;<a href="'.base_url('kpi-overview/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">';
                    $this->load->view('user/strategies-overview-modal',$data);                                       
        echo '</div>'; 
      }  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function strategies_overview()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $Strategy_tasks = $this->Front_model->Strategy_tasks($id);
      $Strategy_subtasks = $this->Front_model->Strategy_subtasks($id);
      //change strategies progress start
      if($Strategy_tasks || $Strategy_subtasks)
      {
        $calculate_progress_done = $this->Front_model->Strategyprogress_done($id);
        $calculate_progress_total = $this->Front_model->Strategyprogress_total($id);
        $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($id);
        $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($id);
        if($calculate_progress_total || $calculate_sub_progress_total)
        {
            $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
            $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
            if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
            {
              $cal_data = array(
                        'sprogress' => 'done',
                    );
              $cal_data = $this->security->xss_clean($cal_data); // xss filter
              $this->Front_model->editStrategies($cal_data,$id);
            }
            elseif($calculate_total_pro_progress_done > '0')
            {
              $cal_data = array(
                        'sprogress' => 'in_progress',
                    );
              $cal_data = $this->security->xss_clean($cal_data); // xss filter
              $this->Front_model->editStrategies($cal_data,$id);
            }
            elseif($calculate_total_pro_progress_done == '0')
            {
              $cal_data = array(
                        'sprogress' => 'to_do',
                    );
              $cal_data = $this->security->xss_clean($cal_data); // xss filter
              $this->Front_model->editStrategies($cal_data,$id);
            }
        }
      }
      //change strategies progress end
      $data['Strategy_tasks'] = $Strategy_tasks;
      $data['Strategy_subtasks'] = $Strategy_subtasks;
      $data['sdetail'] = $this->Front_model->StrategyDetail($id);
      $data['s_projects'] = $this->Front_model->StrategyAllProjectsList($id);
      $data['view_history_date_strategy'] = $this->Front_model->view_history_date_strategy($id);
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['motivator'] = $this->Front_model->Motivator();
      //$data['ad_logo'] = $this->Front_model->ad_logo();
      $this->load->view('user/strategies-overview',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function StrategiesEdit_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['sdetail'] = $this->Front_model->StrategyDetail($id); 
      $this->load->view('user/strategies-edit-modal',$data);   
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function edit_strategies()//edit strategies
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $this->form_validation->set_rules('sname','Strategies ','trim|required');
         
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();
          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
          // Add the error message for this field
          $errors[$key] = form_error($key);
          }
                  
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
        }
        else
        {          
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          $sid = $this->input->post('sid');
                  $data = array(
                        'sname' => $this->input->post('sname'),
                        'sdes' => $this->input->post('sdes'),
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editStrategies($data,$sid);

                    $hdata = array(
                                    'sid' => $sid,
                                    'gid' => $this->input->post('gid'),
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'KPI Edited By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

                                  //pass <a> link in set_flashdata
                                  //$link = anchor(base_url('projects-overview/'.$inserted_id), 'View Created Project Details!');
                                  //$message = 'Project Created Successfully!' .' '. $link;
                                  $this->session->set_flashdata('message', 'KPI Edited Successfully!');
                              $response['new_sname'] = $this->input->post('sname');
                              $response['new_sdes'] = $this->input->post('sdes');
                              $response['sid'] = $sid;
                              $response['status'] = TRUE;
                              header('Content-type: application/json');
                              echo json_encode($response);
          
        }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // public function portfolio_goals_strategies_projects()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $get_strategy_id = $this->uri->segment(2);
  //     $data['sid'] = $get_strategy_id;
  //     $Strategy_tasks = $this->Front_model->Strategy_tasks($get_strategy_id);
  //     $Strategy_subtasks = $this->Front_model->Strategy_subtasks($get_strategy_id);
  //     //change strategies progress start
  //     if($Strategy_tasks || $Strategy_subtasks)
  //     {
  //       $calculate_progress_done = $this->Front_model->Strategyprogress_done($get_strategy_id);
  //       $calculate_progress_total = $this->Front_model->Strategyprogress_total($get_strategy_id);
  //       $calculate_sub_progress_done = $this->Front_model->Strategysub_progress_done($get_strategy_id);
  //       $calculate_sub_progress_total = $this->Front_model->Strategysub_progress_total($get_strategy_id);
  //       if($calculate_progress_total || $calculate_sub_progress_total)
  //       {
  //           $calculate_total_pro_progress_done = $calculate_progress_done['count_rows'] + $calculate_sub_progress_done['count_rows'];
  //           $calculate_total_pro_progress = $calculate_progress_total['count_rows'] + $calculate_sub_progress_total['count_rows'];
  //           if($calculate_total_pro_progress_done == $calculate_total_pro_progress)
  //           {
  //             $cal_data = array(
  //                       'sprogress' => 'done',
  //                   );
  //             $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //             $this->Front_model->editStrategies($cal_data,$get_strategy_id);
  //           }
  //           elseif($calculate_total_pro_progress_done > '0')
  //           {
  //             $cal_data = array(
  //                       'sprogress' => 'in_progress',
  //                   );
  //             $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //             $this->Front_model->editStrategies($cal_data,$get_strategy_id);
  //           }
  //           elseif($calculate_total_pro_progress_done == '0')
  //           {
  //             $cal_data = array(
  //                       'sprogress' => 'to_do',
  //                   );
  //             $cal_data = $this->security->xss_clean($cal_data); // xss filter
  //             $this->Front_model->editStrategies($cal_data,$get_strategy_id);
  //           }
  //       }
  //     }
  //     //change strategies progress end
  //     $data['Strategy_tasks'] = $Strategy_tasks;
  //     $data['Strategy_subtasks'] = $Strategy_subtasks;
  //     $data['sdetail'] = $this->Front_model->StrategyDetail($get_strategy_id); 
  //     $data['plist'] = $this->Front_model->GoalsStrategiesProjectList($get_strategy_id);
  //     $data['accepted_plist'] = $this->Front_model->AcceptedGoalsStrategiesProjectList($get_strategy_id);
  //     $data['pending_plist'] = $this->Front_model->PendingGoalsStrategiesProjectList($get_strategy_id);
  //     $data['readmore_plist'] = $this->Front_model->ReadMoreGoalsStrategiesProjectList($get_strategy_id);
  //     $this->load->view('user/portfolio-goals-strategies-projects',$data);
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function view_goal_history_date_wise()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $gid = $this->input->post('gid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history_goal($gid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding: 0 0 10px 15px !important;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3" style="padding-top: 2px;">
                        <h5 class="font-size-14"><?php echo date("H:i", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
                  </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            } 
    }
    else
    {
      redirect(base_url('login'));
    }           
  }

  public function view_goal_history()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['gid'] = $this->input->post('gid');
      $data['gname'] = $this->input->post('gname');
      $data['view_history_date'] = $this->Front_model->view_history_date_goal($data['gid']);
      $this->load->view('user/view-goal-history',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_history_date_wise_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $gid = $this->input->post('gid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history_goal($gid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding-bottom: 7px;padding-top: 2px;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3">
                        <h5 class="font-size-14"><?php echo date("H:i:s", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
              </div>
              <div class="me-3"><?php echo ucwords($vh->h_resource);?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i>
              </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            }           
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function goal_history_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $gname = $this->session->set_userdata('gname_history',ucwords($this->input->post('gname')));

    if(!empty($this->input->post('only_date')))
    {
      $view_history = $this->Front_model->view_history_only_date_goal($gid,date("Y-m-d", strtotime($this->input->post('only_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('only_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);       
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif((!empty($this->input->post('start_date'))) && (!empty($this->input->post('end_date'))))
    {
      $view_history = $this->Front_model->view_history_date_range_goal($gid,date("Y-m-d", strtotime($this->input->post('start_date'))),date("Y-m-d", strtotime($this->input->post('end_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('start_date'))).' - '.date("F d, Y", strtotime($this->input->post('end_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);     
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif($this->input->post('all_history') == '1')
    {
      $view_history = $this->Front_model->view_all_history_goal($gid);
      if($view_history)
      { 
           $this->session->set_userdata('view_history',$view_history);

            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response); 
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    else
    {
      $response['status'] = 'empty_option';
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  function goal_export_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gname = $this->session->userdata('gname_history');
        $this->load->library("excel");
        $object = new PHPExcel();
        $object->setActiveSheetIndex(0);

        $view_history = $this->session->userdata('view_history');

          $column = 0;
          if(!empty($this->session->userdata('dateSelected')))
          {
            $name = $gname.' History ( '.$this->session->userdata('dateSelected').' ) ';
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $name);
          }
          else
          {            
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $gname.' History');
          }
          $object->getActiveSheet()->getRowDimension('1')->setRowHeight(30);
          $object->getActiveSheet()->getStyle('A1')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 18,
          )));

          $table_columns = array("Date", "Time", "Resource", "Activity");    

          foreach($table_columns as $field)
          {
           $object->getActiveSheet()->setCellValueByColumnAndRow($column, 2, $field);
           $object->getActiveSheet()->getRowDimension('2')->setRowHeight(22);
           $object->getActiveSheet()->getStyle('A2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $object->getActiveSheet()->getStyle('2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $column++;
          }

         $excel_row = 3;
         
         // print_r($view_history);
         // die();
         $total = count($view_history) + 3;

         for ($i = 3; $i < $total; $i++) {
              if ($i % 2 == 0) {
                  $object->getActiveSheet()->getStyle('A' . $i . ':D' . $i)->applyFromArray(
                      array(
                          'fill' => array(
                              'type' => \PHPExcel_Style_Fill::FILL_SOLID,
                              'color' => array('rgb' => 'ebf5a3')
                          ),
                      )
                  );
              }
          }

          $styleArray = array(
        'borders' => array(
          'allborders' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN
          )
        )
      );

      $border_total = count($view_history) + 2;
      $object->getActiveSheet()->getStyle('A2:D'. $border_total)->applyFromArray($styleArray);
                                                  foreach($view_history as $v)
                                                  {
                                                      $object->getActiveSheet()->getColumnDimension('A')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(0, $excel_row, date("D, F d, Y", strtotime($v->h_date)));                 
                                                      $object->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(1, $excel_row, date("H:i:s", strtotime($v->h_date)));
                                                      $object->getActiveSheet()->getColumnDimension('C')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(2, $excel_row, ucwords($v->h_resource));
                                                      $object->getActiveSheet()->getColumnDimension('D')->setWidth(90);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(3, $excel_row, ucwords($v->h_description));
                                                      $object->getActiveSheet()->getRowDimension($excel_row)->setRowHeight(18);
                                                          $excel_row++;
                                                  }

          $object_writer = PHPExcel_IOFactory::createWriter($object, 'Excel5'); 
          header('Content-Type: application/vnd.ms-excel');
          header('Content-Disposition: attachment;filename='.$gname.' History.xls');
          $object_writer->save('php://output'); 
          $this->session->unset_userdata('gname_history');
          $this->session->unset_userdata('view_history');
          $this->session->unset_userdata('dateSelected');
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function view_strategy_history_date_wise()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $sid = $this->input->post('sid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history_strategy($sid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding: 0 0 10px 15px !important;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3" style="padding-top: 2px;">
                        <h5 class="font-size-14"><?php echo date("H:i", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
                  </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            } 
    }
    else
    {
      redirect(base_url('login'));
    }           
  }

  public function view_strategy_history()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['sid'] = $this->input->post('sid');
      $data['sname'] = $this->input->post('sname');
      $data['view_history_date'] = $this->Front_model->view_history_date_strategy($data['sid']);
      $this->load->view('user/view-strategy-history',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function view_history_date_wise_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $sid = $this->input->post('sid');
      $hdate = $this->input->post('hdate');
      $view_history = $this->Front_model->view_history_strategy($sid,$hdate);
            if($view_history) 
            {    
              foreach($view_history as $vh)
              {  
            ?>
            <li class="event-list" style="padding-bottom: 7px;padding-top: 2px;">
              <div class="event-timeline-dot">
                <i class="bx bx-right-arrow-circle font-size-18"></i>
              </div>
              <div class="media">
                  <div class="me-3">
                        <h5 class="font-size-14"><?php echo date("H:i:s", strtotime($vh->h_date));?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i></h5>
              </div>
              <div class="me-3"><?php echo ucwords($vh->h_resource);?><i class="bx bx-right-arrow-alt font-size-16 text-d align-middle ms-2"></i>
              </div>
                <div class="media-body">
                  <div>
                    <?php echo ucwords($vh->h_description);?>
                  </div>
                </div>
              </div>
            </li>
            <?php 
              } 
              ?>
              <div class="mb-3"></div>
              <?php                  
            }           
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function strategy_history_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $sid = $this->input->post('sid');
    $sname = $this->session->set_userdata('sname_history',ucwords($this->input->post('sname')));

    if(!empty($this->input->post('only_date')))
    {
      $view_history = $this->Front_model->view_history_only_date_strategy($sid,date("Y-m-d", strtotime($this->input->post('only_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('only_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);       
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif((!empty($this->input->post('start_date'))) && (!empty($this->input->post('end_date'))))
    {
      $view_history = $this->Front_model->view_history_date_range_strategy($sid,date("Y-m-d", strtotime($this->input->post('start_date'))),date("Y-m-d", strtotime($this->input->post('end_date'))));
      if($view_history)
      {
        $this->session->set_userdata('view_history',$view_history);

          $dateSelected = date("F d, Y", strtotime($this->input->post('start_date'))).' - '.date("F d, Y", strtotime($this->input->post('end_date')));
          $this->session->set_userdata('dateSelected',$dateSelected);
            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response);     
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    elseif($this->input->post('all_history') == '1')
    {
      $view_history = $this->Front_model->view_all_history_strategy($sid);
      if($view_history)
      { 
           $this->session->set_userdata('view_history',$view_history);

            $response['status'] = true;
            header('Content-type: application/json');
            echo json_encode($response); 
      }
      else
      {
            $response['status'] = 'not_found';
            header('Content-type: application/json');
            echo json_encode($response); 
      }
    }
    else
    {
      $response['status'] = 'empty_option';
      header('Content-type: application/json');
      echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  function strategy_export_excel()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $sname = $this->session->userdata('sname_history');
        $this->load->library("excel");
        $object = new PHPExcel();
        $object->setActiveSheetIndex(0);

        $view_history = $this->session->userdata('view_history');

          $column = 0;
          if(!empty($this->session->userdata('dateSelected')))
          {
            $name = $sname.' History ( '.$this->session->userdata('dateSelected').' ) ';
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $name);
          }
          else
          {            
            $object->getActiveSheet()->setCellValueByColumnAndRow($column, 1, $sname.' History');
          }
          $object->getActiveSheet()->getRowDimension('1')->setRowHeight(30);
          $object->getActiveSheet()->getStyle('A1')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 18,
          )));

          $table_columns = array("Date", "Time", "Resource", "Activity");    

          foreach($table_columns as $field)
          {
           $object->getActiveSheet()->setCellValueByColumnAndRow($column, 2, $field);
           $object->getActiveSheet()->getRowDimension('2')->setRowHeight(22);
           $object->getActiveSheet()->getStyle('A2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $object->getActiveSheet()->getStyle('2')->applyFromArray(array(
          'font'  => array(
              'bold'  => true,
              'color' => array('rgb' => '383838'),
              'size'  => 14,
          )));
           $column++;
          }

         $excel_row = 3;
         
         //print_r($view_history);
         $total = count($view_history) + 3;

         for ($i = 3; $i < $total; $i++) {
              if ($i % 2 == 0) {
                  $object->getActiveSheet()->getStyle('A' . $i . ':D' . $i)->applyFromArray(
                      array(
                          'fill' => array(
                              'type' => \PHPExcel_Style_Fill::FILL_SOLID,
                              'color' => array('rgb' => 'ebf5a3')
                          ),
                      )
                  );
              }
          }

          $styleArray = array(
        'borders' => array(
          'allborders' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN
          )
        )
      );

      $border_total = count($view_history) + 2;
      $object->getActiveSheet()->getStyle('A2:D'. $border_total)->applyFromArray($styleArray);
                                                  foreach($view_history as $v)
                                                  {
                                                      $object->getActiveSheet()->getColumnDimension('A')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(0, $excel_row, date("D, F d, Y", strtotime($v->h_date)));                 
                                                      $object->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(1, $excel_row, date("H:i:s", strtotime($v->h_date)));
                                                      $object->getActiveSheet()->getColumnDimension('C')->setWidth(40);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(2, $excel_row, ucwords($v->h_resource));
                                                      $object->getActiveSheet()->getColumnDimension('D')->setWidth(90);
                                                      $object->getActiveSheet()->setCellValueByColumnAndRow(3, $excel_row, ucwords($v->h_description));
                                                      $object->getActiveSheet()->getRowDimension($excel_row)->setRowHeight(18);
                                                          $excel_row++;
                                                  }

          $object_writer = PHPExcel_IOFactory::createWriter($object, 'Excel5'); 
          header('Content-Type: application/vnd.ms-excel');
          header('Content-Disposition: attachment;filename='.$sname.' History.xls');
          $object_writer->save('php://output'); 
          $this->session->unset_userdata('sname_history');
          $this->session->unset_userdata('view_history');
          $this->session->unset_userdata('dateSelected');
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itGoalDetail($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));      
      //goal
      $gdata = array(
                                    'g_trash' => 'yes',
                                    'g_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                    'gsingle_trash' => 'yes'
                                );
                                $gdata = $this->security->xss_clean($gdata); // xss filter
                                $this->Front_model->editGoal($gdata,$id);

      //goal invited members
      $data3 = array(
                                    'g_trash' => 'yes',
                                    'g_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_goal_invited_members($data3,$id);
      //goal members
      $data6 = array(
                                    'g_trash' => 'yes',
                                    'g_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_goal_members($data6,$id);
      //goal suggested members
      $data7 = array(
                                    'g_trash' => 'yes',
                                    'g_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_goal_suggested_members($data7,$id);

      //strategies
      $g_strategies = $this->Front_model->GoalsAllStrategiesList_not_in_trash($id);
      if($g_strategies)
      {
         foreach($g_strategies as $gs)
         {
            $sdata = array(
                                    's_trash' => 'yes',
                                    's_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                    's_single_trash' => 'g_yes'
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$gs->sid);

            $s_projects = $this->Front_model->StrategyAllProjectsList_not_in_trash($gs->sid);
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                  //project
                  $data = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                                'psingle_trash' => 'g_yes'
                                            );
                                            $data = $this->security->xss_clean($data); // xss filter
                                            $this->Front_model->edit_Project($data,$sp->pid);
                  //project files                          
                  $data2 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->edit_project_files($data2,$sp->pid);
                  //project invited members
                  $data3 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data3 = $this->security->xss_clean($data3); // xss filter
                                            $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                  //project management
                  $data4 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data4 = $this->security->xss_clean($data4); // xss filter
                                            $this->Front_model->edit_project_management($data4,$sp->pid);
                  //project management fields
                  $data5 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data5 = $this->security->xss_clean($data5); // xss filter
                                            $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                  //project members
                  $data6 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data6 = $this->security->xss_clean($data6); // xss filter
                                            $this->Front_model->edit_project_members($data6,$sp->pid);
                  //project suggested members
                  $data7 = array(
                                                'ptrash' => 'yes',
                                                'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            );
                                            $data7 = $this->security->xss_clean($data7); // xss filter
                                            $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                  //project tasks
                  $data8 = array(
                                                    'trash' => 'yes',
                                                    'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                                    'tstatus_date' => date('Y-m-d H:i:s'),
                                                    'tsingle_trash' => 'g_yes'
                                                );
                            $data8 = $this->security->xss_clean($data8); // xss filter
                            $this->Front_model->edit_project_tasksSentTrash($data8,$sp->pid);
                  //project subtasks
                  $data9 = array(
                                                    'strash' => 'yes',
                                                    'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                                    'stsingle_trash' => 'g_yes'
                                                );
                            $data8 = $this->security->xss_clean($data9); // xss filter
                            $this->Front_model->edit_project_subtasksSentTrash($data9,$sp->pid);
                  //project cp
                  $data10 = array(
                                                    'trash' => 'yes',
                                                    'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                                    'cpsingle_trash' => 'g_yes'
                                                );
                            $data10 = $this->security->xss_clean($data10); // xss filter
                            $this->Front_model->edit_project_cpSentTrash($data10,$sp->pid);
               }   
            }
         }
      }

      //save history
      $hdata = array(
                                    'gid' => $id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Goal Moved To Trash By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Goal Moved To Trash!');
             $response['portid'] = "";
             if(isset($_COOKIE["d168_selectedportfolio"]))
             {
             $response['portid'] = $_COOKIE["d168_selectedportfolio"];
             }
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_goals = trim($getPackDetail->pack_goals);
            $used_goals = trim($getGoalCount['goal_count_rows']);
            $check_type = is_numeric($total_goals);
            if($check_type == 'true')
            {
              if($used_goals < $total_goals)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_goals = trim($getPackDetail->pack_goals);
          $used_goals = trim($getGoalCount['goal_count_rows']);
          $check_type = is_numeric($total_goals);
          if($check_type == 'true')
          {
            if($used_goals < $total_goals)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('goals', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getGoalCount = $this->Front_model->getGoalCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_goals = trim($getPackDetail->pack_goals);
              $used_goals = trim($getGoalCount['goal_count_rows']);
              $check_type = is_numeric($total_goals);
              if($check_type == 'true')
              {
                if($used_goals < $total_goals)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('gid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_goal_trash($id); 

      if($res)
      {
        if($res->portfolio_id != 0)
        {
            $checkGoalPorfolioTrash = $this->Front_model->checkProjectPorfolioTrash($res->portfolio_id);
            if($checkGoalPorfolioTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Portfolio is in Trash! To Restore Goal please Restore Portfolio!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //goal
              $gdata = array(
                                            'g_trash' => '',
                                            'g_trash_date' => '',
                                            'gsingle_trash' => ''
                                        );
                                        $gdata = $this->security->xss_clean($gdata); // xss filter
                                        $this->Front_model->editGoal($gdata,$id);

              //goal invited members
              $data3 = array(
                                            'g_trash' => '',
                                            'g_trash_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_goal_invited_members($data3,$id);
              //goal members
              $data6 = array(
                                            'g_trash' => '',
                                            'g_trash_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_goal_members($data6,$id);
              //goal suggested members
              $data7 = array(
                                            'g_trash' => '',
                                            'g_trash_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_goal_suggested_members($data7,$id);

              //strategies
              $g_strategies = $this->Front_model->GoalsAllStrategiesList_in_trash($id);
              if($g_strategies)
              {
                 foreach($g_strategies as $gs)
                 {
                    $sdata = array(
                                      's_trash' => '',
                                      's_trash_date' => '',
                                      's_single_trash' => ''
                                  );
                                  $sdata = $this->security->xss_clean($sdata); // xss filter
                                  $this->Front_model->editStrategies($sdata,$gs->sid);

                    $s_projects = $this->Front_model->StrategyAllProjectsList_in_trash($gs->sid);
                    if($s_projects)
                    {
                       foreach($s_projects as $sp)
                       {
                          //project
                          $data = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                        'psingle_trash' => ''
                                                    );
                                                    $data = $this->security->xss_clean($data); // xss filter
                                                    $this->Front_model->edit_Project($data,$sp->pid);
                          //project files                          
                          $data2 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                                    $this->Front_model->edit_project_files($data2,$sp->pid);
                          //project invited members
                          $data3 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data3 = $this->security->xss_clean($data3); // xss filter
                                                    $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                          //project management
                          $data4 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data4 = $this->security->xss_clean($data4); // xss filter
                                                    $this->Front_model->edit_project_management($data4,$sp->pid);
                          //project management fields
                          $data5 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data5 = $this->security->xss_clean($data5); // xss filter
                                                    $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                          //project members
                          $data6 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data6 = $this->security->xss_clean($data6); // xss filter
                                                    $this->Front_model->edit_project_members($data6,$sp->pid);
                          //project suggested members
                          $data7 = array(
                                                        'ptrash' => '',
                                                        'ptrash_date' => '',
                                                    );
                                                    $data7 = $this->security->xss_clean($data7); // xss filter
                                                    $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                          //project tasks
                          $data8 = array(
                                                            'trash' => '',
                                                            'trash_date' => '',
                                                            'tsingle_trash' => ''
                                                        );
                                    $data8 = $this->security->xss_clean($data8); // xss filter
                                    $this->Front_model->edit_goal_tasksRetrieve($data8,$sp->pid);
                          //project subtasks
                          $data9 = array(
                                                            'strash' => '',
                                                            'strash_date' => '',
                                                            'stsingle_trash' => ''
                                                        );
                                    $data8 = $this->security->xss_clean($data9); // xss filter
                                    $this->Front_model->edit_goal_subtasksRetrieve($data9,$sp->pid);
                          //project cp
                          $data10 = array(
                                                            'trash' => '',
                                                            'trash_date' => '',
                                                            'cpsingle_trash' => ''
                                                        );
                                    $data10 = $this->security->xss_clean($data10); // xss filter
                                    $this->Front_model->edit_goal_cpRetrieve($data10,$sp->pid);
                       }
                 }
              }
            }
              $hdata = array(
                                            'gid' => $id,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $powner->reg_id,
                                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                                            'h_description' => $res->gname.' Goal Restored by '.$powner->first_name.' '.$powner->last_name,
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Goal Restored Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
        }     
      }
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function goal_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {    
      $get_gid = $this->input->post('gid');
      $res = $this->Front_model->check_goal_trash($get_gid);
      if($res)
      {
        $get_goal_strategies_trash = $this->Front_model->GoalsAllStrategiesList_to_delete($get_gid);
        if($get_goal_strategies_trash)
        {
          foreach($get_goal_strategies_trash as $s_trash)
          {
            $get_sid = $s_trash->sid;
            $get_goal_strategies_projects_trash = $this->Front_model->StrategyAllProjectsList_to_delete($get_sid);
            if($get_goal_strategies_projects_trash)
            {
                foreach($get_goal_strategies_projects_trash as $s_p_trash)
                {
                    $get_pid = $s_p_trash->pid;
                    $get_pro_task_trash = $this->Front_model->getProjectAllTaskTrash($get_pid);
                    $get_pro_subtask_trash = $this->Front_model->getProjectAllSubtaskTrash($get_pid);
                    $get_pro_cp_trash = $this->Front_model->getProjectAllCPTrash($get_pid);

                      $this->Front_model->delete_project_files($get_pid);
                      $this->Front_model->delete_project_invited_members($get_pid);
                      $this->Front_model->delete_project_management($get_pid);
                      $this->Front_model->delete_project_management_fields($get_pid);
                      $this->Front_model->delete_project_members($get_pid);
                      $this->Front_model->delete_project_suggested_members($get_pid);
                      $this->Front_model->delete_project_history($get_pid);
                      $this->Front_model->delete_project_request_member($get_pid);
                    if($get_pro_task_trash)
                    {
                      foreach($get_pro_task_trash as $pro_task_trash)
                      {
                          $get_tid = $pro_task_trash->tid;
                          $this->Front_model->delete_task_t_trash($get_tid);
                      }
                      $this->Front_model->delete_project_tasks($get_pid);
                    }
                    if($get_pro_subtask_trash)
                    {
                      foreach($get_pro_subtask_trash as $pro_stask_trash)
                      {
                          $get_stid = $pro_stask_trash->stid;
                          $this->Front_model->delete_task_st_trash($get_stid);
                      }
                      $this->Front_model->delete_project_subtasks($get_pid);
                    }
                    if($get_pro_cp_trash)
                    {
                      foreach($get_pro_cp_trash as $pro_cp_trash)
                      {
                          $get_pc_id = $pro_cp_trash->pc_id;
                          $this->Front_model->delete_cp_t_trash($get_pc_id);
                      }
                      $this->Front_model->delete_project_cp($get_pid);
                    }
                      $this->Front_model->delete_project($get_pid);
                }
            }
            $this->Front_model->delete_strategies($get_sid);    
          }
        }
        $this->Front_model->delete_goal($get_gid);

        $this->session->set_flashdata('message','Goal deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
      } 
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function delete_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itStrategyDetail($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));      
      //strategies
      $sdata = array(
                                    's_trash' => 'yes',
                                    's_trash_date' => date("Y-m-d", strtotime("+1 month")),
                                    's_single_trash' => 'yes'
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$id);              

        $s_projects = $this->Front_model->StrategyAllProjectsList_not_in_trash($id);
        if($s_projects)
        {
           foreach($s_projects as $sp)
           {
              //project
              $data = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                            'psingle_trash' => 's_yes'
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$sp->pid);
              //project files                          
              $data2 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$sp->pid);
              //project invited members
              $data3 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$sp->pid);
              //project management
              $data4 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$sp->pid);
              //project management fields
              $data5 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$sp->pid);
              //project members
              $data6 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$sp->pid);
              //project suggested members
              $data7 = array(
                                            'ptrash' => 'yes',
                                            'ptrash_date' => date("Y-m-d", strtotime("+1 month")),
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
              //project tasks
              $data8 = array(
                                                'trash' => 'yes',
                                                'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                                'tsingle_trash' => 's_yes'
                                            );
                        $data8 = $this->security->xss_clean($data8); // xss filter
                        $this->Front_model->edit_project_tasksSentTrash($data8,$sp->pid);
              //project subtasks
              $data9 = array(
                                                'strash' => 'yes',
                                                'strash_date' => date("Y-m-d", strtotime("+1 month")),
                                                'ststatus_date' => date('Y-m-d H:i:s'),
                                                'stsingle_trash' => 's_yes'
                                            );
                        $data8 = $this->security->xss_clean($data9); // xss filter
                        $this->Front_model->edit_project_subtasksSentTrash($data9,$sp->pid);
              //project cp
              $data10 = array(
                                                'trash' => 'yes',
                                                'trash_date' => date("Y-m-d", strtotime("+1 month")),
                                                'cpsingle_trash' => 's_yes'
                                            );
                        $data10 = $this->security->xss_clean($data10); // xss filter
                        $this->Front_model->edit_project_cpSentTrash($data10,$sp->pid);
           }   
        }

      //save history
      $hdata = array(
                                    'sid' => $id,
                                    'gid' => $res->gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'KPI Moved To Trash By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','KPI Moved To Trash!');
             $response['portid'] = "";
             if(isset($_COOKIE["d168_selectedportfolio"]))
             {
             $response['portid'] = $_COOKIE["d168_selectedportfolio"];
             }
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function retrieve_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $res2 = $this->Front_model->StrategyDetailGid($this->input->post('sid')); 
    $get_goal_id = '';
    if($res2)
    {
      $get_goal_id = $res2->gid;
    }
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
          if($getPackDetail)
          {
            $total_strategies = trim($getPackDetail->pack_goals_strategies);
            $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
            $check_type = is_numeric($total_strategies);
            if($check_type == 'true')
            {
              if($used_strategies < $total_strategies)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
        if($getPackDetail)
        {
          $total_strategies = trim($getPackDetail->pack_goals_strategies);
          $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
          $check_type = is_numeric($total_strategies);
          if($check_type == 'true')
          {
            if($used_strategies < $total_strategies)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('strategies', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getStrategiesCount = $this->Front_model->getStrategiesCountCorp($_COOKIE["d168_selectedportfolio"],$get_goal_id);
            if($getPackDetail)
            {
              $total_strategies = trim($getPackDetail->pack_goals_strategies);
              $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
              $check_type = is_numeric($total_strategies);
              if($check_type == 'true')
              {
                if($used_strategies < $total_strategies)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('sid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_strategy_trash($id); 

      if($res)
      {
        if($res->portfolio_id != 0)
        {
            $checkStrategyGoalTrash = $this->Front_model->checkStrategyGoalTrash($res->gid);
            if($checkStrategyGoalTrash > 0)
            {
                 $this->session->set_flashdata('al_message','Goal is in Trash! To Restore KPI please Restore Goal!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //strategies
              $sdata = array(
                                      's_trash' => '',
                                      's_trash_date' => '',
                                      's_single_trash' => ''
                                  );
                                  $sdata = $this->security->xss_clean($sdata); // xss filter
                                  $this->Front_model->editStrategies($sdata,$id);

                $s_projects = $this->Front_model->StrategyAllProjectsList_in_trash_strategybulk($id);
                if($s_projects)
                {
                   foreach($s_projects as $sp)
                   {
                      //project
                      $data = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                    'psingle_trash' => ''
                                                );
                                                $data = $this->security->xss_clean($data); // xss filter
                                                $this->Front_model->edit_Project($data,$sp->pid);
                      //project files                          
                      $data2 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data2 = $this->security->xss_clean($data2); // xss filter
                                                $this->Front_model->edit_project_files($data2,$sp->pid);
                      //project invited members
                      $data3 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data3 = $this->security->xss_clean($data3); // xss filter
                                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                      //project management
                      $data4 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data4 = $this->security->xss_clean($data4); // xss filter
                                                $this->Front_model->edit_project_management($data4,$sp->pid);
                      //project management fields
                      $data5 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data5 = $this->security->xss_clean($data5); // xss filter
                                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                      //project members
                      $data6 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data6 = $this->security->xss_clean($data6); // xss filter
                                                $this->Front_model->edit_project_members($data6,$sp->pid);
                      //project suggested members
                      $data7 = array(
                                                    'ptrash' => '',
                                                    'ptrash_date' => '',
                                                );
                                                $data7 = $this->security->xss_clean($data7); // xss filter
                                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                      //project tasks
                      $data8 = array(
                                                        'trash' => '',
                                                        'trash_date' => '',
                                                        'tsingle_trash' => ''
                                                    );
                                $data8 = $this->security->xss_clean($data8); // xss filter
                                $this->Front_model->edit_strategy_tasksRetrieve($data8,$sp->pid);
                      //project subtasks
                      $data9 = array(
                                                        'strash' => '',
                                                        'strash_date' => '',
                                                        'stsingle_trash' => ''
                                                    );
                                $data8 = $this->security->xss_clean($data9); // xss filter
                                $this->Front_model->edit_strategy_subtasksRetrieve($data9,$sp->pid);
                      //project cp
                      $data10 = array(
                                                        'trash' => '',
                                                        'trash_date' => '',
                                                        'cpsingle_trash' => ''
                                                    );
                                $data10 = $this->security->xss_clean($data10); // xss filter
                                $this->Front_model->edit_strategy_cpRetrieve($data10,$sp->pid);
                   }
             }
              $hdata = array(
                                            'sid' => $id,
                                            'gid' => $res->gid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $powner->reg_id,
                                            'h_resource' => $powner->first_name.' '.$powner->last_name,
                                            'h_description' => $res->sname.' KPI Restored by '.$powner->first_name.' '.$powner->last_name,
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','KPI Restored Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
        }     
      }
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function strategy_del_forever()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $get_sid = $this->input->post('sid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_strategy_trash($get_sid); 
      if($res)
      {
      $get_goal_strategies_projects_trash = $this->Front_model->StrategyAllProjectsList_to_delete($get_sid);
          if($get_goal_strategies_projects_trash)
          {
              foreach($get_goal_strategies_projects_trash as $s_p_trash)
              {
                  $get_pid = $s_p_trash->pid;
                  $get_pro_task_trash = $this->Front_model->getProjectAllTaskTrash($get_pid);
                  $get_pro_subtask_trash = $this->Front_model->getProjectAllSubtaskTrash($get_pid);
                  $get_pro_cp_trash = $this->Front_model->getProjectAllCPTrash($get_pid);

                    $this->Front_model->delete_project_files($get_pid);
                    $this->Front_model->delete_project_invited_members($get_pid);
                    $this->Front_model->delete_project_management($get_pid);
                    $this->Front_model->delete_project_management_fields($get_pid);
                    $this->Front_model->delete_project_members($get_pid);
                    $this->Front_model->delete_project_suggested_members($get_pid);
                    $this->Front_model->delete_project_history($get_pid);
                    $this->Front_model->delete_project_request_member($get_pid);
                  if($get_pro_task_trash)
                  {
                    foreach($get_pro_task_trash as $pro_task_trash)
                    {
                        $get_tid = $pro_task_trash->tid;
                        $this->Front_model->delete_task_t_trash($get_tid);
                    }
                    $this->Front_model->delete_project_tasks($get_pid);
                  }
                  if($get_pro_subtask_trash)
                  {
                    foreach($get_pro_subtask_trash as $pro_stask_trash)
                    {
                        $get_stid = $pro_stask_trash->stid;
                        $this->Front_model->delete_task_st_trash($get_stid);
                    }
                    $this->Front_model->delete_project_subtasks($get_pid);
                  }
                  if($get_pro_cp_trash)
                  {
                    foreach($get_pro_cp_trash as $pro_cp_trash)
                    {
                        $get_pc_id = $pro_cp_trash->pc_id;
                        $this->Front_model->delete_cp_t_trash($get_pc_id);
                    }
                    $this->Front_model->delete_project_cp($get_pid);
                  }
                    $this->Front_model->delete_project($get_pid);
              }
          }
          $this->Front_model->delete_strategies($get_sid);  

        $this->session->set_flashdata('message','KPI deleted permanently!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response); 
      }  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function archive_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->archiveGoalDetail($id);
    $getGoalAllTask = $this->Front_model->archiveGoal_tasks($id);
    $getGoalAllSubtask = $this->Front_model->archiveGoal_subtasks($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getGoalAllTask || $getGoalAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getGoalAllTask)
          {
            foreach($getGoalAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getGoalAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getGoalAllSubtask)
          {
            foreach($getGoalAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getGoalAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {
            //goal
            $gdata = array(
                                          'g_archive' => 'yes',
                                          'g_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $gdata = $this->security->xss_clean($gdata); // xss filter
                                      $this->Front_model->editGoal($gdata,$id);

            //goal invited members
            $data3 = array(
                                          'g_archive' => 'yes',
                                          'g_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_goal_invited_members($data3,$id);

            //goal members
            $data6 = array(
                                          'g_archive' => 'yes',
                                          'g_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_goal_members($data6,$id);
            //goal suggested members
            $data7 = array(
                                          'g_archive' => 'yes',
                                          'g_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_goal_suggested_members($data7,$id);

            //strategies
            $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to archive
            if($g_strategies)
            {
               foreach($g_strategies as $gs)
               {
                  $sdata = array(
                                    's_archive' => 'yes',
                                    's_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$gs->sid);
                  $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to archive
                  if($s_projects)
                  {
                     foreach($s_projects as $sp)
                     {
                      //project
                      $data = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$sp->pid);
                      //project files                          
                      $data2 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$sp->pid);
                      //project invited members
                      $data3 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                      //project management
                      $data4 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$sp->pid);
                      //project management fields
                      $data5 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                      //project members
                      $data6 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$sp->pid);
                      //project suggested members
                      $data7 = array(
                                          'project_archive' => 'yes',
                                          'project_archive_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                      //project tasks
                      $data8 = array(
                                                      'task_archive' => 'yes',
                                                      'task_archive_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data8 = $this->security->xss_clean($data8); // xss filter
                                $this->Front_model->edit_project_tasks($data8,$sp->pid);
                      //project subtasks
                      $data9 = array(
                                                      'subtask_archive' => 'yes',
                                                      'subtask_archive_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data8 = $this->security->xss_clean($data9); // xss filter
                                $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                      //project cp
                      $data10 = array(
                                                      'cp_archive' => 'yes',
                                                      'cp_archive_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data10 = $this->security->xss_clean($data10); // xss filter
                                $this->Front_model->edit_project_cp($data10,$sp->pid);
                     }
                  }
               }
            }
            //save history
            $hdata = array(
                                          'gid' => $id,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Goal Archived By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Goal Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to Archive Goal!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //goal
        $gdata = array(
                                      'g_archive' => 'yes',
                                      'g_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $gdata = $this->security->xss_clean($gdata); // xss filter
                                  $this->Front_model->editGoal($gdata,$id);

        //goal invited members
        $data3 = array(
                                      'g_archive' => 'yes',
                                      'g_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data3 = $this->security->xss_clean($data3); // xss filter
                                  $this->Front_model->edit_goal_invited_members($data3,$id);

        //goal members
        $data6 = array(
                                      'g_archive' => 'yes',
                                      'g_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data6 = $this->security->xss_clean($data6); // xss filter
                                  $this->Front_model->edit_goal_members($data6,$id);
        //goal suggested members
        $data7 = array(
                                      'g_archive' => 'yes',
                                      'g_archive_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data7 = $this->security->xss_clean($data7); // xss filter
                                  $this->Front_model->edit_goal_suggested_members($data7,$id);

        //strategies
        $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to archive
        if($g_strategies)
        {
           foreach($g_strategies as $gs)
           {
            $sdata = array(
                                    's_archive' => 'yes',
                                    's_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$gs->sid);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to archive
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                                'task_archive' => 'yes',
                                                'task_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                                'subtask_archive' => 'yes',
                                                'subtask_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                                'cp_archive' => 'yes',
                                                'cp_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data10 = $this->security->xss_clean($data10); // xss filter
                          $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
           }
        }
        //save history
        $hdata = array(
                                    'gid' => $id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Goal Archived By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Goal Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }  

  public function unarchived_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_goals = trim($getPackDetail->pack_goals);
            $used_goals = trim($getGoalCount['goal_count_rows']);
            $check_type = is_numeric($total_goals);
            if($check_type == 'true')
            {
              if($used_goals < $total_goals)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_goals = trim($getPackDetail->pack_goals);
          $used_goals = trim($getGoalCount['goal_count_rows']);
          $check_type = is_numeric($total_goals);
          if($check_type == 'true')
          {
            if($used_goals < $total_goals)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    }
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('goals', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getGoalCount = $this->Front_model->getGoalCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_goals = trim($getPackDetail->pack_goals);
              $used_goals = trim($getGoalCount['goal_count_rows']);
              $check_type = is_numeric($total_goals);
              if($check_type == 'true')
              {
                if($used_goals < $total_goals)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
} 

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('gid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_goal_archive($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          $port_del = $this->Front_model->getPortfolioById($res->portfolio_id);
          $file_it = '';
          $file_it_date = '';
          if($port_del){
            if($port_del->portfolio_file_it == "yes"){
              $file_it = 'yes';
              $file_it_date = $port_del->portfolio_file_it_date;
            }
          }
          $checkGoalPorfolioArchive = $this->Front_model->checkProjectPorfolioArchive($res->portfolio_id);
          if($checkGoalPorfolioArchive > 0)
          {
               $this->session->set_flashdata('al_message','Portfolio is Archived! To Reopen Goal please Reopen Portfolio!');
               $response['status'] = FALSE;
               header('Content-type: application/json');
               echo json_encode($response);
          }
          else
          {
            //goal
            $gdata = array(
                                          'g_archive' => '',
                                          'g_archive_date' => '',
                                          'g_file_it' => $file_it,
                                          'g_file_it_date' => $file_it_date,
                                      );
                                      $gdata = $this->security->xss_clean($gdata); // xss filter
                                      $this->Front_model->editGoal($gdata,$id);

            //goal invited members
            $data3 = array(
                                          'g_archive' => '',
                                          'g_archive_date' => '',
                                          'g_file_it' => $file_it,
                                          'g_file_it_date' => $file_it_date,
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_goal_invited_members($data3,$id);


            //goal members
            $data6 = array(
                                          'g_archive' => '',
                                          'g_archive_date' => '',
                                          'g_file_it' => $file_it,
                                          'g_file_it_date' => $file_it_date,
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_goal_members($data6,$id);
            //goal suggested members
            $data7 = array(
                                          'g_archive' => '',
                                          'g_archive_date' => '',
                                          'g_file_it' => $file_it,
                                          'g_file_it_date' => $file_it_date,
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_goal_suggested_members($data7,$id);

            //strategies
            $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to reopen
            if($g_strategies)
            {
               foreach($g_strategies as $gs)
               {
                  $sdata = array(
                                      's_archive' => '',
                                      's_archive_date' => '',
                                      's_file_it' => $file_it,
                                      's_file_it_date' => $file_it_date,
                                  );
                                  $sdata = $this->security->xss_clean($sdata); // xss filter
                                  $this->Front_model->editStrategies($sdata,$gs->sid);
                  $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to reopen
                  if($s_projects)
                  {
                     foreach($s_projects as $sp)
                     {
                      //project
                      $data = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$sp->pid);
                      //project files                          
                      $data2 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$sp->pid);
                      //project invited members
                      $data3 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                      //project management
                      $data4 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$sp->pid);
                      //project management fields
                      $data5 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                      //project members
                      $data6 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$sp->pid);
                      //project suggested members
                      $data7 = array(
                                          'project_archive' => '',
                                          'project_archive_date' => '',
                                          'project_file_it' => $file_it,
                                          'project_file_it_date' => $file_it_date,
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                      //project tasks
                      $data8 = array(
                                          'task_archive' => '',
                                          'task_archive_date' => '',
                                          'task_file_it' => $file_it,
                                          'task_file_it_date' => $file_it_date,
                                      );
                                      $data8 = $this->security->xss_clean($data8); // xss filter
                                      $this->Front_model->edit_project_tasks($data8,$sp->pid);
                      //project subtasks
                      $data9 = array(
                                          'subtask_archive' => '',
                                          'subtask_archive_date' => '',
                                          'subtask_file_it' => $file_it,
                                          'subtask_file_it_date' => $file_it_date,
                                      );
                                      $data8 = $this->security->xss_clean($data9); // xss filter
                                      $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                      //project cp
                      $data10 = array(
                                          'cp_archive' => '',
                                          'cp_archive_date' => '',
                                          'cp_file_it' => $file_it,
                                          'cp_file_it_date' => $file_it_date,
                                      );
                                      $data10 = $this->security->xss_clean($data10); // xss filter
                                      $this->Front_model->edit_project_cp($data10,$sp->pid);
                     }
                  }
               }
            }
            //save history
            $hdata = array(
                                        'gid' => $id,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'Goal Reopened By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                 //$this->session->set_flashdata('message','Goal Reopened Successfully!');
                 $link = anchor(base_url('goal-overview/'.$id), 'View Reopened Goal!');
                 $message = 'Goal Reopened Successfully!' .' '. $link;
                 $this->session->set_flashdata('message',$message);
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
          }
        }     
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function archive_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->archiveStrategyDetail($id);
    $getStrategyAllTask = $this->Front_model->archiveStrategy_tasks($id);
    $getStrategyAllSubtask = $this->Front_model->archiveStrategy_subtasks($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getStrategyAllTask || $getStrategyAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getStrategyAllTask)
          {
            foreach($getStrategyAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getStrategyAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getStrategyAllSubtask)
          {
            foreach($getStrategyAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getStrategyAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {            
            //strategies            
            $sdata = array(
                              's_archive' => 'yes',
                              's_archive_date' => date('Y-m-d H:i:s'),
                          );
                          $sdata = $this->security->xss_clean($sdata); // xss filter
                          $this->Front_model->editStrategies($sdata,$id);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to archive
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_archive' => 'yes',
                                    'project_archive_date' => date('Y-m-d H:i:s'),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                                'task_archive' => 'yes',
                                                'task_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                                'subtask_archive' => 'yes',
                                                'subtask_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                                'cp_archive' => 'yes',
                                                'cp_archive_date' => date('Y-m-d H:i:s'),
                                              );
                          $data10 = $this->security->xss_clean($data10); // xss filter
                          $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
            //save history
            $hdata = array(
                                          'sid' => $id,
                                          'gid' => $res->gid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'KPI Archived By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','KPI Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to Archive KPI!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //strategies            
        $sdata = array(
                          's_archive' => 'yes',
                          's_archive_date' => date('Y-m-d H:i:s'),
                      );
                      $sdata = $this->security->xss_clean($sdata); // xss filter
                      $this->Front_model->editStrategies($sdata,$id);
        $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to archive
        if($s_projects)
        {
           foreach($s_projects as $sp)
           {
            //project
            $data = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data = $this->security->xss_clean($data); // xss filter
                            $this->Front_model->edit_Project($data,$sp->pid);
            //project files                          
            $data2 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data2 = $this->security->xss_clean($data2); // xss filter
                            $this->Front_model->edit_project_files($data2,$sp->pid);
            //project invited members
            $data3 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data3 = $this->security->xss_clean($data3); // xss filter
                            $this->Front_model->edit_project_invited_members($data3,$sp->pid);
            //project management
            $data4 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data4 = $this->security->xss_clean($data4); // xss filter
                            $this->Front_model->edit_project_management($data4,$sp->pid);
            //project management fields
            $data5 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data5 = $this->security->xss_clean($data5); // xss filter
                            $this->Front_model->edit_project_management_fields($data5,$sp->pid);
            //project members
            $data6 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data6 = $this->security->xss_clean($data6); // xss filter
                            $this->Front_model->edit_project_members($data6,$sp->pid);
            //project suggested members
            $data7 = array(
                                'project_archive' => 'yes',
                                'project_archive_date' => date('Y-m-d H:i:s'),
                            );
                            $data7 = $this->security->xss_clean($data7); // xss filter
                            $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
            //project tasks
            $data8 = array(
                                            'task_archive' => 'yes',
                                            'task_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data8); // xss filter
                      $this->Front_model->edit_project_tasks($data8,$sp->pid);
            //project subtasks
            $data9 = array(
                                            'subtask_archive' => 'yes',
                                            'subtask_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data9); // xss filter
                      $this->Front_model->edit_project_subtasks($data9,$sp->pid);
            //project cp
            $data10 = array(
                                            'cp_archive' => 'yes',
                                            'cp_archive_date' => date('Y-m-d H:i:s'),
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->edit_project_cp($data10,$sp->pid);
           }
        }
        //save history
        $hdata = array(
                                    'sid' => $id,
                                    'gid' => $res->gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'KPI Archived By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','KPI Archived Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  } 

  public function unarchived_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $res2 = $this->Front_model->StrategyDetailGid($this->input->post('sid')); 
    $get_goal_id = '';
    if($res2)
    {
      $get_goal_id = $res2->gid;
    }
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
          if($getPackDetail)
          {
            $total_strategies = trim($getPackDetail->pack_goals_strategies);
            $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
            $check_type = is_numeric($total_strategies);
            if($check_type == 'true')
            {
              if($used_strategies < $total_strategies)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
        if($getPackDetail)
        {
          $total_strategies = trim($getPackDetail->pack_goals_strategies);
          $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
          $check_type = is_numeric($total_strategies);
          if($check_type == 'true')
          {
            if($used_strategies < $total_strategies)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('strategies', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getStrategiesCount = $this->Front_model->getStrategiesCountCorp($_COOKIE["d168_selectedportfolio"],$get_goal_id);
            if($getPackDetail)
            {
              $total_strategies = trim($getPackDetail->pack_goals_strategies);
              $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
              $check_type = is_numeric($total_strategies);
              if($check_type == 'true')
              {
                if($used_strategies < $total_strategies)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('sid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_strategy_archive($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          $goal_del = $this->Front_model->getGoalById($res->gid);
          $file_it = '';
          $file_it_date = '';
          if($goal_del){
            if($goal_del->g_file_it == "yes"){
              $file_it = 'yes';
              $file_it_date = $goal_del->g_file_it_date;
            }
          }
          $checkStrategyGoalArchive = $this->Front_model->checkStrategyGoalArchive($res->gid);
          if($checkStrategyGoalArchive > 0)
          {
               $this->session->set_flashdata('al_message','Goal is Archived! To Reopen KPI please Reopen Goal!');
               $response['status'] = FALSE;
               header('Content-type: application/json');
               echo json_encode($response);
          }
          else
          {
            //strategies          
            $sdata = array(
                                's_archive' => '',
                                's_archive_date' => '',
                                's_file_it' => $file_it,
                                's_file_it_date' => $file_it_date,
                            );
                            $sdata = $this->security->xss_clean($sdata); // xss filter
                            $this->Front_model->editStrategies($sdata,$id);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to reopen
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_archive' => '',
                                    'project_archive_date' => '',
                                    'project_file_it' => $file_it,
                                    'project_file_it_date' => $file_it_date,
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                    'task_archive' => '',
                                    'task_archive_date' => '',
                                    'task_file_it' => $file_it,
                                    'task_file_it_date' => $file_it_date,
                                );
                                $data8 = $this->security->xss_clean($data8); // xss filter
                                $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                    'subtask_archive' => '',
                                    'subtask_archive_date' => '',
                                    'subtask_file_it' => $file_it,
                                    'subtask_file_it_date' => $file_it_date,
                                );
                                $data8 = $this->security->xss_clean($data9); // xss filter
                                $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                    'cp_archive' => '',
                                    'cp_archive_date' => '',
                                    'cp_file_it' => $file_it,
                                    'cp_file_it_date' => $file_it_date,
                                );
                                $data10 = $this->security->xss_clean($data10); // xss filter
                                $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
            //save history
            $hdata = array(
                                        'sid' => $id,
                                        'gid' => $res->gid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'KPI Reopened By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                 //$this->session->set_flashdata('message','Strategy Reopened Successfully!');
                 $link = anchor(base_url('kpi-overview/'.$id), 'View Reopened KPI!');
                 $message = 'KPI Reopened Successfully!' .' '. $link;
                 $this->session->set_flashdata('message',$message);
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
          }
        }     
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function duplicate_goal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['detail'] = $this->Front_model->GoalDetail($id);
      if($data['detail'])
      {
            $this->load->view('user/duplicate_goal_modal',$data);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('dgname','Goal ','trim|required');
      $this->form_validation->set_rules('dgstart_date','Start Date','trim|required');
      $this->form_validation->set_rules('dgend_date','End Date','trim|required');
      $this->form_validation->set_rules('copy_detail','Option','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
        $id = $this->input->post('id');
        $gdetail = $this->Front_model->GoalDetail($id);
        $copy_detail = $this->input->post('copy_detail');
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);
        if($gdetail)
        {
        $gmanager = "";
        if($copy_detail == 'everything')
        {
          $gmanager = $gdetail->gmanager;
        }
        else
        {
          $gmanager = "";
        }
          //insert goal
          $gdata = array(
                'gname' => $this->input->post('dgname'),
                'gdept' => $gdetail->gdept,
                'gstart_date' => $this->input->post('dgstart_date'),
                'gend_date' => $this->input->post('dgend_date'),
                'gdes' => $gdetail->gdes,
                'gmanager' => $gmanager,
                'gcreated_by' => $this->session->userdata('d168_id'),
                'gcreated_date' => date('Y-m-d H:i:s'),
                'portfolio_id' => $gdetail->portfolio_id,
                'corporate_id' => $this->session->userdata('d168_user_cor_id')
            );
            $gdata = $this->security->xss_clean($gdata); // xss filter
            $this->Front_model->insert_NewGoal($gdata);
            //recent inserted id
            $g_inserted_id = $this->db->insert_id();

            $hdata = array(
                            'gid' => $g_inserted_id,
                            'h_date' => date('Y-m-d H:i:s'),
                            'h_resource_id' => $P_Owner->reg_id,
                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                            'h_description' => 'Goal Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                        );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
            if($copy_detail == 'everything')
            {
               //Check Project Members            
                $getMemberGoal = $this->Front_model->getMemberGoal($id);
                if($getMemberGoal)
                {
                    foreach($getMemberGoal as $t)
                    {
                      if($gdetail->gcreated_by == $t->gmember)
                      {
                        $data2 = array(
                        'gid' => $g_inserted_id,
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gmember' => $this->session->userdata('d168_id'),
                        'status' => 'accepted',
                        'gcreated_by' => $this->session->userdata('d168_id'),
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'yes',
                                          );
                        $data2 = $this->security->xss_clean($data2); // xss filter
                        $this->Front_model->insert_GoalTeamMember($data2);
                      }
                      else
                      { 
                        $data2 = array(
                          'gid' => $g_inserted_id,
                          'portfolio_id' => $gdetail->portfolio_id,
                          'gmember' => $t->gmember,
                          'status' => 'send',
                          'gcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_GoalTeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t->gmember);
                                    $hdata = array(
                                                      'gid' => $g_inserted_id,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'gmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$this->input->post('dgname').' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$g_inserted_id.'/'.trim($t->gmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$g_inserted_id.'/'.trim($t->gmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );

                        $this->email->send();
                      }
                    }
                }

              //strategies
              $g_strategies = $this->Front_model->GoalsAllStrategiesListASC($id);
              if($g_strategies)
              {
                foreach($g_strategies as $gs)
                 {
                    $sdata = array(
                        'sname' => $gs->sname,
                        'sdes' => $gs->sdes,
                        'screated_by' => $this->session->userdata('d168_id'),
                        'screated_date' => date('Y-m-d H:i:s'),
                        'sprogress' => 'to_do',
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gid' => $g_inserted_id,
                        'gdept_id' => $gdetail->gdept,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $sdata = $this->security->xss_clean($sdata); // xss filter
                    $this->Front_model->insert_NewStrategies($sdata);
                    //recent inserted id
                    $s_inserted_id = $this->db->insert_id();

                    $hdata = array(
                              'sid' => $s_inserted_id,
                              'gid' => $g_inserted_id,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
                    //projects
                    $s_projects = $this->Front_model->StrategyAllProjectsListASC($gs->sid);
                    if($s_projects)
                    {
                       foreach($s_projects as $sp)
                       {
                          $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                          $data = array(
                            'gid' => $g_inserted_id,
                            'sid' => $s_inserted_id,
                            'ptype' => $check_proOwner->ptype,
                            'p_publish' => $check_proOwner->p_publish,
                            'pname' => $check_proOwner->pname,
                            'pdes' => $check_proOwner->pdes,
                            'plink' => $check_proOwner->plink,
                            'plink_comment' => $check_proOwner->plink_comment,
                            'pmanager' => $check_proOwner->pmanager,
                            'pcreated_by' => $this->session->userdata('d168_id'),
                            'pcreated_date' => date('Y-m-d H:i:s'),
                            'portfolio_id' => $gdetail->portfolio_id,
                            'dept_id' => $gdetail->gdept,
                            'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewProject($data);
                          //recent inserted id
                          $inserted_id = $this->db->insert_id();
                          //Insert in History
                          $hdata = array(
                                          'pid' => $inserted_id,
                                          'gid' => $g_inserted_id,
                                          'sid' => $s_inserted_id,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                          //Check Project Members            
                          $getMemberProject = $this->Front_model->getMemberProject($sp->pid);
                          if($getMemberProject)
                          {
                            foreach($getMemberProject as $t)
                            {
                              // if($t->status != 'read_more')
                              // {
                                $data2 = array(
                                                'pid' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'pmember' => trim($t->pmember),
                                                'status' => 'send',
                                                'pcreated_by' => $this->session->userdata('d168_id'),
                                                'sent_date' => date('Y-m-d H:i:s'),
                                                'sent_notify_clear' => 'no',
                                                                  );
                                            $data2 = $this->security->xss_clean($data2); // xss filter
                                            $this->Front_model->insert_TeamMember($data2);
                                            $inserted_pm_id = $this->db->insert_id();
                                //get email id from member id
                                $getEmailID = $this->Front_model->getEmailID($t->pmember);
                                $hdata = array(
                                                'pid' => $inserted_id,
                                                'gid' => $g_inserted_id,
                                                'sid' => $s_inserted_id,
                                                'h_date' => date('Y-m-d H:i:s'),
                                                'h_resource_id' => $P_Owner->reg_id,
                                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                'pmember_id' =>$inserted_pm_id
                                            );
                                            $hdata = $this->security->xss_clean($hdata); // xss filter
                                            $this->Front_model->insert_ProjectHistory($hdata);
                            if($check_proOwner->pmanager == $t->pmember)
                            {
                $get_portfolio_name = "";
                $check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
                if($check_portfolio_name)
                {
                  if($check_portfolio_name->portfolio_user == 'company')
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name;
                  }
                  elseif($check_portfolio_name->portfolio_user == 'individual')
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
                  }
                  else
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name;
                  }
                }

                              $RequestEmailID = $getEmailID->email_address;
                              $email_to = $RequestEmailID;
                              $email_from = 'hello@decision168.com'; 
                              //$email_from = 'saramaazkhan123@gmail.com'; 
                              $email_name = 'Decision 168';

                              $this->load->library('email');  
                              $config=array(
                                'charset'=>'utf-8',
                                'wordwrap'=> TRUE,
                                'mailtype' => 'html'
                                );
                              $this->email->initialize($config);
                              $this->email->from($email_from, $email_name);
                              $this->email->set_header('Reply-To', $email_from."\r\n");
                              $this->email->set_header('Return-Path', $email_from."\r\n");
                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                              $this->email->to($email_to);
                              $this->email->set_mailtype('html');
                              $this->email->subject('Project Request | Decision 168');
                              $this->email->message('                 
                                  <!doctype html>
                                  <html lang="en-US">

                                  <head>
                                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                                    <title>Project Request</title>
                                    <meta name="description" content="Project Request">
                                    <style type="text/css">
                                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                                    </style>
                                  </head>

                                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                                    <!--100% body table-->

                                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                        <tr>
                                            <td>
                                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                                    <tr>
                                                        <td style="height:80px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td style="text-align:center;">
                                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                                          </a>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td style="height:20px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                                <tr>
                                                                    <td style="height:40px;">&nbsp;</td>
                                                                </tr>
                                                                <tr>
                                                                    <td style="padding:0 35px;">
                                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                                        <span
                                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                        Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                                           '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$check_proOwner->pname.' as a project manager. Just click the appropriate button below to join the project or request more information.
                                                                            <br><br>
                                                                            Portfolio: '.$get_portfolio_name.'
                                                                            <br><br>
                                                                            Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                                            <br><br>
                                                                        </p>
                                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                                            style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                                            <br><br>
                                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                            Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                                            <br><br>
                                                                            Thanks,
                                                                            <br>
                                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                                            </p>
                                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                                            <br>
                                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                                            </p>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <td style="height:40px;">&nbsp;</td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    <tr>
                                                        <td style="height:20px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td style="text-align:center;">
                                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                                        <br>
                                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td style="height:80px;">&nbsp;</td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                    <!--/100% body table-->
                                  </body>

                                  </html>' 
                                                                          );
                                $this->email->send();
                              }
                              else
                              {
                $get_portfolio_name = "";
                $check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
                if($check_portfolio_name)
                {
                  if($check_portfolio_name->portfolio_user == 'company')
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name;
                  }
                  elseif($check_portfolio_name->portfolio_user == 'individual')
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
                  }
                  else
                  { 
                    $get_portfolio_name = $check_portfolio_name->portfolio_name;
                  }
                }

                              $RequestEmailID = $getEmailID->email_address;
                              $email_to = $RequestEmailID;
                              $email_from = 'hello@decision168.com'; 
                              //$email_from = 'saramaazkhan123@gmail.com'; 
                              $email_name = 'Decision 168';

                              $this->load->library('email');  
                              $config=array(
                                'charset'=>'utf-8',
                                'wordwrap'=> TRUE,
                                'mailtype' => 'html'
                                );
                              $this->email->initialize($config);
                              $this->email->from($email_from, $email_name);
                              $this->email->set_header('Reply-To', $email_from."\r\n");
                              $this->email->set_header('Return-Path', $email_from."\r\n");
                              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                              $this->email->to($email_to);
                              $this->email->set_mailtype('html');
                              $this->email->subject('Project Request | Decision 168');
                              $this->email->message('                 
                                  <!doctype html>
                                  <html lang="en-US">

                                  <head>
                                    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                                    <title>Project Request</title>
                                    <meta name="description" content="Project Request">
                                    <style type="text/css">
                                        a:hover {text-decoration: underline !important;pointer:cursor !important;}
                                    </style>
                                  </head>

                                  <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                                    <!--100% body table-->

                                    <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                        style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                        <tr>
                                            <td>
                                                <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                                    <tr>
                                                        <td style="height:80px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td style="text-align:center;">
                                                          <a href="'.base_url().'" title="Decision 168" target="_blank">
                                                            <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                                          </a>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td style="height:20px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                                style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                                <tr>
                                                                    <td style="height:40px;">&nbsp;</td>
                                                                </tr>
                                                                <tr>
                                                                    <td style="padding:0 35px;">
                                                                        <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                                        <span
                                                                            style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                        Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                                           '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$check_proOwner->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                                            <br><br>
                                                                            Portfolio: '.$get_portfolio_name.'
                                                                            <br><br>
                                                                            Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                                            <br><br>
                                                                        </p>
                                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                                        style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                                        <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                                            style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                                            <br><br>
                                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                            Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                                            <br><br>
                                                                            Thanks,
                                                                            <br>
                                                                            The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                                            </p>
                                                                            <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                                            <br>
                                                                            <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                                            </p>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <td style="height:40px;">&nbsp;</td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    <tr>
                                                        <td style="height:20px;">&nbsp;</td>
                                                    </tr>
                                                    <tr>
                                                        <td style="text-align:center;">
                                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                                        <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                                        <br>
                                                            <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td style="height:80px;">&nbsp;</td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                    <!--/100% body table-->
                                  </body>

                                  </html>' 
                                                                          );
                                $this->email->send();
                                }
                              //}
                            }
                          }
                          //Check Project Content Planned
                          $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($sp->pid);
                          if($Project_Planned_Content) 
                          {
                            foreach($Project_Planned_Content as $ppc)
                            {
                              $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                              $random_num = rand(1, 10000);
                              $get_pc_code = $letter.'-'.$random_num; 

                              $get_notify_member = $ppc->written_content_assignee.",".$ppc->pc_file_assignee.",".$ppc->submit_to_approval.",".$ppc->pc_assignee;

                                if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                                  $data = array('pc_project_assign' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'dept_id' => $gdetail->gdept,
                                                'pc_code' => $get_pc_code,
                                                'platform' => $ppc->platform,
                                                'written_content' => $ppc->written_content,
                                                'pc_link' => $ppc->pc_link,
                                                'pc_link_comment' => $ppc->pc_link_comment,
                                                'pc_file' => "",
                                                'pc_status' => 'done',
                                                'pc_status_date' => date('Y-m-d H:i:s'),
                                                'written_content_assignee' => $ppc->written_content_assignee,
                                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                                'submit_to_approval' => $ppc->submit_to_approval,
                                                'pc_assignee' => $ppc->pc_assignee,
                                                'pc_created_by' => $this->session->userdata('d168_id'),
                                                'pc_created_date' => date('Y-m-d H:i:s'),
                                                'pc_notify' => $get_notify_member,
                                                'pc_notify_clear' => $get_notify_member,
                                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                //'publish_date' => $ppc->publish_date,
                                              );
                                }else if($ppc->platform == 'pinterest'){
                                  $data = array('pc_project_assign' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'dept_id' => $gdetail->gdept,
                                                'pc_code' => $get_pc_code,
                                                'platform' => $ppc->platform,
                                                'pc_title' => $ppc->pc_title,
                                                'written_content' => $ppc->written_content,
                                                'written_content_2' => $ppc->written_content_2,
                                                'pc_link' => $ppc->pc_link,
                                                'pc_link_comment' => $ppc->pc_link_comment,
                                                'pc_file' => "",
                                                'pc_status' => 'done',
                                                'pc_status_date' => date('Y-m-d H:i:s'),
                                                'written_content_assignee' => $ppc->written_content_assignee,
                                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                                'submit_to_approval' => $ppc->submit_to_approval,
                                                'pc_assignee' => $ppc->pc_assignee,
                                                'pc_created_by' => $this->session->userdata('d168_id'),
                                                'pc_created_date' => date('Y-m-d H:i:s'),
                                                'pc_notify' => $get_notify_member,
                                                'pc_notify_clear' => $get_notify_member,
                                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                //'publish_date' => $ppc->publish_date,
                                              );
                                }else if($ppc->platform == 'youtube'){
                                  $data = array('pc_project_assign' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'dept_id' => $gdetail->gdept,
                                                'pc_code' => $get_pc_code,
                                                'platform' => $ppc->platform,
                                                'pc_title' => $ppc->pc_title,
                                                'written_content' => $ppc->written_content,
                                                'tags' => $ppc->tags,
                                                'pc_link' => $ppc->pc_link,
                                                'pc_link_comment' => $ppc->pc_link_comment,
                                                'pc_file' => "",
                                                'pc_status' => 'done',
                                                'pc_status_date' => date('Y-m-d H:i:s'),
                                                'written_content_assignee' => $ppc->written_content_assignee,
                                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                                'submit_to_approval' => $ppc->submit_to_approval,
                                                'pc_assignee' => $ppc->pc_assignee,
                                                'pc_created_by' => $this->session->userdata('d168_id'),
                                                'pc_created_date' => date('Y-m-d H:i:s'),
                                                'pc_notify' => $get_notify_member,
                                                'pc_notify_clear' => $get_notify_member,
                                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                //'publish_date' => $ppc->publish_date,
                                              );
                                }else if($ppc->platform == 'blogger'){
                                  $data = array('pc_project_assign' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'dept_id' => $gdetail->gdept,
                                                'pc_code' => $get_pc_code,
                                                'platform' => $ppc->platform,
                                                'pc_title' => $ppc->pc_title,
                                                'written_content' => $ppc->written_content,
                                                'target_audience' => $ppc->target_audience,
                                                'solutions' => $ppc->solutions,
                                                'keywords' => $ppc->keywords,
                                                'internal_links' => $ppc->internal_links,
                                                'external_links' => $ppc->external_links,
                                                'meta_title' => $ppc->meta_title,
                                                'meta_description' => $ppc->meta_description,
                                                'pc_link' => $ppc->pc_link,
                                                'pc_link_comment' => $ppc->pc_link_comment,
                                                'pc_file' => "",
                                                'doc_pc_file' => "",
                                                'pc_status' => 'done',
                                                'pc_status_date' => date('Y-m-d H:i:s'),
                                                'written_content_assignee' => $ppc->written_content_assignee,
                                                'pc_file_assignee' => $ppc->pc_file_assignee,
                                                'submit_to_approval' => $ppc->submit_to_approval,
                                                'pc_assignee' => $ppc->pc_assignee,
                                                'pc_created_by' => $this->session->userdata('d168_id'),
                                                'pc_created_date' => date('Y-m-d H:i:s'),
                                                'pc_notify' => $get_notify_member,
                                                'pc_notify_clear' => $get_notify_member,
                                                'pc_notify_date' => date('Y-m-d H:i:s'),
                                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                //'publish_date' => $ppc->publish_date,
                                              );
                                }
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_NewContent($data);
                                //recent inserted id
                                $inserted_content_id = $this->db->insert_id();
                                $hdata = array( 
                                              'pid' => $inserted_id,
                                              'gid' => $g_inserted_id,
                                              'sid' => $s_inserted_id,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $P_Owner->reg_id,
                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                              'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                              'pc_id' => $inserted_content_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
                            }
                          }
                          //Check Project Tasks  
                          $p_tasks = $this->Front_model->pro_all_tasks($sp->pid);
                          if($p_tasks)
                          {
                            foreach($p_tasks as $pt)
                            {
                                $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                                $random_num = rand(1, 10000);
                                $get_tcode = $letter.'-'.$random_num; 
                                  $data = array(
                                                'gid' => $g_inserted_id,
                                                'sid' => $s_inserted_id,
                                                'tcode' => $get_tcode,
                                                'tname' => $pt->tname,
                                                'tdes' => $pt->tdes,
                                                'tlink' => $pt->tlink,
                                                'tlink_comment' => $pt->tlink_comment,
                                                'tnote' => $pt->tnote,
                                                'tfile' => "",
                                                'tpriority' => $pt->tpriority,
                                                'tstatus' => 'to_do',
                                                'tstatus_date' => date('Y-m-d H:i:s'),
                                                'tproject_assign' => $inserted_id,
                                                'portfolio_id' => $gdetail->portfolio_id,
                                                'tassignee' => $pt->tassignee,
                                                'tcreated_by' => $this->session->userdata('d168_id'),
                                                'tcreated_date' => date('Y-m-d H:i:s'),
                                                'tnotify' => 'yes',
                                                'tnotify_clear' => 'no',
                                                'tnotify_date' => date('Y-m-d H:i:s'),
                                                'tdue_date' => $pt->tdue_date,
                                                'tdue_date_clear' => 'no',
                                                'dept_id' => $gdetail->gdept,
                                                'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                          );
                                          $data = $this->security->xss_clean($data); // xss filter
                                          $this->Front_model->insert_NewTask($data); 
                                          //recent task inserted id
                                          $inserted_task_id = $this->db->insert_id();
                                            $hdata = array(
                                                            'pid' => $inserted_id,
                                                            'gid' => $g_inserted_id,
                                                            'sid' => $s_inserted_id,
                                                            'h_date' => date('Y-m-d H:i:s'),
                                                            'h_resource_id' => $P_Owner->reg_id,
                                                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                            'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                            'task_id' =>$inserted_task_id
                                                        );
                                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                                        $this->Front_model->insert_ProjectHistory($hdata);  

                              $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                                if($Check_Task_Subtasks)
                                {
                                  foreach($Check_Task_Subtasks as $ts)
                                  {
                                    $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                                    $random_num = rand(1, 10000);
                                    $get_stcode = $letter.'-'.$random_num; 
                                      $data = array(
                                                      'tid' => $inserted_task_id,
                                                      'gid' => $g_inserted_id,
                                                      'sid' => $s_inserted_id,
                                                      'stproject_assign' => $inserted_id,
                                                      'portfolio_id' => $gdetail->portfolio_id,
                                                      'stcode' => $get_stcode,
                                                      'stname' => $ts->stname,
                                                      'stdes' => $ts->stdes,
                                                      'stlink' => $ts->stlink,
                                                      'stlink_comment' => $ts->stlink_comment,
                                                      'stnote' => $ts->stnote,
                                                      'stfile' => "",
                                                      'stpriority' => $ts->stpriority,
                                                      'ststatus' => 'to_do',
                                                      'ststatus_date' => date('Y-m-d H:i:s'),
                                                      'stassignee' => $ts->stassignee,
                                                      'stcreated_by' => $this->session->userdata('d168_id'),
                                                      'stcreated_date' => date('Y-m-d H:i:s'),
                                                      'stnotify' => 'yes',
                                                      'stnotify_clear' => 'no',
                                                      'stnotify_date' => date('Y-m-d H:i:s'),
                                                      'stdue_date' => $ts->stdue_date,
                                                      'stdue_date_clear' => 'no',
                                                      'dept_id' => $gdetail->gdept,
                                                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                  );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_NewSubtask($data);  
                                      //recent subtask inserted id
                                      $inserted_subtask_id = $this->db->insert_id();
                                        $hdata = array(
                                                        'pid' => $inserted_id,
                                                        'gid' => $g_inserted_id,
                                                        'sid' => $s_inserted_id,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource_id' => $P_Owner->reg_id,
                                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                        'subtask_id' =>$inserted_subtask_id
                                                        );
                                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                                        $this->Front_model->insert_ProjectHistory($hdata); 
                                  }
                                }
                            }
                          }
                       }
                    }
                 }
              }
            }
            if($copy_detail == 'custom')
            {
              $cust_goal = $this->input->post('cust_goal');
              // $cust_strategy = $this->input->post('cust_strategy');
              // $cust_strategy_proj = $this->input->post('cust_strategy_proj');
              // $cust_strategy_all = $this->input->post('cust_strategy_all');
              if($cust_goal == '1')//Import Only Strategies
              {
                //strategies
                $g_strategies = $this->Front_model->GoalsAllStrategiesListASC($id);
                if($g_strategies)
                {
                  foreach($g_strategies as $gs)
                  {
                    $sdata = array(
                        'sname' => $gs->sname,
                        'sdes' => $gs->sdes,
                        'screated_by' => $this->session->userdata('d168_id'),
                        'screated_date' => date('Y-m-d H:i:s'),
                        'sprogress' => 'to_do',
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gid' => $g_inserted_id,
                        'gdept_id' => $gdetail->gdept,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $sdata = $this->security->xss_clean($sdata); // xss filter
                    $this->Front_model->insert_NewStrategies($sdata);
                    //recent inserted id
                    $s_inserted_id = $this->db->insert_id();

                    $hdata = array(
                              'sid' => $s_inserted_id,
                              'gid' => $g_inserted_id,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
                  }
                }
              }
              if($cust_goal == '2')//Import Strategies with Projects Only
              {
                $g_strategies = $this->Front_model->GoalsAllStrategiesListASC($id);
                if($g_strategies)
                {
                  foreach($g_strategies as $gs)
                  {
                    $sdata = array(
                        'sname' => $gs->sname,
                        'sdes' => $gs->sdes,
                        'screated_by' => $this->session->userdata('d168_id'),
                        'screated_date' => date('Y-m-d H:i:s'),
                        'sprogress' => 'to_do',
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gid' => $g_inserted_id,
                        'gdept_id' => $gdetail->gdept,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $sdata = $this->security->xss_clean($sdata); // xss filter
                    $this->Front_model->insert_NewStrategies($sdata);
                    //recent inserted id
                    $s_inserted_id = $this->db->insert_id();

                    $hdata = array(
                              'sid' => $s_inserted_id,
                              'gid' => $g_inserted_id,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
                    //projects
                    $s_projects = $this->Front_model->StrategyAllProjectsListASC($gs->sid);
                    if($s_projects)
                    {
                      foreach($s_projects as $sp)
                      {
                          $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                          $data = array(
                            'gid' => $g_inserted_id,
                            'sid' => $s_inserted_id,
                            'ptype' => $check_proOwner->ptype,
                            'p_publish' => $check_proOwner->p_publish,
                            'pname' => $check_proOwner->pname,
                            'pdes' => $check_proOwner->pdes,
                            'plink' => $check_proOwner->plink,
                            'plink_comment' => $check_proOwner->plink_comment,
                            'pmanager' => '',
                            'pcreated_by' => $this->session->userdata('d168_id'),
                            'pcreated_date' => date('Y-m-d H:i:s'),
                            'portfolio_id' => $gdetail->portfolio_id,
                            'dept_id' => $gdetail->gdept,
                            'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewProject($data);
                          //recent inserted id
                          $inserted_id = $this->db->insert_id();
                          //Insert in History
                          $hdata = array(
                                          'pid' => $inserted_id,
                                          'gid' => $g_inserted_id,
                                          'sid' => $s_inserted_id,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                      }
                    }
                  }
                }
              }
              if($cust_goal == '3')//Import Strategies with Projects, Planned Content, Task & Its Subtask without assignee
              {
                $g_strategies = $this->Front_model->GoalsAllStrategiesListASC($id);
                if($g_strategies)
                {
                  foreach($g_strategies as $gs)
                  {
                    $sdata = array(
                        'sname' => $gs->sname,
                        'sdes' => $gs->sdes,
                        'screated_by' => $this->session->userdata('d168_id'),
                        'screated_date' => date('Y-m-d H:i:s'),
                        'sprogress' => 'to_do',
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gid' => $g_inserted_id,
                        'gdept_id' => $gdetail->gdept,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $sdata = $this->security->xss_clean($sdata); // xss filter
                    $this->Front_model->insert_NewStrategies($sdata);
                    //recent inserted id
                    $s_inserted_id = $this->db->insert_id();

                    $hdata = array(
                              'sid' => $s_inserted_id,
                              'gid' => $g_inserted_id,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
                    //projects
                    $s_projects = $this->Front_model->StrategyAllProjectsListASC($gs->sid);
                    if($s_projects)
                    {
                      foreach($s_projects as $sp)
                      {
                          $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                          $data = array(
                            'gid' => $g_inserted_id,
                            'sid' => $s_inserted_id,
                            'ptype' => $check_proOwner->ptype,
                            'p_publish' => $check_proOwner->p_publish,
                            'pname' => $check_proOwner->pname,
                            'pdes' => $check_proOwner->pdes,
                            'plink' => $check_proOwner->plink,
                            'plink_comment' => $check_proOwner->plink_comment,
                            'pmanager' => '',
                            'pcreated_by' => $this->session->userdata('d168_id'),
                            'pcreated_date' => date('Y-m-d H:i:s'),
                            'portfolio_id' => $gdetail->portfolio_id,
                            'dept_id' => $gdetail->gdept,
                            'corporate_id' => $this->session->userdata('d168_user_cor_id')
                          );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewProject($data);
                          //recent inserted id
                          $inserted_id = $this->db->insert_id();
                          //Insert in History
                          $hdata = array(
                                          'pid' => $inserted_id,
                                          'gid' => $g_inserted_id,
                                          'sid' => $s_inserted_id,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                        //Check Project Content Planned
                        $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($sp->pid);
                        if($Project_Planned_Content) 
                        {
                          foreach($Project_Planned_Content as $ppc)
                          {
                            $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                            $random_num = rand(1, 10000);
                            $get_pc_code = $letter.'-'.$random_num; 

                              if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                                $data = array('pc_project_assign' => $inserted_id,
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'dept_id' => $gdetail->gdept,
                                              'pc_code' => $get_pc_code,
                                              'platform' => $ppc->platform,
                                              'written_content' => $ppc->written_content,
                                              'pc_link' => $ppc->pc_link,
                                              'pc_link_comment' => $ppc->pc_link_comment,
                                              'pc_file' => "",
                                              'pc_status' => 'done',
                                              'pc_status_date' => date('Y-m-d H:i:s'),
                                              'written_content_assignee' => $this->session->userdata('d168_id'),
                                              'pc_file_assignee' => $this->session->userdata('d168_id'),
                                              'submit_to_approval' => $this->session->userdata('d168_id'),
                                              'pc_assignee' => $this->session->userdata('d168_id'),
                                              'pc_created_by' => $this->session->userdata('d168_id'),
                                              'pc_created_date' => date('Y-m-d H:i:s'),
                                              'pc_notify' => "",
                                              'pc_notify_clear' => "",
                                              'pc_notify_date' => date('Y-m-d H:i:s'),
                                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                              //'publish_date' => $ppc->publish_date,
                                            );
                              }else if($ppc->platform == 'pinterest'){
                                $data = array('pc_project_assign' => $inserted_id,
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'dept_id' => $gdetail->gdept,
                                              'pc_code' => $get_pc_code,
                                              'platform' => $ppc->platform,
                                              'pc_title' => $ppc->pc_title,
                                              'written_content' => $ppc->written_content,
                                              'written_content_2' => $ppc->written_content_2,
                                              'pc_link' => $ppc->pc_link,
                                              'pc_link_comment' => $ppc->pc_link_comment,
                                              'pc_file' => "",
                                              'pc_status' => 'done',
                                              'pc_status_date' => date('Y-m-d H:i:s'),
                                              'written_content_assignee' => $this->session->userdata('d168_id'),
                                              'pc_file_assignee' => $this->session->userdata('d168_id'),
                                              'submit_to_approval' => $this->session->userdata('d168_id'),
                                              'pc_assignee' => $this->session->userdata('d168_id'),
                                              'pc_created_by' => $this->session->userdata('d168_id'),
                                              'pc_created_date' => date('Y-m-d H:i:s'),
                                              'pc_notify' => "",
                                              'pc_notify_clear' => "",
                                              'pc_notify_date' => date('Y-m-d H:i:s'),
                                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                              //'publish_date' => $ppc->publish_date,
                                            );
                              }else if($ppc->platform == 'youtube'){
                                $data = array('pc_project_assign' => $inserted_id,
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'dept_id' => $gdetail->gdept,
                                              'pc_code' => $get_pc_code,
                                              'platform' => $ppc->platform,
                                              'pc_title' => $ppc->pc_title,
                                              'written_content' => $ppc->written_content,
                                              'tags' => $ppc->tags,
                                              'pc_link' => $ppc->pc_link,
                                              'pc_link_comment' => $ppc->pc_link_comment,
                                              'pc_file' => "",
                                              'pc_status' => 'done',
                                              'pc_status_date' => date('Y-m-d H:i:s'),
                                              'written_content_assignee' => $this->session->userdata('d168_id'),
                                              'pc_file_assignee' => $this->session->userdata('d168_id'),
                                              'submit_to_approval' => $this->session->userdata('d168_id'),
                                              'pc_assignee' => $this->session->userdata('d168_id'),
                                              'pc_created_by' => $this->session->userdata('d168_id'),
                                              'pc_created_date' => date('Y-m-d H:i:s'),
                                              'pc_notify' => "",
                                              'pc_notify_clear' => "",
                                              'pc_notify_date' => date('Y-m-d H:i:s'),
                                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                              //'publish_date' => $ppc->publish_date,
                                            );
                              }else if($ppc->platform == 'blogger'){
                                $data = array('pc_project_assign' => $inserted_id,
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'dept_id' => $gdetail->gdept,
                                              'pc_code' => $get_pc_code,
                                              'platform' => $ppc->platform,
                                              'pc_title' => $ppc->pc_title,
                                              'written_content' => $ppc->written_content,
                                              'target_audience' => $ppc->target_audience,
                                              'solutions' => $ppc->solutions,
                                              'keywords' => $ppc->keywords,
                                              'internal_links' => $ppc->internal_links,
                                              'external_links' => $ppc->external_links,
                                              'meta_title' => $ppc->meta_title,
                                              'meta_description' => $ppc->meta_description,
                                              'pc_link' => $ppc->pc_link,
                                              'pc_link_comment' => $ppc->pc_link_comment,
                                              'pc_file' => "",
                                              'doc_pc_file' => "",
                                              'pc_status' => 'done',
                                              'pc_status_date' => date('Y-m-d H:i:s'),
                                              'written_content_assignee' => $this->session->userdata('d168_id'),
                                              'pc_file_assignee' => $this->session->userdata('d168_id'),
                                              'submit_to_approval' => $this->session->userdata('d168_id'),
                                              'pc_assignee' => $this->session->userdata('d168_id'),
                                              'pc_created_by' => $this->session->userdata('d168_id'),
                                              'pc_created_date' => date('Y-m-d H:i:s'),
                                              'pc_notify' => "",
                                              'pc_notify_clear' => "",
                                              'pc_notify_date' => date('Y-m-d H:i:s'),
                                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                              //'publish_date' => $ppc->publish_date,
                                            );
                              }
                              $data = $this->security->xss_clean($data); // xss filter
                              $this->Front_model->insert_NewContent($data);
                              //recent inserted id
                              $inserted_content_id = $this->db->insert_id();
                              $hdata = array( 
                                            'pid' => $inserted_id,
                                            'gid' => $g_inserted_id,
                                            'sid' => $s_inserted_id,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $P_Owner->reg_id,
                                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                            'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                            'pc_id' => $inserted_content_id
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
                          }
                        }
                        //Check Project Tasks  
                        $p_tasks = $this->Front_model->pro_all_tasks($sp->pid);
                        if($p_tasks)
                        {
                          foreach($p_tasks as $pt)
                          {
                              $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                              $random_num = rand(1, 10000);
                              $get_tcode = $letter.'-'.$random_num; 
                                $data = array(
                                              'gid' => $g_inserted_id,
                                              'sid' => $s_inserted_id,
                                              'dept_id' => $gdetail->gdept,
                                              'tcode' => $get_tcode,
                                              'tname' => $pt->tname,
                                              'tdes' => $pt->tdes,
                                              'tlink' => $pt->tlink,
                                              'tlink_comment' => $pt->tlink_comment,
                                              'tnote' => $pt->tnote,
                                              'tfile' => "",
                                              'tpriority' => $pt->tpriority,
                                              'tstatus' => 'to_do',
                                              'tstatus_date' => date('Y-m-d H:i:s'),
                                              'tproject_assign' => $inserted_id,
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'tassignee' => $this->session->userdata('d168_id'),
                                              'tcreated_by' => $this->session->userdata('d168_id'),
                                              'tcreated_date' => date('Y-m-d H:i:s'),
                                              'tnotify' => 'seen',
                                              'tnotify_clear' => 'yes',
                                              'tnotify_date' => date('Y-m-d H:i:s'),
                                              'tdue_date' => $pt->tdue_date,
                                              'tdue_date_clear' => 'no',
                                              'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->insert_NewTask($data); 
                                        //recent task inserted id
                                        $inserted_task_id = $this->db->insert_id();
                                          $hdata = array(
                                                          'pid' => $inserted_id,
                                                          'gid' => $g_inserted_id,
                                                          'sid' => $s_inserted_id,
                                                          'h_date' => date('Y-m-d H:i:s'),
                                                          'h_resource_id' => $P_Owner->reg_id,
                                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                          'task_id' =>$inserted_task_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata);  

                            $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                              if($Check_Task_Subtasks)
                              {
                                foreach($Check_Task_Subtasks as $ts)
                                {
                                  $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                                  $random_num = rand(1, 10000);
                                  $get_stcode = $letter.'-'.$random_num; 
                                    $data = array(
                                                    'tid' => $inserted_task_id,
                                                    'gid' => $g_inserted_id,
                                                    'sid' => $s_inserted_id,
                                                    'dept_id' => $gdetail->gdept,
                                                    'stproject_assign' => $inserted_id,
                                                    'portfolio_id' => $gdetail->portfolio_id,
                                                    'stcode' => $get_stcode,
                                                    'stname' => $ts->stname,
                                                    'stdes' => $ts->stdes,
                                                    'stlink' => $ts->stlink,
                                                    'stlink_comment' => $ts->stlink_comment,
                                                    'stnote' => $ts->stnote,
                                                    'stfile' => "",
                                                    'stpriority' => $ts->stpriority,
                                                    'ststatus' => 'to_do',
                                                    'ststatus_date' => date('Y-m-d H:i:s'),
                                                    'stassignee' => $this->session->userdata('d168_id'),
                                                    'stcreated_by' => $this->session->userdata('d168_id'),
                                                    'stcreated_date' => date('Y-m-d H:i:s'),
                                                    'stnotify' => 'seen',
                                                    'stnotify_clear' => 'yes',
                                                    'stnotify_date' => date('Y-m-d H:i:s'),
                                                    'stdue_date' => $ts->stdue_date,
                                                    'stdue_date_clear' => 'no',
                                                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                                );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_NewSubtask($data);  
                                    //recent subtask inserted id
                                    $inserted_subtask_id = $this->db->insert_id();
                                      $hdata = array(
                                                      'pid' => $inserted_id,
                                                      'gid' => $g_inserted_id,
                                                      'sid' => $s_inserted_id,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'subtask_id' =>$inserted_subtask_id
                                                      );
                                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                                      $this->Front_model->insert_ProjectHistory($hdata); 
                                }
                              }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            $this->session->set_flashdata('message','Copied Successfully!');
            $response['gid'] = $g_inserted_id;
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        else
        {
          $this->session->set_flashdata('message','Cannot Duplicate this Goal!');
          $response['status'] = False;
          header('Content-type: application/json');
          echo json_encode($response);
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_strategy_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data['detail'] = $this->Front_model->StrategyDetail($id);
      if($data['detail'])
      {
            $this->load->view('user/duplicate_strategy_modal',$data);
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function duplicate_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('dsname','KPI','trim|required');
      $this->form_validation->set_rules('copy_detail','Option','trim|required');
      if ($this->form_validation->run() == FALSE)
      {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
        $id = $this->input->post('id');
        $sdetail = $this->Front_model->StrategyDetail($id);
        $copy_detail = $this->input->post('copy_detail');
        $student_id = $this->session->userdata('d168_id');
        $P_Owner = $this->Front_model->getStudentById($student_id);
        if($sdetail)
        {
          $sdata = array(
                        'sname' => $this->input->post('dsname'),
                        'sdes' => $sdetail->sdes,
                        'screated_by' => $this->session->userdata('d168_id'),
                        'screated_date' => date('Y-m-d H:i:s'),
                        'sprogress' => 'to_do',
                        'portfolio_id' => $sdetail->portfolio_id,
                        'gid' => $sdetail->gid,
                        'gdept_id' => $sdetail->gdept_id,
                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
          $sdata = $this->security->xss_clean($sdata); // xss filter
          $this->Front_model->insert_NewStrategies($sdata);
          //recent inserted id
          $s_inserted_id = $this->db->insert_id();

          $hdata = array(
                    'sid' => $s_inserted_id,
                    'gid' => $sdetail->gid,
                    'h_date' => date('Y-m-d H:i:s'),
                    'h_resource_id' => $P_Owner->reg_id,
                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                    'h_description' => 'KPI Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
          if($copy_detail == 'everything')
          {
            //projects
            $s_projects = $this->Front_model->StrategyAllProjectsListASC($id);
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                  $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                  $data = array(
                    'gid' => $sdetail->gid,
                    'sid' => $s_inserted_id,
                    'ptype' => $check_proOwner->ptype,
                    'p_publish' => $check_proOwner->p_publish,
                    'pname' => $check_proOwner->pname,
                    'pdes' => $check_proOwner->pdes,
                    'plink' => $check_proOwner->plink,
                    'plink_comment' => $check_proOwner->plink_comment,
                    'pmanager' => $check_proOwner->pmanager,
                    'pcreated_by' => $this->session->userdata('d168_id'),
                    'pcreated_date' => date('Y-m-d H:i:s'),
                    'portfolio_id' => $sdetail->portfolio_id,
                    'dept_id' => $sdetail->gdept_id,
                    'corporate_id' => $this->session->userdata('d168_user_cor_id')
                  );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insert_NewProject($data);
                  //recent inserted id
                  $inserted_id = $this->db->insert_id();
                  //Insert in History
                  $hdata = array(
                                  'pid' => $inserted_id,
                                  'gid' => $sdetail->gid,
                                  'sid' => $s_inserted_id,
                                  'h_date' => date('Y-m-d H:i:s'),
                                  'h_resource_id' => $P_Owner->reg_id,
                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                  'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                              );
                              $hdata = $this->security->xss_clean($hdata); // xss filter
                              $this->Front_model->insert_ProjectHistory($hdata);
                  //Check Project Members            
                  $getMemberProject = $this->Front_model->getMemberProject($sp->pid);
                  if($getMemberProject)
                  {
                    foreach($getMemberProject as $t)
                    {
                      // if($t->status != 'read_more')
                      // {
                        $data2 = array(
                                        'pid' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'pmember' => trim($t->pmember),
                                        'status' => 'send',
                                        'pcreated_by' => $this->session->userdata('d168_id'),
                                        'sent_date' => date('Y-m-d H:i:s'),
                                        'sent_notify_clear' => 'no',
                                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_TeamMember($data2);
                                    $inserted_pm_id = $this->db->insert_id();
                        //get email id from member id
                        $getEmailID = $this->Front_model->getEmailID($t->pmember);
                        $hdata = array(
                                        'pid' => $inserted_id,
                                        'gid' => $sdetail->gid,
                                        'sid' => $s_inserted_id,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                        'pmember_id' =>$inserted_pm_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                    if($check_proOwner->pmanager == $t->pmember)
                    {
        $get_portfolio_name = "";
        $check_portfolio_name = $this->Front_model->getPortfolioName($sdetail->portfolio_id);
        if($check_portfolio_name)
        {
          if($check_portfolio_name->portfolio_user == 'company')
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name;
          }
          elseif($check_portfolio_name->portfolio_user == 'individual')
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
          }
          else
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name;
          }
        }

                      $RequestEmailID = $getEmailID->email_address;
                      $email_to = $RequestEmailID;
                      $email_from = 'hello@decision168.com'; 
                      //$email_from = 'saramaazkhan123@gmail.com'; 
                      $email_name = 'Decision 168';

                      $this->load->library('email');  
                      $config=array(
                        'charset'=>'utf-8',
                        'wordwrap'=> TRUE,
                        'mailtype' => 'html'
                        );
                      $this->email->initialize($config);
                      $this->email->from($email_from, $email_name);
                      $this->email->set_header('Reply-To', $email_from."\r\n");
                      $this->email->set_header('Return-Path', $email_from."\r\n");
                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                      $this->email->to($email_to);
                      $this->email->set_mailtype('html');
                      $this->email->subject('Project Request | Decision 168');
                      $this->email->message('                 
                          <!doctype html>
                          <html lang="en-US">

                          <head>
                            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                            <title>Project Request</title>
                            <meta name="description" content="Project Request">
                            <style type="text/css">
                                a:hover {text-decoration: underline !important;pointer:cursor !important;}
                            </style>
                          </head>

                          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                            <!--100% body table-->

                            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                <tr>
                                    <td>
                                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                            <tr>
                                                <td style="height:80px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align:center;">
                                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                                  </a>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:20px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                        <tr>
                                                            <td style="height:40px;">&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td style="padding:0 35px;">
                                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                                <span
                                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$check_proOwner->pname.' as a project manager. Just click the appropriate button below to join the project or request more information.
                                                                    <br><br>
                                                                    Portfolio: '.$get_portfolio_name.'
                                                                    <br><br>
                                                                    Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                                    <br><br>
                                                                </p>
                                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                                    <br><br>
                                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                                    <br><br>
                                                                    Thanks,
                                                                    <br>
                                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                                    </p>
                                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                                    <br>
                                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                                    </p>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td style="height:40px;">&nbsp;</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            <tr>
                                                <td style="height:20px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align:center;">
                                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                                <br>
                                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:80px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            <!--/100% body table-->
                          </body>

                          </html>' 
                                                                  );
                        $this->email->send();
                      }
                      else
                      {
        $get_portfolio_name = "";
        $check_portfolio_name = $this->Front_model->getPortfolioName($sdetail->portfolio_id);
        if($check_portfolio_name)
        {
          if($check_portfolio_name->portfolio_user == 'company')
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name;
          }
          elseif($check_portfolio_name->portfolio_user == 'individual')
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
          }
          else
          { 
            $get_portfolio_name = $check_portfolio_name->portfolio_name;
          }
        }

                      $RequestEmailID = $getEmailID->email_address;
                      $email_to = $RequestEmailID;
                      $email_from = 'hello@decision168.com'; 
                      //$email_from = 'saramaazkhan123@gmail.com'; 
                      $email_name = 'Decision 168';

                      $this->load->library('email');  
                      $config=array(
                        'charset'=>'utf-8',
                        'wordwrap'=> TRUE,
                        'mailtype' => 'html'
                        );
                      $this->email->initialize($config);
                      $this->email->from($email_from, $email_name);
                      $this->email->set_header('Reply-To', $email_from."\r\n");
                      $this->email->set_header('Return-Path', $email_from."\r\n");
                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                      $this->email->to($email_to);
                      $this->email->set_mailtype('html');
                      $this->email->subject('Project Request | Decision 168');
                      $this->email->message('                 
                          <!doctype html>
                          <html lang="en-US">

                          <head>
                            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                            <title>Project Request</title>
                            <meta name="description" content="Project Request">
                            <style type="text/css">
                                a:hover {text-decoration: underline !important;pointer:cursor !important;}
                            </style>
                          </head>

                          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                            <!--100% body table-->

                            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                                <tr>
                                    <td>
                                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                            <tr>
                                                <td style="height:80px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align:center;">
                                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                                  </a>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:20px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                                        <tr>
                                                            <td style="height:40px;">&nbsp;</td>
                                                        </tr>
                                                        <tr>
                                                            <td style="padding:0 35px;">
                                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Project...</h1>
                                                                <span
                                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join project '.$check_proOwner->pname.' as a team member. Just click the appropriate button below to join the project or request more information.
                                                                    <br><br>
                                                                    Portfolio: '.$get_portfolio_name.'
                                                                    <br><br>
                                                                    Project Short Description: '.substr($check_proOwner->pdes,0,100).'...
                                                                    <br><br>
                                                                </p>
                                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'1').'"
                                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Project</a>
                                                                <a href="'.base_url('project-request/'.$inserted_id.'/'.trim($t->pmember).'/'.$inserted_pm_id.'/'.'2').'"
                                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                                    <br><br>
                                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                                    <br><br>
                                                                    Thanks,
                                                                    <br>
                                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                                    </p>
                                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                                    <br>
                                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                                    </p>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td style="height:40px;">&nbsp;</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            <tr>
                                                <td style="height:20px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align:center;">
                                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                                <br>
                                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:80px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            <!--/100% body table-->
                          </body>

                          </html>' 
                                                                  );
                        $this->email->send();
                        }
                      //}
                    }
                  }
                  //Check Project Content Planned
                  $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($sp->pid);
                  if($Project_Planned_Content) 
                  {
                    foreach($Project_Planned_Content as $ppc)
                    {
                      $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                      $random_num = rand(1, 10000);
                      $get_pc_code = $letter.'-'.$random_num; 

                      $get_notify_member = $ppc->written_content_assignee.",".$ppc->pc_file_assignee.",".$ppc->submit_to_approval.",".$ppc->pc_assignee;

                        if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'written_content' => $ppc->written_content,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $ppc->written_content_assignee,
                                        'pc_file_assignee' => $ppc->pc_file_assignee,
                                        'submit_to_approval' => $ppc->submit_to_approval,
                                        'pc_assignee' => $ppc->pc_assignee,
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => $get_notify_member,
                                        'pc_notify_clear' => $get_notify_member,
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'pinterest'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'written_content_2' => $ppc->written_content_2,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $ppc->written_content_assignee,
                                        'pc_file_assignee' => $ppc->pc_file_assignee,
                                        'submit_to_approval' => $ppc->submit_to_approval,
                                        'pc_assignee' => $ppc->pc_assignee,
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => $get_notify_member,
                                        'pc_notify_clear' => $get_notify_member,
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'youtube'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'tags' => $ppc->tags,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $ppc->written_content_assignee,
                                        'pc_file_assignee' => $ppc->pc_file_assignee,
                                        'submit_to_approval' => $ppc->submit_to_approval,
                                        'pc_assignee' => $ppc->pc_assignee,
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => $get_notify_member,
                                        'pc_notify_clear' => $get_notify_member,
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'blogger'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'target_audience' => $ppc->target_audience,
                                        'solutions' => $ppc->solutions,
                                        'keywords' => $ppc->keywords,
                                        'internal_links' => $ppc->internal_links,
                                        'external_links' => $ppc->external_links,
                                        'meta_title' => $ppc->meta_title,
                                        'meta_description' => $ppc->meta_description,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'doc_pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $ppc->written_content_assignee,
                                        'pc_file_assignee' => $ppc->pc_file_assignee,
                                        'submit_to_approval' => $ppc->submit_to_approval,
                                        'pc_assignee' => $ppc->pc_assignee,
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => $get_notify_member,
                                        'pc_notify_clear' => $get_notify_member,
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_NewContent($data);
                        //recent inserted id
                        $inserted_content_id = $this->db->insert_id();
                        $hdata = array( 
                                      'pid' => $inserted_id,
                                      'gid' => $sdetail->gid,
                                      'sid' => $s_inserted_id,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $P_Owner->reg_id,
                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                      'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      'pc_id' => $inserted_content_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }
                  //Check Project Tasks  
                  $p_tasks = $this->Front_model->pro_all_tasks($sp->pid);
                  if($p_tasks)
                  {
                    foreach($p_tasks as $pt)
                    {
                        $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                        $random_num = rand(1, 10000);
                        $get_tcode = $letter.'-'.$random_num; 
                          $data = array(
                                        'gid' => $sdetail->gid,
                                        'sid' => $s_inserted_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'tcode' => $get_tcode,
                                        'tname' => $pt->tname,
                                        'tdes' => $pt->tdes,
                                        'tlink' => $pt->tlink,
                                        'tlink_comment' => $pt->tlink_comment,
                                        'tnote' => $pt->tnote,
                                        'tfile' => "",
                                        'tpriority' => $pt->tpriority,
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'tassignee' => $pt->tassignee,
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'yes',
                                        'tnotify_clear' => 'no',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => $pt->tdue_date,
                                        'tdue_date_clear' => 'no',
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_NewTask($data); 
                                  //recent task inserted id
                                  $inserted_task_id = $this->db->insert_id();
                                    $hdata = array(
                                                    'pid' => $inserted_id,
                                                    'gid' => $sdetail->gid,
                                                    'sid' => $s_inserted_id,
                                                    'h_date' => date('Y-m-d H:i:s'),
                                                    'h_resource_id' => $P_Owner->reg_id,
                                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'task_id' =>$inserted_task_id
                                                );
                                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                                $this->Front_model->insert_ProjectHistory($hdata);  

                      $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                      if($Check_Task_Subtasks)
                      {
                        foreach($Check_Task_Subtasks as $ts)
                        {
                          $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                          $random_num = rand(1, 10000);
                          $get_stcode = $letter.'-'.$random_num; 
                            $data = array(
                                            'tid' => $inserted_task_id,
                                            'gid' => $sdetail->gid,
                                            'sid' => $s_inserted_id,
                                            'dept_id' => $sdetail->gdept_id,
                                            'stproject_assign' => $inserted_id,
                                            'portfolio_id' => $sdetail->portfolio_id,
                                            'stcode' => $get_stcode,
                                            'stname' => $ts->stname,
                                            'stdes' => $ts->stdes,
                                            'stlink' => $ts->stlink,
                                            'stlink_comment' => $ts->stlink_comment,
                                            'stnote' => $ts->stnote,
                                            'stfile' => "",
                                            'stpriority' => $ts->stpriority,
                                            'ststatus' => 'to_do',
                                            'ststatus_date' => date('Y-m-d H:i:s'),
                                            'stassignee' => $ts->stassignee,
                                            'stcreated_by' => $this->session->userdata('d168_id'),
                                            'stcreated_date' => date('Y-m-d H:i:s'),
                                            'stnotify' => 'yes',
                                            'stnotify_clear' => 'no',
                                            'stnotify_date' => date('Y-m-d H:i:s'),
                                            'stdue_date' => $ts->stdue_date,
                                            'stdue_date_clear' => 'no',
                                            'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewSubtask($data);  
                            //recent subtask inserted id
                            $inserted_subtask_id = $this->db->insert_id();
                              $hdata = array(
                                              'pid' => $inserted_id,
                                              'gid' => $sdetail->gid,
                                              'sid' => $s_inserted_id,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $P_Owner->reg_id,
                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                              'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                              'subtask_id' =>$inserted_subtask_id
                                              );
                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                              $this->Front_model->insert_ProjectHistory($hdata); 
                        }
                      }
                    }
                  }
               }
            }
          }
          if($copy_detail == 'custom')
          {
            $cust_strategy_opt = $this->input->post('cust_strategy_opt');
            if($cust_strategy_opt == '1')//Import Strategies with Projects Only
            {
              //projects
              $s_projects = $this->Front_model->StrategyAllProjectsListASC($id);
              if($s_projects)
              {
                foreach($s_projects as $sp)
                {
                    $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                    $data = array(
                      'gid' => $sdetail->gid,
                      'sid' => $s_inserted_id,
                      'ptype' => $check_proOwner->ptype,
                      'p_publish' => $check_proOwner->p_publish,
                      'pname' => $check_proOwner->pname,
                      'pdes' => $check_proOwner->pdes,
                      'plink' => $check_proOwner->plink,
                      'plink_comment' => $check_proOwner->plink_comment,
                      'pmanager' => '',
                      'pcreated_by' => $this->session->userdata('d168_id'),
                      'pcreated_date' => date('Y-m-d H:i:s'),
                      'portfolio_id' => $sdetail->portfolio_id,
                      'dept_id' => $sdetail->gdept_id,
                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewProject($data);
                    //recent inserted id
                    $inserted_id = $this->db->insert_id();
                    //Insert in History
                    $hdata = array(
                                    'pid' => $inserted_id,
                                    'gid' => $sdetail->gid,
                                    'sid' => $s_inserted_id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                }
              }
            }
            if($cust_strategy_opt == '2')//Import Strategies with Projects, Planned Content, Task & Its Subtask without assignee
            {
              //projects
              $s_projects = $this->Front_model->StrategyAllProjectsListASC($id);
              if($s_projects)
              {
                foreach($s_projects as $sp)
                {
                    $check_proOwner = $this->Front_model->getProjectById($sp->pid);
                    $data = array(
                      'gid' => $sdetail->gid,
                      'sid' => $s_inserted_id,
                      'ptype' => $check_proOwner->ptype,
                      'p_publish' => $check_proOwner->p_publish,
                      'pname' => $check_proOwner->pname,
                      'pdes' => $check_proOwner->pdes,
                      'plink' => $check_proOwner->plink,
                      'plink_comment' => $check_proOwner->plink_comment,
                      'pmanager' => '',
                      'pcreated_by' => $this->session->userdata('d168_id'),
                      'pcreated_date' => date('Y-m-d H:i:s'),
                      'portfolio_id' => $sdetail->portfolio_id,
                      'dept_id' => $sdetail->gdept_id,
                      'corporate_id' => $this->session->userdata('d168_user_cor_id')
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->insert_NewProject($data);
                    //recent inserted id
                    $inserted_id = $this->db->insert_id();
                    //Insert in History
                    $hdata = array(
                                    'pid' => $inserted_id,
                                    'gid' => $sdetail->gid,
                                    'sid' => $s_inserted_id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Created By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                  //Check Project Content Planned
                  $Project_Planned_Content = $this->Front_model->Project_ALL_Planned_Content($sp->pid);
                  if($Project_Planned_Content) 
                  {
                    foreach($Project_Planned_Content as $ppc)
                    {
                      $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                      $random_num = rand(1, 10000);
                      $get_pc_code = $letter.'-'.$random_num; 

                        if(($ppc->platform == 'twitter') || ($ppc->platform == 'facebook') || ($ppc->platform == 'instagram') || ($ppc->platform == 'linkedin') || ($ppc->platform == 'tiktok') || ($ppc->platform == 'google-my-business')){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'written_content' => $ppc->written_content,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $this->session->userdata('d168_id'),
                                        'pc_file_assignee' => $this->session->userdata('d168_id'),
                                        'submit_to_approval' => $this->session->userdata('d168_id'),
                                        'pc_assignee' => $this->session->userdata('d168_id'),
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => "",
                                        'pc_notify_clear' => "",
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'pinterest'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'written_content_2' => $ppc->written_content_2,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $this->session->userdata('d168_id'),
                                        'pc_file_assignee' => $this->session->userdata('d168_id'),
                                        'submit_to_approval' => $this->session->userdata('d168_id'),
                                        'pc_assignee' => $this->session->userdata('d168_id'),
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => "",
                                        'pc_notify_clear' => "",
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'youtube'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'tags' => $ppc->tags,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $this->session->userdata('d168_id'),
                                        'pc_file_assignee' => $this->session->userdata('d168_id'),
                                        'submit_to_approval' => $this->session->userdata('d168_id'),
                                        'pc_assignee' => $this->session->userdata('d168_id'),
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => "",
                                        'pc_notify_clear' => "",
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }else if($ppc->platform == 'blogger'){
                          $data = array('pc_project_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'pc_code' => $get_pc_code,
                                        'platform' => $ppc->platform,
                                        'pc_title' => $ppc->pc_title,
                                        'written_content' => $ppc->written_content,
                                        'target_audience' => $ppc->target_audience,
                                        'solutions' => $ppc->solutions,
                                        'keywords' => $ppc->keywords,
                                        'internal_links' => $ppc->internal_links,
                                        'external_links' => $ppc->external_links,
                                        'meta_title' => $ppc->meta_title,
                                        'meta_description' => $ppc->meta_description,
                                        'pc_link' => $ppc->pc_link,
                                        'pc_link_comment' => $ppc->pc_link_comment,
                                        'pc_file' => "",
                                        'doc_pc_file' => "",
                                        'pc_status' => 'done',
                                        'pc_status_date' => date('Y-m-d H:i:s'),
                                        'written_content_assignee' => $this->session->userdata('d168_id'),
                                        'pc_file_assignee' => $this->session->userdata('d168_id'),
                                        'submit_to_approval' => $this->session->userdata('d168_id'),
                                        'pc_assignee' => $this->session->userdata('d168_id'),
                                        'pc_created_by' => $this->session->userdata('d168_id'),
                                        'pc_created_date' => date('Y-m-d H:i:s'),
                                        'pc_notify' => "",
                                        'pc_notify_clear' => "",
                                        'pc_notify_date' => date('Y-m-d H:i:s'),
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        //'publish_date' => $ppc->publish_date,
                                      );
                        }
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_NewContent($data);
                        //recent inserted id
                        $inserted_content_id = $this->db->insert_id();
                        $hdata = array( 
                                      'pid' => $inserted_id,
                                      'gid' => $sdetail->gid,
                                      'sid' => $s_inserted_id,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $P_Owner->reg_id,
                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                      'h_description' => 'Plan Content Code: '.$get_pc_code.' , '.'Platform: '.$ppc->platform.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      'pc_id' => $inserted_content_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }
                  //Check Project Tasks  
                  $p_tasks = $this->Front_model->pro_all_tasks($sp->pid);
                  if($p_tasks)
                  {
                    foreach($p_tasks as $pt)
                    {
                        $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                        $random_num = rand(1, 10000);
                        $get_tcode = $letter.'-'.$random_num; 
                          $data = array(
                                        'gid' => $sdetail->gid,
                                        'sid' => $s_inserted_id,
                                        'dept_id' => $sdetail->gdept_id,
                                        'tcode' => $get_tcode,
                                        'tname' => $pt->tname,
                                        'tdes' => $pt->tdes,
                                        'tlink' => $pt->tlink,
                                        'tlink_comment' => $pt->tlink_comment,
                                        'tnote' => $pt->tnote,
                                        'tfile' => "",
                                        'tpriority' => $pt->tpriority,
                                        'tstatus' => 'to_do',
                                        'tstatus_date' => date('Y-m-d H:i:s'),
                                        'tproject_assign' => $inserted_id,
                                        'portfolio_id' => $sdetail->portfolio_id,
                                        'tassignee' => $this->session->userdata('d168_id'),
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                        'tcreated_date' => date('Y-m-d H:i:s'),
                                        'tnotify' => 'seen',
                                        'tnotify_clear' => 'yes',
                                        'tnotify_date' => date('Y-m-d H:i:s'),
                                        'tdue_date' => $pt->tdue_date,
                                        'tdue_date_clear' => 'no',
                                        'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_NewTask($data); 
                                  //recent task inserted id
                                  $inserted_task_id = $this->db->insert_id();
                                    $hdata = array(
                                                    'pid' => $inserted_id,
                                                    'gid' => $sdetail->gid,
                                                    'sid' => $s_inserted_id,
                                                    'h_date' => date('Y-m-d H:i:s'),
                                                    'h_resource_id' => $P_Owner->reg_id,
                                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'h_description' => 'Task Code: '.$get_tcode.' , '.'Task Name: '.$pt->tname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                    'task_id' =>$inserted_task_id
                                                );
                                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                                $this->Front_model->insert_ProjectHistory($hdata);  

                      $Check_Task_Subtasks = $this->Front_model->Check_Task_ALL_Subtasks2($pt->tid);
                      if($Check_Task_Subtasks)
                      {
                        foreach($Check_Task_Subtasks as $ts)
                        {
                          $letter = strtoupper(substr(trim($check_proOwner->pname), 0, 2)); 
                          $random_num = rand(1, 10000);
                          $get_stcode = $letter.'-'.$random_num; 
                            $data = array(
                                            'tid' => $inserted_task_id,
                                            'gid' => $sdetail->gid,
                                            'sid' => $s_inserted_id,
                                            'dept_id' => $sdetail->gdept_id,
                                            'stproject_assign' => $inserted_id,
                                            'portfolio_id' => $sdetail->portfolio_id,
                                            'stcode' => $get_stcode,
                                            'stname' => $ts->stname,
                                            'stdes' => $ts->stdes,
                                            'stlink' => $ts->stlink,
                                            'stlink_comment' => $ts->stlink_comment,
                                            'stnote' => $ts->stnote,
                                            'stfile' => "",
                                            'stpriority' => $ts->stpriority,
                                            'ststatus' => 'to_do',
                                            'ststatus_date' => date('Y-m-d H:i:s'),
                                            'stassignee' => $this->session->userdata('d168_id'),
                                            'stcreated_by' => $this->session->userdata('d168_id'),
                                            'stcreated_date' => date('Y-m-d H:i:s'),
                                            'stnotify' => 'seen',
                                            'stnotify_clear' => 'yes',
                                            'stnotify_date' => date('Y-m-d H:i:s'),
                                            'stdue_date' => $ts->stdue_date,
                                            'stdue_date_clear' => 'no',
                                            'corporate_id' => $this->session->userdata('d168_user_cor_id')
                                        );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_NewSubtask($data);  
                            //recent subtask inserted id
                            $inserted_subtask_id = $this->db->insert_id();
                              $hdata = array(
                                              'pid' => $inserted_id,
                                              'gid' => $sdetail->gid,
                                              'sid' => $s_inserted_id,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $P_Owner->reg_id,
                                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                              'h_description' => 'Subtask Code: '.$get_stcode.' , '.'Subtask Name: '.$ts->stname.', Created by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                              'subtask_id' =>$inserted_subtask_id
                                              );
                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                              $this->Front_model->insert_ProjectHistory($hdata); 
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          $this->session->set_flashdata('message','Copied Successfully!');
          $response['sid'] = $s_inserted_id;
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
        }
        else
        {
          $this->session->set_flashdata('message','Cannot Duplicate this KPI!');
          $response['status'] = False;
          header('Content-type: application/json');
          echo json_encode($response);
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // public function goal_strategies_projects_create()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     if(isset($_COOKIE["d168_selectedportfolio"]))
  //     {
  //     $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
  //     if($getMydetail)
  //     {
  //       if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
  //       {
  //         if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
  //         {
  //           $this->session->set_flashdata('message', 'Package Expired!');
  //           redirect($_SERVER['HTTP_REFERER']);
  //         }
  //         else
  //         {
  //           $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
  //           $getGoalCount = $this->Front_model->getGoalStrategiesProjectsCount($_COOKIE["d168_selectedportfolio"]);
  //           if($getPackDetail)
  //           {
  //             $total_projects = trim($getPackDetail->pack_goals_strategies);
  //             $used_projects = trim($getGoalCount['goal_count_rows']);
  //             $check_type = is_numeric($total_projects);
  //             if($check_type == 'true')
  //             {
  //               if($used_projects < $total_projects)
  //               {
  //                 if(isset($_COOKIE["d168_selectedportfolio"]))
  //                 {
  //                   $this->load->view('user/portfolio-goals-strategies-projects-create');
  //                 }
  //               }
  //               else
  //               {
  //                 $this->session->set_flashdata('message', 'Limit Exceeds!');
  //                 redirect($_SERVER['HTTP_REFERER']);
  //               }
  //             }
  //             else
  //             {
  //               if(isset($_COOKIE["d168_selectedportfolio"]))
  //                 {
  //                   $this->load->view('user/portfolio-goals-strategies-projects-create');
  //                 }
  //             }
  //           }
  //         }
  //       }
  //       else
  //       {
  //         $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
  //         $getGoalCount = $this->Front_model->getGoalStrategiesProjectsCount($_COOKIE["d168_selectedportfolio"]);
  //         if($getPackDetail)
  //         {
  //           $total_projects = trim($getPackDetail->pack_goals_strategies);
  //           $used_projects = trim($getGoalCount['goal_count_rows']);
  //           $check_type = is_numeric($total_projects);
  //           if($check_type == 'true')
  //           {
  //             if($used_projects < $total_projects)
  //             {
  //               if(isset($_COOKIE["d168_selectedportfolio"]))
  //               {
  //                 $this->load->view('user/portfolio-goals-strategies-projects-create');
  //               }
  //             }
  //             else
  //             {
  //               $this->session->set_flashdata('message', 'Limit Exceeds!');
  //               redirect($_SERVER['HTTP_REFERER']);
  //             }
  //           }
  //           else
  //           {
  //             if(isset($_COOKIE["d168_selectedportfolio"]))
  //               {
  //                 $this->load->view('user/portfolio-goals-strategies-projects-create');
  //               }
  //           }
  //         }
  //       }          
  //     }  
  //   }
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  // public function goals_list()
  // {
  //   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  //   {
  //     $data['plist'] = $this->Front_model->GoalsStrategiesAllList();
  //     $data['accepted_plist'] = $this->Front_model->AcceptedGoalsStrategiesAllList();
  //     $data['pending_plist'] = $this->Front_model->PendingGoalsStrategiesAllList();
  //     $data['readmore_plist'] = $this->Front_model->ReadMoreGoalsStrategiesAllList();
  //     $this->load->view('user/goals-list',$data);    
  //   }
  //   else
  //   {
  //     redirect(base_url('login'));
  //   }
  // }

  public function GoalOverviewRequestNotificationModal_Modal()
  {
    $id = $this->input->post('id');
    $data['gdetail'] = $this->Front_model->GoalDetailRequest($id);
    echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="GoalOverviewRequestNotificationModalLabel">'.$data['gdetail']->gname.'</h5>
                    &nbsp;&nbsp;<a href="'.base_url('goal-overview-request/'.$id).'" class="btn btn-sm btn-d text-white">Open</a>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">';
      $this->load->view('user/goal-overview-request-modal',$data);                                       
      echo '</div>';      
  }

  public function goal_overview_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->uri->segment(2);
      $data['gdetail'] = $this->Front_model->GoalDetailRequest($id);
      $this->load->view('user/goal-overview-request',$data);    
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function gdetail_SuggestTMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $gid = $this->input->post('gid');
          $g_detail = $this->Front_model->GoalDetail($gid);
          $getGCreatedBY = $this->Front_model->getEmailID($g_detail->gcreated_by);
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
          if($this->input->post('ismemail'))
          {
            $this->form_validation->set_rules('ismemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('ismemail'));
              }             
          }
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          if((!empty($myTMArray[0])) || (!empty($imemail_array[0])))
          {
            if(!empty($myTMArray[0]))
            {
              foreach($myTMArray as $t)
                  {
                    $check = $this->Front_model->check_g_suggested2($gid,$t);
                    if($check == 0)
                    {
                      $data2 = array(
                          'gid' => $gid,
                          'suggest_id' => trim($t),
                          'status' => 'suggested',
                          'already_register' => 'yes',
                          'suggested_by' => $this->session->userdata('d168_id'),
                          'suggested_date' => date('Y-m-d H:i:s')
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_GSuggestTeamMember($data2);
                      $gmsuggested_inserted_id = $this->db->insert_id();
                      $getEmailID = $this->Front_model->getEmailID($t);
                      $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'gmsuggested_id' =>$gmsuggested_inserted_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                    }
                  }                      
              }

              if(!empty($imemail_array[0]))
              {
                $myIM_Array = explode(',', $imemail_array);//invite team member array
                $status_show = 'no';
                foreach($myIM_Array as $im)
                {
                  if($getGCreatedBY->email_address == trim($im))
                        {
                            $response['status'] = 'err_valid';
                            header('Content-type: application/json');
                            //echo json_encode($response);
                            exit(json_encode($response));
                        }
                        else
                        {
                            $check_if_registered = $this->Front_model->selectLogin($im);
                            $check_project_members = 0;
                            if($check_if_registered)
                            {
                              $check_project_members = $this->Front_model->check_GoalTeamRequestSend($check_if_registered->reg_id,$gid);
                            }
                            if($check_project_members == 0)
                              {
                                $check = $this->Front_model->check_g_suggested2($gid,$im);
                                if($check == 0)
                                {
                                  $check_email = $this->Front_model->check_invited_goalsuggestemail($im,$gid);
                                  if(empty($check_email))
                                  {
                                    $data2 = array(
                                        'gid' => $gid,
                                        'suggest_id' => trim($im),
                                        'status' => 'suggested',
                                        'already_register' => 'no',
                                        'suggested_by' => $this->session->userdata('d168_id'),
                                        'suggested_date' => date('Y-m-d H:i:s')
                                          );
                                    $data2 = $this->security->xss_clean($data2); // xss filter
                                    $this->Front_model->insert_GSuggestTeamMember($data2);
                                    $gmsuggested_inserted_id = $this->db->insert_id();
                                    $hdata = array(
                                                  'gid' => $gid,
                                                  'h_date' => date('Y-m-d H:i:s'),
                                                  'h_resource_id' => $P_Owner->reg_id,
                                                  'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                  'h_description' => $im.' is suggested by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                                  'gmsuggested_id' =>$gmsuggested_inserted_id
                                              );
                                              $hdata = $this->security->xss_clean($hdata); // xss filter
                                              $this->Front_model->insert_ProjectHistory($hdata);
                                  }
                                }
                              } 
                        }
                }
              }

              $this->session->set_flashdata('message','Team Member Suggested Successfully!');
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
          else
          {
                      $response['status'] = 'Empty_Member';
                      header('Content-type: application/json');
                      echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function gdetail_AddMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $gid = $this->input->post('gid');
          $gdetail = $this->Front_model->GoalDetail($gid);
          $myTMArray = explode(',', $this->input->post('selected_T_member'));//team member array
          if($this->input->post('imemail'))
          {
            $this->form_validation->set_rules('imemail[]','Email Address','valid_email|trim');
              if ($this->form_validation->run() == FALSE)
              {
                  //$errors = array();

                  $errors = $this->form_validation->error_array();
                  // Loop through $_POST and get the keys
                  foreach ($errors as $key => $value)
                  {
                    // Add the error message for this field
                    $errors[$key] = form_error($key);
                  }
                
                  $response['errors'] = array_filter($errors); // Some might be empty
                  $response['status'] = FALSE;
                  // You can use the Output class here too
                  header('Content-type: application/json');
                  //echo json_encode($response);
                  exit(json_encode($response));
              }
              else
              {
                $imemail_array = implode(',', $this->input->post('imemail'));
              }            
          }
          $student_id = $this->session->userdata('d168_id');
          $P_Owner = $this->Front_model->getStudentById($student_id);
          if((!empty($myTMArray[0])) || (!empty($imemail_array[0])))
          {
          if(!empty($myTMArray[0]))
            {
              foreach($myTMArray as $t)
                  {
                    $check = $this->Front_model->check_GoalTeamRequestSend($t,$gid);
                    if($check == 0)
                    {
                      $data2 = array(
                          'gid' => $gid,
                          'portfolio_id' => $gdetail->portfolio_id,
                          'gmember' => trim($t),
                          'status' => 'send',
                          'gcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_GoalTeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $getEmailID = $this->Front_model->getEmailID($t);
                                    $hdata = array(
                                                      'gid' => $gid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'gmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.trim($t).'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.trim($t).'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );

                        $this->email->send();
                    }
                  }
              }

              if(!empty($imemail_array[0]))
              {
                  $myIM_Array = explode(',', $imemail_array);//invite team member array
                  foreach($myIM_Array as $im)
                  {
                    $check_if_registered = $this->Front_model->selectLogin($im);
                    if($check_if_registered)
                    {
                      $check_Goal_members = $this->Front_model->check_GoalTeamRequestSend($check_if_registered->reg_id,$gid);
                        if(empty($check_Goal_members))
                        {
                          if($this->session->userdata('d168_id') != $check_if_registered->reg_id)
                          {
                            $data2 = array(
                              'gid' => $gid,
                              'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                              'gmember' => trim($check_if_registered->reg_id),
                              'status' => 'send',
                              'gcreated_by' => $this->session->userdata('d168_id'),
                              'sent_date' => date('Y-m-d H:i:s'),
                              'sent_notify_clear' => 'no',
                                                );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->insert_GoalTeamMember($data2);
                          $inserted_pm_id = $this->db->insert_id();
                          //get email id from member id
                          $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                          $getportfolio = $this->Front_model->check_PortfolioMember($_COOKIE["d168_selectedportfolio"],$getEmailID->email_address);
                                if(empty($getportfolio))
                                {
                                $data = array(
                                                'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                                                'sent_to' => $im,
                                                'sent_from' => $this->session->userdata('d168_id'),
                                                'status' => 'pending',
                                                'working_status' => 'active',
                                                'status_date' => date('Y-m-d H:i:s'),
                                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                              );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->insert_PortfolioMember($data);
                                }
                          $hdata = array(
                                            'gid' => $gid,
                                            'h_date' => date('Y-m-d H:i:s'),
                                            'h_resource_id' => $P_Owner->reg_id,
                                            'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                            'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                            'gmember_id' =>$inserted_pm_id
                                        );
                                        $hdata = $this->security->xss_clean($hdata); // xss filter
                                        $this->Front_model->insert_ProjectHistory($hdata);
    $get_portfolio_name = "";
    $check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
    if($check_portfolio_name)
    {
      if($check_portfolio_name->portfolio_user == 'company')
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name;
      }
      elseif($check_portfolio_name->portfolio_user == 'individual')
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
      }
      else
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name;
      }
    }

                                                $RequestEmailID = $getEmailID->email_address;

                                                $email_to = $RequestEmailID;
                                                  $email_from = 'hello@decision168.com'; 
                                                  //$email_from = 'saramaazkhan123@gmail.com'; 
                                                  $email_name = 'Decision 168';

                                                  $this->load->library('email');  
                                                  $config=array(
                                                    'charset'=>'utf-8',
                                                    'wordwrap'=> TRUE,
                                                    'mailtype' => 'html'
                                                    );
                                                  $this->email->initialize($config);
                                                  $this->email->from($email_from, $email_name);
                                                  $this->email->set_header('Reply-To', $email_from."\r\n");
                                                  $this->email->set_header('Return-Path', $email_from."\r\n");
                                                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                                  $this->email->to($email_to);
                                                  $this->email->set_mailtype('html');
                                                  $this->email->subject('Goal Request | Decision 168');
                                                  $this->email->message('                 
                                                      <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Goal Request</title>
                <meta name="description" content="Goal Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.base_url('goal-request/'.$gid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'1').'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                    <a href="'.base_url('goal-request/'.$gid.'/'.trim($check_if_registered->reg_id).'/'.$inserted_pm_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                                  );
                          $this->email->send();
                          }
                        }
                      }
                      else
                      {
                        $check_email = $this->Front_model->check_goal_invited_email($im,$gid);
                        if(empty($check_email))
                        {
                          $data4 = array(
                                        'gid' => $gid,
                                        'sent_from' => $this->session->userdata('d168_id'),
                                        'sent_to' => $im,
                                        'status' => 'pending',
                                        'invite_date' => date('Y-m-d H:i:s')
                                          );
                          $data4 = $this->security->xss_clean($data4); // xss filter
                          $this->Front_model->insert_GoalInviteMember($data4);
                          $inserted_im_id = $this->db->insert_id();
                          $getportfolio = $this->Front_model->check_PortfolioMember($_COOKIE["d168_selectedportfolio"],$im);
                          if(empty($getportfolio))
                          {
                          $data = array(
                                          'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
                                          'sent_to' => $im,
                                          'sent_from' => $this->session->userdata('d168_id'),
                                          'status' => 'pending',
                                          'working_status' => 'active',
                                          'status_date' => date('Y-m-d H:i:s'),
                                          'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                        );
                          $data = $this->security->xss_clean($data); // xss filter
                          $this->Front_model->insert_PortfolioMember($data);
                          }
                          $hdata = array(
                                'gid' => $gid,
                                'h_date' => date('Y-m-d H:i:s'),
                                'h_resource_id' => $P_Owner->reg_id,
                                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$im,
                                'ginvited_id' =>$inserted_im_id
                            );
                            $hdata = $this->security->xss_clean($hdata); // xss filter
                            $this->Front_model->insert_ProjectHistory($hdata);
    $get_portfolio_name = "";
    $check_portfolio_name = $this->Front_model->getPortfolioName($_COOKIE["d168_selectedportfolio"]);
    if($check_portfolio_name)
    {
      if($check_portfolio_name->portfolio_user == 'company')
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name;
      }
      elseif($check_portfolio_name->portfolio_user == 'individual')
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
      }
      else
      { 
        $get_portfolio_name = $check_portfolio_name->portfolio_name;
      }
    }

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $im;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Goal Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
              <html lang="en-US">

              <head>
                <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
                <title>Goal Request</title>
                <meta name="description" content="Goal Request">
                <style type="text/css">
                    a:hover {text-decoration: underline !important;pointer:cursor !important;}
                </style>
              </head>

              <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
                <!--100% body table-->

                <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                    style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                    <tr>
                        <td>
                            <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                      <a href="'.base_url().'" title="Decision 168" target="_blank">
                                        <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                      </a>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>
                                        <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                            style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                            <tr>
                                                <td style="padding:0 35px;">
                                                    <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                    <span
                                                        style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Hello,<br><br>
                                                       '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                        <br><br>
                                                        Portfolio: '.$get_portfolio_name.'
                                                        <br><br>
                                                        Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                        <br><br>
                                                    </p>
                                                    <a href="'.$reg_link.'"
                                                    style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                    <a href="'.base_url('goal-invite-reject-request/'.$gid.'/'.$inserted_im_id.'/'.'2').'"
                                                        style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                        <br><br>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                        Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                        <br><br>
                                                        Thanks,
                                                        <br>
                                                        The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                        </p>
                                                        <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                        <br>
                                                        <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                        </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="height:40px;">&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                <tr>
                                    <td style="height:20px;">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td style="text-align:center;">
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                    <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                    <br>
                                        <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="height:80px;">&nbsp;</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
                <!--/100% body table-->
              </body>

              </html>' 
                                                                      );
                          $this->email->send();
                      }
                    }                
                  }
              }
              
                $this->session->set_flashdata('message','Team Member Added Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
              }
            else
              {
                      $response['status'] = 'Empty_TMember';
                      header('Content-type: application/json');
                      echo json_encode($response);
              }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function direct_remove_goalmanager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

              $data2 = array(
                                    'gmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->editGoal($data2,$gid);

          $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' as a Goal Manager',
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $this->session->set_flashdata('message','Goal Manager Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function remove_goalmanager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $gmid = $this->input->post('gmid');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      $check_mem = $this->Front_model->check_GoalPMToClear($gmid);
      if($check_mem)
      {
              $data2 = array(
                                    'gmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->editGoal($data2,$gid);

          $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' as a Goal Manager',
                                    'gmember_id' =>$gmid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $this->session->set_flashdata('message','Goal Manager Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_gMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $gid = $this->input->post('gid');
      $gmid = $this->input->post('gmid');
      $first_name = $this->input->post('first_name');
      $last_name = $this->input->post('last_name');    
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $portfolio_id = $_COOKIE["d168_selectedportfolio"];

      $check_mem_id = $this->Front_model->check_GoalPMToClear($gmid);
      if($check_mem_id)
      {
        $data['mem_detail'] = $check_mem_id;
        $data['fname'] = $first_name;
        $data['lname'] = $last_name;

        $reg_id = $check_mem_id->gmember;

        $getStrategies = $this->Front_model->GoalTMOpenStrategies($reg_id,$portfolio_id,$gid);
        $strategies_count = 0;
        if($getStrategies)
        {
          foreach($getStrategies as $ggs)
          {
            $strategies_count++;
          }
        }

        $getProjects = $this->Front_model->GoalTMOpenProjects($reg_id,$portfolio_id,$gid);
        $pro_count = 0;
        if($getProjects)
        {
          foreach($getProjects as $gp)
          {
            $pro_count++;
          }
        }
        $getPlannedContent = $this->Front_model->GoalTMOpenPlannedContent($reg_id,$portfolio_id,$gid);
        $plan_count = 0;
        if($getPlannedContent)
        {
          foreach($getPlannedContent as $gpc)
          {
            $plan_count++;
          }
        }
        $getTasks = $this->Front_model->GoalTMOpenTasks($reg_id,$portfolio_id,$gid);
        $task_count = 0;
        if($getTasks)
        {
          foreach($getTasks as $gt)
          {
            $task_count++;
          }
        }
        $getSubtasks = $this->Front_model->GoalTMOpenSubtasks($reg_id,$portfolio_id,$gid);
        $subtask_count = 0;
        if($getSubtasks)
        {
          foreach($getSubtasks as $gs)
          {
            $subtask_count++;
          }
        }
        $getProjectTM = $this->Front_model->GoalgetProjectOpenTM($reg_id,$portfolio_id,$gid);
        $pro_tm_count = 0;
        if($getProjectTM)
        {
          foreach($getProjectTM as $gtm)
          {
            $pro_tm_count++;
          }
        }

        if(($strategies_count == 0) && ($pro_count == 0) && ($task_count == 0) && ($subtask_count == 0) && ($plan_count == 0) &&($pro_tm_count == 0))
        {
            $mem_id = "";
            $manager_id = "";
            if($check_mem_id)
            {
              $mem_id = $check_mem_id->gmember;
            }
            $check_manager_id = $this->Front_model->file_itGoalDetail($gid);
            if($check_manager_id)
            {
              $manager_id = $check_manager_id->gmanager;
            }
            if($manager_id == $mem_id)
            {              
              $data2 = array(
                                    'gmanager' => '',
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->editGoal($data2,$gid);
            }

            $hdata = array(
                                      'gid' => $gid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource_id' => $powner->reg_id,
                                      'h_resource' => $powner->first_name.' '.$powner->last_name,
                                      'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$first_name.' '.$last_name.' from goal',
                                      'gmember_id' =>$gmid
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);

          $this->Front_model->delete_gMember($gmid);

          $this->session->set_flashdata('message','Team Member Removed Successfully!');
          $response['status'] = TRUE;
          header('Content-type: application/json');
          echo json_encode($response);
        }
        else
        {
            $this->load->view('user/assign-goal-open-work',$data);
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function goal_open_work_new_assignee()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('new_open_work_assignee','New Assignee','trim|required'); 
      $this->form_validation->set_rules('old_open_work_assignee','Old Assignee','trim|required');  
      $this->form_validation->set_rules('get_gmid_to_remove','Member ID','trim|required');       
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
        
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
          $portfolio_id = $_COOKIE["d168_selectedportfolio"];
          $gmid = $this->input->post('get_gmid_to_remove');
          $new_reg_id = $this->input->post('new_open_work_assignee');
          $check = $this->Front_model->check_GoalPMToClear($gmid);
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $new_mem = $this->Front_model->getStudentById($new_reg_id);
          if($check)
          { 
            $reg_id = $this->input->post('old_open_work_assignee');

            $getStrategies = $this->Front_model->GoalTMOpenStrategies($reg_id,$portfolio_id,$check->gid);
            if($getStrategies)
            {
              foreach($getStrategies as $ggs)
              {
                $data = array(
                        'screated_by' => $new_reg_id,
                    );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->editStrategies($data,$ggs->sid);
                $hdata = array(
                              'sid' => $ggs->sid,
                              'gid' => $ggs->gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer KPI '.$ggs->sname.' Ownership to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }

            $getProjects = $this->Front_model->GoalTMOpenProjects($reg_id,$portfolio_id,$check->gid);
            if($getProjects)
            {
              foreach($getProjects as $gp)
              {
                if($gp->pcreated_by == $reg_id)
                {
                  $check_if_tm = $this->Front_model->check_if_tm($gp->pid,$new_reg_id);
                  if($check_if_tm)
                  {
                    $this->Front_model->delete_pMember_mem_id($gp->pid,$new_reg_id);
                  }
                  $data2 = array(
                                        'pcreated_by' => $new_reg_id,
                                    );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->edit_Project($data2,$gp->pid);

                    $get_gs_pid = $this->Front_model->getProjectById($gp->pid);
                    $hdata = array(
                              'pid' => $gp->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Project '.$gp->pname.' Ownership to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                }
                if($gp->pmanager == $reg_id)
                {
                  $data2 = array(
                                        'pmanager' => $new_reg_id,
                                    );
                  $data2 = $this->security->xss_clean($data2); // xss filter
                  $this->Front_model->edit_Project($data2,$gp->pid);

                    $get_gs_pid = $this->Front_model->getProjectById($gp->pid);
                    $hdata = array(
                              'pid' => $gp->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Project '.$gp->pname.' Manager to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                }   
                //check if team member in any project  
                $check_tm = $this->Front_model->CheckOpenTM($reg_id,$gp->pid);
                if($check_tm) 
                {
                  $this->Front_model->delete_pMember_mem_id($gp->pid,$reg_id);
                }          
              }
            }
            $getProjectTM = $this->Front_model->GoalgetProjectOpenTM($reg_id,$portfolio_id,$check->gid);
            if($getProjectTM)
            {
              foreach($getProjectTM as $gtm)
              {                
                $check_if_already_tm = $this->Front_model->check_if_already_tm($new_reg_id,$portfolio_id,$gtm->pid);
                if($check_if_already_tm == 0)
                {                  
                  $check_if_powner = $this->Front_model->check_if_powner($gtm->pid,$new_reg_id);
                  if($check_if_powner == 0)
                  {
                    $data2 = array(
                      'pid' => $gtm->pid,
                      'portfolio_id' => $gtm->portfolio_id,
                      'pmember' => trim($new_reg_id),
                      'status' => $gtm->status,
                      'pcreated_by' => $this->session->userdata('d168_id'),
                      'sent_date' => date('Y-m-d H:i:s'),
                      'sent_notify_clear' => $gtm->sent_notify_clear,
                                        );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_TeamMember($data2);

                    $get_gs_pid = $this->Front_model->getProjectById($gtm->pid);
                    $hdata = array(
                              'pid' => $gtm->pid,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Added '.$new_mem->first_name.' '.$new_mem->last_name.' as a team member',
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                  }                  
                }
                $this->Front_model->delete_pMember_with_port_id($reg_id,$portfolio_id);
              }
            }
            $getPlannedContent = $this->Front_model->GoalTMOpenPlannedContent($reg_id,$portfolio_id,$check->gid);
            if($getPlannedContent)
            {
              foreach($getPlannedContent as $gpc)
              {
                if($gpc->written_content_assignee == $reg_id)
                {
                    $data = array(
                      'written_content_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Written Content Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->pc_file_assignee == $reg_id)
                {
                    $data = array(
                      'pc_file_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Media File Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->submit_to_approval == $reg_id)
                {
                    $data = array(
                      'submit_to_approval' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Submit for Approval Assignee of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
                if($gpc->pc_assignee == $reg_id)
                {
                    $data = array(
                      'pc_assignee' => $new_reg_id,
                      'pc_created_by' => $this->session->userdata('d168_id'),
                    );

                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_Content($data,$gpc->pc_id);
                  if(!empty($gpc->pc_project_assign))
                      {
                        $get_gs_pid = $this->Front_model->getProjectById($gpc->pc_project_assign);
                        $hdata = array( 
                              'pid' => $gpc->pc_project_assign,
                              'gid' => $get_gs_pid->gid,
                              'sid' => $get_gs_pid->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Scheduler of platform '.$gpc->platform.' ( '.$gpc->pc_code.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                                    );
                        $hdata = $this->security->xss_clean($hdata); // xss filter
                        $this->Front_model->insert_ProjectHistory($hdata);
                      }
                }
              }
            }
            $getTasks = $this->Front_model->GoalTMOpenTasks($reg_id,$portfolio_id,$check->gid);
            if($getTasks)
            {
              foreach($getTasks as $gt)
              {
                $data = array(
                                        'tassignee' => $new_reg_id,
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_OpenTask($data,$gt->tid,$reg_id);
                $data1 = array(
                                        'tcreated_by' => $this->session->userdata('d168_id'),
                                    );
                $data1 = $this->security->xss_clean($data1); // xss filter
                $this->Front_model->edit_NewTask($data1,$gt->tid);
                $hdata = array(
                              'pid' => $gt->tproject_assign,
                              'gid' => $gt->gid,
                              'sid' => $gt->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Task '.$gt->tname.' ( '.$gt->tcode.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }
            $getSubtasks = $this->Front_model->GoalTMOpenSubtasks($reg_id,$portfolio_id,$check->gid);
            if($getSubtasks)
            {
              foreach($getSubtasks as $gs)
              {
                $data = array(
                                        'stassignee' => $new_reg_id,
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_OpenSubtask($data,$gs->stid,$reg_id);
                $data1 = array(
                                        'stcreated_by' => $this->session->userdata('d168_id'),
                                    );
                $data1 = $this->security->xss_clean($data1); // xss filter
                $this->Front_model->edit_NewSubtask($data1,$gs->stid);
                $hdata = array(
                              'pid' => $gs->stproject_assign,
                              'gid' => $gs->gid,
                              'sid' => $gs->sid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $powner->reg_id,
                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                              'h_description' =>  $powner->first_name.' '.$powner->last_name.' Transfer Subtask '.$gs->stname.' ( '.$gs->stcode.' ) to '.$new_mem->first_name.' '.$new_mem->last_name,
                          );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
              }
            }

            $gdetail = $this->Front_model->GoalDetail($check->gid);
            if($gdetail->gmanager == $reg_id)
            {
              $data2 = array(
                                    'gmanager' => $new_reg_id,
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->editGoal($data2,$check->gid);
              $hdata = array(
                                    'gid' => $check->gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Assigned '.$new_mem->first_name.' '.$new_mem->last_name.' as a Goal Manager',
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
            } 
            $this->Front_model->delete_gMember($gmid);  

            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function assign_goalmanager()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $gmid = $this->input->post('gmid');
    $first_name = $this->input->post('first_name');
    $last_name = $this->input->post('last_name');       
    $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      $check_mem = $this->Front_model->check_GoalPMToClear($gmid);
      if($check_mem)
      {
            $data2 = array(
                                    'gmanager' => $check_mem->gmember,
                                );
              $data2 = $this->security->xss_clean($data2); // xss filter
              $this->Front_model->editGoal($data2,$gid);

        $gdetail = $this->Front_model->GoalDetail($gid);

          $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' =>  $P_Owner->first_name.' '.$P_Owner->last_name.' Assigned '.$first_name.' '.$last_name.' as a Goal Manager',
                                    'gmember_id' =>$gmid
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
        $pro_manager = $check_mem->gmember;

        if($pro_manager != $this->session->userdata('d168_id'))
        {
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

          $getEmailID = $this->Front_model->getEmailID($pro_manager);
          $RequestEmailID = $getEmailID->email_address;

          $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Manager | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Manager</title>
            <meta name="description" content="Goal Manager">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re Now a Goal Manager...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has assigned you as a Goal manager in '.$gdetail->gname.' goal. 
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
                    $this->email->send();
        }

        $this->session->set_flashdata('message','Goal Manager Assigned Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function delete_iGMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $igm_id = $this->input->post('igm_id');
    $sent_to = $this->input->post('sent_to');
          $powner_id = $this->input->post('pcreated_by');        
          $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

          $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $powner->reg_id,
                                    'h_resource' => $powner->first_name.' '.$powner->last_name,
                                    'h_description' =>  $powner->first_name.' '.$powner->last_name.' Removed '.$sent_to.' from goal',
                                    'ginvited_id' =>$igm_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);

      $this->Front_model->delete_iGMember($gid,$igm_id);
      
        $this->session->set_flashdata('message','Invited Member Removed Successfully!');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function add_SuggestedGMember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $suggest_id = $this->input->post('suggest_id');
    $gdetail = $this->Front_model->GoalDetail($gid);
    $student_id = $this->session->userdata('d168_id');
    $P_Owner = $this->Front_model->getStudentById($student_id);
            $suggest = $this->Front_model->check_g_suggested($gid,$suggest_id);
            $getEmailID = $this->Front_model->getEmailID($suggest_id);
      $check = $this->Front_model->check_GoalTeamRequestSend($suggest_id,$gid);
        if($check == 0)
          {
                $data = array(
                   'status' => 'approved',
                   'approve_date' => date('Y-m-d H:i:s')
                            );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
                      $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'gmsuggested_id' =>$suggest->gs_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
                      $data2 = array(
                          'gid' => $gid,
                          'portfolio_id' => $gdetail->portfolio_id,
                          'gmember' => $suggest_id,
                          'status' => 'send',
                          'gcreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                            );
                      $data2 = $this->security->xss_clean($data2); // xss filter
                      $this->Front_model->insert_GoalTeamMember($data2);
                      $inserted_pm_id = $this->db->insert_id();
                                    //get email id from member id
                                    $hdata = array(
                                                      'gid' => $gid,
                                                      'h_date' => date('Y-m-d H:i:s'),
                                                      'h_resource_id' => $P_Owner->reg_id,
                                                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                                      'gmember_id' =>$inserted_pm_id
                                                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                    $RequestEmailID = $getEmailID->email_address;

                                    $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
                    // $this->email->send();
          
           // $check_if_requested = $this->Front_model->RequestAsProjectMember($gid,$suggest_id);
           //    if($check_if_requested)
           //    {
           //      $data = array(
           //                          'status' => 'added',
           //                      );
           //      $data = $this->security->xss_clean($data); // xss filter
           //      $this->Front_model->update_project_request_member($data,$gid,$suggest_id);
           //    }
                  if($this->email->send())
                  {
                    $this->session->set_flashdata('message', 'Team Member Added Successfully!');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                  }else{
                    echo $this->email->print_debugger();
                  }  
          }
          else
          {
             $data = array(
                   'status' => 'approved',
                   'approve_date' => date('Y-m-d H:i:s')
                            );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
                      $hdata = array(
                                    'gid' => $gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => $getEmailID->first_name.' '.$getEmailID->last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    'gmsuggested_id' =>$suggest->gs_id
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             // $check_if_requested = $this->Front_model->RequestAsProjectMember($gid,$suggest_id);
             //  if($check_if_requested)
             //  {
             //    $data = array(
             //                        'status' => 'added',
             //                    );
             //    $data = $this->security->xss_clean($data); // xss filter
             //    $this->Front_model->update_project_request_member($data,$gid,$suggest_id);
             //  } 
                      $this->session->set_flashdata('message', 'Team Member Request Already Sent!');
                                        $response['status'] = TRUE;
                                        header('Content-type: application/json');
                                        echo json_encode($response);
          }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function add_Suggested_IGmember()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $gid = $this->input->post('gid');
    $suggest_id = $this->input->post('suggest_id');
    $gdetail = $this->Front_model->GoalDetail($gid);
    $student_id = $this->session->userdata('d168_id');
    $P_Owner = $this->Front_model->getStudentById($student_id);
    $suggest = $this->Front_model->check_g_suggested($gid,$suggest_id);
            $getEmailID = $this->Front_model->getEmailID($suggest_id);
            if($getEmailID)
            {
              $s_first_name = $getEmailID->first_name;
              $s_last_name = $getEmailID->last_name;
            }
            else
            {
              $s_first_name = $suggest_id;
              $s_last_name = "";
            }
    $check_if_registered = $this->Front_model->selectLogin($suggest_id);
    //$check_if_requested = $this->Front_model->RequestAsProjectMember($gid,$suggest_id);
    //          if($check_if_requested)
    //          {
    //            $data = array(
    //                                'status' => 'added',
    //                            );
    //            $data = $this->security->xss_clean($data); // xss filter
    //            $this->Front_model->update_project_request_member($data,$gid,$suggest_id);
    //          }

            if($check_if_registered)
            {
                if($this->session->userdata('d168_id') != $check_if_registered->reg_id)
                {
                    $data = array(
                               'status' => 'approved',
                               'approve_date' => date('Y-m-d H:i:s')
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
                    $data2 = array(
                        'gid' => $gid,
                        'portfolio_id' => $gdetail->portfolio_id,
                        'gmember' => trim($check_if_registered->reg_id),
                        'status' => 'send',
                        'gcreated_by' => $this->session->userdata('d168_id'),
                        'sent_date' => date('Y-m-d H:i:s'),
                        'sent_notify_clear' => 'no',
                                      );
                    $data2 = $this->security->xss_clean($data2); // xss filter
                    $this->Front_model->insert_GoalTeamMember($data2);
                    $inserted_pm_id = $this->db->insert_id();
                    //get email id from member id
                    $getEmailID = $this->Front_model->getEmailID($check_if_registered->reg_id);
                    $getportfolio = $this->Front_model->check_PortfolioMember($gdetail->portfolio_id,$getEmailID->email_address);
                          if(empty($getportfolio))
                          {
                              $data = array(
                                              'portfolio_id' => $gdetail->portfolio_id,
                                              'sent_to' => $getEmailID->email_address,
                                              'sent_from' => $this->session->userdata('d168_id'),
                                              'status' => 'pending',
                                              'working_status' => 'active',
                                              'status_date' => date('Y-m-d H:i:s'),
                                              'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                            );
                              $data = $this->security->xss_clean($data); // xss filter
                              $this->Front_model->insert_PortfolioMember($data);
                          }
                        $hdata = array(
                                          'gid' => $gid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent team member request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                                          'gmember_id' =>$inserted_pm_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

                                            $RequestEmailID = $getEmailID->email_address;

                                            $email_to = $RequestEmailID;
                                      $email_from = 'hello@decision168.com'; 
                                      //$email_from = 'saramaazkhan123@gmail.com'; 
                                      $email_name = 'Decision 168';

                                      $this->load->library('email');  
                                      $config=array(
                                        'charset'=>'utf-8',
                                        'wordwrap'=> TRUE,
                                        'mailtype' => 'html'
                                        );
                                      $this->email->initialize($config);
                                      $this->email->from($email_from, $email_name);
                                      $this->email->set_header('Reply-To', $email_from."\r\n");
                                      $this->email->set_header('Return-Path', $email_from."\r\n");
                                      $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                                      $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                                      $this->email->to($email_to);
                                      $this->email->set_mailtype('html');
                                      $this->email->subject('Goal Request | Decision 168');
                                      $this->email->message('                 
                                          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucfirst($getEmailID->first_name).',<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-request/'.$gid.'/'.$suggest_id.'/'.$inserted_pm_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Need More Info</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
          );
                    
                    if($this->email->send())
                        {
                          $this->session->set_flashdata('message', 'Invited Successfully!');
                          $response['status'] = TRUE;
                          header('Content-type: application/json');
                          echo json_encode($response);
                        }
                        else{
                          echo $this->email->print_debugger();
                        }
                }
            }
            else
            {
                $check_email = $this->Front_model->check_invited_goalsuggestemail($suggest_id,$gid);
                if($check_email)
                {
                  if($check_email->status != 'pending')
                    {
                      $data = array(
                                   'status' => 'approved',
                                   'approve_date' => date('Y-m-d H:i:s')
                                            );
                      $data = $this->security->xss_clean($data); // xss filter
                      $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
                      $hdata = array(
                        'gid' => $suggest->gid,
                        'h_date' => date('Y-m-d H:i:s'),
                        'h_resource_id' => $P_Owner->reg_id,
                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                        'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                        'gmsuggested_id' =>$suggest->gs_id
                    );
                    $hdata = $this->security->xss_clean($hdata); // xss filter
                    $this->Front_model->insert_ProjectHistory($hdata);
                        $data4 = array(
                                      'gid' => $gid,
                                      'sent_from' => $this->session->userdata('d168_id'),
                                      'sent_to' => $suggest_id,
                                      'status' => 'pending',
                                      'invite_date' => date('Y-m-d H:i:s')
                                        );
                        $data4 = $this->security->xss_clean($data4); // xss filter
                        $this->Front_model->insert_GoalInviteMember($data4);
                        $inserted_im_id = $this->db->insert_id();
                        $getportfolio = $this->Front_model->check_PortfolioMember($gdetail->portfolio_id,$suggest_id);
                        if(empty($getportfolio))
                        {
                        $data = array(
                                        'portfolio_id' => $gdetail->portfolio_id,
                                        'sent_to' => $suggest_id,
                                        'sent_from' => $this->session->userdata('d168_id'),
                                        'status' => 'pending',
                                        'working_status' => 'active',
                                        'status_date' => date('Y-m-d H:i:s'),
                                        'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                                      );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->insert_PortfolioMember($data);
                        }
                        $hdata = array(
                              'gid' => $gid,
                              'h_date' => date('Y-m-d H:i:s'),
                              'h_resource_id' => $P_Owner->reg_id,
                              'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                              'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$suggest_id,
                              'ginvited_id' =>$inserted_im_id
                          );
                          $hdata = $this->security->xss_clean($hdata); // xss filter
                          $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}

        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

    $email_to = $suggest_id;
    $email_from = 'hello@decision168.com'; 
    //$email_from = 'saramaazkhan123@gmail.com'; 
    $email_name = 'Decision 168';

    $this->load->library('email');  
    $config=array(
      'charset'=>'utf-8',
      'wordwrap'=> TRUE,
      'mailtype' => 'html'
      );
    $this->email->initialize($config);
    $this->email->from($email_from, $email_name);
    $this->email->set_header('Reply-To', $email_from."\r\n");
    $this->email->set_header('Return-Path', $email_from."\r\n");
    $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
    $this->email->set_header('MIME-Version', '1.0' . "\r\n");
    $this->email->to($email_to);
    $this->email->set_mailtype('html');
    $this->email->subject('Goal Request | Decision 168');
    $this->email->message('                 
        <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-invite-reject-request/'.$gid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                );
                                                  
                if($this->email->send())
                {
                  $this->session->set_flashdata('message', 'Invited Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
                }
                else{
                  echo $this->email->print_debugger();
                }
                                                    
            }
            else
            {
              $data = array(
                           'status' => 'approved',
                           'approve_date' => date('Y-m-d H:i:s')
                                    );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
              $hdata = array(
                'gid' => $suggest->gid,
                'h_date' => date('Y-m-d H:i:s'),
                'h_resource_id' => $P_Owner->reg_id,
                'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                'gmsuggested_id' =>$suggest->gs_id
            );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
                        $this->session->set_flashdata('message', 'Already Invited!');
                        $response['status'] = TRUE;
                        header('Content-type: application/json');
                        echo json_encode($response);
                }
            }
            else
            {
              $data = array(
                           'status' => 'approved',
                           'approve_date' => date('Y-m-d H:i:s')
                                    );
              $data = $this->security->xss_clean($data); // xss filter
              $this->Front_model->update_GoalSuggestTeamMember($data,$gid,$suggest_id);
              $hdata = array(
                    'gid' => $suggest->gid,
                    'h_date' => date('Y-m-d H:i:s'),
                    'h_resource_id' => $P_Owner->reg_id,
                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                    'h_description' => $s_first_name.' '.$s_last_name.' is approved by '.$P_Owner->first_name.' '.$P_Owner->last_name,
                    'gmsuggested_id' =>$suggest->gs_id
                );
                $hdata = $this->security->xss_clean($hdata); // xss filter
                $this->Front_model->insert_ProjectHistory($hdata);
                $data4 = array(
                              'gid' => $gid,
                              'sent_from' => $this->session->userdata('d168_id'),
                              'sent_to' => $suggest_id,
                              'status' => 'pending',
                              'invite_date' => date('Y-m-d H:i:s')
                                );
                $data4 = $this->security->xss_clean($data4); // xss filter
                $this->Front_model->insert_GoalInviteMember($data4);
                $inserted_im_id = $this->db->insert_id();
                $getportfolio = $this->Front_model->check_PortfolioMember($gdetail->portfolio_id,$suggest_id);
                if(empty($getportfolio))
                {
                $data = array(
                                'portfolio_id' => $gdetail->portfolio_id,
                                'sent_to' => $suggest_id,
                                'sent_from' => $this->session->userdata('d168_id'),
                                'status' => 'pending',
                                'working_status' => 'active',
                                'status_date' => date('Y-m-d H:i:s'),
                                'reminder_date' => date('Y-m-d H:i:s',strtotime("+1 day"))
                              );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->insert_PortfolioMember($data);
                }
                $hdata = array(
                      'gid' => $gid,
                      'h_date' => date('Y-m-d H:i:s'),
                      'h_resource_id' => $P_Owner->reg_id,
                      'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                      'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent invite to '.$suggest_id,
                      'ginvited_id' =>$inserted_im_id
                  );
                                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                                  $this->Front_model->insert_ProjectHistory($hdata);
$get_portfolio_name = "";
$check_portfolio_name = $this->Front_model->getPortfolioName($gdetail->portfolio_id);
if($check_portfolio_name)
{
  if($check_portfolio_name->portfolio_user == 'company')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
  elseif($check_portfolio_name->portfolio_user == 'individual')
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name.' '.$check_portfolio_name->portfolio_lname;
  }
  else
  { 
    $get_portfolio_name = $check_portfolio_name->portfolio_name;
  }
}
        
        $reg_link = base_url('register');
        if(!empty($this->session->userdata('d168_user_cor_id')))
        {
            $getComp = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
            if($getComp)
            {
                $reg_link = $getComp->cc_link;
            }
        }

        $email_to = $suggest_id;
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Goal Request | Decision 168');
        $this->email->message('                 
            <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Goal Request</title>
            <meta name="description" content="Goal Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">You\'re invited to a Goal...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($P_Owner->first_name).' '.ucfirst($P_Owner->last_name).' has requested you to join Goal '.$gdetail->gname.' as a team member. Just click the appropriate button below to join the Goal or request more information.
                                                    <br><br>
                                                    Portfolio: '.$get_portfolio_name.'
                                                    <br><br>
                                                    Goal Short Description: '.substr($gdetail->gdes,0,100).'...
                                                    <br><br>
                                                </p>
                                                <a href="'.$reg_link.'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Join Goal</a>
                                                <a href="'.base_url('goal-invite-reject-request/'.$gid.'/'.$inserted_im_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Deny Request</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Note: If you do not have an account, you will need to register for one and create profile (don\'t worry it only takes a couple of minutes).
                                                    <br><br>
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                                                  );
                                                  
                    if($this->email->send())
                    {
                      $this->session->set_flashdata('message', 'Invited Successfully!');
                      $response['status'] = TRUE;
                      header('Content-type: application/json');
                      echo json_encode($response);
                    }
                    else{
                      echo $this->email->print_debugger();
                    }
                }
            }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

//////Goal & Strategies Part End///////

  public function insert_ContactSales()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('fname','full name ','trim|required');
      $this->form_validation->set_rules('email','Email','trim|required|valid_email');
      $this->form_validation->set_rules('phone','Phone','trim|required|numeric');
      $this->form_validation->set_rules('total_users','Total users','trim|required');
         
      if ($this->form_validation->run() == FALSE)
      {
        //$errors = array();
        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
        // Add the error message for this field
        $errors[$key] = form_error($key);
        }
                
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
      }
      else
      {
        $check_contacted = $this->Front_model->check_contacted($this->session->userdata('d168_id'));
        if(empty($check_contacted))
        {
          $regInfo = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

          if(!empty($regInfo->middle_name))
          {
            $fname = $regInfo->first_name.' '.$regInfo->middle_name.' '.$regInfo->last_name;
          }
          else
          {
            $fname = $regInfo->first_name.' '.$regInfo->last_name;
          }
          
          $data = array(
              'reg_id' => $this->session->userdata('d168_id'),
              'fname' => $fname,
              'email' => $regInfo->email_address,
              'phone' => $regInfo->phone_number,
              'total_users' => $this->input->post('total_users'),
              'response_status' => 'pending',
              'contacted_date' => date('Y-m-d H:i:s'),
          );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insert_contact_sales($data);

        //$email_to = 'don@z2squared.com';
        $email_to = 'uzmakarjikar@gmail.com';
        $email_from = 'hello@decision168.com'; 
        //$email_from = 'saramaazkhan123@gmail.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Contacted Sales | Decision 168');
        $this->email->message('                 
            <!doctype html>
            <html lang="en-US">

            <head>
              <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
              <title>Contacted Sales</title>
              <meta name="description" content="Contacted Sales">
              <style type="text/css">
                  a:hover {text-decoration: underline !important;pointer:cursor !important;}
              </style>
            </head>

            <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
              <!--100% body table-->

              <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                  style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                  <tr>
                      <td>
                          <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                    <a href="'.base_url().'" title="Decision 168" target="_blank">
                                      <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                    </a>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td>
                                      <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                          style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                          <tr>
                                              <td style="padding:0 35px;">
                                                  <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Contacted Sales</h1>
                                                  <span
                                                      style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                  Hello SuperAdmin,<br><br>
                                                     '.$this->input->post('fname').' has contacted you regarding the package. Please find information below:
                                                      <br><br>
                                                      Name: '.$this->input->post('fname').'
                                                      <br><br>
                                                      Email: '.$this->input->post('email').'
                                                      <br><br>
                                                      Phone: '.$this->input->post('phone').'
                                                      <br><br>
                                                  </p>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      Thanks,
                                                      <br>
                                                      The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                      <br>
                                                      <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                      </p>
                                              </td>
                                          </tr>
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                      </table>
                                  </td>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                  <br>
                                      <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                          </table>
                      </td>
                  </tr>
              </table>
              <!--/100% body table-->
            </body>

            </html>' 
          );
            $this->email->send();

            $this->session->set_flashdata('message', 'Request Sent Successfully! Please wait for response!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
        else
        {
          if($check_contacted->response_status == 'pending')
          {
            $response['status'] = 'wait_response_contacted';
            header('Content-type: application/json');
            echo json_encode($response);
          }
          else
          {
            $response['status'] = 'cus_pack_already_created';
            header('Content-type: application/json');
            echo json_encode($response);
          }              
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  //////File Cabinet Part Start///////

  public function file_cabinet()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        $port_id = $_COOKIE["d168_selectedportfolio"];
        $data['activeDepartments'] = $this->Front_model->get_PortfolioDepartment($port_id);
        $this->load->view('user/file_cabinet',$data);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function file_cabinet_files()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      if(isset($_COOKIE["d168_selectedportfolio"]))
      {
        $port_id = $_COOKIE["d168_selectedportfolio"];
        $dept_id = $this->uri->segment(2);
        $port_id = $_COOKIE["d168_selectedportfolio"];
        $data['activeDepartments'] = $this->Front_model->get_PortfolioDepartment($port_id);
        $this->load->view('user/file_cabinet_files',$data);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function file_it_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itGoalDetail($id);
    $getGoalAllTask = $this->Front_model->file_itGoal_tasks($id);
    $getGoalAllSubtask = $this->Front_model->file_itGoal_subtasks($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getGoalAllTask || $getGoalAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getGoalAllTask)
          {
            foreach($getGoalAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getGoalAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getGoalAllSubtask)
          {
            foreach($getGoalAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getGoalAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {
            //goal
            $gdata = array(
                                          'g_file_it' => 'yes',
                                          'g_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $gdata = $this->security->xss_clean($gdata); // xss filter
                                      $this->Front_model->editGoal($gdata,$id);
            //goal invited members  
            $data3 = array( 
                                          'g_file_it' => 'yes', 
                                          'g_file_it_date' => date('Y-m-d H:i:s'),  
                                      );  
                                      $data3 = $this->security->xss_clean($data3); // xss filter  
                                      $this->Front_model->edit_goal_invited_members($data3,$id);  
            //goal members  
            $data6 = array( 
                                          'g_file_it' => 'yes', 
                                          'g_file_it_date' => date('Y-m-d H:i:s'),  
                                      );  
                                      $data6 = $this->security->xss_clean($data6); // xss filter  
                                      $this->Front_model->edit_goal_members($data6,$id);  
            //goal suggested members  
            $data7 = array( 
                                          'g_file_it' => 'yes', 
                                          'g_file_it_date' => date('Y-m-d H:i:s'),  
                                      );  
                                      $data7 = $this->security->xss_clean($data7); // xss filter  
                                      $this->Front_model->edit_goal_suggested_members($data7,$id);
            //strategies
            $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to file_it
            if($g_strategies)
            {
               foreach($g_strategies as $gs)
               {
                  $sdata = array(
                                    's_file_it' => 'yes',
                                    's_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$gs->sid);
                  $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to file_it
                  if($s_projects)
                  {
                     foreach($s_projects as $sp)
                     {
                      //project
                      $data = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$sp->pid);
                      //project files                          
                      $data2 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$sp->pid);
                      //project invited members
                      $data3 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                      //project management
                      $data4 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$sp->pid);
                      //project management fields
                      $data5 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                      //project members
                      $data6 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$sp->pid);
                      //project suggested members
                      $data7 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                      //project tasks
                      $data8 = array(
                                                      'task_file_it' => 'yes',
                                                      'task_file_it_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data8 = $this->security->xss_clean($data8); // xss filter
                                $this->Front_model->edit_project_tasks($data8,$sp->pid);
                      //project subtasks
                      $data9 = array(
                                                      'subtask_file_it' => 'yes',
                                                      'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data8 = $this->security->xss_clean($data9); // xss filter
                                $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                      //project cp
                      $data10 = array(
                                                      'cp_file_it' => 'yes',
                                                      'cp_file_it_date' => date('Y-m-d H:i:s'),
                                                    );
                                $data10 = $this->security->xss_clean($data10); // xss filter
                                $this->Front_model->edit_project_cp($data10,$sp->pid);
                     }
                  }
               }
            }
            //save history
            $hdata = array(
                                          'gid' => $id,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Goal Filed By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Goal Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to File it the Goal!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //goal
        $gdata = array(
                                      'g_file_it' => 'yes',
                                      'g_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $gdata = $this->security->xss_clean($gdata); // xss filter
                                  $this->Front_model->editGoal($gdata,$id);
        //goal invited members  
        $data3 = array( 
                                      'g_file_it' => 'yes', 
                                      'g_file_it_date' => date('Y-m-d H:i:s'),  
                                  );  
                                  $data3 = $this->security->xss_clean($data3); // xss filter  
                                  $this->Front_model->edit_goal_invited_members($data3,$id);  
        //goal members  
        $data6 = array( 
                                      'g_file_it' => 'yes', 
                                      'g_file_it_date' => date('Y-m-d H:i:s'),  
                                  );  
                                  $data6 = $this->security->xss_clean($data6); // xss filter  
                                  $this->Front_model->edit_goal_members($data6,$id);  
        //goal suggested members  
        $data7 = array( 
                                      'g_file_it' => 'yes', 
                                      'g_file_it_date' => date('Y-m-d H:i:s'),  
                                  );  
                                  $data7 = $this->security->xss_clean($data7); // xss filter  
                                  $this->Front_model->edit_goal_suggested_members($data7,$id);
        //strategies
        $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to file_it
        if($g_strategies)
        {
           foreach($g_strategies as $gs)
           {
            $sdata = array(
                                    's_file_it' => 'yes',
                                    's_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $sdata = $this->security->xss_clean($sdata); // xss filter
                                $this->Front_model->editStrategies($sdata,$gs->sid);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to file_it
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                                'task_file_it' => 'yes',
                                                'task_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                                'subtask_file_it' => 'yes',
                                                'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                                'cp_file_it' => 'yes',
                                                'cp_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data10 = $this->security->xss_clean($data10); // xss filter
                          $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
           }
        }
        //save history
        $hdata = array(
                                    'gid' => $id,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Goal Filed By Goal Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Goal Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function file_it_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itStrategyDetail($id);
    $getStrategyAllTask = $this->Front_model->file_itStrategy_tasks($id);
    $getStrategyAllSubtask = $this->Front_model->file_itStrategy_subtasks($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getStrategyAllTask || $getStrategyAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getStrategyAllTask)
          {
            foreach($getStrategyAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getStrategyAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getStrategyAllSubtask)
          {
            foreach($getStrategyAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getStrategyAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {            
            //strategies            
            $sdata = array(
                              's_file_it' => 'yes',
                              's_file_it_date' => date('Y-m-d H:i:s'),
                          );
                          $sdata = $this->security->xss_clean($sdata); // xss filter
                          $this->Front_model->editStrategies($sdata,$id);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to file_it
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_file_it' => 'yes',
                                    'project_file_it_date' => date('Y-m-d H:i:s'),
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                                'task_file_it' => 'yes',
                                                'task_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data8); // xss filter
                          $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                                'subtask_file_it' => 'yes',
                                                'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data8 = $this->security->xss_clean($data9); // xss filter
                          $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                                'cp_file_it' => 'yes',
                                                'cp_file_it_date' => date('Y-m-d H:i:s'),
                                              );
                          $data10 = $this->security->xss_clean($data10); // xss filter
                          $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
            //save history
            $hdata = array(
                                          'sid' => $id,
                                          'gid' => $res->gid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'KPI Filed By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','KPI Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to File it the KPI!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //strategies            
        $sdata = array(
                          's_file_it' => 'yes',
                          's_file_it_date' => date('Y-m-d H:i:s'),
                      );
                      $sdata = $this->security->xss_clean($sdata); // xss filter
                      $this->Front_model->editStrategies($sdata,$id);
        $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to file_it
        if($s_projects)
        {
           foreach($s_projects as $sp)
           {
            //project
            $data = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data = $this->security->xss_clean($data); // xss filter
                            $this->Front_model->edit_Project($data,$sp->pid);
            //project files                          
            $data2 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data2 = $this->security->xss_clean($data2); // xss filter
                            $this->Front_model->edit_project_files($data2,$sp->pid);
            //project invited members
            $data3 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data3 = $this->security->xss_clean($data3); // xss filter
                            $this->Front_model->edit_project_invited_members($data3,$sp->pid);
            //project management
            $data4 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data4 = $this->security->xss_clean($data4); // xss filter
                            $this->Front_model->edit_project_management($data4,$sp->pid);
            //project management fields
            $data5 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data5 = $this->security->xss_clean($data5); // xss filter
                            $this->Front_model->edit_project_management_fields($data5,$sp->pid);
            //project members
            $data6 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data6 = $this->security->xss_clean($data6); // xss filter
                            $this->Front_model->edit_project_members($data6,$sp->pid);
            //project suggested members
            $data7 = array(
                                'project_file_it' => 'yes',
                                'project_file_it_date' => date('Y-m-d H:i:s'),
                            );
                            $data7 = $this->security->xss_clean($data7); // xss filter
                            $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
            //project tasks
            $data8 = array(
                                            'task_file_it' => 'yes',
                                            'task_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data8); // xss filter
                      $this->Front_model->edit_project_tasks($data8,$sp->pid);
            //project subtasks
            $data9 = array(
                                            'subtask_file_it' => 'yes',
                                            'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data9); // xss filter
                      $this->Front_model->edit_project_subtasks($data9,$sp->pid);
            //project cp
            $data10 = array(
                                            'cp_file_it' => 'yes',
                                            'cp_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->edit_project_cp($data10,$sp->pid);
           }
        }
        //save history
        $hdata = array(
                                    'sid' => $id,
                                    'gid' => $res->gid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'KPI Filed By KPI Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','KPI Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function file_it_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $res = $this->Front_model->file_itProjectDetail($id);
    $getProjectAllTask = $this->Front_model->file_itgetProjectAllTaskNotArc($id);
    $getProjectAllSubtask = $this->Front_model->file_itgetProjectAllSubtaskNotArc($id);
    $getProjectAllCP = $this->Front_model->file_itgetProjectAllCPNotArc($id);
    if($res)
    {
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

      if($getProjectAllTask || $getProjectAllSubtask)
      {
          $all_task = 0;
          $done_task = 0;
          $all_subtask = 0;
          $done_subtask = 0;

          if($getProjectAllTask)
          {
            foreach($getProjectAllTask as $all_tc)
              {
                $all_task++; 
              }
            foreach($getProjectAllTask as $done_tc)
              {
                if($done_tc->tstatus == 'done')
                  {
                    $done_task++;
                  } 
              }
          }

          if($getProjectAllSubtask)
          {
            foreach($getProjectAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getProjectAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          $total_all = $all_task + $all_subtask;
          $total_done = $done_task + $done_subtask; 
          if($total_all == $total_done)
          {
            //project
            $data = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$id);
            //project files                          
            $data2 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$id);
            //project invited members
            $data3 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$id);
            //project management
            $data4 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$id);
            //project management fields
            $data5 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$id);
            //project members
            $data6 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$id);
            //project suggested members
            $data7 = array(
                                          'project_file_it' => 'yes',
                                          'project_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$id);
            //project tasks
            $data8 = array(
                                            'task_file_it' => 'yes',
                                            'task_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data8); // xss filter
                      $this->Front_model->edit_project_tasks($data8,$id);
            //project subtasks
            $data9 = array(
                                            'subtask_file_it' => 'yes',
                                            'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data8 = $this->security->xss_clean($data9); // xss filter
                      $this->Front_model->edit_project_subtasks($data9,$id);
            //project cp
            $data10 = array(
                                            'cp_file_it' => 'yes',
                                            'cp_file_it_date' => date('Y-m-d H:i:s'),
                                          );
                      $data10 = $this->security->xss_clean($data10); // xss filter
                      $this->Front_model->edit_project_cp($data10,$id);
            //save history
            $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Filed By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);

          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Tasks and Subtasks to file it the Project!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
        //project
        $data = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->edit_Project($data,$id);
        //project files                          
        $data2 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data2 = $this->security->xss_clean($data2); // xss filter
                                  $this->Front_model->edit_project_files($data2,$id);
        //project invited members
        $data3 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data3 = $this->security->xss_clean($data3); // xss filter
                                  $this->Front_model->edit_project_invited_members($data3,$id);
        //project management
        $data4 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data4 = $this->security->xss_clean($data4); // xss filter
                                  $this->Front_model->edit_project_management($data4,$id);
        //project management fields
        $data5 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data5 = $this->security->xss_clean($data5); // xss filter
                                  $this->Front_model->edit_project_management_fields($data5,$id);
        //project members
        $data6 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data6 = $this->security->xss_clean($data6); // xss filter
                                  $this->Front_model->edit_project_members($data6,$id);
        //project suggested members
        $data7 = array(
                                      'project_file_it' => 'yes',
                                      'project_file_it_date' => date('Y-m-d H:i:s'),
                                  );
                                  $data7 = $this->security->xss_clean($data7); // xss filter
                                  $this->Front_model->edit_project_suggested_members($data7,$id);
        //project cp
        $data10 = array(
                                        'cp_file_it' => 'yes',
                                        'cp_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                  $data10 = $this->security->xss_clean($data10); // xss filter
                  $this->Front_model->edit_project_cp($data10,$id);
        //save history
        $hdata = array(
                                    'pid' => $id,
                                    'gid' => $res->gid,
                                    'sid' => $res->sid,
                                    'h_date' => date('Y-m-d H:i:s'),
                                    'h_resource_id' => $P_Owner->reg_id,
                                    'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                    'h_description' => 'Project Filed By Project Owner '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                );
                                $hdata = $this->security->xss_clean($hdata); // xss filter
                                $this->Front_model->insert_ProjectHistory($hdata);
             $this->session->set_flashdata('message','Project Filed Successfully!');
             $response['status'] = TRUE;
             header('Content-type: application/json');
             echo json_encode($response);
      }      
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function file_it_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $tid = $this->input->post('tid');
    $res = $this->Front_model->file_itcheck_Donetask($tid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $getTaskAllSubtask = $this->Front_model->file_itgetTaskAllSubtaskNotFile($tid);
    
    $res2 = $this->Front_model->file_itcheck_flag($tid);
    if($res2->flag == '0')
  {

    if($res)
    {
      if($getTaskAllSubtask)
      {
        $all_subtask = 0;
        $done_subtask = 0;

        if($getTaskAllSubtask)
          {
            foreach($getTaskAllSubtask as $all_stc)
              {
                $all_subtask++; 
              }
            foreach($getTaskAllSubtask as $done_stc)
              {
                if($done_stc->ststatus == 'done')
                  {
                    $done_subtask++;
                  } 
              }
          }

          if($all_subtask == $done_subtask)
          {
                $data = array(
                                          'task_file_it' => 'yes',
                                          'task_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

                $data = array(
                                          'subtask_file_it' => 'yes',
                                          'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_task_subtasks($data,$tid);

              if($res->tproject_assign != 0)
              {
                $hdata = array(
                                              'pid' => $res->tproject_assign,
                                              'gid' => $res->gid,
                                              'sid' => $res->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->tcode.' Task Filed by '.$powner->first_name.' '.$powner->last_name,
                                              'task_id' =>$res->tid
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
                  
                  $this->session->set_flashdata('message','Task Filed Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
          }
          else
          {
                $this->session->set_flashdata('al_message','Please Complete All Subtasks to File it the Task!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
          }
      }
      else
      {
          $data = array(
                                        'task_file_it' => 'yes',
                                        'task_file_it_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewTask($data,$tid);
          if($res->tproject_assign != 0)
              {
                $hdata = array(
                                              'pid' => $res->tproject_assign,
                                              'gid' => $res->gid,
                                              'sid' => $res->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->tcode.' Task Filed by '.$powner->first_name.' '.$powner->last_name,
                                              'task_id' =>$res->tid
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
            
            $this->session->set_flashdata('message','Task Filed Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    else
    {
                $this->session->set_flashdata('al_message','Please Complete Task to file it!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }
                

  }
  else{
            $this->session->set_flashdata('al_message','Please Stop Timer of task to file it!');
            $response['status'] = FALSE;
            header('Content-type: application/json');
            echo json_encode($response);

  }
    
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function file_it_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $res = $this->Front_model->file_itcheck_Donesubtask($stid);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res2 = $this->Front_model->file_itcheck_sflag($stid);
    if($res2->sflag == '0')
  {

    if($res)
    {
                  $data = array(
                                          'subtask_file_it' => 'yes',
                                          'subtask_file_it_date' => date('Y-m-d H:i:s'),
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);

                if($res->stproject_assign != 0)
                {
                    $hdata = array(
                                        'pid' => $res->stproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->stcode.' Subtask Filed by '.$powner->first_name.' '.$powner->last_name,
                                        'subtask_id' =>$res->stid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                }   

                  $this->session->set_flashdata('message','Subtask Filed Successfully!');
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);               
    } 
    else
    {
                $this->session->set_flashdata('al_message','Please Complete Subtask to file it!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }
  }
  else{
            $this->session->set_flashdata('al_message','Please Stop Timer of subtask to file it!');
            $response['status'] = FALSE;
            header('Content-type: application/json');
            echo json_encode($response);

  }   
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function file_it_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $res = $this->Front_model->file_itcheck_DonePlatform($pc_id);       
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

    if($res)
    {
          $data = array(
                                        'cp_file_it' => 'yes',
                                        'cp_file_it_date' => date('Y-m-d H:i:s'),
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);
          if($res->pc_project_assign != 0)
              {
                $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pc_project_assign);
                $hdata = array(
                                              'pid' => $res->pc_project_assign,
                                              'gid' => $get_gs_pid->gid,
                                              'sid' => $get_gs_pid->sid,
                                              'h_date' => date('Y-m-d H:i:s'),
                                              'h_resource_id' => $powner->reg_id,
                                              'h_resource' => $powner->first_name.' '.$powner->last_name,
                                              'h_description' => $res->pc_code.' Content Filed by '.$powner->first_name.' '.$powner->last_name,
                                              'pc_id' =>$res->pc_id
                                          );
                                          $hdata = $this->security->xss_clean($hdata); // xss filter
                                          $this->Front_model->insert_ProjectHistory($hdata);
              }
            
            $this->session->set_flashdata('message','Content Filed Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
    }
    else
    {
                $this->session->set_flashdata('al_message','Please Complete to File it!');
                $response['status'] = FALSE;
                header('Content-type: application/json');
                echo json_encode($response);
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function remove_remaining_array_module(){
    $target_module = $this->input->post('target_module');
    $target_value = $this->input->post('target_value');

    $array_element = '<a class="address_bar_module" onclick="goToModule(\''.$target_module.'\',\''.$target_value.'\');" href="javascript:void(0);">'.$target_value.'</a>';

    $file_array = $this->session->userdata('file_array');

    // Find the position of the key you're looking for.
    $position = array_search($array_element, array_values($file_array));

    // If a position is found, splice the array.
    if ($position !== false) {
        array_splice($file_array, ($position + 1));
    }

    $this->session->set_userdata('file_array',$file_array);
  }

  public function remove_last_array_module(){
    $file_array = $this->session->userdata('file_array');
    array_pop($file_array);
    $this->session->set_userdata('file_array',$file_array);
  }

  public function show_module_folders(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $previous_module = $this->input->post('previous_module');
    $deptcnt = $this->input->post('deptcnt');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $goals_count1 = $this->Front_model->file_itGoalsCountDeptWise($portfolio_id,$department_id);
    $goals_count2 = $this->Front_model->file_itAcceptedGoalsCountDeptWise($portfolio_id,$department_id);

    $strategies_count1 = $this->Front_model->file_itStrategiesCountDeptWise($portfolio_id,$department_id);
    $strategies_count2 = $this->Front_model->file_itAcceptedStrategiesCountDeptWise($portfolio_id,$department_id);

    $project_count1 = $this->Front_model->file_itProjectCountDeptWise($portfolio_id,$department_id);
    $project_count2 = $this->Front_model->file_itAcceptedProjectCountDeptWise($portfolio_id,$department_id);

    $task_count = $this->Front_model->file_itTaskCountDeptWise($portfolio_id,$department_id);
    $single_task_count = $this->Front_model->file_itSingleTaskCountDeptWise($portfolio_id,$department_id);

    $subtask_count = $this->Front_model->file_itSubtaskCountDeptWise($portfolio_id,$department_id);
    $single_subtask_count = $this->Front_model->file_itSingleSubtaskCountDeptWise($portfolio_id,$department_id);

    $platform_count = $this->Front_model->file_itPlatformCountDeptWise($portfolio_id,$department_id);
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $total_count = intval($project_count1)+intval($project_count2)+intval($task_count)+intval($single_task_count)+intval($subtask_count)+intval($single_subtask_count)+intval($platform_count)+intval($goals_count1)+intval($goals_count2)+intval($strategies_count1)+intval($strategies_count2);
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'module_folders\',\''.$dept_del->department.'\');" href="javascript:void(0);">'.$dept_del->department.'</a>';
    $file_array = array($array_element);
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'goal','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Goals</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo intval($goals_count1)+intval($goals_count2); ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div>
      <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'kpi','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">KPIs</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo intval($strategies_count1)+intval($strategies_count2); ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div>
      <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'project','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Projects</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo intval($project_count1)+intval($project_count2); ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div>
      <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'task','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Tasks</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo intval($task_count)+intval($single_task_count); ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div>
      <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'subtask','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Subtasks</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo intval($subtask_count)+intval($single_subtask_count); ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div>
      <!-- <div class="col-xl-4 col-sm-6">
          <div class="card border shadow-none mb-2 btn-outline-light">
              <a href="#" onclick="return show_module_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $deptcnt; ?>,'platform','module_folders');" class="text-body">
                  <div class="p-2">
                      <div class="d-flex">
                          <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                              <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                  <i class="mdi mdi-folder-multiple-outline"></i>
                              </div>
                          </div>
                          <div class="overflow-hidden me-auto">
                              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Content Planner</h5>
                              <p class="text-muted text-truncate mb-0"><?php echo $platform_count; ?> Folder(s)</p>
                          </div>
                      </div>
                  </div>
              </a>
          </div>
      </div> -->
    </div>
    <?php
  }

  public function show_module_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $deptcnt = $this->input->post('deptcnt');
    $dept_del = $this->Front_model->get_PDepartment($department_id);
    $current_module = $this->input->post('current_module');
    $previous_module = $this->input->post('previous_module');
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <?php
    if($current_module == 'goal'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'goal\',\'Goals\');" href="javascript:void(0);">Goals</a>';
      array_push($file_array, $array_element); 
      $this->session->set_userdata('file_array',$file_array);
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <div class="row">
        <?php
        $file_itGoals1 = $this->Front_model->file_itGoalsDeptWise($portfolio_id,$department_id);
        $file_itGoals2 = $this->Front_model->file_itAcceptedGoalsDeptWise($portfolio_id,$department_id);
        if($file_itGoals1){
            $goalcnt=1;
            foreach ($file_itGoals1 as $ag) {    
                $goal_id = $ag->gid;
                $goal_strategies_count = $this->Front_model->file_itStrategiesCountGoalWise($portfolio_id,$department_id,$goal_id);                        
                ?>
                <div class="col-xl-4 col-sm-6">
                    <div class="card border shadow-none mb-2 btn-outline-light">
                        <a href="#" onclick="return kpi_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $goal_id; ?>,<?php echo $deptcnt; ?>,'goal');" class="text-body">
                            <div class="p-2">
                                <div class="d-flex">
                                    <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                        <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                            <i class="mdi mdi-folder-multiple-outline"></i>
                                        </div>
                                    </div>
                                    <div class="overflow-hidden me-auto">
                                        <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $ag->gname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return GoalOverviewModal(<?php echo $goal_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                        <p class="text-muted text-truncate mb-0"><?php echo $goal_strategies_count; ?> KPI(s)</p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
                <?php
                $goalcnt++;
            }
        }

        if($file_itGoals2){
            $goalcnt=1;
            foreach ($file_itGoals2 as $aag) {    
                $goal_id = $aag->gid;                
                $ag = $this->Front_model->file_itGoalDetail($goal_id);                        
                $goal_strategies_count = $this->Front_model->file_itStrategiesCountGoalWise($portfolio_id,$department_id,$goal_id);                        
                ?>
                <div class="col-xl-4 col-sm-6">
                    <div class="card border shadow-none mb-2 btn-outline-light">
                        <a href="#" onclick="return kpi_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $goal_id; ?>,<?php echo $deptcnt; ?>,'goal');" class="text-body">
                            <div class="p-2">
                                <div class="d-flex">
                                    <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                        <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                            <i class="mdi mdi-folder-multiple-outline"></i>
                                        </div>
                                    </div>
                                    <div class="overflow-hidden me-auto">
                                        <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $ag->gname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return GoalOverviewModal(<?php echo $goal_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                        <p class="text-muted text-truncate mb-0"><?php echo $goal_strategies_count; ?> KPI(s)</p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
                <?php
                $goalcnt++;
            }
        }
        ?>                        
      </div> 
      <?php
    }
    else if($current_module == 'kpi'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'kpi\',\'KPIs\');" href="javascript:void(0);">KPIs</a>';
      array_push($file_array, $array_element);   
      $this->session->set_userdata('file_array',$file_array);
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <!-- Preview Names of all KPIs -->
      <div class="row">
        <?php
        $file_itStrategies1 = $this->Front_model->file_itStrategiesDeptWise($portfolio_id,$department_id);
        $file_itStrategies2 = $this->Front_model->file_itAcceptedStrategiesDeptWise($portfolio_id,$department_id);
        if($file_itStrategies1){
          foreach ($file_itStrategies1 as $fgs) {
            $strategy_id = $fgs->sid;
            $goal_project_count = $this->Front_model->file_itProjectsCountStrategyWise($portfolio_id,$department_id,$strategy_id);   
            ?>
            <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return project_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $strategy_id; ?>,<?php echo $deptcnt; ?>,'kpi');" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                        <i class="mdi mdi-folder-multiple-outline"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgs->sname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return StrategiesOverviewModal(<?php echo $strategy_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                    <p class="text-muted text-truncate mb-0"><?php echo $goal_project_count; ?> Project(s)</p>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
            <?php
          }
        } 

        if($file_itStrategies2){
          foreach ($file_itStrategies2 as $ffgs) {
            $strategy_id = $ffgs->sid;
            $fgs = $this->Front_model->file_itStrategyDetail($strategy_id);
            $goal_project_count = $this->Front_model->file_itProjectsCountStrategyWise($portfolio_id,$department_id,$strategy_id);   
            ?>
            <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return project_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $strategy_id; ?>,<?php echo $deptcnt; ?>,'kpi');" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                        <i class="mdi mdi-folder-multiple-outline"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgs->sname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return StrategiesOverviewModal(<?php echo $strategy_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                    <p class="text-muted text-truncate mb-0"><?php echo $goal_project_count; ?> Project(s)</p>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
            <?php
          }
        } 
        ?>                     
      </div>
      <?php
    }
    else if($current_module == 'project'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'project\',\'Projects\');" href="javascript:void(0);">Projects</a>';
      array_push($file_array, $array_element);  
      $this->session->set_userdata('file_array',$file_array);
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <!-- Preview Names of all Projects -->
      <div class="row">
        <?php          
        $file_itProjects1 = $this->Front_model->file_itProjectsDeptWise($portfolio_id,$department_id);    
        $file_itProjects2 = $this->Front_model->file_itAcceptedProjectsDeptWise($portfolio_id,$department_id);    
        if($file_itProjects1){
          foreach ($file_itProjects1 as $fgp) {
            $project_id = $fgp->pid;
            $project_file_it = $fgp->project_file_it;
            $goal_task_count = $this->Front_model->file_itTasksCountProjectWise($portfolio_id,$department_id,$project_id); 
            $goal_platform_count = $this->Front_model->file_itPlatformCountProjectWise($portfolio_id,$department_id,$project_id); 
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return task_cp_folders(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'<?php echo $project_file_it; ?>','project');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgp->pname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return ProjectOverviewModal(<?php echo $project_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                  <p class="text-muted text-truncate mb-0"><?php echo $goal_task_count; ?> Task(s), <?php echo $goal_platform_count; ?> Content Planner(s)</p>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php
          }
        }

        if($file_itProjects2){
          foreach ($file_itProjects2 as $ffgp) {
            $project_id = $ffgp->pid;
            $fgp = $this->Front_model->file_itProjectDetail2($project_id);
            $project_file_it = $fgp->project_file_it;
            $goal_task_count = $this->Front_model->file_itTasksCountProjectWise($portfolio_id,$department_id,$project_id); 
            $goal_platform_count = $this->Front_model->file_itPlatformCountProjectWise($portfolio_id,$department_id,$project_id); 
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return task_cp_folders(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'<?php echo $project_file_it; ?>','project');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgp->pname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return ProjectOverviewModal(<?php echo $project_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                  <p class="text-muted text-truncate mb-0"><?php echo $goal_task_count; ?> Task(s), <?php echo $goal_platform_count; ?> Content Planner(s)</p>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php
          }
        }
        ?>
      </div>
      <?php
    }
    else if($current_module == 'task'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'task\',\'Tasks\');" href="javascript:void(0);">Tasks</a>';
      array_push($file_array, $array_element); 
      $this->session->set_userdata('file_array',$file_array); 
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <!-- Preview Names of all Tasks -->
      <div class="row">
        <?php
        $file_itTasks = $this->Front_model->file_itTasksDeptWise($portfolio_id,$department_id);
        if($file_itTasks){
          foreach ($file_itTasks as $fgt) {
            $task_id = $fgt->tid;
            $goal_subtask_count = $this->Front_model->file_itSubtaskCountTaskWise($portfolio_id,$department_id,$task_id); 
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return subtask_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $task_id; ?>,<?php echo $deptcnt; ?>,'task');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgt->tname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return TaskOverviewModal(<?php echo $task_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                  <p class="text-muted text-truncate mb-0"><?php echo $goal_subtask_count; ?> Subtask(s)</p>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php
          }
        }
        $file_itSingleTasks = $this->Front_model->file_itSingleTasksDeptWise($portfolio_id,$department_id);
          if($file_itSingleTasks){
            foreach ($file_itSingleTasks as $asgt) {
              $task_id = $asgt->tid;
              $task_subtask_count = $this->Front_model->file_itSubtaskCountTaskWise($portfolio_id,$department_id,$task_id);                           
              ?>
              <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return subtask_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $task_id; ?>,<?php echo $deptcnt; ?>);" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                        <i class="mdi mdi-folder-multiple-outline"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $asgt->tname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return TaskOverviewModal(<?php echo $task_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                    <p class="text-muted text-truncate mb-0"><?php echo $task_subtask_count; ?> Subtask(s)</p>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
              </div>
              <?php
            }
          }       
        ?>
      </div> 
      <?php
    }
    else if($current_module == 'subtask'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'subtask\',\'Subtasks\');" href="javascript:void(0);">Subtasks</a>';
      array_push($file_array, $array_element);  
      $this->session->set_userdata('file_array',$file_array);
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <!-- Preview Names of all Subtask -->
      <div class="row">
        <?php
        $file_itSubtasks = $this->Front_model->file_itSubtasksDeptWise($portfolio_id,$department_id);
        if($file_itSubtasks){
          foreach ($file_itSubtasks as $fgst) {
            $subtask_id = $fgst->stid;
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return subtask_files(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $subtask_id; ?>,<?php echo $deptcnt; ?>,'subtask');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgst->stname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return SubtaskOverviewModal(<?php echo $subtask_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php
          }
        }
        $file_itSingleSubtasks = $this->Front_model->file_itSingleSubtasksDeptWise($portfolio_id,$department_id);
          if($file_itSingleSubtasks){
            foreach ($file_itSingleSubtasks as $asgst) {
              $subtask_id = $asgst->stid;                        
              ?>
              <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return subtask_files(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $subtask_id; ?>,<?php echo $deptcnt; ?>);" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                        <i class="mdi mdi-folder-multiple-outline"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $asgst->stname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return SubtaskOverviewModal(<?php echo $subtask_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
              </div>
              <?php
            }
          }
       ?> 
      </div> 
      <?php
    }
    else if($current_module == 'platform'){
      $file_array = $this->session->userdata('file_array');
      $array_element = '<a class="address_bar_module" onclick="goToModule(\'platform\',\'Content\');" href="javascript:void(0);">Content</a>';
      array_push($file_array, $array_element); 
      $this->session->set_userdata('file_array',$file_array);
      $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
      ?>
      <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
      <!-- Preview Names of all Platform -->
      <div class="row">
        <?php
        $file_itPlatform = $this->Front_model->file_itPlatformDeptWise($portfolio_id,$department_id);
        if($file_itPlatform){
          foreach ($file_itPlatform as $agp) {
            $platform_id = $agp->pc_id;                            
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return cp_files(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $platform_id; ?>,<?php echo $deptcnt; ?>,'platform');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1">
                                    <?php
                                    if($agp->platform == 'twitter')
                                    {
                                        echo '<i class="fab fa-twitter font-size-24 social-d mr-0" title="Twitter"></i>';
                                    }else if($agp->platform == 'facebook')
                                    {
                                        echo '<i class="fab fa-facebook font-size-24 social-d mr-0" title="Facebook"></i>';
                                    }else if($agp->platform == 'instagram')
                                    {
                                        echo '<i class="fab fa-instagram font-size-24 social-d mr-0" title="Instagram"></i>';
                                    }else if($agp->platform == 'linkedin')
                                    {
                                        echo '<i class="fab fa-linkedin font-size-24 social-d mr-0" title="LinkedIn"></i>';
                                    }else if($agp->platform == 'google-my-business')
                                    {
                                        echo '<i class="mdi mdi-google-my-business font-size-24 social-d mr-0" title="Google My Business"></i>';
                                    }else if($agp->platform == 'pinterest')
                                    {
                                        echo '<i class="fab fa-pinterest font-size-24 social-d mr-0" title="Pinterest"></i>';
                                    }else if($agp->platform == 'youtube')
                                    {
                                        echo '<i class="fab fa-youtube font-size-24 social-d mr-0" title="YouTube"></i>';
                                    }else if($agp->platform == 'blogger')
                                    {
                                        echo '<i class="fab fa-blogger font-size-24 social-d mr-0" title="Blog"></i>';
                                    }else if($agp->platform == 'tiktok')
                                    {
                                        echo '<i class="fab fa-tiktok font-size-24 social-d mr-0" title="TikTok"></i>';
                                    }else{
                                        echo $agp->platform;
                                    }
                                    ?>
                                  </span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return show_platform_modal('file-cabinet','<?php echo $agp->platform; ?>',<?php echo $platform_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php 
          }
        }
        ?>
      </div>
      <?php
    }
  }

  public function show_kpi_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $goal_id = $this->input->post('goal_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');

    $dept_del = $this->Front_model->get_PDepartment($department_id);
    $goal_del = $this->Front_model->file_itGoalDetail($goal_id);
    $file_itGoalStrategy = $this->Front_model->file_itStrategiesGoalWise($portfolio_id,$department_id,$goal_id);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'kpi\',\'KPIs\');" href="javascript:void(0);">KPIs</a>';
      array_push($file_array, $array_element); 
    $this->session->set_userdata('file_array',$file_array); 
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array);
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php
      if($file_itGoalStrategy){
        foreach ($file_itGoalStrategy as $fgs) {
            $strategy_id = $fgs->sid;
            $goal_project_count1 = $this->Front_model->file_itProjectsCountStrategyWise($portfolio_id,$department_id,$strategy_id);   
            $goal_project_count2 = $this->Front_model->file_itAcceptedProjectsCountStrategyWise($portfolio_id,$department_id,$strategy_id);   
            ?>
            <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return project_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $strategy_id; ?>,<?php echo $deptcnt; ?>,'kpi');" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                        <i class="mdi mdi-folder-multiple-outline"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgs->sname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return StrategiesOverviewModal(<?php echo $strategy_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                    <p class="text-muted text-truncate mb-0"><?php echo intval($goal_project_count1)+intval($goal_project_count2); ?> Project(s)</p>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
            <?php
          }
        } 
        ?>                     
    </div>
    <?php
  }

  public function show_project_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $strategy_id = $this->input->post('strategy_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);
    $strategy_del = $this->Front_model->file_itStrategyDetail($strategy_id);
    // $goal_del = $this->Front_model->GoalDetail($strategy_del->gid);
    $file_itGoalProject1 = $this->Front_model->file_itProjectsStrategyWise($portfolio_id,$department_id,$strategy_id);
    $file_itGoalProject2 = $this->Front_model->file_itAcceptedProjectsStrategyWise($portfolio_id,$department_id,$strategy_id);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'project\',\'Projects\');" href="javascript:void(0);">Projects</a>';
      array_push($file_array, $array_element);  
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php             
      if($file_itGoalProject1){
        foreach ($file_itGoalProject1 as $fgp) {
          $project_id = $fgp->pid;
          $project_file_it = $fgp->project_file_it;
          $goal_task_count = $this->Front_model->file_itTasksCountProjectWise($portfolio_id,$department_id,$project_id); 
          $goal_platform_count = $this->Front_model->file_itPlatformCountProjectWise($portfolio_id,$department_id,$project_id); 
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="card border shadow-none mb-2 btn-outline-light">
                <a href="#" onclick="return task_cp_folders(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'<?php echo $project_file_it; ?>','project');" class="text-body">
                    <div class="p-2">
                        <div class="d-flex">
                            <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                    <i class="mdi mdi-folder-multiple-outline"></i>
                                </div>
                            </div>
                            <div class="overflow-hidden me-auto">
                                <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgp->pname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return ProjectOverviewModal(<?php echo $project_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                <p class="text-muted text-truncate mb-0"><?php echo $goal_task_count; ?> Task(s), <?php echo $goal_platform_count; ?> Content Planner(s)</p>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
          </div>
          <?php
        }
      }

      if($file_itGoalProject2){
        foreach ($file_itGoalProject2 as $ffgp) {
          $project_id = $ffgp->pid;
          $fgp = $this->Front_model->file_itProjectDetail2($project_id);
          $project_file_it = $fgp->project_file_it;
          $goal_task_count = $this->Front_model->file_itTasksCountProjectWise($portfolio_id,$department_id,$project_id); 
          $goal_platform_count = $this->Front_model->file_itPlatformCountProjectWise($portfolio_id,$department_id,$project_id); 
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="card border shadow-none mb-2 btn-outline-light">
                <a href="#" onclick="return task_cp_folders(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'<?php echo $project_file_it; ?>','project');" class="text-body">
                    <div class="p-2">
                        <div class="d-flex">
                            <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                    <i class="mdi mdi-folder-multiple-outline"></i>
                                </div>
                            </div>
                            <div class="overflow-hidden me-auto">
                                <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgp->pname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return ProjectOverviewModal(<?php echo $project_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                <p class="text-muted text-truncate mb-0"><?php echo $goal_task_count; ?> Task(s), <?php echo $goal_platform_count; ?> Content Planner(s)</p>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
          </div>
          <?php
        }
      }
      ?>
    </div>
    <?php
  }

  public function show_task_cp_folders(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $project_id = $this->input->post('project_id');
    $project_file_it = $this->input->post('project_file_it');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');

    $dept_del = $this->Front_model->get_PDepartment($department_id);
    $proj_del = $this->Front_model->file_itProjectDetail2($project_id);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $goal_task_count = $this->Front_model->file_itTasksCountProjectWise($portfolio_id,$department_id,$project_id); 
    $goal_platform_count = $this->Front_model->file_itPlatformCountProjectWise($portfolio_id,$department_id,$project_id); 

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'task_cp_folders\',\'Task-Content-Folders\');" href="javascript:void(0);">Task-Content-Folders</a>';
      array_push($file_array, $array_element);  
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <div class="col-xl-4 col-sm-6">
        <div class="card border shadow-none mb-2 btn-outline-light">
            <a href="#" onclick="return task_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'task_cp_folders');" class="text-body">
              <div class="p-2">
                  <div class="d-flex">
                      <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                          <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                              <i class="mdi mdi-folder-multiple-outline"></i>
                          </div>
                      </div>
                      <div class="overflow-hidden me-auto">
                          <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Tasks</h5>
                          <p class="text-muted text-truncate mb-0"><?php echo $goal_task_count; ?> Folder(s)</p>
                      </div>
                  </div>
              </div>
            </a>
        </div>
      </div>
      <div class="col-xl-4 col-sm-6">
        <div class="card border shadow-none mb-2 btn-outline-light">
            <a href="#" onclick="return cp_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $project_id; ?>,<?php echo $deptcnt; ?>,'task_cp_folders');" class="text-body">
              <div class="p-2">
                  <div class="d-flex">
                      <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                          <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                              <i class="mdi mdi-folder-multiple-outline"></i>
                          </div>
                      </div>
                      <div class="overflow-hidden me-auto">
                          <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">Content Planner</h5>
                          <p class="text-muted text-truncate mb-0"><?php echo $goal_platform_count; ?> Folder(s)</p>
                      </div>
                  </div>
              </div>
            </a>
        </div>
      </div>              
      <?php
      $project_files = $this->Front_model->getProjectfilesbyPid($project_id);
      if($project_files && $project_file_it == 'yes'){
        foreach ($project_files as $pf) {
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="card border shadow-none mb-2 btn-outline-light">
                <a href="#" onclick="return previewModalFullscreen(<?php echo $pf->pfile_id;?>)" class="text-body">
                    <div class="p-2">
                        <div class="d-flex">
                            <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                <div class="avatar-title rounded bg-transparent text-d font-size-20">
                                    <i class="mdi mdi-file-document"></i>
                                </div>
                            </div>
                            <div class="overflow-hidden me-auto">
                                <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1"><?php echo $pf->pfile; ?></h5>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
          </div>  
          <?php
        }
      }
      ?>
    </div>
    <?php       
  }

  public function show_task_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $project_id = $this->input->post('project_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $proj_del = $this->Front_model->file_itProjectDetail2($project_id);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'task\',\'Tasks\');" href="javascript:void(0);">Tasks</a>';
      array_push($file_array, $array_element);   
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php
      $file_itGoalTask = $this->Front_model->file_itTasksProjectWise($portfolio_id,$department_id,$project_id); 
      if($file_itGoalTask){
        foreach ($file_itGoalTask as $fgt) {
          $task_id = $fgt->tid;
          $goal_subtask_count = $this->Front_model->file_itSubtaskCountTaskWise($portfolio_id,$department_id,$task_id); 
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="card border shadow-none mb-2 btn-outline-light">
                <a href="#" onclick="return subtask_names(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $task_id; ?>,<?php echo $deptcnt; ?>,'task');" class="text-body">
                    <div class="p-2">
                        <div class="d-flex">
                            <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                    <i class="mdi mdi-folder-multiple-outline"></i>
                                </div>
                            </div>
                            <div class="overflow-hidden me-auto">
                                <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgt->tname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return TaskOverviewModal(<?php echo $task_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                                <p class="text-muted text-truncate mb-0"><?php echo $goal_subtask_count; ?> Subtask(s)</p>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
          </div>
          <?php
        }
      }        
      ?>
    </div>
    <?php     
  }

  public function show_cp_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $project_id = $this->input->post('project_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $proj_del = $this->Front_model->file_itProjectDetail2($project_id);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'platform\',\'Content\');" href="javascript:void(0);">Content</a>';
      array_push($file_array, $array_element);    
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php
      $file_itGoalPlatform = $this->Front_model->file_itPlatformProjectWise($portfolio_id,$department_id,$project_id);
      if($file_itGoalPlatform){
        foreach ($file_itGoalPlatform as $agp) {
          $platform_id = $agp->pc_id;                            
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="card border shadow-none mb-2 btn-outline-light">
                <a href="#" onclick="return cp_files(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $platform_id; ?>,<?php echo $deptcnt; ?>,'platform');" class="text-body">
                    <div class="p-2">
                        <div class="d-flex">
                            <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                    <i class="mdi mdi-folder-multiple-outline"></i>
                                </div>
                            </div>
                            <div class="overflow-hidden me-auto">
                                <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1">
                                  <?php
                                    if($agp->platform == 'twitter')
                                    {
                                        echo '<i class="fab fa-twitter font-size-24 social-d mr-0" title="Twitter"></i>';
                                    }else if($agp->platform == 'facebook')
                                    {
                                        echo '<i class="fab fa-facebook font-size-24 social-d mr-0" title="Facebook"></i>';
                                    }else if($agp->platform == 'instagram')
                                    {
                                        echo '<i class="fab fa-instagram font-size-24 social-d mr-0" title="Instagram"></i>';
                                    }else if($agp->platform == 'linkedin')
                                    {
                                        echo '<i class="fab fa-linkedin font-size-24 social-d mr-0" title="LinkedIn"></i>';
                                    }else if($agp->platform == 'google-my-business')
                                    {
                                        echo '<i class="mdi mdi-google-my-business font-size-24 social-d mr-0" title="Google My Business"></i>';
                                    }else if($agp->platform == 'pinterest')
                                    {
                                        echo '<i class="fab fa-pinterest font-size-24 social-d mr-0" title="Pinterest"></i>';
                                    }else if($agp->platform == 'youtube')
                                    {
                                        echo '<i class="fab fa-youtube font-size-24 social-d mr-0" title="YouTube"></i>';
                                    }else if($agp->platform == 'blogger')
                                    {
                                        echo '<i class="fab fa-blogger font-size-24 social-d mr-0" title="Blog"></i>';
                                    }else if($agp->platform == 'tiktok')
                                    {
                                        echo '<i class="fab fa-tiktok font-size-24 social-d mr-0" title="TikTok"></i>';
                                    }else{
                                        echo $agp->platform;
                                    }
                                    ?>
                                </span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return show_platform_modal('file-cabinet','<?php echo $agp->platform; ?>',<?php echo $platform_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
          </div>
          <?php 
        }
      }
      ?>
    </div>   
    <?php  
  }

  public function show_cp_files(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $platform_id = $this->input->post('platform_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $plat_del = $this->Front_model->getContentPlanningById($platform_id);
    $proj_del = $this->Front_model->file_itProjectDetail2($plat_del->pc_project_assign);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" href="javascript:void(0);">Content Files</a>';
      array_push($file_array, $array_element);  
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php
      $cpdel = $this->Front_model->getContentPlanningById($platform_id); 
      $platform_files = $cpdel->pc_file;
      $doc_pc_files = $cpdel->doc_pc_file;
      if($platform_files || $doc_pc_files){
          if($platform_files && $cpdel->cp_file_it == 'yes'){
            $platform_files_array = explode(',', $platform_files);
            foreach ($platform_files_array as $cpf) {
            ?>
              <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return PreviewContentFile('<?php echo $cpf; ?>',<?php echo $platform_id;?>);" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-d font-size-20">
                                        <i class="mdi mdi-file-document"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1"><?php echo $cpf; ?></h5>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
              </div>
            <?php
            }                                            
          }
          if($doc_pc_files && $cpdel->cp_file_it == 'yes'){
            $doc_pc_files_array = explode(',', $doc_pc_files);
            foreach ($doc_pc_files_array as $dcpf) {
            ?>
              <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return PreviewContentFile('<?php echo $dcpf; ?>',<?php echo $platform_id;?>);" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-d font-size-20">
                                        <i class="mdi mdi-file-document"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1"><?php echo $dcpf; ?></h5>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
              </div>
            <?php
            }
          }                                   
        }else{
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="p-2">
              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">No Files</h5>
            </div>
          </div>
          <?php
        }
      ?>
    </div> 
    <?php   
  }

  public function show_subtask_names(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $task_id = $this->input->post('task_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $task_del = $this->Front_model->file_itget_task_details($task_id);
    $proj_del = $this->Front_model->file_itProjectDetail2($task_del->tproject_assign);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" onclick="goToModule(\'subtask\',\'Subtasks\');" href="javascript:void(0);">Subtasks</a>';
      array_push($file_array, $array_element);  
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>
    <div class="row">
      <?php
      $file_itGoalSubtask = $this->Front_model->file_itSubtasksTaskWise($portfolio_id,$department_id,$task_id); 
      if($file_itGoalSubtask){
        foreach ($file_itGoalSubtask as $fgst) {
            $subtask_id = $fgst->stid;
            ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return subtask_files(<?php echo $portfolio_id; ?>,<?php echo $department_id; ?>,<?php echo $subtask_id; ?>,<?php echo $deptcnt; ?>,'subtask');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-dark font-size-20">
                                      <i class="mdi mdi-folder-multiple-outline"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <span style="font-weight: 600" class="font-size-14 text-dark text-truncate mb-1"><?php echo $fgst->stname; ?></span>&nbsp;<a title="Overview" href="javascript:void(0);" onclick="return SubtaskOverviewModal(<?php echo $subtask_id;?>)"><i class="mdi mdi-eye-outline text-d"></i></a>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
            <?php
        }
      }
      $tdel = $this->Front_model->file_itgetTasksDetail($task_id); 
      $task_files = $tdel->tfile;
      $task_files_array = explode(',', $task_files);
      if($task_files && $tdel->task_file_it == 'yes'){
          foreach ($task_files_array as $tf) {
          ?>
            <div class="col-xl-4 col-sm-6">
              <div class="card border shadow-none mb-2 btn-outline-light">
                  <a href="#" onclick="return PreviewTaskFile('<?php echo $tf;?>','<?php echo $task_id;?>');" class="text-body">
                      <div class="p-2">
                          <div class="d-flex">
                              <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                  <div class="avatar-title rounded bg-transparent text-d font-size-20">
                                      <i class="mdi mdi-file-document"></i>
                                  </div>
                              </div>
                              <div class="overflow-hidden me-auto">
                                  <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1"><?php echo $tf; ?></h5>
                              </div>
                          </div>
                      </div>
                  </a>
              </div>
            </div>
          <?php
          }
        }
       ?> 
    </div>
    <?php     
  }

  public function show_subtask_files(){
    $portfolio_id = $this->input->post('portfolio_id');
    $department_id = $this->input->post('department_id');
    $subtask_id = $this->input->post('subtask_id');
    $deptcnt = $this->input->post('deptcnt');
    $previous_module = $this->input->post('previous_module');
    $dept_del = $this->Front_model->get_PDepartment($department_id);

    $subtask_del = $this->Front_model->getSubtaskById($subtask_id);
    $task_del = $this->Front_model->file_itget_task_details($subtask_del->tid);
    $proj_del = $this->Front_model->file_itProjectDetail2($task_del->tproject_assign);
    // $strategy_del = $this->Front_model->file_itStrategyDetail($proj_del->sid);
    // $goal_del = $this->Front_model->file_itGoalDetail($strategy_del->gid);

    $file_array = $this->session->userdata('file_array');
    $array_element = '<a class="address_bar_module" href="javascript:void(0);">Subtask Files</a>';
      array_push($file_array, $array_element); 
    $this->session->set_userdata('file_array',$file_array);
    $address_bar = implode(" <i class='mdi mdi-play'></i> ", $file_array); 
    ?>
    <i class="mdi mdi-arrow-left-bold-circle font-size-30 cursor-pointer" onclick="goBack('<?php echo $previous_module; ?>');"></i>
    <p class="module-address-bar form-control"><span><?php echo $address_bar; ?></span></p>

    <div class="row">
      <?php
      $stdel = $this->Front_model->getSubtaskById($subtask_id); 
      $subtask_files = $stdel->stfile;
      if($subtask_files){
        if($subtask_files && $stdel->subtask_file_it == 'yes'){
            $subtask_files_array = explode(',', $subtask_files);                                        
            foreach ($subtask_files_array as $stf) {
            ?>
              <div class="col-xl-4 col-sm-6">
                <div class="card border shadow-none mb-2 btn-outline-light">
                    <a href="#" onclick="return PreviewSubtaskFile('<?php echo $stf; ?>',<?php echo $subtask_id;?>);" class="text-body">
                        <div class="p-2">
                            <div class="d-flex">
                                <div class="btn btn-light waves-effect avatar-xs align-self-center me-2">
                                    <div class="avatar-title rounded bg-transparent text-d font-size-20">
                                        <i class="mdi mdi-file-document"></i>
                                    </div>
                                </div>
                                <div class="overflow-hidden me-auto">
                                    <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1"><?php echo $stf; ?></h5>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
              </div>
            <?php
            }                                            
          }                                 
        }else{
          ?>
          <div class="col-xl-4 col-sm-6">
            <div class="p-2">
              <h5 style="font-weight: 600" class="font-size-14 text-truncate mb-1">No Files</h5>
            </div>
          </div>
          <?php
        }
      ?>
    </div> 
    <?php     
  }

  public function reopen_goal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_goals = trim($getPackDetail->pack_goals);
            $used_goals = trim($getGoalCount['goal_count_rows']);
            $check_type = is_numeric($total_goals);
            if($check_type == 'true')
            {
              if($used_goals < $total_goals)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getGoalCount = $this->Front_model->getGoalCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_goals = trim($getPackDetail->pack_goals);
          $used_goals = trim($getGoalCount['goal_count_rows']);
          $check_type = is_numeric($total_goals);
          if($check_type == 'true')
          {
            if($used_goals < $total_goals)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('goals', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getGoalCount = $this->Front_model->getGoalCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_goals = trim($getPackDetail->pack_goals);
              $used_goals = trim($getGoalCount['goal_count_rows']);
              $check_type = is_numeric($total_goals);
              if($check_type == 'true')
              {
                if($used_goals < $total_goals)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('gid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_goal_file_it($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          $checkGoalPorfoliofile_it = $this->Front_model->checkProjectPorfoliofile_it($res->portfolio_id);
          if($checkGoalPorfoliofile_it > 0)
          {
               $this->session->set_flashdata('al_message','Portfolio is Filed! To Reopen Goal please Reopen Portfolio!');
               $response['status'] = FALSE;
               header('Content-type: application/json');
               echo json_encode($response);
          }
          else
          {
            //goal
            $gdata = array(
                                          'g_file_it' => '',
                                          'g_file_it_date' => '',
                                      );
                                      $gdata = $this->security->xss_clean($gdata); // xss filter
                                      $this->Front_model->editGoal($gdata,$id);

            //goal invited members
            $data3 = array(
                                          'g_file_it' => '',
                                          'g_file_it_date' => '',
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_goal_invited_members($data3,$id);


            //goal members
            $data6 = array(
                                          'g_file_it' => '',
                                          'g_file_it_date' => '',
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_goal_members($data6,$id);
            //goal suggested members
            $data7 = array(
                                          'g_file_it' => '',
                                          'g_file_it_date' => '',
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_goal_suggested_members($data7,$id);

            //strategies
            $g_strategies = $this->Front_model->GoalsAllStrategiesList_to_delete($id);//all stratgies to reopen
            if($g_strategies)
            {
               foreach($g_strategies as $gs)
               {
                  $sdata = array(
                                      's_file_it' => '',
                                      's_file_it_date' => '',
                                  );
                                  $sdata = $this->security->xss_clean($sdata); // xss filter
                                  $this->Front_model->editStrategies($sdata,$gs->sid);
                  $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($gs->sid);//all projects to reopen
                  if($s_projects)
                  {
                     foreach($s_projects as $sp)
                     {
                      //project
                      $data = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data = $this->security->xss_clean($data); // xss filter
                                      $this->Front_model->edit_Project($data,$sp->pid);
                      //project files                          
                      $data2 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data2 = $this->security->xss_clean($data2); // xss filter
                                      $this->Front_model->edit_project_files($data2,$sp->pid);
                      //project invited members
                      $data3 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data3 = $this->security->xss_clean($data3); // xss filter
                                      $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                      //project management
                      $data4 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data4 = $this->security->xss_clean($data4); // xss filter
                                      $this->Front_model->edit_project_management($data4,$sp->pid);
                      //project management fields
                      $data5 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data5 = $this->security->xss_clean($data5); // xss filter
                                      $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                      //project members
                      $data6 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data6 = $this->security->xss_clean($data6); // xss filter
                                      $this->Front_model->edit_project_members($data6,$sp->pid);
                      //project suggested members
                      $data7 = array(
                                          'project_file_it' => '',
                                          'project_file_it_date' => '',
                                      );
                                      $data7 = $this->security->xss_clean($data7); // xss filter
                                      $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                      //project tasks
                      $data8 = array(
                                          'task_file_it' => '',
                                          'task_file_it_date' => '',
                                      );
                                      $data8 = $this->security->xss_clean($data8); // xss filter
                                      $this->Front_model->edit_project_tasks($data8,$sp->pid);
                      //project subtasks
                      $data9 = array(
                                          'subtask_file_it' => '',
                                          'subtask_file_it_date' => '',
                                      );
                                      $data8 = $this->security->xss_clean($data9); // xss filter
                                      $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                      //project cp
                      $data10 = array(
                                          'cp_file_it' => '',
                                          'cp_file_it_date' => '',
                                      );
                                      $data10 = $this->security->xss_clean($data10); // xss filter
                                      $this->Front_model->edit_project_cp($data10,$sp->pid);
                     }
                  }
               }
            }
            //save history
            $hdata = array(
                                        'gid' => $id,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'Goal Reopened By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                 //$this->session->set_flashdata('message','Goal Reopened Successfully!');
                 $link = anchor(base_url('goal-overview/'.$id), 'View Reopened Goal!');
                 $message = 'Goal Reopened Successfully!' .' '. $link;
                 $this->session->set_flashdata('message',$message);
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
          }
        }     
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function reopen_strategy()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $res2 = $this->Front_model->StrategyDetailGid($this->input->post('sid')); 
    $get_goal_id = '';
    if($res2)
    {
      $get_goal_id = $res2->gid;
    }
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
          if($getPackDetail)
          {
            $total_strategies = trim($getPackDetail->pack_goals_strategies);
            $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
            $check_type = is_numeric($total_strategies);
            if($check_type == 'true')
            {
              if($used_strategies < $total_strategies)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getStrategiesCount = $this->Front_model->getStrategiesCount($_COOKIE["d168_selectedportfolio"],$get_goal_id);
        if($getPackDetail)
        {
          $total_strategies = trim($getPackDetail->pack_goals_strategies);
          $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
          $check_type = is_numeric($total_strategies);
          if($check_type == 'true')
          {
            if($used_strategies < $total_strategies)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
          }
        }
      }          
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('strategies', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getStrategiesCount = $this->Front_model->getStrategiesCountCorp($_COOKIE["d168_selectedportfolio"],$get_goal_id);
            if($getPackDetail)
            {
              $total_strategies = trim($getPackDetail->pack_goals_strategies);
              $used_strategies = trim($getStrategiesCount['strategy_count_rows']);
              $check_type = is_numeric($total_strategies);
              if($check_type == 'true')
              {
                if($used_strategies < $total_strategies)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('sid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_strategy_file_it($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          $checkStrategyGoalfile_it = $this->Front_model->checkStrategyGoalfile_it($res->gid);
          if($checkStrategyGoalfile_it > 0)
          {
               $this->session->set_flashdata('al_message','Goal is Filed! To Reopen KPI please Reopen Goal!');
               $response['status'] = FALSE;
               header('Content-type: application/json');
               echo json_encode($response);
          }
          else
          {
            //strategies          
            $sdata = array(
                                's_file_it' => '',
                                's_file_it_date' => '',
                            );
                            $sdata = $this->security->xss_clean($sdata); // xss filter
                            $this->Front_model->editStrategies($sdata,$id);
            $s_projects = $this->Front_model->StrategyAllProjectsList_to_delete($id);//all projects to reopen
            if($s_projects)
            {
               foreach($s_projects as $sp)
               {
                //project
                $data = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data = $this->security->xss_clean($data); // xss filter
                                $this->Front_model->edit_Project($data,$sp->pid);
                //project files                          
                $data2 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data2 = $this->security->xss_clean($data2); // xss filter
                                $this->Front_model->edit_project_files($data2,$sp->pid);
                //project invited members
                $data3 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data3 = $this->security->xss_clean($data3); // xss filter
                                $this->Front_model->edit_project_invited_members($data3,$sp->pid);
                //project management
                $data4 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data4 = $this->security->xss_clean($data4); // xss filter
                                $this->Front_model->edit_project_management($data4,$sp->pid);
                //project management fields
                $data5 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data5 = $this->security->xss_clean($data5); // xss filter
                                $this->Front_model->edit_project_management_fields($data5,$sp->pid);
                //project members
                $data6 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data6 = $this->security->xss_clean($data6); // xss filter
                                $this->Front_model->edit_project_members($data6,$sp->pid);
                //project suggested members
                $data7 = array(
                                    'project_file_it' => '',
                                    'project_file_it_date' => '',
                                );
                                $data7 = $this->security->xss_clean($data7); // xss filter
                                $this->Front_model->edit_project_suggested_members($data7,$sp->pid);
                //project tasks
                $data8 = array(
                                    'task_file_it' => '',
                                    'task_file_it_date' => '',
                                );
                                $data8 = $this->security->xss_clean($data8); // xss filter
                                $this->Front_model->edit_project_tasks($data8,$sp->pid);
                //project subtasks
                $data9 = array(
                                    'subtask_file_it' => '',
                                    'subtask_file_it_date' => '',
                                );
                                $data8 = $this->security->xss_clean($data9); // xss filter
                                $this->Front_model->edit_project_subtasks($data9,$sp->pid);
                //project cp
                $data10 = array(
                                    'cp_file_it' => '',
                                    'cp_file_it_date' => '',
                                );
                                $data10 = $this->security->xss_clean($data10); // xss filter
                                $this->Front_model->edit_project_cp($data10,$sp->pid);
               }
            }
            //save history
            $hdata = array(
                                        'sid' => $id,
                                        'gid' => $res->gid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $P_Owner->reg_id,
                                        'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                        'h_description' => 'KPI Reopened By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                 //$this->session->set_flashdata('message','Strategy Reopened Successfully!');
                 $link = anchor(base_url('kpi-overview/'.$id), 'View Reopened KPI!');
                 $message = 'KPI Reopened Successfully!' .' '. $link;
                 $this->session->set_flashdata('message',$message);
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
          }
        }     
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function reopen_project()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
    $get_ptype = $this->Front_model->getProjectDetailID($this->input->post('pid'));
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($get_ptype)
    {
      if($get_ptype->ptype == 'content')
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              if($getPackDetail)
              {
                $total_content_planner = trim($getPackDetail->pack_content_planner);
                $check_type = is_numeric($total_content_planner);
                if($check_type == 'true')
                {
                  $current_month = date('m');
                  $current_year = date('Y');
                  $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                  $used_content = trim($getMonthWiseContent['content_count_rows']);
                  if($used_content < $total_content_planner)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit'; 
                    }              
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                     $limitation = 'in_limit';
                    } 
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            if($getPackDetail)
            {
              $total_content_planner = trim($getPackDetail->pack_content_planner);
              $check_type = is_numeric($total_content_planner);
              if($check_type == 'true')
              {
                $current_month = date('m');
                $current_year = date('Y');
                $getMonthWiseContent = $this->Front_model->getMonthWiseContent($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                $used_content = trim($getMonthWiseContent['content_count_rows']);
                if($used_content < $total_content_planner)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit'; 
                  }              
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                   $limitation = 'in_limit';
                  } 
              }
            }
          }
        } 
      }
      else
      {
        if($getMydetail)
        {
          if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
          {
            if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
            {
              $this->session->set_flashdata('message', 'Package Expired!');
              redirect($_SERVER['HTTP_REFERER']);
            }
            else
            {
              $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
              $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
              if($getPackDetail)
              {
                $total_projects = trim($getPackDetail->pack_projects);
                $used_projects = trim($getProjectCount['project_count_rows']);
                $check_type = is_numeric($total_projects);
                if($check_type == 'true')
                {
                  if($used_projects < $total_projects)
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                  }
                  else
                  {
                    $this->session->set_flashdata('message', 'Limit Exceeds!');
                    redirect($_SERVER['HTTP_REFERER']);
                  }
                }
                else
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                    {
                      $limitation = 'in_limit';
                    }
                }
              }
            }
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
            $getProjectCount = $this->Front_model->getProjectCount($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_projects = trim($getPackDetail->pack_projects);
              $used_projects = trim($getProjectCount['project_count_rows']);
              $check_type = is_numeric($total_projects);
              if($check_type == 'true')
              {
                if($used_projects < $total_projects)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
              }
            }
          }          
        } 
      }
    } 
}
else
{
  if($this->session->userdata('d168_user_role_in_comp') != 'employee')
  {
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('projects', $cus_privilege))
            {
              $privilege = "yes";
            }
            if(in_array('content planner', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if($get_ptype)
        {
          if($get_ptype->ptype == 'content')
          {        
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                if($getPackDetail)
                {
                  $total_content_planner = trim($getPackDetail->pack_content_planner);
                  $check_type = is_numeric($total_content_planner);
                  if($check_type == 'true')
                  {
                    $current_month = date('m');
                    $current_year = date('Y');
                    $getMonthWiseContent = $this->Front_model->getMonthWiseContentCorp($current_month,$current_year,$_COOKIE["d168_selectedportfolio"]);
                    $used_content = trim($getMonthWiseContent['content_count_rows']);
                    if($used_content < $total_content_planner)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit'; 
                      }              
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                       $limitation = 'in_limit';
                      } 
                  }
                }
              }
            }         
          }
          else
          {
            if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
            {
              if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
              {
                $this->session->set_flashdata('message', 'Package Expired!');
                redirect($_SERVER['HTTP_REFERER']);
              }
              else
              {
                $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
                $getProjectCount = $this->Front_model->getProjectCountCorp($_COOKIE["d168_selectedportfolio"]);
                if($getPackDetail)
                {
                  $total_projects = trim($getPackDetail->pack_projects);
                  $used_projects = trim($getProjectCount['project_count_rows']);
                  $check_type = is_numeric($total_projects);
                  if($check_type == 'true')
                  {
                    if($used_projects < $total_projects)
                    {
                      if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                    }
                    else
                    {
                      $this->session->set_flashdata('message', 'Limit Exceeds!');
                      redirect($_SERVER['HTTP_REFERER']);
                    }
                  }
                  else
                  {
                    if(isset($_COOKIE["d168_selectedportfolio"]))
                      {
                        $limitation = 'in_limit';
                      }
                  }
                }
              }
            } 
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  }
}  

    if($limitation == 'in_limit')
    {
      $id = $this->input->post('pid');
      $P_Owner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_project_file_it($id); 
      if($res)
      {
        if($res->portfolio_id != 0)
        {
          if($res->sid == 0)
          {
            $checkProjectPorfoliofile_it = $this->Front_model->checkProjectPorfoliofile_it($res->portfolio_id);
            if($checkProjectPorfoliofile_it > 0)
            {
                 $this->session->set_flashdata('al_message','Portfolio is Filed! To Reopen Project please Reopen Portfolio!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                            'task_file_it' => '',
                                            'task_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data8); // xss filter
                                        $this->Front_model->edit_project_tasks($data8,$id);
              //project subtasks
              $data9 = array(
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data9); // xss filter
                                        $this->Front_model->edit_project_subtasks($data9,$id);
              //project cp
              $data10 = array(
                                            'cp_file_it' => '',
                                            'cp_file_it_date' => '',
                                        );
                                        $data10 = $this->security->xss_clean($data10); // xss filter
                                        $this->Front_model->edit_project_cp($data10,$id);
              //save history
              $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Reopened By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                   //$this->session->set_flashdata('message','Project Reopened Successfully!');
                   $link = anchor(base_url('projects-overview/'.$id), 'View Reopened Project!');
                   $message = 'Project Reopened Successfully!' .' '. $link;
                   $this->session->set_flashdata('message',$message);
                   $response['status'] = TRUE;
                   header('Content-type: application/json');
                   echo json_encode($response);
            }
          }
          else
          {
            $checkProjectStrategyfile_it = $this->Front_model->checkProjectStrategyfile_it($res->sid);
            if($checkProjectStrategyfile_it > 0)
            {
                 $this->session->set_flashdata('al_message','KPI is filed! To Reopen Project please Reopen KPI!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            }
            else
            {
              //project
              $data = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data = $this->security->xss_clean($data); // xss filter
                                        $this->Front_model->edit_Project($data,$id);
              //project files                          
              $data2 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data2 = $this->security->xss_clean($data2); // xss filter
                                        $this->Front_model->edit_project_files($data2,$id);
              //project invited members
              $data3 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data3 = $this->security->xss_clean($data3); // xss filter
                                        $this->Front_model->edit_project_invited_members($data3,$id);
              //project management
              $data4 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data4 = $this->security->xss_clean($data4); // xss filter
                                        $this->Front_model->edit_project_management($data4,$id);
              //project management fields
              $data5 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data5 = $this->security->xss_clean($data5); // xss filter
                                        $this->Front_model->edit_project_management_fields($data5,$id);
              //project members
              $data6 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data6 = $this->security->xss_clean($data6); // xss filter
                                        $this->Front_model->edit_project_members($data6,$id);
              //project suggested members
              $data7 = array(
                                            'project_file_it' => '',
                                            'project_file_it_date' => '',
                                        );
                                        $data7 = $this->security->xss_clean($data7); // xss filter
                                        $this->Front_model->edit_project_suggested_members($data7,$id);
              //project tasks
              $data8 = array(
                                            'task_file_it' => '',
                                            'task_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data8); // xss filter
                                        $this->Front_model->edit_project_tasks($data8,$id);
              //project subtasks
              $data9 = array(
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                        );
                                        $data8 = $this->security->xss_clean($data9); // xss filter
                                        $this->Front_model->edit_project_subtasks($data9,$id);
              //project cp
              $data10 = array(
                                            'cp_file_it' => '',
                                            'cp_file_it_date' => '',
                                        );
                                        $data10 = $this->security->xss_clean($data10); // xss filter
                                        $this->Front_model->edit_project_cp($data10,$id);
              //save history
              $hdata = array(
                                          'pid' => $id,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $P_Owner->reg_id,
                                          'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                                          'h_description' => 'Project Reopened By '.$P_Owner->first_name.' '.$P_Owner->last_name,
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                   //$this->session->set_flashdata('message','Project Reopened Successfully!');
                   $link = anchor(base_url('projects-overview/'.$id), 'View Reopened Project!');
                   $message = 'Project Reopened Successfully!' .' '. $link;
                   $this->session->set_flashdata('message',$message);
                   $response['status'] = TRUE;
                   header('Content-type: application/json');
                   echo json_encode($response);
            }
          }
        }      
      } 
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function reopen_task()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $limitation = '';
if(empty($this->session->userdata('d168_user_cor_id')))
{
    $getMydetail = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    if($getMydetail)
    {
      if(DateTime::createFromFormat('Y-m-d H:i:s', $getMydetail->package_expiry) !== false)
      {
        if($getMydetail->package_expiry <= date('Y-m-d H:i:s'))
        {
          $this->session->set_flashdata('message', 'Package Expired!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
          $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
          if($getPackDetail)
          {
            $total_tasks = trim($getPackDetail->pack_tasks);
            $used_tasks = trim($getTaskCount['task_count_rows']);
            $check_type = is_numeric($total_tasks);

            if($check_type == 'true')
            {
              $total_all_pro = trim($getPackDetail->pack_projects);
              $total_all_task = $total_tasks;
              if(is_numeric($total_all_pro))
              {
                $total_all_task = $total_tasks * $total_all_pro;
              }
              if($used_tasks < $total_all_task)
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';
                }
              }
              else
              {
                $this->session->set_flashdata('message', 'Limit Exceeds!');
                redirect($_SERVER['HTTP_REFERER']);
              }
            }
            else
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';  
              }
            }
          }
        }
      }
      else
      {
        $getPackDetail = $this->Front_model->getPackDetail($getMydetail->package_id);
        $getTaskCount = $this->Front_model->getTaskCount($_COOKIE["d168_selectedportfolio"]);
        if($getPackDetail)
        {
          $total_tasks = trim($getPackDetail->pack_tasks);
          $used_tasks = trim($getTaskCount['task_count_rows']);
          $check_type = is_numeric($total_tasks);
          if($check_type == 'true')
          {
            $total_all_pro = trim($getPackDetail->pack_projects);
            $total_all_task = $total_tasks;
            if(is_numeric($total_all_pro))
            {
              $total_all_task = $total_tasks * $total_all_pro;
            }
            if($used_tasks < $total_all_task)
            {
              if(isset($_COOKIE["d168_selectedportfolio"]))
              {
                $limitation = 'in_limit';
              }
            }
            else
            {
              $this->session->set_flashdata('message', 'Limit Exceeds!');
              redirect($_SERVER['HTTP_REFERER']);
            }
          }
          else
          {
            if(isset($_COOKIE["d168_selectedportfolio"]))
            {
              $limitation = 'in_limit';
            }
          }
        }
      }
    }
}
else
{
  
    $getCompPackInfo = $this->Front_model->getCompany($this->session->userdata('d168_user_cor_id'));
    if($getCompPackInfo)
    {
      $privilege = "no";
      if(is_numeric($this->session->userdata('d168_user_role_in_comp')))
      {
        $getCompRolesInfo = $this->Front_model->getCompanyRoles($this->session->userdata('d168_user_role_in_comp'));  
        if($getCompRolesInfo)
        {
          if($getCompRolesInfo->privilege != 'all')
          {
            $cus_privilege = explode(', ',trim($getCompRolesInfo->privilege));
            if(in_array('task', $cus_privilege))
            {
              $privilege = "yes";
            }
          }
          else
          {
            $privilege = "yes";
          }
        }      
      }
      if(($this->session->userdata('d168_user_role_in_comp') == 'employee') || ($this->session->userdata('d168_user_role_in_comp') == 'contacted_user') || ($privilege == 'yes'))
      {
        if(DateTime::createFromFormat('Y-m-d H:i:s', $getCompPackInfo->package_expiry) !== false)
        {
          if($getCompPackInfo->package_expiry <= date('Y-m-d H:i:s'))
          {
            $this->session->set_flashdata('message', 'Package Expired!');
            redirect($_SERVER['HTTP_REFERER']);
          }
          else
          {
            $getPackDetail = $this->Front_model->getPackDetail($getCompPackInfo->package_id);
            $getTaskCount = $this->Front_model->getTaskCountCorp($_COOKIE["d168_selectedportfolio"]);
            if($getPackDetail)
            {
              $total_tasks = trim($getPackDetail->pack_tasks);
              $used_tasks = trim($getTaskCount['task_count_rows']);
              $check_type = is_numeric($total_tasks);

              if($check_type == 'true')
              {
                $total_all_pro = trim($getPackDetail->pack_projects);
                $total_all_task = $total_tasks;
                if(is_numeric($total_all_pro))
                {
                  $total_all_task = $total_tasks * $total_all_pro;
                }
                if($used_tasks < $total_all_task)
                {
                  if(isset($_COOKIE["d168_selectedportfolio"]))
                  {
                    $limitation = 'in_limit';
                  }
                }
                else
                {
                  $this->session->set_flashdata('message', 'Limit Exceeds!');
                  redirect($_SERVER['HTTP_REFERER']);
                }
              }
              else
              {
                if(isset($_COOKIE["d168_selectedportfolio"]))
                {
                  $limitation = 'in_limit';  
                }
              }
            }
          }
        }
      }
      else
      {
        $this->session->set_flashdata('message', 'Permission not given to access!');
        redirect($_SERVER['HTTP_REFERER']);
      }
    }    
  
}

    if($limitation == 'in_limit')
    {
      $tid = $this->input->post('tid');
      $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $res = $this->Front_model->check_task_file_it($tid); 
      if($res)
      {
        if($res->tproject_assign != 0)
          {
            $checkTaskProjectfile_it = $this->Front_model->checkTaskProjectfile_it($res->tproject_assign);
              if($checkTaskProjectfile_it > 0)
              {
                   $this->session->set_flashdata('al_message','Project is Filed! To Reopen Task please Reopen Project!');
                   $response['status'] = FALSE;
                   header('Content-type: application/json');
                   echo json_encode($response);
              } 
              else
              {
                  $data = array(
                                          'task_file_it' => '',
                                          'task_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

                  $data = array(
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                            );
                        $data = $this->security->xss_clean($data); // xss filter
                        $this->Front_model->edit_task_subtasks($data,$tid);

                  $hdata = array(
                                          'pid' => $res->tproject_assign,
                                          'gid' => $res->gid,
                                          'sid' => $res->sid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource_id' => $powner->reg_id,
                                          'h_resource' => $powner->first_name.' '.$powner->last_name,
                                          'h_description' => $res->tcode.' Task Reopened by '.$powner->first_name.' '.$powner->last_name,
                                          'task_id' =>$res->tid
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                  
                  //$this->session->set_flashdata('message','Task Reopened Successfully!');
                  $link = anchor(base_url('tasks-overview/'.$tid), 'View Reopened Task!');
                  $message = 'Task Reopened Successfully!' .' '. $link;
                  $this->session->set_flashdata('message',$message);
                  $response['status'] = TRUE;
                  header('Content-type: application/json');
                  echo json_encode($response);
              }
          }
          else
          {
              $data = array(
                                          'task_file_it' => '',
                                          'task_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewTask($data,$tid);

              $data = array(
                                            'subtask_file_it' => '',
                                            'subtask_file_it_date' => '',
                                        );
                    $data = $this->security->xss_clean($data); // xss filter
                    $this->Front_model->edit_task_subtasks($data,$tid);
              
              //$this->session->set_flashdata('message','Task Reopened Successfully!');
              $link = anchor(base_url('tasks-overview/'.$tid), 'View Reopened Task!');
              $message = 'Task Reopened Successfully!' .' '. $link;
              $this->session->set_flashdata('message',$message);
              $response['status'] = TRUE;
              header('Content-type: application/json');
              echo json_encode($response);
          }
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    }  
  }

  public function reopen_subtask()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $stid = $this->input->post('stid');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_subtask_file_it($stid); 
    if($res)
    {
      if($res->stproject_assign != 0)
        {
          $checkSubtaskTaskfile_it = $this->Front_model->checkSubtaskTaskfile_it($res->tid);
            if($checkSubtaskTaskfile_it > 0)
            {
                 $this->session->set_flashdata('al_message','Task is Filed! To Reopen Subtask please Reopen Task!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            } 
            else
            {
                $data = array(
                                          'subtask_file_it' => '',
                                          'subtask_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);

                $hdata = array(
                                        'pid' => $res->stproject_assign,
                                        'gid' => $res->gid,
                                        'sid' => $res->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->stcode.' Subtask Reopened by '.$powner->first_name.' '.$powner->last_name,
                                        'subtask_id' =>$res->stid
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                
                //$this->session->set_flashdata('message','Subtask Reopened Successfully!');
                $link = anchor(base_url('subtasks-overview/'.$stid), 'View Reopened Subtask!');
                $message = 'Subtask Reopened Successfully!' .' '. $link;
                $this->session->set_flashdata('message',$message);
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
        }
        else
        {
            $data = array(
                                          'subtask_file_it' => '',
                                          'subtask_file_it_date' => '',
                                      );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->edit_NewSubtask($data,$stid);
            
            //$this->session->set_flashdata('message','Subtask Reopened Successfully!');
            $link = anchor(base_url('subtasks-overview/'.$stid), 'View Reopened Subtask!');
            $message = 'Subtask Reopened Successfully!' .' '. $link;
            $this->session->set_flashdata('message',$message);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function reopen_platform()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $pc_id = $this->input->post('pc_id');
    $powner = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
    $res = $this->Front_model->check_platform_file_it($pc_id); 
    if($res)
    {
      if($res->pc_project_assign != 0)
        {
          $checkTaskProjectfile_it = $this->Front_model->checkTaskProjectfile_it($res->pc_project_assign);
            if($checkTaskProjectfile_it > 0)
            {
                 $this->session->set_flashdata('al_message','Project is Filed! To Reopen Content please Reopen Project!');
                 $response['status'] = FALSE;
                 header('Content-type: application/json');
                 echo json_encode($response);
            } 
            else
            {
                $data = array(
                                        'cp_file_it' => '',
                                        'cp_file_it_date' => '',
                                    );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->update_Content($data,$pc_id);

                $get_gs_pid = $this->Front_model->file_itgetProjectById($res->pc_project_assign);
                $hdata = array(
                                        'pid' => $res->pc_project_assign,
                                        'gid' => $get_gs_pid->gid,
                                        'sid' => $get_gs_pid->sid,
                                        'h_date' => date('Y-m-d H:i:s'),
                                        'h_resource_id' => $powner->reg_id,
                                        'h_resource' => $powner->first_name.' '.$powner->last_name,
                                        'h_description' => $res->pc_code.' Content Reopened by '.$powner->first_name.' '.$powner->last_name,
                                        'pc_id' =>$res->pc_id
                                    );
                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                    $this->Front_model->insert_ProjectHistory($hdata);
                
                $this->session->set_flashdata('message','Content Reopened Successfully!');
                $response['status'] = TRUE;
                header('Content-type: application/json');
                echo json_encode($response);
            }
        }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  
  //////File Cabinet Part End///////

  //////Report Part Start///////

  // portfolio report work start
   //portfolio view file
   public function portfolioReport()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {

       if(isset($_COOKIE["d168_selectedportfolio"]))
       {
         $c_id = $_COOKIE["d168_selectedportfolio"];
         $data['port_detail'] = $this->Front_model->PortfolioDetail($c_id);
         $data['getp'] = $this->Front_model->getPortfolio3($c_id);
         $data['get_template'] = $this->Front_model->getTemplateDetail($c_id);
         
         $this->load->view('user/portfolio-report',$data);
       }
     }
     else
     {
       redirect(base_url('login'));
     }
   }

   //department chart
   public function all_department()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $did = $this->input->post('department_id');

     $common_department=array();
     $dep_pro = $this->Front_model->get_dep_pro($stid,$did);
     $dep_cnt = $this->Front_model->get_dep_cnt($stid,$did);
     $dep_task = $this->Front_model->get_dep_task($stid,$did);
     $dep_goal = $this->Front_model->get_dep_goal($stid,$did);
     $dep_name = $this->Front_model->get_PDepartment($did);
     $dep_name = $dep_name->department;

     $common_department['dep_pro']= $dep_pro;
     $common_department['dep_cnt']= $dep_cnt;
     $common_department['dep_task']= $dep_task;
     $common_department['dep_goal']= $dep_goal;
     $common_department['dep_name']= $dep_name;

     echo json_encode($common_department);

     }
   }

   //department date range chart

   public function all_rangedepartment()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $did = $this->input->post('department_id');

     $common_rangedepartment=array();
     $dep_rangepro = $this->Front_model->get_dep_rangepro($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_rangecnt = $this->Front_model->get_dep_rangecnt($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_rangetask = $this->Front_model->get_dep_rangetask($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_rangegoal = $this->Front_model->get_dep_rangegoal($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_name = $this->Front_model->get_PDepartment($did);
     $dep_name = $dep_name->department;

     $common_rangedepartment['dep_rangepro']= $dep_rangepro;
     $common_rangedepartment['dep_rangecnt']= $dep_rangecnt;
     $common_rangedepartment['dep_rangetask']= $dep_rangetask;
     $common_rangedepartment['dep_rangegoal']= $dep_rangegoal;
     $common_rangedepartment['dep_name']= $dep_name;

     echo json_encode($common_rangedepartment);

     }
   }

  // memberchart
   public function all_member()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $uid =  $this->input->post('user_id');


     $common_member = array();
     $mem_pro = $this->Front_model->get_mem_pro($stid,$uid);
     $mem_cnt = $this->Front_model->get_mem_cnt($stid,$uid);
     $mem_tsk = $this->Front_model->get_mem_task($stid,$uid);
     $mem_goal = $this->Front_model->get_mem_goal($stid,$uid);
     $mem_dep = $this->Front_model->get_mem_dep($stid,$uid);
     $mem_pln = $this->Front_model->get_mem_pln($stid,$uid);
     $mem_name = $this->Front_model->getStudentById($uid);
     $mem_name = $mem_name->first_name.' '.$mem_name->last_name;

     $common_member['mem_pro']= $mem_pro;
     $common_member['mem_cnt']= $mem_cnt;
     $common_member['mem_tsk']= $mem_tsk;
     $common_member['mem_goal']= $mem_goal;
     $common_member['mem_dep']= $mem_dep;
     $common_member['mem_pln']= $mem_pln;
     $common_member['mem_name']= $mem_name;

     echo json_encode($common_member);
     }
   }

  // member date range chart

   public function all_rangemember()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $uid =  $this->input->post('user_id');
     $teamstart =  $this->input->post('teamstart');
     $teamend =  $this->input->post('teamend');


     $common_rangemember = array();
     $mem_pro = $this->Front_model->get_mem_rangepro($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_cnt = $this->Front_model->get_mem_rangecnt($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_tsk = $this->Front_model->get_mem_rangetask($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_goal = $this->Front_model->get_mem_rangegoal($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_dep = $this->Front_model->get_mem_rangedep($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_pln = $this->Front_model->get_mem_rangepln($stid,$uid,date("Y-m-d", strtotime($this->input->post('teamstart'))),date("Y-m-d", strtotime($this->input->post('teamend'))));
     $mem_name = $this->Front_model->getStudentById($uid);
     $mem_name = $mem_name->first_name.' '.$mem_name->last_name;

     $common_rangemember['mem_pro']= $mem_pro;
     $common_rangemember['mem_cnt']= $mem_cnt;
     $common_rangemember['mem_tsk']= $mem_tsk;
     $common_rangemember['mem_goal']= $mem_goal;
     $common_rangemember['mem_dep']= $mem_dep;
     $common_rangemember['mem_pln']= $mem_pln;
     $common_rangemember['mem_name']= $mem_name;

     echo json_encode($common_rangemember);
     }
   }

   //goal chart
   public function all_goal()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $gid = $this->input->post('goal_id');

     $common_goal=array();
     $goal_kpi = $this->Front_model->get_goal_kpi($stid,$gid);
     $goal_pro = $this->Front_model->get_goal_pro($stid,$gid);
     $goal_cnt = $this->Front_model->get_goal_cnt($stid,$gid);
     $goal_task = $this->Front_model->get_goal_task($stid,$gid);
     $goal_name = $this->Front_model->GoalDetail($gid);
     $goal_name = $goal_name->gname;

     $common_goal['goal_kpi']= $goal_kpi;
     $common_goal['goal_pro']= $goal_pro;
     $common_goal['goal_cnt']= $goal_cnt;
     $common_goal['goal_task']= $goal_task;
     $common_goal['goal_name']= $goal_name;
     echo json_encode($common_goal);

     }
   }

    //goal date range chart
   public function all_rangegoal()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $gid = $this->input->post('goal_id');

     $common_rangegoal=array();
     $goal_rangekpi = $this->Front_model->get_goal_rangekpi($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
     $goal_rangepro = $this->Front_model->get_goal_rangepro($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
     $goal_rangecnt = $this->Front_model->get_goal_rangecnt($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
     $goal_rangetask = $this->Front_model->get_goal_rangetask($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
     $goal_rangename = $this->Front_model->GoalDetail($gid);
     $goal_rangename = $goal_rangename->gname;

     $common_rangegoal['goal_kpi']= $goal_rangekpi;
     $common_rangegoal['goal_pro']= $goal_rangepro;
     $common_rangegoal['goal_cnt']= $goal_rangecnt;
     $common_rangegoal['goal_task']= $goal_rangetask;
     $common_rangegoal['goal_name']= $goal_rangename;
     echo json_encode($common_rangegoal);

     }
   }


   //content chart
   public function all_content()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('content_id');

     if($pid){
     $common_content=array();
     $content_pln = $this->Front_model->get_cnt_pln($stid,$pid);

     $social1 = $this->Front_model->get_cnt_pt1($stid,$pid);
     $social2 = $this->Front_model->get_cnt_pt2($stid,$pid);
     $social3 = $this->Front_model->get_cnt_pt3($stid,$pid);
     $social4 = $this->Front_model->get_cnt_pt4($stid,$pid);
     $social5 = $this->Front_model->get_cnt_pt5($stid,$pid);
     $social6 = $this->Front_model->get_cnt_pt6($stid,$pid);
     $social7 = $this->Front_model->get_cnt_pt7($stid,$pid);
     $social8 = $this->Front_model->get_cnt_pt8($stid,$pid);
     $social9 = $this->Front_model->get_cnt_pt9($stid,$pid);

     $content_task = $this->Front_model->get_pro_task($stid,$pid);
     $content_mem = $this->Front_model->get_pro_member($stid,$pid);
     $content_name = $this->Front_model->ProjectDetail2($pid);
     $content_name = $content_name->pname;

     $common_content['content_pln']= $content_pln;
     $common_content['content_task']= $content_task;
     $common_content['content_mem']= $content_mem;
     $common_content['content_name']= $content_name;

     $common_content['social1']= $social1;
     $common_content['social2']= $social2;
     $common_content['social3']= $social3;
     $common_content['social4']= $social4;
     $common_content['social5']= $social5;
     $common_content['social6']= $social6;
     $common_content['social7']= $social7;
     $common_content['social8']= $social8;
     $common_content['social9']= $social9;


     if(empty($content_pln || $content_task || $content_mem))
     {
       echo -1;

     }
     else {
       echo json_encode($common_content);

     }
     }


     }
   }

   //content date range chart
   public function all_rangecontent()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('content_id');

     $common_rangecontent=array();
     $content_rangepln = $this->Front_model->get_cnt_rangepln($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));

     $socialrange1 = $this->Front_model->get_cnt_rangept1($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange2 = $this->Front_model->get_cnt_rangept2($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange3 = $this->Front_model->get_cnt_rangept3($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange4 = $this->Front_model->get_cnt_rangept4($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange5 = $this->Front_model->get_cnt_rangept5($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange6 = $this->Front_model->get_cnt_rangept6($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange7 = $this->Front_model->get_cnt_rangept7($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange8 = $this->Front_model->get_cnt_rangept8($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $socialrange9 = $this->Front_model->get_cnt_rangept9($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));

     $content_rangetask = $this->Front_model->get_pro_task($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $content_rangemem = $this->Front_model->get_pro_member($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
     $content_name = $this->Front_model->ProjectDetail2($pid);
     $content_name = $content_name->pname;

     $common_rangecontent['content_pln']= $content_rangepln;
     $common_rangecontent['content_task']= $content_rangetask;
     $common_rangecontent['content_mem']= $content_rangemem;
     $common_rangecontent['content_name']= $content_name;

     $common_rangecontent['social1']= $socialrange1;
     $common_rangecontent['social2']= $socialrange2;
     $common_rangecontent['social3']= $socialrange3;
     $common_rangecontent['social4']= $socialrange4;
     $common_rangecontent['social5']= $socialrange5;
     $common_rangecontent['social6']= $socialrange6;
     $common_rangecontent['social7']= $socialrange7;
     $common_rangecontent['social8']= $socialrange8;
     $common_rangecontent['social9']= $socialrange9;


     if(empty($content_rangepln || $content_rangetask || $content_rangemem))
     {
       echo -1;

     }
     else {
       echo json_encode($common_rangecontent);

     }


     }
   }

   //project chart
   public function all_project()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('project_id');

     $common_project=array();
     $stdetail = $this->Front_model->get_pro_task($stid,$pid);
     $stdetail1 = $this->Front_model->get_pro_member($stid,$pid);
     $prjt_name = $this->Front_model->ProjectDetail2($pid);
     $prjt_name = $prjt_name->pname;
     $common_project['pro_task']= $stdetail;
     $common_project['pro_member']= $stdetail1;
     $common_project['prjt_name']= $prjt_name;


     echo json_encode($common_project);
     }
   }
   //project date range chart

   public function all_rangeproject()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('project_id');

     $common_rangeproject=array();
     $stdetailrange = $this->Front_model->get_pro_rangetask2($stid,$pid,date("Y-m-d", strtotime($this->input->post('prjtstart'))),date("Y-m-d", strtotime($this->input->post('prjtend'))));
     $stdetailrange1 = $this->Front_model->get_pro_rangemember2($stid,$pid,date("Y-m-d", strtotime($this->input->post('prjtstart'))),date("Y-m-d", strtotime($this->input->post('prjtend'))));
     $prjt_name = $this->Front_model->ProjectDetail2($pid);
     $prjt_rangename = $prjt_name->pname;
     $common_rangeproject['pro_task']= $stdetailrange;
     $common_rangeproject['pro_member']= $stdetailrange1;
     $common_rangeproject['prjt_name']= $prjt_rangename;


     echo json_encode($common_rangeproject);
     }
   }

   //task chart
   public function task_todo()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $month = '12';
       for ($x = 1; $x <= $month; $x++) {
         $stdetail = $this->Front_model->get_todo_tasks($stid,$x);
       }
     echo json_encode($stdetail);
     }
   }

   //task chart

   public function all_task()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');


     $common_task = array();
     $tsk_prog = $this->Front_model->get_prog_tasks($stid);
     $tsk_rev = $this->Front_model->get_rev_tasks($stid);
     $tsk_done = $this->Front_model->get_done_tasks($stid);

     $common_task['tsk_prog'] = $tsk_prog;
     $common_task['tsk_rev'] = $tsk_rev;
     $common_task['tsk_done'] = $tsk_done;

        echo json_encode($common_task);

     }
   }

   //subtask chart
   public function subtask_todo()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $month = '12';
       for ($x = 1; $x <= $month; $x++) {
         $stdetail = $this->Front_model->get_todo_subtasks($stid,$x);
       }
     echo json_encode($stdetail);
     }
   }
   public function all_subtask()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');


     $common_subtask = array();
     $subtsk_prog = $this->Front_model->get_prog_subtasks($stid);
     $subtsk_rev = $this->Front_model->get_rev_subtasks($stid);
     $subtsk_done = $this->Front_model->get_done_subtasks($stid);

     $common_subtask['subtsk_prog'] = $subtsk_prog;
     $common_subtask['subtsk_rev'] = $subtsk_rev;
     $common_subtask['subtsk_done'] = $subtsk_done;

        echo json_encode($common_subtask);

     }
   }

   // check tamplate name of report module
   public function checkTemplate()
   {
     $this->form_validation->set_rules('template','Template Name','trim|required|is_unique[report_template.name]',array('is_unique' => 'Template name already exists.'));
   if ($this->form_validation->run() == FALSE)
   {
       //$errors = array();

       $errors = $this->form_validation->error_array();
       // Loop through $_POST and get the keys
       foreach ($errors as $key => $value)
       {
         // Add the error message for this field
         $errors[$key] = form_error($key);
       }

       $response['errors'] = array_filter($errors); // Some might be empty
       $response['status'] = FALSE;
       // You can use the Output class here too
       header('Content-type: application/json');
       //echo json_encode($response);
       exit(json_encode($response));
   }
       else
       {

         $response['status'] = true;
           header('Content-type: application/json');
           echo json_encode($response);

       }
   }

     //generate report file of report module
   public function generate_report()
   {
 
     $abc = $this->Front_model->getAllPortfolio($_COOKIE["d168_selectedportfolio"]);
     $pname= $abc->portfolio_name;
     $pimage= $abc->photo;
     
     $image = $this->input->post('stick');     
     $your_array = $image;
     $myArray = $this->input->post('myArray'); 
     $selectedChartCat = $this->input->post('selectedChartCat'); 
     $template = $this->input->post('template'); 
     $start = $this->input->post('daterangestart'); 
     $end = $this->input->post('daterangeend'); 
     $report_for = $this->input->post('report_for'); 
 
     if(!empty($this->input->post('daterangestart')) && !empty($this->input->post('daterangeend')))
   {
     $date_str = $start;
     $date_start = new DateTime($date_str);
     $formatted_start = $date_start->format('d M Y');
 
     $date_ed = $end;
     $date_end = new DateTime($date_ed);
     $formatted_end = $date_end->format('d M Y');
     $date =  $formatted_start. ' - ' .$formatted_end;
     }
     else {
       $date = '';
     }
         $data = array(
           'name' => $template ,
           'user_id' => $this->session->userdata('d168_id'),        
           'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
           'start_date' => $start,
           'end_date' => $end,
           'report_for' => $report_for,
           'created_date' => date('Y-m-d H:i:s'),
       );
       $data = $this->security->xss_clean($data); // xss filter
       $this->Front_model->InsertTemplate($data);
     $this->session->set_userdata('your_array',$your_array);
     $this->session->set_userdata('myArray',$myArray);
     $this->session->set_userdata('selectedChartCat',$selectedChartCat);
     $this->session->set_userdata('pname',$pname);
     $this->session->set_userdata('pimage',$pimage);
     $this->session->set_userdata('template',$template);
     $this->session->set_userdata('date',$date);
     $response['status'] = true;
     header('Content-type: application/json');
     echo json_encode($response);
     }

     //export ppt file of report module
     public function generate_ppt()
 {
     
   $your_array = $this->session->userdata('your_array');
   $myArray = $this->session->userdata('myArray');
   $selectedChartCat = $this->session->userdata('selectedChartCat');
   $pname = $this->session->userdata('pname');
   $pimage = $this->session->userdata('pimage');
   $template = $this->session->userdata('template');
   $date = $this->session->userdata('date');
 
   $result = array_map(function ($a, $b, $c) {
     return [$a, $b, $c];
 }, $your_array, $myArray, $selectedChartCat);
 
 $logo_footer = 'assets/images/dark-logo-main.png';
 // $logo_data_from_db
 if ($pimage) {
   // Retrieve the logo from the database
   $logo_image = 'assets/portfolio_photos/'.$pimage;
 } else {
   // Use a default logo image file
   $logo_image = 'assets/portfolio_photos/default.png';
 }
 
 // Create a new instance of the CustomTCPDF class
 if($result){
 
   $objPHPPresentation = new \PhpOffice\PhpPresentation\PhpPresentation();
   // Create slide
   $currentSlide = $objPHPPresentation->getActiveSlide();
   // Create a shape (drawing)
   $shape = $currentSlide->createDrawingShape();
   $shape->setName('PHPPresentation logo')
         ->setDescription('PHPPresentation logo')
         ->setPath($logo_image)
         ->setHeight(36)
         ->setOffsetX(10)
         ->setOffsetY(10);
 
                                           // Create a shape (text)
   $shape = $currentSlide->createRichTextShape()
   ->setHeight(300)
   ->setWidth(600)
   ->setOffsetX(500)
   ->setOffsetY(10);
   $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
   $textRun = $shape->createTextRun($pname);
 $textRun->getFont()->setBold(true)
                ->setSize(25)
                ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
 
                $myArray=array_unique($myArray);
 // Concatenate the array values into a single string, separated by a line break
 $valuesString = implode("\n", $myArray);
 // Create a shape (text)
   $shape = $currentSlide->createRichTextShape()
   ->setHeight(300)
   ->setWidth(600)
   ->setOffsetX(120)
   ->setOffsetY(180);
   $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_LEFT);
   $textRun = $shape->createTextRun($valuesString);
 $textRun->getFont()->setBold(true)
                ->setSize(25)
                ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
 
               $shape = $currentSlide->createRichTextShape()
                       ->setHeight(180)
                       ->setWidth(500)
                       ->setOffsetX(230)
                       ->setOffsetY(550);
                       $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
                       $textRun = $shape->createTextRun($date);
                     $textRun->getFont()->setBold(true)
                                    ->setSize(25)
                                    ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
 
 
 // Create a shape (drawing)
   $shape = $currentSlide->createDrawingShape();
   $shape->setName('PHPPresentation logo')
         ->setDescription('PHPPresentation logo')
         ->setPath($logo_footer)
         ->setHeight(50)
         ->setOffsetX(760)
         ->setOffsetY(650);
   // $shape->getShadow()->setVisible(true)
   //                    ->setDirection(45)
   //                    ->setDistance(10);
 
 
                      foreach($result  as $pptitem)
                      {
                       list($l, $m, $n) = $pptitem;
 
                       // Create slide
                       $currentSlide = $objPHPPresentation->createSlide();
 
                       // Create a shape (drawing)
   $shape = $currentSlide->createDrawingShape();
   $shape->setName('PHPPresentation logo')
         ->setDescription('PHPPresentation logo')
         ->setPath($logo_image)
         ->setHeight(36)
         ->setOffsetX(10)
         ->setOffsetY(10);
         // $shape->getShadow()->setVisible(true)
   //                    ->setDirection(45)
   //                    ->setDistance(10);
                        // Create a shape (text)
   $shape = $currentSlide->createRichTextShape()
   ->setHeight(180)
   ->setWidth(250)
   ->setOffsetX(50)
   ->setOffsetY(80);
   $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
   $textRun = $shape->createTextRun($m);
 $textRun->getFont()->setBold(true)
                ->setSize(20)
                ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
                
                                    // Create a shape (text)
   $shape = $currentSlide->createRichTextShape()
   ->setHeight(150)
   ->setWidth(300)
   ->setOffsetX(50)
   ->setOffsetY(120);
   $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
   $textRun = $shape->createTextRun($n);
 $textRun->getFont()->setBold(true)
                ->setSize(18)
                ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
                       // $currentSlide = $objPHPPresentation->getActiveSlide();
                        $decoded_image = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $l));  
                       // Create an image from the binary string in memory
                       $image = imagecreatefromstring($decoded_image);
 
                       // Save the image to a temporary file
                       $tempImagePath = tempnam(sys_get_temp_dir(), 'img');
                       imagejpeg($image, $tempImagePath);
 
                       // Add the image to the slide
                       $shape = $currentSlide->createDrawingShape();
                       $shape->setName('Image Name');
                       $shape->setDescription('Image Description');
                       $shape->setPath($tempImagePath);
                       $shape->setHeight(420);
                       $shape->setWidth(600);
                       $shape->setOffsetX(200);
                       $shape->setOffsetY(220);
 
        
                       $shape = $currentSlide->createRichTextShape()
                       ->setHeight(180)
                       ->setWidth(500)
                       ->setOffsetX(230)
                       ->setOffsetY(550);
                       $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
                       $textRun = $shape->createTextRun($date);
                     $textRun->getFont()->setBold(true)
                                    ->setSize(25)
                                    ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
 
 
 // Create a shape (drawing)
   $shape = $currentSlide->createDrawingShape();
   $shape->setName('PHPPresentation logo')
         ->setDescription('PHPPresentation logo')
         ->setPath($logo_footer)
         ->setHeight(50)
         ->setOffsetX(760)
         ->setOffsetY(650);
   // $shape->getShadow()->setVisible(true)
   //                    ->setDirection(45)
   //                    ->setDistance(10);
 
             } 
 
             // Create slide
             $currentSlide = $objPHPPresentation->createSlide();
              // Create a shape (text)
   $shape = $currentSlide->createRichTextShape()
   ->setHeight(300)
   ->setWidth(600)
   ->setOffsetX(170)
   ->setOffsetY(180);
   $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
   $textRun = $shape->createTextRun('Thank you !');
 $textRun->getFont()->setBold(true)
                ->setSize(60)
                ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));               
   $oWriterPPTX = \PhpOffice\PhpPresentation\IOFactory::createWriter($objPHPPresentation, 'PowerPoint2007');
   
   $oWriterPPTX->save(FCPATH . 'assets/presentation/'.$template.'.pptx');
   // Download the presentation to the user's browser
   $data = file_get_contents( FCPATH . 'assets/presentation/'.$template.'.pptx');
   $name = ''.$template.'.pptx';
   force_download($name, $data);
   print_r('Success');
 }  
 }
 
     //export pdf file of report module
 public function pdfRepExport()
   {
         
         $your_array = $this->session->userdata('your_array');
         $myArray = $this->session->userdata('myArray');
         $selectedChartCat = $this->session->userdata('selectedChartCat');
         $pname = $this->session->userdata('pname');
         $pimage = $this->session->userdata('pimage');
         $template = $this->session->userdata('template');
         $date = $this->session->userdata('date');
         $result = array_map(function ($a, $b, $c) {
           return [$a, $b, $c];
       }, $your_array, $myArray, $selectedChartCat);
 
       $logo_footer = 'assets/images/dark-logo-main.png';
       // $logo_data_from_db
       if ($pimage) {
         // Retrieve the logo from the database
         $logo_image = 'assets/portfolio_photos/'.$pimage;
       } else {
         // Use a default logo image file
         $logo_image = 'assets/portfolio_photos/default.png';
       }
 
   // Create a new instance of the CustomTCPDF class
     if($result){
       require_once(APPPATH.'helpers/tcpdf/tcpdf.php');     
       ob_start();//Enables Output Buffering         
       $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
       // set header and footer fonts
       $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
       $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
 
       // set default monospaced font
       $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
       $pdf->setPrintHeader(false);
 
       $pdf->setPrintFooter(false);
       // set margins
       $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
       $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
       // $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
       // set auto page breaks
       $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
 
       // set image scale factor
       $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
       // set some language-dependent strings (optional)
       if (@file_exists(dirname(__FILE__).'/lang/eng.php')) {
       require_once(dirname(__FILE__).'/lang/eng.php');
       $pdf->setLanguageArray($l);
       }
 
       // ---------------------------------------------------------
       // set default font subsetting mode
       $pdf->setFontSubsetting(true);
 
       $pdf->SetAuthor('DECISION 168');
       $pdf->SetTitle('Report Module');
       $pdf->SetFont('dejavusans', '', 14, '', true);
       // Add a new page to the PDF
       $pdf->AddPage('L');
       $pdf->Image('assets/images/left-image-first.jpg', 0,27);
      

        // Get the page dimensions
      $pageWidth = $pdf->GetPageWidth();
      $pageHeight = $pdf->GetPageHeight();

      // Set the logo dimensions and position
      $logoWidth = 25; // Adjust the width of the logo as per your requirement
      $logoHeight = ''; // Keep the aspect ratio by leaving the height empty
      $logoMargin = 5; // Adjust the margin from the edges as per your requirement

      // Calculate the position of the logo
      $logoX = $logoMargin;
      $logoY = $logoMargin;

      // Place the logo image
      $pdf->Image($logo_image, $logoX, $logoY, $logoWidth, $logoHeight);

        //  $pdf->Image($logo_image, $x = '5', $y = '5', $w = 20, $h = '', '', '', '', false, 300, '', false, false, 0, false, false, false);
         $pdf->SetFont('', '', 32);
         // Set text color 
         $hexColor = "#c7df19";  // red color in hex format
         list($r, $g, $b) = sscanf($hexColor, "#%02x%02x%02x");  // convert hex color to RGB values
         $pdf->SetTextColor($r, $g, $b);  // set text color to red
         $title_width = $pdf->GetStringWidth($pname);
 
        
         // Get the current page dimensions
         $page_width_title = $pdf->GetPageWidth();
         $page_height_title = $pdf->GetPageHeight();
         // Set the position of the title
         $l = $page_width_title - $title_width - 15;
         $m = 10;
         // Print the title
         $pdf->SetXY($l, $m);
         $pdf->Cell(0, 0, $template, 0, 1, 'R');

         $z = 30;
         $u = 10;
         // Print the title
         $pdf->SetXY($z, $u);
         $pdf->Cell(0, 0, $pname, 0, 1, 'L');

         $pdf->SetFont('', '', 16);
          // Reset the text color to black
         $pdf->SetTextColor(128, 128, 128);

         // Set the vertical position for the title with space
          // $pdf->SetY(50);

         if($date){
          $pdf->SetTextColor($r, $g, $b);  // set text color to red

          // Calculate the width of the text
         $text_width = $pdf->GetStringWidth($date);
         // Get the current page dimensions
         $page_width = $pdf->GetPageWidth();
         $page_height = $pdf->GetPageHeight();
         // Set the position of the text
        //  $x = ($page_width - $text_width) / 2 + 3; // Add a correction factor of 3
         $x = 50;
         $y = $page_height - 175;

         // Print the text
         $pdf->SetXY($x, $y);
         $pdf->Cell(0, 0, $date, 0, 1, 'L');
         $pdf->SetY(45);
        // Reset the text color to black
        $pdf->SetTextColor(128, 128, 128);
         }
        $pdf->SetFont('', '', 20);

        $myArray=array_unique($myArray);

         foreach ($myArray as $list) {
         $pdf->Cell(35,0, '', 0, 0); // add some padding to the left
         $pdf->Cell(0, 11, $list, 0, 1);
         }
         
         // Get the current page dimensions
         $page_width_ft = $pdf->GetPageWidth();
         $page_height_ft = $pdf->GetPageHeight();
 
         // Set the position of the image
         $a = $page_width_ft - 70; // adjust to the desired position
         $s = $page_height_ft - 30; // adjust to the desired position
 
       // Add the image
       $pdf->Image($logo_footer, $a, $s, 60, 15, 'PNG');
       $pdf->SetFont('', '', 16);

        foreach($result  as $item)
       {
       // $pdf->SetLeftMargin(5);
         list($a, $b, $c) = $item;
         $pdf->AddPage('L');
         $pdf->Image('assets/images/left-image.jpg', 0,27);
         $pdf->Image($logo_image, $x = '10', $y = '5', $w = 25, $h = '', '', '', '', false, 300, '', false, false, 0, false, false, false);
        //  $pdf->Cell(0, 20, $b, 0, 1, 'L');
        //  $pdf->Cell(0, 10, $c, 0, 1, 'L');

         // Output the first title
          $pdf->Cell(0, 10, $b, 0, 1, 'L');

          // Output the second title
          $pdf->Cell(0, 7, $c, 0, 1, 'L');

         $decoded_string = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $a));
       
           list($width, $height) = getimagesizefromstring($decoded_string);
 
           // Calculate the aspect ratio of the image
           $aspect_ratio = $width / $height;
           // Set the margins
           $left_margin = 60; // Left margin in millimeters
           $right_margin = 60; // Right margin in millimeters
           $top_margin = 60; // Top margin in millimeters
           $bottom_margin = 40; // Bottom margin in millimeters
 
           // Get the maximum width and height of the image within the page margin
           $max_width = $pdf->getPageWidth() - ($left_margin + $right_margin);
           $max_height = $pdf->getPageHeight() - ($top_margin + $bottom_margin);
 
           // Calculate the width and height of the image to fit within the maximum dimensions, while preserving the aspect ratio
           if ($aspect_ratio > 1) {
               // Landscape image
               $image_width = min($max_width, $width);
               $image_height = $image_width / $aspect_ratio;
           } else {
               // Portrait image
               $image_height = min($max_height, $height);
               $image_width = $image_height * $aspect_ratio;
           }
 
           // Calculate the position of the top-left corner of the image to center it horizontally and vertically within the page margin
           $x = $left_margin + (($max_width - $image_width) / 2);
           $y = $top_margin + (($max_height - $image_height) / 2);
 
           // Add the image to the PDF
           $pdf->Image('@'.$decoded_string, $x, $y, $image_width, $image_height, '', '', '', false, 300, '', false, false, 0, false, false, false);
           $text_width = $pdf->GetStringWidth($date);
 
           // Get the current page dimensions
           $page_width = $pdf->GetPageWidth();
           $page_height = $pdf->GetPageHeight();
           
           // Set the position of the text
           $x = ($page_width - $text_width) / 2 + 3; // Add a correction factor of 3
           $y = $page_height - 15;
           
           // Print the text
         $pdf->SetFont('', '', 12);

           // $pdf->Cell(0, 0, $date, 0, 1, 'C');
           $pdf->SetXY($x, $y);
           $pdf->Cell(0, 0, $date, 0, 1, 'L');
         $pdf->SetFont('', '', 16);
           
 
           // Get the current page dimensions
           $page_width_ft = $pdf->GetPageWidth();
           $page_height_ft = $pdf->GetPageHeight();
 
           // Set the position of the image
           $a = $page_width_ft - 70; // adjust to the desired position
           $s = $page_height_ft - 30; // adjust to the desired position
 
           // Add the image
           $pdf->Image($logo_footer, $a, $s, 60, 15, 'PNG');
       }
       ob_end_clean();
       $dir = FCPATH . "assets/pdf/";
       // $pdf->Output($dir .$template , 'I');
       $pdf->Output($dir .$template.'.pdf' , 'FI');
       
       $response['status'] = TRUE;
       header('Content-type: application/json');
       echo json_encode($response);
   }
   }
    
   //downlaoad attch file of report module
   public function download_report()
   {
     
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
       $id = $this->uri->segment(3);     
       $tmp_detail = $this->Front_model->checkReportTemplate($id);

       if($tmp_detail)
       {
         if($tmp_detail->report_for == '1'){
         $file = FCPATH .'assets/pdf/'.$tmp_detail->name.'.pdf';
         }
         else if($tmp_detail->report_for == '2') {
           $file = FCPATH .'assets/presentation/'.$tmp_detail->name.'.pptx';
         }
         force_download($file,NULL);
       }
       else
     {
       redirect(base_url('login'));
     }
     }
   }

   // auto delete of attach from folder after 30 day of report module
   public function templateFileDelete()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
       $getTemplate = $this->Front_model->getTemplateDetails($_COOKIE["d168_selectedportfolio"]);
       // $CretDate = date('Y-m-d');
       // $CretTime = date("h:i:sa"); 
       // $finalSchedule = date("Y-m-d h:i:sa");
       if($getTemplate)
       {
         foreach($getTemplate as $tmp)
         {
           $name = $tmp->name;
           if($tmp->report_for == '1')
       {
         // if($tmp->created_date == $finalSchedule ){
           $file_path = FCPATH .'assets/pdf/'.$name.'.pdf'; 
           if (file_exists($file_path)) {
             $creation_time = filectime($file_path);
             $current_time = time();
         
             // calculate the time difference between creation time and current time
             $diff_days = ($current_time - $creation_time) / (60 * 60 * 24);
         
             if ($diff_days >= 30) {
                 unlink($file_path); // delete the file
                 $response = $this->Front_model->delete_template($tmp->id);
                 $response['message'] = 'Pdf deleted successfully.';
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
             } 
         } 
       // }
       }
       else  if($tmp->report_for == '2')
       {
         // if($tmp->created_date == $finalSchedule ){
           $file_path = FCPATH .'assets/presentation/'.$name.'.pptx';
           if (file_exists($file_path)) {
             $creation_time = filectime($file_path);
             $current_time = time();
         
             // calculate the time difference between creation time and current time
             $diff_days = ($current_time - $creation_time) / (60 * 60 * 24);
         
             if ($diff_days >= 30) {
                 unlink($file_path); // delete the file
                 $response = $this->Front_model->delete_template($tmp->id);
                 $response['message'] = 'PPT deleted successfully.';
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
             } 
         } 
       // }
       }    
         }
       }
     }
   }


   

   //preview in modal of attch file of report module
   public function preview_report_file()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
         $id = $this->input->post('id');
         $getTemplate = $this->Front_model->getTemplateById($id);

         if($getTemplate->report_for == '1'){
           $file_path = FCPATH .'assets/pdf/'.$getTemplate->name.'.pdf';
           echo '<div class="modal-header">
                 <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($getTemplate->name, strpos($getTemplate->name, '_') + 0).'</h5>
                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body" style="height:400px">
                    <iframe src="'.base_url().'assets/pdf/'.$getTemplate->name.'.pdf" height="100%" width="100%"></iframe>
               </div>
               <div class="modal-footer">
                   <a href="'.base_url().'front/download_report/'.$getTemplate->id.'/'.$getTemplate->id.'" class="btn btn-sm btn-d text-white">Download</a>
               </div>';
         }
         else if($getTemplate->report_for == '2'){
           $url = base_url().'assets/presentation/'.$getTemplate->name.'.pptx';
           
           echo "<div class='modal-header'>
                 <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($getTemplate->name, strpos($getTemplate->name, "_") + 0)."</h5>
                 <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
               </div>
               <div class='modal-body' style='height:400px'>
                   <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>
               </div>
               <div class='modal-footer'>
                   <a href='".base_url()."front/download_report/".$getTemplate->id."/".$getTemplate->id."' class='btn btn-sm btn-d text-white'>Download</a>
               </div>";
         }
       
     }
     else
     {
         redirect(base_url('login'));
     }
}

 

public function delete_repttmp()
 {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
   {
   $id = $this->input->post('id');

   
   $getTemplate = $this->Front_model->getTemplateById($id);

   if($getTemplate->report_for == '1'){
     $file_path = FCPATH .'assets/pdf/'.$getTemplate->name.'.pdf';
     unlink($file_path); // delete the file
   }
   else if($getTemplate->report_for == '2'){
     $file_path = FCPATH .'assets/presentation/'.$getTemplate->name.'.pptx';
     unlink($file_path); // delete the file
   }
   $delTemplate = $this->Front_model->delete_template($id);

   $this->session->set_flashdata('message','Report File Deleted Successfully!');
   $response['status'] = TRUE;
   header('Content-type: application/json');
   echo json_encode($response);
   }
   else
   {
     redirect(base_url('login'));
   }
 }
   // portfolio report work end


   // user report work start
   public function userReport()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {

       if(isset($_COOKIE["d168_selectedportfolio"]))
       {
         $c_id = $_COOKIE["d168_selectedportfolio"];
         $data['getp'] = $this->Front_model->getPortfolio3($c_id);
         $data['get_template'] = $this->Front_model->getUserTemplate($c_id);
         $this->load->view('user/report',$data);
       }
     }
     else
     {
       redirect(base_url('login'));
     }
   }

   //department chart start
   public function all_Userdepartment()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $did = $this->input->post('department_id');

     $common_department=array();
     $dep_pro = $this->Front_model->get_dep_userpro($stid,$did);
     $dep_cnt = $this->Front_model->get_dep_usercnt($stid,$did);
     $dep_task = $this->Front_model->get_dep_usertask($stid,$did);
     $dep_goal = $this->Front_model->get_dep_usergoal($stid,$did);

     $common_department['dep_pro']= $dep_pro;
     $common_department['dep_cnt']= $dep_cnt;
     $common_department['dep_task']= $dep_task;
     $common_department['dep_goal']= $dep_goal;

     echo json_encode($common_department);

     }
   }

   //department chart end

   //department chart date range start

   public function all_UserRangedepartment()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $did = $this->input->post('department_id');

     $common_userrangedepartment=array();
     $dep_userrangepro = $this->Front_model->get_dep_userrangepro($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_userrangecnt = $this->Front_model->get_dep_userrangecnt($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_userrangetask = $this->Front_model->get_dep_userrangetask($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_userrangegoal = $this->Front_model->get_dep_userrangegoal($stid,$did,date("Y-m-d", strtotime($this->input->post('deptstart'))),date("Y-m-d", strtotime($this->input->post('deptend'))));
     $dep_username = $this->Front_model->get_PDepartment($did);
     $dep_username = $dep_username->department;

     $common_userrangedepartment['dep_userrangepro']= $dep_userrangepro;
     $common_userrangedepartment['dep_userrangecnt']= $dep_userrangecnt;
     $common_userrangedepartment['dep_userrangetask']= $dep_userrangetask;
     $common_userrangedepartment['dep_userrangegoal']= $dep_userrangegoal;
     $common_userrangedepartment['dep_username']= $dep_username;

     echo json_encode($common_userrangedepartment);

     }
   }
   //department chart date range end

   // memberchart
   public function all_Usermember()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $uid =  $this->input->post('user_id');


     $common_member = array();
     $mem_pro = $this->Front_model->get_mem_userpro($stid,$uid);
     $mem_cnt = $this->Front_model->get_mem_usercnt($stid,$uid);
     $mem_tsk = $this->Front_model->get_mem_usertask($stid,$uid);
     $mem_goal = $this->Front_model->get_mem_usergoal($stid,$uid);
     $mem_dep = $this->Front_model->get_mem_userdep($stid,$uid);
     $mem_pln = $this->Front_model->get_mem_userpln($stid,$uid);

     $common_member['mem_pro']= $mem_pro;
     $common_member['mem_cnt']= $mem_cnt;
     $common_member['mem_tsk']= $mem_tsk;
     $common_member['mem_goal']= $mem_goal;
     $common_member['mem_dep']= $mem_dep;
     $common_member['mem_pln']= $mem_pln;

     echo json_encode($common_member);
     }
   }

   //goal chart
   public function all_Usergoal()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $gid = $this->input->post('goal_id');

     $common_goal=array();
     $goal_kpi = $this->Front_model->get_goal_userkpi($stid,$gid);
     $goal_pro = $this->Front_model->get_goal_userpro($stid,$gid);
     $goal_cnt = $this->Front_model->get_goal_usercnt($stid,$gid);
     $goal_task = $this->Front_model->get_goal_usertask($stid,$gid);

     $common_goal['goal_kpi']= $goal_kpi;
     $common_goal['goal_pro']= $goal_pro;
     $common_goal['goal_cnt']= $goal_cnt;
     $common_goal['goal_task']= $goal_task;
     echo json_encode($common_goal);

     }
   }

     //goal user chart date range
     public function all_UserRangegoal()
     {
       if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
       {
       $stid = $this->input->post('portfolio_id');
       $gid = $this->input->post('goal_id');
  
       $common_Usergoal=array();

       $goal_userkpi = $this->Front_model->get_goal_rangeuserkpi($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
       $goal_userpro = $this->Front_model->get_goal_rangeuserpro($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
       $goal_usercnt = $this->Front_model->get_goal_rangeusercnt($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
       $goal_usertask = $this->Front_model->get_goal_rangeusertask($stid,$gid,date("Y-m-d", strtotime($this->input->post('goalstart'))),date("Y-m-d", strtotime($this->input->post('goalend'))));
       $goal_userrangename = $this->Front_model->GoalDetail($gid);
       $goal_userrangename = $goal_userrangename->gname;

       $common_Usergoal['goal_userkpi']= $goal_userkpi;
       $common_Usergoal['goal_userpro']= $goal_userpro;
       $common_Usergoal['goal_usercnt']= $goal_usercnt;
       $common_Usergoal['goal_usertask']= $goal_usertask;
       $common_Usergoal['goal_username']= $goal_userrangename;

       echo json_encode($common_Usergoal);
  
       }
     }

   //content chart
   public function all_Usercontent()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('content_id');

     $common_content=array();
     //  $content_pln = $this->Front_model->get_cnt_userpln($stid,$pid);  
     $content_task = $this->Front_model->get_cnt_usertask($stid,$pid);  
     $content_mem = $this->Front_model->get_cnt_usermember($stid,$pid);

     $user_social1 = $this->Front_model->get_user_cnt1($stid,$pid);
     $user_social2 = $this->Front_model->get_user_cnt2($stid,$pid);
     $user_social3 = $this->Front_model->get_user_cnt3($stid,$pid);
     $user_social4 = $this->Front_model->get_user_cnt4($stid,$pid);
     $user_social5 = $this->Front_model->get_user_cnt5($stid,$pid);
     $user_social6 = $this->Front_model->get_user_cnt6($stid,$pid);
     $user_social7 = $this->Front_model->get_user_cnt7($stid,$pid);
     $user_social8 = $this->Front_model->get_user_cnt8($stid,$pid);
     $user_social9 = $this->Front_model->get_user_cnt9($stid,$pid);



     //$common_content['content_pln']= $content_pln;
     $common_content['content_task']= $content_task;
     $common_content['content_mem']= $content_mem;

     $common_content['user_social1']= $user_social1;
    $common_content['user_social2']= $user_social2;
    $common_content['user_social3']= $user_social3;
    $common_content['user_social4']= $user_social4;
    $common_content['user_social5']= $user_social5;
    $common_content['user_social6']= $user_social6;
    $common_content['user_social7']= $user_social7;
    $common_content['user_social8']= $user_social8;
    $common_content['user_social9']= $user_social9;

     //if(empty($content_pln || $content_task || $content_mem))
    if(empty($content_task || $content_mem))
     {
       echo -1;

     }
     else {
       echo json_encode($common_content);

     }


     }
   }


      //content date range chart
      public function all_UserRangecontent()
      {
        if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
        {
        $stid = $this->input->post('portfolio_id');
        $pid = $this->input->post('content_id');
   
        $common_daterange_content=array();
        // $content_daterange_pln = $this->Front_model->get_cnt_userrangepln($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend')))); 
        $content_daterange_task = $this->Front_model->get_cnt_userrangetask($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));  
        $content_daterange_mem = $this->Front_model->get_cnt_userrangemember($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));

        $user_daterange_social1 = $this->Front_model->get_userrange_cnt1($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social2 = $this->Front_model->get_userrange_cnt2($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social3 = $this->Front_model->get_userrange_cnt3($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social4 = $this->Front_model->get_userrange_cnt4($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social5 = $this->Front_model->get_userrange_cnt5($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social6 = $this->Front_model->get_userrange_cnt6($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social7 = $this->Front_model->get_userrange_cnt7($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social8 = $this->Front_model->get_userrange_cnt8($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $user_daterange_social9 = $this->Front_model->get_userrange_cnt9($stid,$pid,date("Y-m-d", strtotime($this->input->post('contstart'))),date("Y-m-d", strtotime($this->input->post('contend'))));
        $content_Username = $this->Front_model->ProjectDetail2($pid);
        $content_Username = $content_Username->pname;
   
   
        //$common_daterange_content['content_daterange_pln']= $content_daterange_pln;
        $common_daterange_content['content_daterange_task']= $content_daterange_task;
        $common_daterange_content['content_daterange_mem']= $content_daterange_mem;
   
        $common_daterange_content['user_daterange_social1']= $user_daterange_social1;
       $common_daterange_content['user_daterange_social2']= $user_daterange_social2;
       $common_daterange_content['user_daterange_social3']= $user_daterange_social3;
       $common_daterange_content['user_daterange_social4']= $user_daterange_social4;
       $common_daterange_content['user_daterange_social5']= $user_daterange_social5;
       $common_daterange_content['user_daterange_social6']= $user_daterange_social6;
       $common_daterange_content['user_daterange_social7']= $user_daterange_social7;
       $common_daterange_content['user_daterange_social8']= $user_daterange_social8;
       $common_daterange_content['user_daterange_social9']= $user_daterange_social9;
       $common_daterange_content['content_Username']= $content_Username;
   
        if(empty($content_daterange_task || $content_daterange_mem))
        {
          echo -1;
   
        }
        else {
          echo json_encode($common_daterange_content);
   
        }
   
   
        }
      }

   //project chart start
   public function all_Userproject()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('project_id');

     $common_project=array();
     $stdetail = $this->Front_model->get_pro_usertask($stid,$pid);
     $stdetail1 = $this->Front_model->get_pro_usermember($stid,$pid);
     $common_project['pro_task']= $stdetail;
     $common_project['pro_member']= $stdetail1;

     echo json_encode($common_project);
     }
   }
   //project chart end


   //project user chart date range start
   public function all_UserRangeproject()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $pid = $this->input->post('project_id');

     $common_userdatetrange_project=array();
     $stdetail_user = $this->Front_model->get_pro_daterangeusertask($stid,$pid,date("Y-m-d", strtotime($this->input->post('prjtstart'))),date("Y-m-d", strtotime($this->input->post('prjtend'))));
     $stdetail_user1 = $this->Front_model->get_pro_daterangeusermember($stid,$pid,date("Y-m-d", strtotime($this->input->post('prjtstart'))),date("Y-m-d", strtotime($this->input->post('prjtend'))));
     $prjt_name_user = $this->Front_model->ProjectDetail2($pid);
     $prjt_rangename_user = $prjt_name_user->pname;     
     $common_userdatetrange_project['pro_task_user']= $stdetail_user;
     $common_userdatetrange_project['pro_member_user']= $stdetail_user1;
     $common_userdatetrange_project['prjt_user_name']= $prjt_rangename_user;

     echo json_encode($common_userdatetrange_project);
     }
   }

   //project user chart date range end
   
   //task chart
   public function task_Usertodo()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $month = '12';
       for ($x = 1; $x <= $month; $x++) {
         $stdetail = $this->Front_model->get_todo_usertasks($stid,$x);
       }
     echo json_encode($stdetail);
     }
   }

   //task chart

   public function all_Usertask()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');


     $common_task = array();
     $tsk_prog = $this->Front_model->get_prog_usertasks($stid);
     $tsk_rev = $this->Front_model->get_rev_usertasks($stid);
     $tsk_done = $this->Front_model->get_done_usertasks($stid);

     $common_task['tsk_prog'] = $tsk_prog;
     $common_task['tsk_rev'] = $tsk_rev;
     $common_task['tsk_done'] = $tsk_done;

        echo json_encode($common_task);

     }
   }


   public function subtask_Usertodo()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');
     $month = '12';
       for ($x = 1; $x <= $month; $x++) {
         $stdetail = $this->Front_model->get_usertodo_subtasks($stid,$x);
       }
     echo json_encode($stdetail);
     }
   }
   
public function all_Usersubtask()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
     $stid = $this->input->post('portfolio_id');


     $common_Usersubtask = array();
     $subtsk_userprog = $this->Front_model->get_userprog_subtasks($stid);
     $subtsk_userrev = $this->Front_model->get_userrev_subtasks($stid);
     $subtsk_userdone = $this->Front_model->get_userdone_subtasks($stid);

     $common_Usersubtask['subtsk_userprog'] = $subtsk_userprog;
     $common_Usersubtask['subtsk_userrev'] = $subtsk_userrev;
     $common_Usersubtask['subtsk_userdone'] = $subtsk_userdone;

        echo json_encode($common_Usersubtask);

     }
   }

// check user tamplate name of user  module
   public function checkUserTemplate()
   {
     $this->form_validation->set_rules('template','Template Name','trim|required|is_unique[report_usertemplate.name]',array('is_unique' => 'Template name already exists.'));
   if ($this->form_validation->run() == FALSE)
   {
       //$errors = array();

       $errors = $this->form_validation->error_array();
       // Loop through $_POST and get the keys
       foreach ($errors as $key => $value)
       {
         // Add the error message for this field
         $errors[$key] = form_error($key);
       }

       $response['errors'] = array_filter($errors); // Some might be empty
       $response['status'] = FALSE;
       // You can use the Output class here too
       header('Content-type: application/json');
       //echo json_encode($response);
       exit(json_encode($response));
   }
       else
       {

         $response['status'] = true;
           header('Content-type: application/json');
           echo json_encode($response);

       }
   }

//generate report file of user report module

public function generate_userreport()
{

  $abc_user = $this->Front_model->getAllPortfolio($_COOKIE["d168_selectedportfolio"]);
  $pname_user= $abc_user->portfolio_name;
  $pimage_user= $abc_user->photo;
  
  $image_user = $this->input->post('stick_user');     
  $your_array_user = $image_user;
  $myArray_user = $this->input->post('myArray_user'); 
  $selectedChartCat_user = $this->input->post('selectedChartCat_user'); 
  $template_user = $this->input->post('template_user'); 
  $start_user = $this->input->post('daterangestart_user'); 
  $end_user = $this->input->post('daterangeend_user'); 
  $report_for_user = $this->input->post('report_for_user'); 

  $data = array(
   'name' => $template_user ,
   'user_id' => $this->session->userdata('d168_id'),        
   'portfolio_id' => $_COOKIE["d168_selectedportfolio"],
   'start_date' => $start_user,
   'end_date' => $end_user,
   'report_for' => $report_for_user,
   'created_date' => date('Y-m-d H:i:s'),
);
$data = $this->security->xss_clean($data); // xss filter
$this->Front_model->InsertUserTemplate($data);

  if(!empty($this->input->post('daterangestart_user')) && !empty($this->input->post('daterangeend_user')))
{
  $date_str_user = $start_user;
  $date_start_user = new DateTime($date_str_user);
  $formatted_start_user= $date_start_user->format('d M Y');

  $date_ed_user = $end_user;
  $date_end_user = new DateTime($date_ed_user);
  $formatted_end_user = $date_end_user->format('d M Y');
  $date_user =  $formatted_start_user. ' - ' .$formatted_end_user;
  }
  else {
    $date_user = '';
  }
     
  $this->session->set_userdata('your_array_user',$your_array_user);
  $this->session->set_userdata('myArray_user',$myArray_user);
  $this->session->set_userdata('selectedChartCat_user',$selectedChartCat_user);
  $this->session->set_userdata('pname_user',$pname_user);
  $this->session->set_userdata('pimage_user',$pimage_user);
  $this->session->set_userdata('template_user',$template_user);
  $this->session->set_userdata('start_user',$start_user);
  $this->session->set_userdata('end_user',$end_user);
  $this->session->set_userdata('report_for_user',$report_for_user);
  $this->session->set_userdata('date_user',$date_user);
  $response['status'] = true;
  header('Content-type: application/json');
  echo json_encode($response);
  }

//export pdf file of usser report module

public function pdfUserRepExport()
{
      
      $your_array_user = $this->session->userdata('your_array_user');
      $myArray_user = $this->session->userdata('myArray_user');
      $selectedChartCat_user = $this->session->userdata('selectedChartCat_user');
      $pname_user = $this->session->userdata('pname_user');
      $pimage_user = $this->session->userdata('pimage_user');
      $template_user = $this->session->userdata('template_user');
      $start_user =$this->session->set_userdata('start_user');
      $end_user = $this->session->set_userdata('end_user');
      $date_user = $this->session->userdata('date_user');
      $report_for_user = $this->session->set_userdata('report_for_user');
      $result_user = array_map(function ($a_user, $b_user, $c_user) {
        return [$a_user, $b_user, $c_user];
    }, $your_array_user, $myArray_user, $selectedChartCat_user);

    $logo_footer_user = 'assets/images/dark-logo-main.png';
    // $logo_data_from_db
    if ($pimage_user) {
      // Retrieve the logo from the database
      $logo_image_user = 'assets/portfolio_photos/'.$pimage_user;
    } else {
      // Use a default logo image file
      $logo_image_user = 'assets/portfolio_photos/default.png';
    }

// Create a new instance of the CustomTCPDF class
  if($result_user){
    require_once(APPPATH.'helpers/tcpdf/tcpdf.php');    
    ob_start();//Enables Output Buffering        
    $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
    // set header and footer fonts
    $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
    $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

    // set default monospaced font
    $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
    $pdf->setPrintHeader(false);

    $pdf->setPrintFooter(false);
    // set margins
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    // $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
    // set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

    // set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
    // set some language-dependent strings (optional)
    if (@file_exists(dirname(__FILE__).'/lang/eng.php')) {
    require_once(dirname(__FILE__).'/lang/eng.php');
    $pdf->setLanguageArray($l);
    }

    // ---------------------------------------------------------
    // set default font subsetting mode
    $pdf->setFontSubsetting(true);

    $pdf->SetAuthor('DECISION 168');
    // $pdf->SetTitle('Report Module');
    $pdf->SetFont('dejavusans', '', 14, '', true);
    // Add a new page to the PDF
    $pdf->AddPage('L');
    $pdf->Image('assets/images/left-image-first.jpg', 0,27);
    
      // Get the page dimensions
      $pageWidth = $pdf->GetPageWidth();
      $pageHeight = $pdf->GetPageHeight();

      // Set the logo dimensions and position
      $logoWidth = 25; // Adjust the width of the logo as per your requirement
      $logoHeight = ''; // Keep the aspect ratio by leaving the height empty
      $logoMargin = 5; // Adjust the margin from the edges as per your requirement

      // Calculate the position of the logo
      $logoX = $logoMargin;
      $logoY = $logoMargin;

      // Place the logo image
      $pdf->Image($logo_image_user, $logoX, $logoY, $logoWidth, $logoHeight);
      // $pdf->Image($logo_image_user, $x = '5', $y = '5', $w = 20, $h = '', '', '', '', false, 300, '', false, false, 0, false, false, false);
      $pdf->SetFont('', '', 32);
      // Set text color 
      $hexColor = "#c7df19";  // red color in hex format
      list($r, $g, $b) = sscanf($hexColor, "#%02x%02x%02x");  // convert hex color to RGB values
      $pdf->SetTextColor($r, $g, $b);  // set text color to red
      $title_width = $pdf->GetStringWidth($pname_user);

     
      // // Get the current page dimensions
      // $page_width_title = $pdf->GetPageWidth();
      // $page_height_title = $pdf->GetPageHeight();
      // // Set the position of the title
      // $l = $page_width_title - $page_height_title - 15;
      // $m = 10;
      // // Print the title
      // $pdf->SetXY($l, $m);
      // $pdf->Cell(0, 0, $template_user, 0, 1, 'R');
      // $pdf->SetFont('', '', 14);
      //  // Reset the text color to black
      // $pdf->SetTextColor(128, 128, 128);


      
        
         // Get the current page dimensions
         $page_width_title = $pdf->GetPageWidth();
         $page_height_title = $pdf->GetPageHeight();
         // Set the position of the title
         $l = $page_width_title - $title_width - 15;
         $m = 10;
         // Print the title
         $pdf->SetXY($l, $m);
         $pdf->Cell(0, 0, $template_user, 0, 1, 'R');

         $z = 30;
         $u = 10;
         // Print the title
         $pdf->SetXY($z, $u);
         $pdf->Cell(0, 0, $pname_user, 0, 1, 'L');

         $pdf->SetFont('', '', 16);
          // Reset the text color to black
         $pdf->SetTextColor(128, 128, 128);

         // Set the vertical position for the title with space
          // $pdf->SetY(50);

        if($date_user){
          $pdf->SetTextColor($r, $g, $b);  // set text color to red

          // Calculate the width of the text
         $text_width = $pdf->GetStringWidth($date_user);
         // Get the current page dimensions
         $page_width = $pdf->GetPageWidth();
         $page_height = $pdf->GetPageHeight();
         // Set the position of the text
        //  $x = ($page_width - $text_width) / 2 + 3; // Add a correction factor of 3
         $x = 50;
         $y = $page_height - 175;

         // Print the text
         $pdf->SetXY($x, $y);
         $pdf->Cell(0, 0, $date_user, 0, 1, 'L');
         $pdf->SetY(45);
        }
        // Reset the text color to black
        $pdf->SetTextColor(128, 128, 128);
        $pdf->SetFont('', '', 20);


      $myArray_user=array_unique($myArray_user);

      foreach ($myArray_user as $list_user) {
      $pdf->Cell(35,0, '', 0, 0); // add some padding to the left
      $pdf->Cell(0, 11, $list_user, 0, 1);
      }
     
      // Get the current page dimensions
      $page_width_ft_user = $pdf->GetPageWidth();
      $page_height_ft_user = $pdf->GetPageHeight();

      // Set the position of the image
      $a = $page_width_ft_user - 70; // adjust to the desired position
      $s = $page_height_ft_user - 22; // adjust to the desired position

    // Add the image
    $pdf->Image($logo_footer_user, $a, $s, 60, 15, 'PNG');
    $pdf->SetFont('', '', 16);

    foreach($result_user  as $item_user)
    {
    // $pdf->SetLeftMargin(5);
      list($a_user, $b_user, $c_user) = $item_user;
      $pdf->AddPage('L');
      $pdf->Image('assets/images/left-image.jpg', 0,27);
      $pdf->Image($logo_image_user, $x = '10', $y = '5', $w = 25, $h = '', '', '', '', false, 300, '', false, false, 0, false, false, false);
      $pdf->Cell(0, 18, $b_user, 0, 1, 'L');
      $pdf->Cell(0, 7, $c_user, 0, 1, 'L');
      $decoded_string_user = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $a_user));
    
        list($width_user, $height_user) = getimagesizefromstring($decoded_string_user);

        // Calculate the aspect ratio of the image
        $aspect_ratio_user = $width_user / $height_user;
        // Set the margins
        $left_margin_user = 60; // Left margin in millimeters
        $right_margin_user = 60; // Right margin in millimeters
        $top_margin_user = 60; // Top margin in millimeters
        $bottom_margin_user = 40; // Bottom margin in millimeters

        // Get the maximum width and height of the image within the page margin
        $max_width_user = $pdf->getPageWidth() - ($left_margin_user + $right_margin_user);
        $max_height_user = $pdf->getPageHeight() - ($top_margin_user + $bottom_margin_user);

        // Calculate the width and height of the image to fit within the maximum dimensions, while preserving the aspect ratio
        if ($aspect_ratio_user > 1) {
            // Landscape image
            $image_width_user = min($max_width_user, $width_user);
            $image_height_user = $image_width_user / $aspect_ratio_user;
        } else {
            // Portrait image
            $image_height_user = min($max_height_user, $height_user);
            $image_width_user = $image_height_user * $aspect_ratio_user;
        }

        // Calculate the position of the top-left corner of the image to center it horizontally and vertically within the page margin
        $x = $left_margin_user + (($max_width_user - $image_width_user) / 2);
        $y = $top_margin_user + (($max_height_user - $image_height_user) / 2);

        // Add the image to the PDF
        $pdf->Image('@'.$decoded_string_user, $x, $y, $image_width_user, $image_height_user, '', '', '', false, 300, '', false, false, 0, false, false, false);
        $text_width_user = $pdf->GetStringWidth($date_user);

        // Get the current page dimensions
        $page_width_user = $pdf->GetPageWidth();
        $page_height_user = $pdf->GetPageHeight();
        
        // Set the position of the text
        $x = ($page_width_user - $text_width_user) / 2 + 3; // Add a correction factor of 3
        $y = $page_height_user - 15;
        
        // Print the text
        // $pdf->Cell(0, 0, $date, 0, 1, 'C');
        $pdf->SetFont('', '', 12);
        $pdf->SetXY($x, $y);
        $pdf->Cell(0, 0, $date_user, 0, 1, 'L');
        $pdf->SetFont('', '', 16);


        // Get the current page dimensions
        $page_width_ft_user = $pdf->GetPageWidth();
        $page_height_ft_user = $pdf->GetPageHeight();

        // Set the position of the image
        $a_user = $page_width_ft_user - 70; // adjust to the desired position
        $s_user = $page_height_ft_user - 22; // adjust to the desired position

        // Add the image
        $pdf->Image($logo_footer_user, $a_user, $s_user, 60, 15, 'PNG');
    }
    ob_end_clean();
    $dir = FCPATH . "assets/pdf/".$this->session->userdata('d168_id')."/";
       if (!is_dir($dir)) {
         mkdir($dir, 0777, true);
     }
    // $pdf->Output($dir .$template , 'I');
    $pdf->Output($dir .$template_user.'.pdf' , 'FI');

    $response['status'] = TRUE;
    header('Content-type: application/json');
    echo json_encode($response);
}
}

//export ppt file of user report module
      public function generate_Userppt()
      {
           $your_array_user = $this->session->userdata('your_array_user');
            $myArray_user = $this->session->userdata('myArray_user');
            $selectedChartCat_user = $this->session->userdata('selectedChartCat_user');
            $pname_user = $this->session->userdata('pname_user');
            $pimage_user = $this->session->userdata('pimage_user');
            $template_user = $this->session->userdata('template_user');
            $start_user =$this->session->set_userdata('start_user');
            $end_user = $this->session->set_userdata('end_user');
            $date_user = $this->session->userdata('date_user');
            $report_for_user = $this->session->set_userdata('report_for_user');
            $result_user = array_map(function ($a_user, $b_user, $c_user) {
              return [$a_user, $b_user, $c_user];
          }, $your_array_user, $myArray_user, $selectedChartCat_user);
     
      $logo_footer_user = 'assets/images/dark-logo-main.png';
      // $logo_data_from_db
      if ($pimage_user) {
        // Retrieve the logo from the database
        $logo_image_user = 'assets/portfolio_photos/'.$pimage_user;
      } else {
        // Use a default logo image file
        $logo_image_user = 'assets/portfolio_photos/default.png';
      }
      
      // Create a new instance of the CustomTCPDF class
      if($result_user){
      
        $objPHPPresentation = new \PhpOffice\PhpPresentation\PhpPresentation();
        // Create slide
        $currentSlide = $objPHPPresentation->getActiveSlide();
        // Create a shape (drawing)
        $shape = $currentSlide->createDrawingShape();
        $shape->setName('PHPPresentation logo')
              ->setDescription('PHPPresentation logo')
              ->setPath($logo_image_user)
              ->setHeight(36)
              ->setOffsetX(10)
              ->setOffsetY(10);
        
      
                                                // Create a shape (text)
        $shape = $currentSlide->createRichTextShape()
        ->setHeight(300)
        ->setWidth(600)
        ->setOffsetX(500)
        ->setOffsetY(10);
        $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
        $textRun = $shape->createTextRun($pname_user);
      $textRun->getFont()->setBold(true)
                     ->setSize(25)
                     ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
      
                     $myArray=array_unique($myArray_user);
      // Concatenate the array values into a single string, separated by a line break
      $valuesString_user = implode("\n", $myArray_user);
      // Create a shape (text)
        $shape = $currentSlide->createRichTextShape()
        ->setHeight(300)
        ->setWidth(600)
        ->setOffsetX(120)
        ->setOffsetY(180);
        $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_LEFT);
        $textRun = $shape->createTextRun($valuesString_user);
      $textRun->getFont()->setBold(true)
                     ->setSize(25)
                     ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
      
                    $shape = $currentSlide->createRichTextShape()
                            ->setHeight(180)
                            ->setWidth(500)
                            ->setOffsetX(230)
                            ->setOffsetY(550);
                            $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
                            $textRun = $shape->createTextRun($date_user);
                          $textRun->getFont()->setBold(true)
                                         ->setSize(25)
                                         ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
      
      
      // Create a shape (drawing)
        $shape = $currentSlide->createDrawingShape();
        $shape->setName('PHPPresentation logo')
              ->setDescription('PHPPresentation logo')
              ->setPath($logo_footer_user)
              ->setHeight(50)
              ->setOffsetX(760)
              ->setOffsetY(650);
        // $shape->getShadow()->setVisible(true)
        //                    ->setDirection(45)
        //                    ->setDistance(10);
      
      
                           foreach($result_user  as $pptitem_user)
                           {
                            list($l_user, $m_user, $n_user) = $pptitem_user;
      
                            // Create slide
                            $currentSlide = $objPHPPresentation->createSlide();
      
                            // Create a shape (drawing)
        $shape = $currentSlide->createDrawingShape();
        $shape->setName('PHPPresentation logo')
              ->setDescription('PHPPresentation logo')
              ->setPath($logo_image_user)
              ->setHeight(36)
              ->setOffsetX(10)
              ->setOffsetY(10);
              // $shape->getShadow()->setVisible(true)
   //                    ->setDirection(45)
   //                    ->setDistance(10);
                             // Create a shape (text)
        $shape = $currentSlide->createRichTextShape()
        ->setHeight(180)
        ->setWidth(250)
        ->setOffsetX(50)
        ->setOffsetY(80);
        $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
        $textRun = $shape->createTextRun($m_user);
      $textRun->getFont()->setBold(true)
                     ->setSize(20)
                     ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
                     
                                         // Create a shape (text)
        $shape = $currentSlide->createRichTextShape()
        ->setHeight(150)
        ->setWidth(300)
        ->setOffsetX(50)
        ->setOffsetY(120);
        $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
        $textRun = $shape->createTextRun($n_user);
      $textRun->getFont()->setBold(true)
                     ->setSize(18)
                     ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
                            // $currentSlide = $objPHPPresentation->getActiveSlide();
                             $decoded_image_user = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $l_user));  
                            // Create an image from the binary string in memory
                            $image = imagecreatefromstring($decoded_image_user);
      
                            // Save the image to a temporary file
                            $tempImagePath_user = tempnam(sys_get_temp_dir(), 'img');
                            imagejpeg($image, $tempImagePath_user);
      
                            // Add the image to the slide
                            $shape = $currentSlide->createDrawingShape();
                            $shape->setName('Image Name');
                            $shape->setDescription('Image Description');
                            $shape->setPath($tempImagePath_user);
                            $shape->setHeight(420);
                            $shape->setWidth(600);
                            $shape->setOffsetX(200);
                            $shape->setOffsetY(220);
      
             
                            $shape = $currentSlide->createRichTextShape()
                            ->setHeight(180)
                            ->setWidth(500)
                            ->setOffsetX(230)
                            ->setOffsetY(550);
                            $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
                            $textRun = $shape->createTextRun($date_user);
                          $textRun->getFont()->setBold(true)
                                         ->setSize(25)
                                         ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));
      
      
      // Create a shape (drawing)
        $shape = $currentSlide->createDrawingShape();
        $shape->setName('PHPPresentation logo')
              ->setDescription('PHPPresentation logo')
              ->setPath($logo_footer_user)
              ->setHeight(50)
              ->setOffsetX(760)
              ->setOffsetY(650);
        // $shape->getShadow()->setVisible(true)
        //                    ->setDirection(45)
        //                    ->setDistance(10);
      
                  } 
      
                  // Create slide
                  $currentSlide = $objPHPPresentation->createSlide();
                   // Create a shape (text)
        $shape = $currentSlide->createRichTextShape()
        ->setHeight(300)
        ->setWidth(600)
        ->setOffsetX(170)
        ->setOffsetY(180);
        $shape->getActiveParagraph()->getAlignment()->setHorizontal(\PhpOffice\PhpPresentation\Style\Alignment::HORIZONTAL_CENTER);
        $textRun = $shape->createTextRun('Thank you !');
      $textRun->getFont()->setBold(true)
                     ->setSize(60)
                     ->setColor(new \PhpOffice\PhpPresentation\Style\Color('c7df19'));               
        $oWriterPPTX = \PhpOffice\PhpPresentation\IOFactory::createWriter($objPHPPresentation, 'PowerPoint2007');
        
     
        $dir = FCPATH . "assets/presentation/".$this->session->userdata('d168_id')."/";
             if (!is_dir($dir)) {
               mkdir($dir, 0777, true);
           }
        $oWriterPPTX->save($dir.$template_user.'.pptx');
     
        // Download the presentation to the user's browser
        $data = file_get_contents( FCPATH . 'assets/presentation/'.$this->session->userdata('d168_id').'/'.$template_user.'.pptx');
        $name = ''.$template_user.'.pptx';
        force_download($name, $data);
        print_r('Success');
      }  
      }

public function downloadUserReport()
   {
     
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
       $id = $this->uri->segment(3);     
       $tmp_detail = $this->Front_model->checkUserReportTemplate($id);

       if($tmp_detail)
       {
         if($tmp_detail->report_for == '1'){
         $file = FCPATH .'assets/pdf/'.($this->session->userdata('d168_id')).'/'.$tmp_detail->name.'.pdf';
         }
         else if($tmp_detail->report_for == '2') {
           $file = FCPATH .'assets/presentation/'.($this->session->userdata('d168_id')).'/'.$tmp_detail->name.'.pptx';
         }
         force_download($file,NULL);
       }
       else
     {
       redirect(base_url('login'));
     }
     }
   }

// auto delete of attach from folder after 30 day of user report module
   public function templateUserFileDelete()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
       $getTemplate = $this->Front_model->getUserTemplate($_COOKIE["d168_selectedportfolio"]);
       // $CretDate = date('Y-m-d');
       // $CretTime = date("h:i:sa"); 
       // $finalSchedule = date("Y-m-d h:i:sa");
       if($getTemplate)
       {
         foreach($getTemplate as $tmp)
         {
           $name = $tmp->name;
           if($tmp->report_for == '1')
       {
         // if($tmp->created_date == $finalSchedule ){
           $file_path = FCPATH .'assets/pdf/'.$this->session->userdata('d168_id').'/'.$name.'.pdf'; 
           if (file_exists($file_path)) {
             $creation_time = filectime($file_path);
             $current_time = time();
         
             // calculate the time difference between creation time and current time
             $diff_days = ($current_time - $creation_time) / (60 * 60 * 24);
         
             if ($diff_days >= 30) {
                 unlink($file_path); // delete the file
                 $response = $this->Front_model->delete_template($tmp->id);
                 $response['message'] = 'Pdf deleted successfully.';
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
             } 
         } 
       // }
       }
       else  if($tmp->report_for == '2')
       {
         // if($tmp->created_date == $finalSchedule ){
           $file_path = FCPATH .'assets/presentation/'.$this->session->userdata('d168_id').'/'.$name.'.pptx';
           if (file_exists($file_path)) {
             $creation_time = filectime($file_path);
             $current_time = time();
         
             // calculate the time difference between creation time and current time
             $diff_days = ($current_time - $creation_time) / (60 * 60 * 24);
         
             if ($diff_days >= 30) {
                 unlink($file_path); // delete the file
                 $response = $this->Front_model->delete_template($tmp->id);
                 $response['message'] = 'PPT deleted successfully.';
                 $response['status'] = TRUE;
                 header('Content-type: application/json');
                 echo json_encode($response);
             } 
         } 
       // }
       }    
         }
       }
     }
   }

//preview in modal of attch file of user report module
  public function preview_user_report()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $id = $this->input->post('id');
        $getTemplate = $this->Front_model->getUserTemplateById($id);

        if($getTemplate->report_for == '1'){
          $file_path = FCPATH .'assets/pdf/'.$this->session->userdata('d168_id').'/'.$getTemplate->name.'.pdf';
          echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="previewModalFullscreenLabel">'.substr($getTemplate->name, strpos($getTemplate->name, '_') + 0).'</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body" style="height:400px">
                   <iframe src="'.base_url().'assets/pdf/'.$this->session->userdata('d168_id').'/'.$getTemplate->name.'.pdf" height="100%" width="100%"></iframe>
              </div>
              <div class="modal-footer">
                  <a href="'.base_url().'front/downloadUserReport/'.$getTemplate->id.'/'.$getTemplate->id.'" class="btn btn-sm btn-d text-white">Download</a>
              </div>';
        }
        else if($getTemplate->report_for == '2'){
          $url = base_url().'assets/presentation/'.$this->session->userdata('d168_id').'/'.$getTemplate->name.'.pptx';
          
          echo "<div class='modal-header'>
                <h5 class='modal-title mt-0' id='previewModalFullscreenLabel'>".substr($getTemplate->name, strpos($getTemplate->name, "_") + 0)."</h5>
                <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>
              </div>
              <div class='modal-body' style='height:400px'>
                  <iframe src='https://view.officeapps.live.com/op/embed.aspx?src=$url' width='100%' height='100%' allowfullscreen webkitallowfullscreen></iframe>
              </div>
              <div class='modal-footer'>
                  <a href='".base_url()."front/downloadUserReport/".$getTemplate->id."/".$getTemplate->id."' class='btn btn-sm btn-d text-white'>Download</a>
              </div>";
        }
      
    }
    else
    {
        redirect(base_url('login'));
    }
}

  public function delete_Userrept()
 {
   if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
   {
   $id = $this->input->post('id');

   
   $getTemplate = $this->Front_model->getUserTemplateById($id);
   if($getTemplate->report_for == '1'){
     $file_path = FCPATH .'assets/pdf/'.$this->session->userdata('d168_id').'/'.$getTemplate->name.'.pdf';

     unlink($file_path); // delete the file
   }
   else if($getTemplate->report_for == '2'){
     $file_path = FCPATH .'assets/presentation/'.$this->session->userdata('d168_id').'/'.$getTemplate->name.'.pptx';
     unlink($file_path); // delete the file
   }
   $delTemplate = $this->Front_model->delete_Usertemplate($id);

   $this->session->set_flashdata('message','Report File Deleted Successfully!');
   $response['status'] = TRUE;
   header('Content-type: application/json');
   echo json_encode($response);
   }
   else
   {
     redirect(base_url('login'));
   }
 }
   // user report work end

  //////Report Part End///////

  // Tour Functions ///////////////////////////

  public function myTour_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="myTourModalLabel">My Tour Checklist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>';
      $this->load->view('user/my_tour_popup');
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function getStarted_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="getStartedModalLabel">Get Started</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>';
      $this->load->view('user/get_started_popup');
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_tour_step()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $tour_step = $this->input->post('tour_step');
      $stud_del = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      if($stud_del->tour_step){
        $step_array = explode(',', $stud_del->tour_step);
      }else{
        $step_array = array();
      }
      
      if(!in_array($tour_step, $step_array)){
        array_push($step_array, $tour_step);
        $step_implode = implode(',', $step_array);
        $data = array('tour_step' => $step_implode);
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->updateRegistration($data,$this->session->userdata('d168_id'));
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // End Tour Functions ///////////////////////////

  // Start time tracking Functions ///////////////////////////

  public function timer_start()
  {
    $id = $this->input->post('id');
    $current_time = date("Y-m-d H:i:s");

    $data = array(
      'start_timer' => $current_time,
      'flag' => '1',
      // 'flag_new' => '1',
      // 'tracked_time' => $counter,
      'tstatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_TaskProOwner($data,$id);

  }

  public function timer_start_new()
  {
    $id = $this->input->post('id');
    $current_time = date("Y-m-d H:i:s");
    $ct = '';
    $data = array(
      'start_timer' => $ct,
      'start_timer_new' => $current_time,
      'flag' => '1',
      'tstatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_TaskProOwner($data,$id);

  }


  public function timer_update()
  {
    $id = $this->input->post('id');
    $current_time = '';
    $counter = $this->input->post('counter');
    $data_task = $this->Front_model->getTasksDetail($id);
    $data = array(
      'start_timer' => $current_time,
      'start_timer_new' => $current_time,
      'flag' => '0',
      'tracked_time' => $counter,
      'tstatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_TaskProOwner($data,$id);

  }

  public function timer_update_new()
  {
    $id = $this->input->post('id');
    $current_time = '';
    $data_task = $this->Front_model->getTasksDetail($id);
        if($data_task->tracked_time != "" || $data_task->tracked_time == "00:00:00"){
          
        $old_time = $data_task->start_timer_new;

        // Current time
        $current_time1 = date("Y-m-d H:i:s");

        // Create DateTime objects for old and current times
        $old_datetime = new DateTime($old_time);
        $current_datetime = new DateTime($current_time1);

        // Calculate the time difference
        $interval1 = $current_datetime->diff($old_datetime);

      // Access the time difference components
        $diff_hours = $interval1->h;
        $diff_minutes = $interval1->i;
        $diff_seconds = $interval1->s;
        $timer = sprintf("%02d:%02d:%02d", $diff_hours, $diff_minutes, $diff_seconds);

        $time1 = $timer;
        $time2 = $data_task->tracked_time;

        // print_r($time1);
        $time1 = new DateTime($time1);
        $time2 = new DateTime($time2);

        $interval = new DateInterval('PT' . $time1->format('H') . 'H' . $time1->format('i') . 'M' . $time1->format('s') . 'S');
        $time2->add($interval);

        $result_timer = $time2->format('H:i:s');
      
        $counter = $result_timer;
      }
      else{
        $counter = '00:00:00';
      }

    $data = array(
      'start_timer' => $current_time,
      'start_timer_new' => $current_time,
      'flag' => '0',
      'tracked_time' => $counter,
      'tstatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_TaskProOwner($data,$id);

  }
  
  public function get_flag()
  {
    $tid = $this->input->post('id');
    $tdetail = $this->Front_model->getTaskById($tid);
    echo json_encode($tdetail); 
  }

  public function get_flag_on()
  {
    $tflag = $this->Front_model->getTaskByFlag();
    echo json_encode($tflag); 
  }

  public function subtask_timer_start()
  {
    $sid = $this->input->post('id');
    $scurrent_time = date("Y-m-d H:i:s");

    $data = array(
      'start_stimer' => $scurrent_time,
      'sflag' => '1',
      'ststatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_SubtaskProOwner($data,$sid);

  }

  public function subtask_timer_new()
  {
    $sid = $this->input->post('id');
    $scurrent_time = date("Y-m-d H:i:s");
    $sct = '';
    $data = array(
      'start_stimer' => $sct,
      'start_stimer_new' => $scurrent_time,
      'sflag' => '1',
      'ststatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_SubtaskProOwner($data,$sid);

  }


  public function subtask_timer_update()
  {
    $sid = $this->input->post('id');
    $scurrent_time = '';
    $scounter = $this->input->post('subtask_counter');
    $data = array(
      'start_stimer' => $scurrent_time,
      'start_stimer_new' => $scurrent_time,
      'sflag' => '0',
      'tracked_stime' => $scounter,
      'ststatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_SubtaskProOwner($data,$sid);

  }

  public function subtask_update_new()
  {
    $sid = $this->input->post('id');
    $subtask_counter = $this->input->post('subtask_counter');
    $current_time = '';
    $data_stask = $this->Front_model->getSubtasksDetail($sid);

        if($data_stask->tracked_stime != ""){
          
        $old_time = $data_stask->start_stimer_new;

        // Current time
        $current_stime = date("Y-m-d H:i:s");

        // Create DateTime objects for old and current times
        $old_datetime = new DateTime($old_time);
        $current_datetime = new DateTime($current_stime);

        // Calculate the time difference
        $interval1 = $current_datetime->diff($old_datetime);

      // Access the time difference components
        $diff_hours = $interval1->h;
        $diff_minutes = $interval1->i;
        $diff_seconds = $interval1->s;
        $timer = sprintf("%02d:%02d:%02d", $diff_hours, $diff_minutes, $diff_seconds);

        $time1 = $timer;
        $time2 = $data_stask->tracked_stime;

        // print_r($time1);
        $time1 = new DateTime($time1);
        $time2 = new DateTime($time2);

        $interval = new DateInterval('PT' . $time1->format('H') . 'H' . $time1->format('i') . 'M' . $time1->format('s') . 'S');
        $time2->add($interval);

        $result_timer = $time2->format('H:i:s');
      
        $scounter = $result_timer;
      }
      else{
        $scounter = $subtask_counter;
      }

    $data = array(
      'start_stimer' => $current_time,
      'start_stimer_new' => $current_time,
      'sflag' => '0',
      'tracked_stime' => $scounter,
      'ststatus_date' => date('Y-m-d H:i:s'),
  );
    $data = $this->security->xss_clean($data); // xss filter
    $this->Front_model->update_SubtaskProOwner($data,$sid);

  }
 
  
  public function get_sflag()
  {
    $sid = $this->input->post('id');
    $tdetail = $this->Front_model->getSubtaskById($sid);
    echo json_encode($tdetail); 
  }

  public function timerReminder()
  {

    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $get_reminder = $this->Front_model->getTaskByFlag();

      if($get_reminder)
  {
    foreach($get_reminder as $reminder)
    {
        $reminder_task = $reminder['flag'];
        $reminder_estimateTask = $reminder['estimated_time'];
        $reminder_subtask = $reminder['sflag'];
        $reminder_estimateSubtask = $reminder['estimated_stime'];
        $timer_alert_status = $reminder['timer_alert_status'];
        $timer_salert_status = $reminder['timer_salert_status'];
        $tid = $reminder['tid'];
        $sid = $reminder['stid'];

        if($reminder_task == '1'){

        if($reminder_task == '1'){
          if($reminder['start_timer_new'] != ''){
            // Old time
            $old_time_task = $reminder['start_timer_new'];                                                                
          }
          else{
          $old_time_task = $reminder['start_timer'];
          }

          $current_time_task = date("Y-m-d H:i:s");

         

            $old_datetime_task = new DateTime($old_time_task);
            $current_datetime_task = new DateTime($current_time_task);
            // Calculate the time difference
            $interval_task = $current_datetime_task->diff($old_datetime_task);
            // Access the time difference components
            $diff_hours_task = $interval_task->h;
            $diff_minutes_task = $interval_task->i;
            $diff_seconds_task = $interval_task->s;
            $timer_task = sprintf("%02d:%02d:%02d", $diff_hours_task, $diff_minutes_task, $diff_seconds_task);
            $time1_task = $timer_task;
            $time2_task = $reminder['tracked_time'];

            $task_time1 = new DateTime($time1_task);
            $task_time2 = new DateTime($time2_task);
        
            $interval_task = new DateInterval('PT' . $task_time1->format('H') . 'H' . $task_time1->format('i') . 'M' . $task_time1->format('s') . 'S');
            $task_time2->add($interval_task);
            
            $timer_task = $task_time2->format('H:i:s');
            }
            else{
              if($reminder['tracked_time'] != ""){
              $timer_task = $reminder['tracked_time'];
              }
              else{
              $timer_task = '00:00:00';
              }
            }
          
            $counter = $timer_task; // Replace timer_task with your actual counter value
            $counter = trim($counter);
            $digits = explode(':', (string)$counter); // Split the string at each colon
            $hour = $digits[0]; // "00"
            $minute = $digits[1]; // "00"
            $second = $digits[2]; // "02"

            
            // Function to convert hh:mm format to total minutes
            function convertToMinutes($time) {
              list($hours, $minutes) = explode(" ", $time);
              return (int)$hours * 60 + (int)$minutes;
            }

            // Convert the tracked time to total minutes
            $trackedTimeMinutes = convertToMinutes($counter);

            // Convert the estimated time to total minutes
            $estimatedTimeMinutes = convertToMinutes($reminder_estimateTask);

            // Check if both times are the same or not
            if ($estimatedTimeMinutes === $trackedTimeMinutes) {

            if($timer_alert_status == '0' ){

            $data = array(
              'timer_alert_status' => '1'                  
            );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->edit_NewTask($data,$tid);
            
            $icon = '<i class="fas fa-dot-circle"></i>'; 
            $heading = 'Time Tracking Task';
            $title = 'Task time is over. Now you are going above time.';
            
            $response['timer_alert'] = '<div class="modal fade timerModal'.$tid.'" tabindex="-1" aria-labelledby="timerModalLabel'.$tid.'" aria-hidden="true"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-body"> <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
            <div class="text-center mt-2">
                <div class="avatar-md mx-auto mb-4">
                    <div class="avatar-title bg-d-light rounded-circle text-d h1">
                        '.$icon.'
                    </div>
                </div>

                <div class="row justify-content-center">
                    <div class="col-xl-10">
                        <h4 class="text-d mt-2">'.$heading.'</h4>
                        <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                    </div>
                </div>
            </div></div></div></div></div>';
            
            $response['tid'] =  $tid;
            $response['now_alert'] =  'alert_task';
            header('Content-type: application/json');
            exit(json_encode($response));

            } 
          }
          else {
            echo "Both times are not the same.";
          }
          }


            if($reminder_subtask == '1'){
            if($reminder_subtask == '1'){
              if($reminder['start_stimer_new'] != ''){
                // Old time
                $old_time_subtask = $reminder['start_stimer_new'];                                                                
              }
              else{
              $old_time_subtask = $reminder['start_stimer'];
              }
              
                $current_time_subtask = date("Y-m-d H:i:s");

                $old_datetime_subtask = new DateTime($old_time_subtask);
                $current_datetime_subtask = new DateTime($current_time_subtask);

                // Calculate the time difference
                $interval_subtask = $current_datetime_subtask->diff($old_datetime_subtask);
                // Access the time difference components
                $diff_hours_subtask = $interval_subtask->h;
                $diff_minutes_subtask = $interval_subtask->i;
                $diff_seconds_subtask = $interval_subtask->s;
                $timer_subtask = sprintf("%02d:%02d:%02d", $diff_hours_subtask, $diff_minutes_subtask, $diff_seconds_subtask);
                $time1_subtask = $timer_subtask;
                $time2_subtask = $reminder['tracked_stime'];

                $subtask_time1 = new DateTime($time1_subtask);
                $subtask_time2 = new DateTime($time2_subtask);
            
                $interval_subtask = new DateInterval('PT' . $subtask_time1->format('H') . 'H' . $subtask_time1->format('i') . 'M' . $subtask_time1->format('s') . 'S');
                $subtask_time2->add($interval_subtask);
                
                $subtimer_task = $subtask_time2->format('H:i:s');

                }
                else{
                  if($reminder['tracked_stime'] != ""){
                  $subtimer_task = $reminder['tracked_stime'];
                  }
                  else{
                  $subtimer_task = '00:00:00';
                  }
                }
                $subtimer_task = trim($subtimer_task);
                
                $subcounter = $subtimer_task; // Replace subtimer_task with your actual subcounter value
                $subdigits = explode(':', (string)$subcounter); // Split the string at each colon
                $subhour = $subdigits[0]; // "00"
                $subminute = $subdigits[1]; // "00"
                $subsecond = $subdigits[2]; // "02"
                
                if($timer_salert_status == '0' ){


                  function convertToMinutes($time) {
                    list($hours, $minutes) = explode(" ", $time);
                    return (int)$hours * 60 + (int)$minutes;
                }
                
                // Convert the tracked time to total minutes
                $StrackedTimeMinutes = convertToMinutes($subcounter);
                
                // Convert the estimated time to total minutes
                $SestimatedTimeMinutes = convertToMinutes($reminder_estimateSubtask);
                
                // Check if both times are the same or not
                if ($SestimatedTimeMinutes === $StrackedTimeMinutes) {
                
                $data = array(
                  'timer_salert_status' => '1'                  
                );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->edit_NewSubtask($data,$sid);
                
                $icon = '<i class="fas fa-dot-circle"></i>'; 
                $heading = 'Time Tracking Subtask';
                $title = 'Sub task time is over. Now you are going above time.';
                
                $response['timer_alert'] = '<div class="modal fade timerModal'.$sid.'" tabindex="-1" aria-labelledby="timerModalLabel'.$sid.'" aria-hidden="true"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-body"> <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mt-2">
                    <div class="avatar-md mx-auto mb-4">
                        <div class="avatar-title bg-d-light rounded-circle text-d h1">
                            '.$icon.'
                        </div>
                    </div>

                    <div class="row justify-content-center">
                        <div class="col-xl-10">
                            <h4 class="text-d mt-2">'.$heading.'</h4>
                            <p class="text-muted font-size-14 mb-4">'.$title.'</p>
                        </div>
                    </div>
                </div></div></div></div></div>';
                
                $response['sid'] =  $sid;
                $response['now_alert'] =  'alert_subtask';
                header('Content-type: application/json');
                exit(json_encode($response));

                }
                else {
                  echo "Both times are not the same.";
              }
              }
                }

    }
  }
    }
    else
    {
      redirect(base_url('login'));
    }


}

  // End time tracking Functions ///////////////////////////

  // Start Community Functions ///////////////////////////

  public function community()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      // $this->session->set_userdata('expert_session_id','ghjfghfgchd');
      // $this->session->unset_userdata('expert_session_id');
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['decision_maker'] = $this->Front_model->decision_maker($this->session->userdata('d168_id'));
      $this->load->view('user/community', $data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function send_phone_number()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $api_key = "f7944d53-03af-11ee-addf-0200cd936042";
      $phone_number = $this->input->post('phone_number');

      $curl = curl_init();
      curl_setopt_array($curl, array(
        CURLOPT_URL => 'https://2factor.in/API/V1/'.$api_key.'/SMS/'.$phone_number.'/AUTOGEN/OTP1',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'GET',
      ));

      $response = curl_exec($curl);

      curl_close($curl);
      // echo $response; // {"Status":"Success","Details":"467b4574-2c97-4f16-944d-f37598caa2e4"}

      header('Content-type: application/json');
      $response = json_decode($response);

      $res['status'] = $response->Status;
      $res['details'] = $response->Details;

      header('Content-type: application/json');
      echo json_encode($res);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function verify_phone_number()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $api_key = "f7944d53-03af-11ee-addf-0200cd936042";
      $dailing_code = $this->input->post('dailing_code');
      $phone_number = $this->input->post('phone_number');
      $phone_number = $dailing_code.$phone_number;
      $expert_session_id = $this->input->post('expert_session_id');
      $otp = $this->input->post('otp');

      $curl = curl_init();

      curl_setopt_array($curl, array(
        CURLOPT_URL => 'https://2factor.in/API/V1/'.$api_key.'/SMS/VERIFY/'.$expert_session_id.'/'.$otp,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'GET',
      ));

      $response = curl_exec($curl);
      curl_close($curl);

      header('Content-type: application/json');
      $response = json_decode($response);

      $res['status'] = $response->Status;
      $res['details'] = $response->Details;

      if($response->Status == 'Success'){
        $this->session->set_userdata('expert_session_id',$expert_session_id);
        $this->session->set_userdata('phone_otp',$otp);

        $student_id = $this->session->userdata('d168_id');
        $data = array(  'student_id' => $student_id,
                        'phone_number' => $phone_number,
                        'otp' => $otp,
                        'expert_session_id' => $expert_session_id,
                        'verified_on' => date('Y-m-d H:i:s')
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertExpertPhones($data);

        $this->session->set_flashdata('message', 'Mobile Number Successfully Verified');
      }
      
      header('Content-type: application/json');
      echo json_encode($res);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function update_expert_profile()
  {
  if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
  {
    $this->form_validation->set_rules('designation','Designation','required|trim');
    $this->form_validation->set_rules('company','Company','required|trim');
    $this->form_validation->set_rules('expert_photo','Photo','required|trim');
    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();

        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
          // Add the error message for this field
          $errors[$key] = form_error($key);
        }
     
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
    }else{
      $student_id = $this->session->userdata('d168_id');
      $stud_del = $this->Front_model->getStudentById($student_id);

      if($_POST['expert_photo'] != $stud_del->expert_photo)
      {
        $data = $_POST['expert_photo'];
        list($type, $data) = explode(';', $data);
        list(, $data)      = explode(',', $data);
        $data = base64_decode($data);
        $imageName = time().'_'.$student_id.'.png';
        if(file_put_contents('./assets/student_photos/'.$imageName, $data))
        {
         $photo = $imageName;
        }          
      }
      else{
        $photo = $stud_del->expert_photo;
      }

      if($stud_del->expert_apply_date != "0000-00-00 00:00:00"){
        $expert_apply_date = $stud_del->expert_apply_date;
      }else{
        $expert_apply_date = date('Y-m-d H:i:s');
      }

      if($this->input->post('add_expert_tag') == "on"){
        $add_expert_tag = 1;
      }else{
        $add_expert_tag = 0;
      }
      $expert_status = $stud_del->expert;

      $data = array(  'designation' => $this->input->post('designation'),
                      'company' => $this->input->post('company'),
                      'expert_photo' => $photo,
                      'expertise' => $this->input->post('expertise'),
                      'expert' => '1',
                      'expert_apply_date' => $expert_apply_date,
                      'add_expert_tag' => $add_expert_tag,
                      'expert_status' => 'active'
                   );
      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->updateRegistration($data,$student_id);
      if($expert_status != 1){
        $email_to = 'don@z2squared.com';
        $email_from = 'hello@decision168.com';
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Request for becoming Decision Maker | Decision 168');
        $this->email->message('                
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Request for becoming Decision Maker</title>
            <meta name="description" content="Request for becoming Decision Maker">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Request for becoming Decision Maker</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello Admin,<br><br>
                                                    '.ucwords($stud_del->first_name.' '.$stud_del->last_name).' has requested for becoming Decision Maker. Please sign in to response to the request.
                                                    <br><br>
                                                   
                                                </p>
                                                <a href="'.base_url('super-admin').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Sign In</a>
                                               
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>'
        );
        $this->email->send();
      }
      $this->session->set_flashdata('message', 'Profile Updated Successfully');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);  
    }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function expertProfile_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $expert_id = $this->input->post('expert_id');
      $data['dm'] = $this->Front_model->getStudentById($expert_id);
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['time_12hrs'] = $this->Front_model->gettime_12hrs();

      echo '<div class="modal-header">
                <h5 class="modal-title mt-0" id="expertProfileModalLabel">Decision Maker</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>';
      $this->load->view('user/decision_maker',$data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function insert_call_booking()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->form_validation->set_rules('call_duration','Call Duration','required|trim');
      $this->form_validation->set_rules('booking_date','Date','required|trim');
      $this->form_validation->set_rules('book_time','Time','required|trim');
      if ($this->form_validation->run() == FALSE)
      {
          //$errors = array();

          $errors = $this->form_validation->error_array();
          // Loop through $_POST and get the keys
          foreach ($errors as $key => $value)
          {
            // Add the error message for this field
            $errors[$key] = form_error($key);
          }
       
          $response['errors'] = array_filter($errors); // Some might be empty
          $response['status'] = FALSE;
          // You can use the Output class here too
          header('Content-type: application/json');
          //echo json_encode($response);
          exit(json_encode($response));
      }
      else
      {
        $expert_id = $this->input->post('expert_id');
        $cm_id = $this->input->post('call_duration');
        $call_min_del = $this->Front_model->callMinutesById($cm_id);
        $minute = $call_min_del->minute;

        if($minute == 'Quick - 15 Min'){
            $duration = '15 minute';
        }else if($minute == 'Regular - 30 Min'){
            $duration = '30 minute';
        }else if($minute == 'Extra - 45 Min'){
            $duration = '45 minute';
        }else if($minute == 'All Access - 60 Min'){
            $duration = '60 minute';
        }else if($minute == 'VIP - 75 Min'){
            $duration = '75 minute';
        }else if($minute == 'Bonus - 90 Min'){
            $duration = '90 minute';
        }

        $expert_calls = $this->Front_model->getCallBookingByExpert($expert_id);
        if($expert_calls){
          foreach ($expert_calls as $ec) {
            $booking_date = date('Y-m-d', strtotime($this->input->post('booking_date')));
            $booking_time = date('H:i:s', strtotime($this->input->post('book_time')));

            $db_booking_date = date('Y-m-d', strtotime($ec->booking_date));
            $db_booking_time = date('H:i:s', strtotime($ec->book_time));

            $db_end_date = date('Y-m-d', strtotime($ec->booking_date));
            $db_end_time = date('H:i:s', strtotime($ec->book_time));
            $db_end_date_time = $db_end_date.' '.$db_end_time;
            $db_end_date_time = date('Y-m-d H:i:s', strtotime($db_end_date_time .' + '.$duration));

            $post_date_time = strtotime($booking_date.' '.$booking_time);
            $db_date_time = strtotime($db_booking_date.' '.$db_booking_time);
            $db_end_date_time = strtotime($db_end_date_time);
            if(($post_date_time >= $db_date_time) && ($post_date_time <= $db_end_date_time)){
              $response['status'] = 'already_exists';
              header('Content-type: application/json');
              exit(json_encode($response));
            }
          }
        }

        $student_id = $this->session->userdata('d168_id');
        $booking_date = date('Y-m-d', strtotime($this->input->post('booking_date')));

        $call_rate_del = $this->Front_model->callRateByCId($cm_id,$expert_id);
        $call_rate = $call_rate_del->call_rate;

        $data = array(  'user_id' => $student_id,
                        'expert_id' => $expert_id,
                        'cm_id' => $cm_id,
                        'booking_date' => $booking_date,
                        'book_time' => $this->input->post('book_time'),                        
                        'call_rate' => $call_rate,                        
                        'booked_date' => date('Y-m-d H:i:s'),
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertCallBooking($data);

        $inserted_call_id = $this->db->insert_id();

        $meeting_id = uniqid().$inserted_call_id;

        $dataa = array('meeting_id' => $meeting_id);
        $dataa = $this->security->xss_clean($dataa); // xss filter
        $this->Front_model->updateCallBooking($dataa,$inserted_call_id);

        $event_start_date = date('Y-m-d', strtotime($this->input->post('booking_date')));
        $event_end_date = date('Y-m-d', strtotime($this->input->post('booking_date') .' + '.$duration));
        $date_array = date('Y-m', strtotime($this->input->post('booking_date')));
        $date_array = '["'.$date_array.'"]';
        $end_date = $event_end_date;
        $event_start_time = date('H:i:s', strtotime($this->input->post('book_time')));
        $event_end_time = date('H:i:s', strtotime($this->input->post('book_time') .' + '.$duration));
        $unique_key = uniqid();

        $data = array(  'student_id' => $student_id,
                        'event_name' => $minute,
                        'event_color' => 'cus_cal_color1',
                        'event_start_date' => $event_start_date,
                        'event_end_date' => $event_end_date,
                        'date_array' => $date_array,
                        'end_date' => $end_date,
                        'event_start_time' => $event_start_time,
                        'event_end_time' => $event_end_time,
                        'event_repeat_option' => 'Does not repeat',
                        'event_repeat_option_type' => 'Custom',
                        'event_allDay' => 'false',
                        'event_reminder' => 'No reminder',
                        'draggable_id' => 'no_drag_id',
                        'type' => 'event',
                        'created_type' => 'Video Session',
                        'task_priority' => 'No Priority',
                        'unique_key' => $unique_key,
                        'status' => 'active',
                        'date' => date('Y-m-d H:i:s'),
                        'call_id' => $inserted_call_id,
                        'cm_id' => $cm_id,                        
                        'call_rate' => $call_rate,
                        'meeting_id' => $meeting_id,
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertEvent($data);

        $inserted_event_id = $this->db->insert_id();

        $data = array(  'event_id' => $inserted_event_id,
                        'call_id' => $inserted_call_id,
                        'expert_id' => $expert_id,
                        'created_type' => 'Video Session',
                     );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->insertEventCallBooking($data);

        $dm = $this->Front_model->getStudentById($this->input->post('expert_id'));
        $stud_del = $this->Front_model->getStudentById($this->session->userdata('d168_id'));

        $email_to = $dm->email_address;
        $email_from = 'hello@decision168.com';
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Request for virtual Session | Decision 168');
        $this->email->message('                
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Request for virtual Session</title>
            <meta name="description" content="Request for virtual Session">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Request for virtual Session</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello Decision Maker,<br><br>
                                                    A user has requested for the virtual session. Please sign in to reply to the request.
                                                    <br><br>
                                                   
                                                </p>
                                                <a href="'.base_url('').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Sign In</a>
                                               
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>'
        );
        $this->email->send();
        $this->session->set_flashdata('message', 'Call Request Submitted Successfully! You will receive the mail for your request.');
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);  
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function call_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['request'] = $this->Front_model->pendingRequest($this->session->userdata('d168_id'));
      $this->load->view('user/call_request', $data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function acceptCallRequest()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $cid = $this->input->post('cid');
      $expert_approval = $this->input->post('expert_approval');
      $data = array('expert_approval' => $expert_approval);
      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->updateCallBooking($data,$cid);
      $this->Front_model->updateEventCallBooking($data,$cid);

      $cal_del = $this->Front_model->callById($cid);
      $stud_del = $this->Front_model->getStudentById($cal_del->user_id);

        $email_to = $stud_del->email_address;
        $email_from = 'hello@decision168.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Request Status for virtual Session | Decision 168');
        $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Request Status for virtual Session</title>
            <meta name="description" content="Request Status for virtual Session">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Request Status for virtual Session</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucwords($stud_del->first_name.' '.$stud_del->last_name).',<br><br>
                                                    Decision Maker has accepted your request of virtual session. Please make the payment within 48hours.
                                                    <br><br> 
                                                    
                                                </p>
                                                <a href="'.base_url('').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Sign In</a>
                                                
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
        );
        $this->email->send();
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function rejectCallRequest()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $cid = $this->input->post('cid');
      $expert_approval = $this->input->post('expert_approval');
      $reject_reason = $this->input->post('reason');

      $data = array('expert_approval' => $expert_approval,
                    'reject_reason' => $reject_reason,
                  );

      $data = $this->security->xss_clean($data); // xss filter
      $this->Front_model->updateCallBooking($data,$cid);
      $this->Front_model->updateEventCallBooking($data,$cid);
      $cal_del = $this->Front_model->callById($cid);
      $stud_del = $this->Front_model->getStudentById($cal_del->user_id);

        $email_to = $stud_del->email_address;
        $email_from = 'hello@decision168.com'; 
        $email_name = 'Decision 168';

        $this->load->library('email');  
        $config=array(
          'charset'=>'utf-8',
          'wordwrap'=> TRUE,
          'mailtype' => 'html'
          );
        $this->email->initialize($config);
        $this->email->from($email_from, $email_name);
        $this->email->set_header('Reply-To', $email_from."\r\n");
        $this->email->set_header('Return-Path', $email_from."\r\n");
        $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
        $this->email->set_header('MIME-Version', '1.0' . "\r\n");
        $this->email->to($email_to);
        $this->email->set_mailtype('html');
        $this->email->subject('Request Status for virtual Session | Decision 168');
        $this->email->message('                 
          <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Request Status for virtual Session</title>
            <meta name="description" content="Request Status for virtual Session">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Request Status for virtual Session</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello '.ucwords($stud_del->first_name.' '.$stud_del->last_name).',<br><br>
                                                    Decision Maker has declined your request of virtual session. 
                                                    <br>
                                                    Reason: '.$reject_reason.'
                                                    <br><br> 
                                                    
                                                </p>
                                                <a href="'.base_url('').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Sign In</a>
                                                
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
        );
        $this->email->send();
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function all_calls()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['request'] = $this->Front_model->allCalls($this->session->userdata('d168_id'));
      $this->load->view('user/all_calls', $data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function user_call_request()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['request'] = $this->Front_model->userPendingRequest($this->session->userdata('d168_id'));
      $this->load->view('user/user_call_request', $data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function user_all_calls()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $data['stud_del'] = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
      $data['request'] = $this->Front_model->userAllCalls($this->session->userdata('d168_id'));
      $this->load->view('user/user_all_calls', $data);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function set_dm_price_id_session()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $this->session->set_userdata('dm_call_id',$this->input->post('call_id')); 
      $this->session->set_userdata('dm_call_rate_id',$this->input->post('call_rate')); 
      $this->session->set_userdata('dm_stripe_price_id',$this->input->post('price_id')); 
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);  
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function dm_checkout_payment_initialize()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
        $getCusID = $this->Front_model->callById($this->session->userdata('dm_call_id'));

        $cm_id = $getCusID->cm_id;
        $expert_id = $getCusID->expert_id;
        $call_rate_del = $this->Front_model->callRateByCId($cm_id,$expert_id);

        $stripe_cusID = "";
        if($getCusID)
        {
          $stripe_cusID = $getCusID->dm_cus_id;
        }
        if($getCusID->call_rate != ""){
          $packPrice = $getCusID->call_rate;
        }else{
          $packPrice = '500';
        }
        
        $packName = $call_rate_del->pack_name;
        $packID = $call_rate_del->cr_id;
        // $currency = 'usd';

        // Set API key
      \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));

      $response = array(
          'status' => 0,
          'error' => array(
              'message' => 'Invalid Request!'   
          )
      );

      if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        $input = file_get_contents('php://input');
        $request = json_decode($input); 
      }

      if (json_last_error() !== JSON_ERROR_NONE) {
        http_response_code(400);
        echo json_encode($response);
        exit;
      }

      if(!empty($request->createCheckoutSession)){
          // Convert product price to cent
          $stripeAmount = round($packPrice*100, 2);

          // Create new Checkout Session for the order
          try {
              if(!empty($stripe_cusID))
              {
                 $checkout_session = \Stripe\Checkout\Session::create([
                    'line_items' => [[
                      'price' => $this->session->userdata('dm_stripe_price_id'),
                      'quantity' => 1,
                        // 'description' => $packName,
                    ]],
                    'mode' => 'payment',
                    'customer' =>  $stripe_cusID,
                    'allow_promotion_codes' => true,
                    'success_url' => base_url('front/insert_checkout_expert_payment').'?session_id={CHECKOUT_SESSION_ID}',
                    'cancel_url' => base_url('user-all-calls'),
                ]);
              }
              else
              {
                $checkout_session = \Stripe\Checkout\Session::create([
                    'line_items' => [[
                      'price' => $this->session->userdata('dm_stripe_price_id'),
                      'quantity' => 1,
                        // 'description' => $packName,
                    ]],
                    'mode' => 'payment',
                    'allow_promotion_codes' => true,
                    'success_url' => base_url('front/insert_checkout_expert_payment').'?session_id={CHECKOUT_SESSION_ID}',
                    'cancel_url' => base_url('user-all-calls'),
                ]);
              }         
              
          } catch(Exception $e) { 
              $api_error = $e->getMessage(); 
          }
          
          if(empty($api_error) && $checkout_session){
              $response = array(
                  'status' => 1,
                  'message' => 'Checkout Session created successfully!',
                  'sessionId' => $checkout_session->id
              );
          }else{
              $response = array(
                  'status' => 0,
                  'error' => array(
                      'message' => 'Checkout Session creation failed! '.$api_error   
                  )
              );
          }
      }

      // Return response
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  function insert_checkout_expert_payment()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $payment_id = $statusMsg = '';
      $status = 'error';

      // Check whether stripe checkout session is not empty
      if(!empty($_GET['session_id'])){
          $session_id = $_GET['session_id'];  

              // Set API key
              \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
              
              // Fetch the Checkout Session to display the JSON result on the success page
              try {
                  $checkout_session = \Stripe\Checkout\Session::retrieve($session_id);
              } catch(Exception $e) { 
                  $api_error = $e->getMessage(); 
              }
              if(empty($api_error) && $checkout_session){
                  // Retrieve the details of a PaymentIntent
                  try {
                      $paymentIntent = \Stripe\PaymentIntent::retrieve($checkout_session->payment_intent);
                  } catch (\Stripe\Exception\ApiErrorException $e) {
                      $api_error = $e->getMessage();
                  }
                  
                  // Retrieves the details of customer
                  try {
                      $customer = \Stripe\Customer::retrieve($checkout_session->customer);
                  } catch (\Stripe\Exception\ApiErrorException $e) {
                      $api_error = $e->getMessage();
                  }
                  if(empty($api_error) && $paymentIntent){ 
                      // Check whether the payment was successful
                      if(!empty($paymentIntent) && $paymentIntent->status == 'active'){
                  
                          // Transaction details 
                          $transactionID = $paymentIntent->id;
                          $paidAmount = $paymentIntent['plan']->amount;
                          $paidAmount = ($paidAmount/100);
                          $paidCurrency = $paymentIntent['plan']->currency;
                          $payment_status = $paymentIntent->status;
                           
                          // Customer details
                         $customer_id = $customer_name = $customer_email = '';
                          if(!empty($customer)){
                            $getCusID = $this->Front_model->callById($this->session->userdata('dm_call_id'));
                            $customer_id = "";
                            if($getCusID)
                            {
                              if(!empty($getCusID->dm_cus_id))
                              {
                                $customer_id = $getCusID->dm_cus_id;
                              }
                              else
                              {
                                $customer_id = !empty($customer->id)?$customer->id:''; 
                              }
                            }
                            else
                            {
                              $customer_id = !empty($customer->id)?$customer->id:''; 
                            }                              
                              $customer_name = !empty($customer->name)?$customer->name:'';
                              $customer_email = !empty($customer->email)?$customer->email:'';
                          }  
          
                        if($getCusID->dm_package_coupon_id != '0')
                        {
                          $used_coupons = $getCusID->dm_used_package_coupon_id.','.$getCusID->dm_package_coupon_id;
                        }
                        else
                        {                          
                          $used_coupons = $getCusID->dm_used_package_coupon_id;
                        }

                        $cm_id = $getCusID->cm_id;
                        $expert_id = $getCusID->expert_id;
                        $call_rate_del = $this->Front_model->callRateByCId($cm_id,$expert_id);

                        // Insert tansaction data into the database
                        $upData = array(
                          'dm_cus_id' => $customer_id,
                          'paid' => '1',
                          'paid_date' => date('Y-m-d H:i:s'),
                          'dm_package_id' => $call_rate_del->cr_id,
                          'dm_package_start' => date('Y-m-d H:i:s'),
                          'dm_paid_amount' => $paidAmount,
                          'dm_paid_amount_currency' => $paidCurrency,
                          'dm_txn_id' => $transactionID,
                          'dm_payment_status' => $payment_status,
                          'dm_used_package_coupon_id' => $used_coupons,
                        );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateCallBooking($upData,$this->session->userdata('dm_call_id'));
                          
                          $status = 'success';
                          $statusMsg = 'Your Payment has been Successful!';
                          $this->session->set_flashdata('message', 'Payment Done Successfully!');
                          redirect(base_url('dashboard'));
                      } elseif(!empty($paymentIntent) && $paymentIntent->status == 'succeeded'){
                          // Transaction details 
                          $transactionID = $paymentIntent->id;
                          $paidAmount = $paymentIntent->amount;
                          $paidAmount = ($paidAmount/100);
                          $paidCurrency = $paymentIntent->currency;
                          $payment_status = $paymentIntent->status;
                           
                          // Customer details
                         $customer_id = $customer_name = $customer_email = '';
                          if(!empty($customer)){
                            $getCusID = $this->Front_model->callById($this->session->userdata('dm_call_id'));
                            $customer_id = "";
                            if($getCusID)
                            {
                              if(!empty($getCusID->dm_cus_id))
                              {
                                $customer_id = $getCusID->dm_cus_id;
                              }
                              else
                              {
                                $customer_id = !empty($customer->id)?$customer->id:''; 
                              }
                            }
                            else
                            {
                              $customer_id = !empty($customer->id)?$customer->id:''; 
                            }                              
                              $customer_name = !empty($customer->name)?$customer->name:'';
                              $customer_email = !empty($customer->email)?$customer->email:'';
                          }
                          
                        if($getCusID->dm_package_coupon_id != '0')
                        {
                          $used_coupons = $getCusID->dm_used_package_coupon_id.','.$getCusID->dm_package_coupon_id;
                        }
                        else
                        {                          
                          $used_coupons = $getCusID->dm_used_package_coupon_id;
                        }

                        $cm_id = $getCusID->cm_id;
                        $expert_id = $getCusID->expert_id;
                        $call_rate_del = $this->Front_model->callRateByCId($cm_id,$expert_id);
                        
                        // Insert tansaction data into the database
                        $upData = array(
                          'dm_cus_id' => $customer_id,
                          'paid' => '1',
                          'paid_date' => date('Y-m-d H:i:s'),
                          'dm_package_id' => $call_rate_del->cr_id,
                          'dm_package_start' => date('Y-m-d H:i:s'),
                          'dm_paid_amount' => $paidAmount,
                          'dm_paid_amount_currency' => $paidCurrency,
                          'dm_txn_id' => $transactionID,
                          'dm_payment_status' => $payment_status,
                          'dm_used_package_coupon_id' => $used_coupons,
                        );
                        $upData = $this->security->xss_clean($upData); // xss filter
                        $this->Front_model->updateCallBooking($upData,$this->session->userdata('dm_call_id'));
                          
                          $status = 'success';
                          $statusMsg = 'Your Payment has been Successful!';
                          $this->session->set_flashdata('message', 'Payment Completed Successfully!');
                          redirect(base_url('user-all-calls'));
                      }else{
                          $statusMsg = "Transaction has been failed!";
                      }
                  }else{
                      $statusMsg = "Unable to fetch the transaction details! $api_error"; 
                  }
              }else{
                  $statusMsg = "Invalid Transaction! $api_error"; 
              }
      }else{
        $statusMsg = "Invalid Request!";
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function expertApproveNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $id = $this->input->post('id');
    $check = $this->Front_model->getStudentById($id);
    if($check)
    {
      if($check->call_notify_clear == 'no')
      {
        $data = array(
                                    'call_notify_clear' => 'yes',
                                );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->updateRegistration($data,$id);
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function update_call_rate()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $call_minutes = $this->Front_model->callMinutes();
      $expert_id = $this->session->userdata('d168_id');
      $post = $this->input->post();
      if(!array_filter($post)){
          $response['status'] = 'blank';
          header('Content-type: application/json');
          exit(json_encode($response));
      }else{
        if($call_minutes){
          foreach ($call_minutes as $cm1) {
            $cm_id = $cm1->cm_id;
            $this->form_validation->set_rules('call_rate'.$cm_id,'Call Rate','trim|numeric');
          }
        }

        if($this->form_validation->run() == FALSE)
        {
            $errors = $this->form_validation->error_array();
            // Loop through $_POST and get the keys
            foreach ($errors as $key => $value)
            {
              // Add the error message for this field
              $errors[$key] = form_error($key);
            }
          
            $response['errors'] = array_filter($errors); // Some might be empty
            $response['status'] = FALSE;
            // You can use the Output class here too
            header('Content-type: application/json');
            exit(json_encode($response));
        }
        else{
          if($call_minutes){
            foreach ($call_minutes as $cm) {
              $cm_id = $cm->cm_id;
              $call_rate = $this->input->post('call_rate'.$cm_id);
              $call_rate_del = $this->Front_model->callRateByCId($cm_id,$expert_id);
              if($call_rate_del)
              {
                if($call_rate != "") // Update Call Rate
                {
                  $new_price_id = $call_rate_del->stripe_price_id;
                  $price = $call_rate*100;
                  // Set API key
                  \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
                  \Stripe\Product::update(
                                $call_rate_del->stripe_product_id,
                                ['name' => $this->input->post('pack_name'.$cm_id),]
                              );
                  if($call_rate_del->call_rate != $call_rate)
                  {
                    \Stripe\Price::update(
                                    $call_rate_del->stripe_price_id,
                                    ['active' => 'false',]
                                  );
                    $stripe_price = \Stripe\Price::create([
                                  'unit_amount_decimal' => $price,
                                  'currency' => 'usd',
                                  'product' => $call_rate_del->stripe_product_id,
                                ]);
                    $new_price_id = $stripe_price->id;
                  }
                  $data = array( 'stripe_price_id' => $new_price_id,
                                 'pack_name' => $this->input->post('pack_name'.$cm_id),
                                 'expert_id' => $expert_id,
                                 'cm_id' => $cm_id,
                                 'call_rate' => $call_rate,
                                 'status' => 'active',
                                 'created_date' => date('Y-m-d H:i:s'),
                               );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->update_call_rate($data,$cm_id,$expert_id);
                }
                else if($call_rate == "") // Delete Call Rate
                {
                  $this->Front_model->delete_call_rate($cm_id,$expert_id);
                }
              }
              else
              {
                if($call_rate != "") // Insert Call Rate
                {
                  $price = $call_rate*100;
                  // Set API key
                  \Stripe\Stripe::setApiKey($this->config->item('stripe_api_key'));
                  $stripe_prod = \Stripe\Product::create(['name' => $this->input->post('pack_name'.$cm_id),]);
                  $stripe_price = \Stripe\Price::create([
                                    'unit_amount_decimal' => $price,
                                    'currency' => 'usd',
                                    'product' => $stripe_prod->id,
                                  ]);
                  $stripe_prod = $stripe_prod->id;
                  $stripe_price = $stripe_price->id;

                  $data = array( 'stripe_product_id' => $stripe_prod,
                                 'stripe_price_id' => $stripe_price,
                                 'pack_name' => $this->input->post('pack_name'.$cm_id),
                                 'expert_id' => $expert_id,
                                 'cm_id' => $cm_id,
                                 'call_rate' => $call_rate,
                                 'status' => 'active',
                                 'created_date' => date('Y-m-d H:i:s'),
                                 'coupon_pack' => 'no',
                               );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insertCallRate($data);
                }
              }
            }
              $data = array(
                            'call_rate_set' => 1,
                        );
            $data = $this->security->xss_clean($data); // xss filter
            $this->Front_model->updateRegistration($data,$expert_id);
            $this->session->set_flashdata('message', 'Call Rate Updated Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);
          }
        }
      }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function get_call_rate_data()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $cm_id = $this->input->post('cm_id');
      $expert_id = $this->input->post('expert_id');
      $exp_call_del = $this->Front_model->callRateByCId($cm_id,$expert_id);
      $response['call_rate'] = $exp_call_del->call_rate;
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function video_session()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $call_id = $this->uri->segment(3);
      $data['call_del'] = $this->Front_model->callById($call_id);
      if($data['call_del']){
        $cm_id = $data['call_del']->cm_id;
        $min_del = $this->Front_model->callMinutesById($cm_id);

        if($min_del->minute == 'Quick - 15 Min'){
            $duration = '15 minute';
        }else if($min_del->minute == 'Regular - 30 Min'){
            $duration = '30 minute';
        }else if($min_del->minute == 'Extra - 45 Min'){
            $duration = '45 minute';
        }else if($min_del->minute == 'All Access - 60 Min'){
            $duration = '60 minute';
        }else if($min_del->minute == 'VIP - 75 Min'){
            $duration = '75 minute';
        }else if($min_del->minute == 'Bonus - 90 Min'){
            $duration = '90 minute';
        }

        $date_time = $data['call_del']->booking_date.' '.$data['call_del']->book_time;
        $db_date_time = date('Y-m-d H:i', strtotime($date_time));
        $af_date_time = date('Y-m-d H:i', strtotime($date_time .' + '.$duration));
        $nw_date_time = date('Y-m-d H:i');
        if(($nw_date_time >= $db_date_time) && ($nw_date_time <= $af_date_time)){
          $this->load->view('user/video_session',$data);
        }else{
          $this->load->view('user/invalid_session',$data);
        }
      }else{
        $this->load->view('user/invalid_session',$data);
      }
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function cancel_call_booking()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $call_id = $this->input->post('cid');
      $delete_call1 = $this->Front_model->deleteCallBooking($call_id);
      $delete_call2 = $this->Front_model->deleteEventCallBooking($call_id);
      $delete_call3 = $this->Front_model->delete_event($call_id);
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  // End Community Functions ///////////////////////////

  //////////corporate section////////////

  public function corporate_registration()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      redirect(base_url('dashboard'));    
    }
    else
    {   
      $cor_id = $this->uri->segment(2);
      $check_com = $this->Front_model->checkCompanyEncrypt($cor_id);
      if($check_com)
      {
        $data['cc_corporate_id'] = $check_com->cc_corporate_id;
        $data['authURL'] =  $this->facebook->login_url(); 
        $this->load->view('user/registration-corporate',$data);
      }
      else
      {
        $this->load->view('user/pages-404');
      }      
    }
  }

  public function insert_corporate_registration() //Insert Student Details
  {
    $this->form_validation->set_rules('corporate_id','Corporate id','trim|required');
    $this->form_validation->set_rules('full_name','Full Name','trim|required|callback_alpha_space|max_length[50]',array('max_length' => 'Full Name is too long!'));
    // $this->form_validation->set_rules('first_name','First Name','trim|required|callback_alpha_space|max_length[20]',array('max_length' => 'First Name is too long!'));
    //$this->form_validation->set_rules('middle_name','Middle Name','trim|max_length[20]',array('max_length' => 'Middle Name is too long!'));
    //$this->form_validation->set_rules('last_name','Last Name','trim|required|callback_alpha_space|max_length[25]',array('max_length' => 'Last Name is too long!'));
    $this->form_validation->set_rules('email_address','Email Address','valid_email|trim|required|is_unique[registration.email_address]',array('is_unique' => 'Email Address already exists, Please Login'));
    $this->form_validation->set_rules('password','password','trim|required|min_length[5]|callback_valid_password');
    //$this->form_validation->set_rules('conf_password','Confirm Password','trim|required|required|matches[password]');
    $this->form_validation->set_rules('g-recaptcha-response','Recaptcha','required');
    $this->form_validation->set_rules('terms_privacy','Terms & Privacy Policy','trim|required');

    if ($this->form_validation->run() == FALSE)
    {
        //$errors = array();

        $errors = $this->form_validation->error_array();
        // Loop through $_POST and get the keys
        foreach ($errors as $key => $value)
        {
          // Add the error message for this field
          $errors[$key] = form_error($key);
        }
      
        $response['errors'] = array_filter($errors); // Some might be empty
        $response['status'] = FALSE;
        // You can use the Output class here too
        header('Content-type: application/json');
        //echo json_encode($response);
        exit(json_encode($response));
    }
    else
    {
      $fullname = trim($this->input->post('full_name'));
      $strArray = explode(' ',$fullname);
      $words = count($strArray);

      if($words < 2)
      {
        $response['status'] = 'fullnameErr';
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      elseif($words > 3)
      {
        $response['status'] = 'fullname2Err';
        header('Content-type: application/json');
        exit(json_encode($response));
      }
      else
      {
        $cc_corporate_id = $this->input->post('corporate_id');
        $checkComp = $this->Front_model->checkCompany($cc_corporate_id);
        $email = $this->input->post('email_address');

        if($checkComp)
        {          
          $secretKey = "6LeGztMcAAAAABo3gtAjhWfM9J2ZNVKgR5jPwDE1";
          //$secretKey = "6Ld21JMaAAAAAKdJWi_bhns9O7kP3C85sordZMdB";
          $responseKey = $this->input->post('g-recaptcha-response');
          $userIP = $this->input->server('REMOTE_ADDR');       
          $url = "https://www.google.com/recaptcha/api/siteverify?secret=$secretKey&response=$responseKey&remoteip=$userIP";
          $response1 = file_get_contents($url);
          $response1 = json_decode($response1);

          if($response1->success)
          {
            $exact_totalemp = $checkComp->cc_tusers;
            $count_emp = $this->Front_model->count_emp($checkComp->cc_id);
            $count_temp = "0";
            if($count_emp)
            {
                $count_temp = $count_emp['count_rows'];   
            }
            /// limit emps
            if($count_temp < $exact_totalemp)
            {
              if($words == 3)
              {
                $fname = $strArray[0];
                $mname = $strArray[1];
                $lname = $strArray[2];
              }
              else
              {
                $fname = $strArray[0];
                $mname = "";
                $lname = $strArray[1];
              }        

              // MailChimp API credentials
              $apiKey = '371ac802d0f3416b8149e5deb7a39daf-us6';
              $listID = '2ecef410e7';
              
              // MailChimp API URL
              $memberID = md5(strtolower($email));
              $dataCenter = substr($apiKey,strpos($apiKey,'-')+1);
              $url = 'https://' . $dataCenter . '.api.mailchimp.com/3.0/lists/' . $listID . '/members/' . $memberID;
              
              // member information
              $json = json_encode([
                  'email_address' => $email, 
                  'status'        => 'subscribed',           
                   'merge_fields'  => [
                      'FNAME'     => $fname,
                      'LNAME'     => $lname
                  ]
              ]);
             
            //echo $json;
            // send a HTTP POST request with curl
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_USERPWD, 'user:' . $apiKey);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, 10);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
            $result = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            
            // echo $result;
            // echo $httpCode;
            // die();
            // store the status message based on response code
            if ($httpCode == 200) 
            {
              $used_corporate_id = $checkComp->cc_corporate_id;
              $checkCompEmp = $this->Front_model->checkCompanyEmp($email,$checkComp->cc_id);
              if(!empty($checkCompEmp))
              {
                $inData = array(
                      'status' => 'accepted',
                    );
                $inData = $this->security->xss_clean($inData); // xss filter
                $this->Front_model->update_contacted_company_emp($inData,$checkCompEmp->cce_id);
                $cce_id = $checkCompEmp->cce_id;
              }
              else
              {
                $inData = array(
                        'cc_id' => $checkComp->cc_id,
                        'emp_email' => $email,
                        'emp_status' => 'active',
                        'status' => 'accepted',
                        'cce_date' => date('Y-m-d'),
                        'contacted_user' => 'no'
                      );
                $inData = $this->security->xss_clean($inData); // xss filter
                $this->Front_model->insert_contacted_company_emp($inData);
                $cce_id = $this->db->insert_id();
              }

              if($this->input->post('terms_privacy'))
              {
                $agree = 'yes';
              }
                  $verification_code = uniqid().uniqid();

              $pacid = "";
              if(isset($_COOKIE["d168_personal_acc_id"]))
              {
                $pacid = $_COOKIE["d168_personal_acc_id"];
                $data = array(  'personal_acc_created' => 'yes' );
                $data = $this->security->xss_clean($data); // xss filter
                $this->Front_model->updateRegistration($data,$_COOKIE["d168_personal_acc_id"]);
                delete_cookie('d168_personal_acc_id');
              }

                  $data = array(  'first_name' => $fname,
                                  'middle_name' => $mname,
                                  'last_name' => $lname,
                                  'email_address' => $this->input->post('email_address'),
                                  'password' => md5($this->input->post('password')),
                                  'login_password' => $this->input->post('password'),
                                  'verification_code' => $verification_code,
                                  'verified' => 'no',
                                  'agree_terms_privacy' => $agree,
                                  'reg_date' => date('Y-m-d H:i:s'),
                                  'msg_flag' => '0',
                                  'reg_acc_status' => 'activated',
                                  'package_id' => $checkComp->package_id,
                                  'package_start' => $checkComp->package_start,
                                  'package_expiry' => $checkComp->package_expiry,
                                  'paid_amount' => '0',
                                  'used_corporate_id' => $used_corporate_id,
                                  'cce_id' => $cce_id,
                                  'role_in_comp' => 'employee',
                                  'personal_acc_created' => $pacid,
                               );
                  $data = $this->security->xss_clean($data); // xss filter
                  $this->Front_model->insertRegistration($data);
                  $inserted_id = $this->db->insert_id();
                  //check if account is recreated
                  $check_re_created_acc = $this->Front_model->check_re_created_acc($email);
                  if(!empty($check_re_created_acc))
                  {
                    $this->Front_model->delete_registration_deleted($email);
                  }
                  //check email is invited for any project
                  $check_invitation = $this->Front_model->checkInviteMemberEmail($email);
                  if($check_invitation)
                  {
                    foreach($check_invitation as $i)
                    {
                      if($i->status == 'pending')
                      {
                        $data5 = array(
                                        'status' => 'accepted',
                                        'accept_date' => date('Y-m-d H:i:s'),
                                        'status_notify' => 'yes',
                                        'status_notify_clear' => 'no',
                                      );
                        $data5 = $this->security->xss_clean($data5);
                        $this->Front_model->update_invite_request($data5,$email);

                        $get_gs_pid = $this->Front_model->getProjectById($i->pid);
                        $hdata = array(
                                                        'pid' => $i->pid,
                                                        'gid' => $get_gs_pid->gid,
                                                        'sid' => $get_gs_pid->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource' => $i->sent_to,
                                                        'h_description' => 'Invite Accepted By '.$i->sent_to,
                                                        'pinvited_id' =>$i->im_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                            $pdetail = $this->Front_model->ProjectDetailPortfolio($i->pid);
                            $data21 = array(    'status' => 'accepted',
                                'working_status' => 'active',
                                'status_date' => date('Y-m-d H:i:s'),
                                'status_notify' => 'seen',
                                'status_notify_clear' => 'yes',
                                );
                            $data21 = $this->security->xss_clean($data21); // xss filter
                            $this->Front_model->update_PortfolioMemberPIM($data21,$email,$pdetail->portfolio_id);
                            $data2 = array(
                                              'pid' => $i->pid,
                                              'portfolio_id' => $pdetail->portfolio_id,
                                              'pmember' => $inserted_id,
                                              'status' => 'accepted',
                                              'pcreated_by' => $i->sent_from,
                                              'status_date' => date('Y-m-d H:i:s')
                                                                );
                                          $data2 = $this->security->xss_clean($data2); // xss filter
                                          $this->Front_model->insert_TeamMember($data2);
                                          $inserted_pm_id = $this->db->insert_id();
                                          $hdata = array(
                                                        'pid' => $i->pid,
                                                        'gid' => $get_gs_pid->gid,
                                                        'sid' => $get_gs_pid->sid,
                                                        'h_date' => date('Y-m-d H:i:s'),
                                                        'h_resource' => $fname.' '.$lname,
                                                        'h_description' => 'Team Member Request Accepted By '.$fname.' '.$lname,
                                                        'pmember_id' =>$inserted_pm_id
                                                    );
                                                    $hdata = $this->security->xss_clean($hdata); // xss filter
                                                    $this->Front_model->insert_ProjectHistory($hdata);
                        $data4 = array(
                              'pid' => $i->pid,
                              'powner' => $i->sent_from,
                              'pmember' => $inserted_id,
                              'edit_allow' => 'no',                            
                            );
                        $data4 = $this->security->xss_clean($data4);
                        $this->Front_model->insert_projectManagement($data4);
                        $pmanage_inserted_id = $this->db->insert_id();
                        $hdata = array(
                                      'pid' => $i->pid,
                                      'gid' => $get_gs_pid->gid,
                                      'sid' => $get_gs_pid->sid,
                                      'h_date' => date('Y-m-d H:i:s'),
                                      'h_resource' => $fname.' '.$lname,
                                      'h_description' => 'Edit Permission not allowed to '.$fname.' '.$lname,
                                      'pmanage_id' =>$pmanage_inserted_id
                                  );
                                  $hdata = $this->security->xss_clean($hdata); // xss filter
                                  $this->Front_model->insert_ProjectHistory($hdata);
                      }
                    }                  
                  }
                  //check email is invited for any goal
                  $check_invitation_goal = $this->Front_model->checkGoalInviteMemberEmail($email);
                  if($check_invitation_goal)
                  {
                    foreach($check_invitation_goal as $ig)
                    {
                      if($ig->status == 'pending')
                      {
                        $iggm_id = $ig->igm_id;
                        $data5 = array(
                                        'status' => 'accepted',
                                        'accept_date' => date('Y-m-d H:i:s'),
                                        'status_notify' => 'yes',
                                        'status_notify_clear' => 'no',
                                      );
                        $data5 = $this->security->xss_clean($data5);
                        $this->Front_model->update_goal_invite_request($data5,$iggm_id);
                        $hdata = array(
                                          'gid' => $ig->gid,
                                          'h_date' => date('Y-m-d H:i:s'),
                                          'h_resource' => $ig->sent_to,
                                          'h_description' => 'Invite Accepted By '.$ig->sent_to,
                                          'ginvited_id' =>$iggm_id
                                      );
                                      $hdata = $this->security->xss_clean($hdata); // xss filter
                                      $this->Front_model->insert_ProjectHistory($hdata);
                            $gdetail = $this->Front_model->GoalDetail($ig->gid);
                            $data21 = array(    'status' => 'accepted',
                                'working_status' => 'active',
                                'status_date' => date('Y-m-d H:i:s'),
                                'status_notify' => 'seen',
                                'status_notify_clear' => 'yes',
                                );
                            $data21 = $this->security->xss_clean($data21); // xss filter
                            $this->Front_model->update_PortfolioMemberPIM($data21,$email,$gdetail->portfolio_id);

                            $data2 = array(
                              'gid' => $ig->gid,
                              'portfolio_id' => $gdetail->portfolio_id,
                              'gmember' => trim($inserted_id),
                              'status' => 'accepted',
                              'gcreated_by' => $gdetail->gcreated_by,
                              'sent_date' => date('Y-m-d H:i:s'),
                              'sent_notify_clear' => 'yes',
                                                );
                          $data2 = $this->security->xss_clean($data2); // xss filter
                          $this->Front_model->insert_GoalTeamMember($data2);
                          $inserted_pm_id = $this->db->insert_id();
                          //get email id from member id
                          // $getEmailID = $this->Front_model->getEmailID($inserted_id);
                          // $P_Owner = $this->Front_model->getEmailID($gdetail->gcreated_by);
                          // $hdata = array(
                          //                   'gid' => $ig->gid,
                          //                   'h_date' => date('Y-m-d H:i:s'),
                          //                   'h_resource_id' => $P_Owner->reg_id,
                          //                   'h_resource' => $P_Owner->first_name.' '.$P_Owner->last_name,
                          //                   'h_description' => $P_Owner->first_name.' '.$P_Owner->last_name.' sent goal manager request to '.$getEmailID->first_name.' '.$getEmailID->last_name,
                          //                   'gmember_id' =>$inserted_pm_id
                          //               );
                          //               $hdata = $this->security->xss_clean($hdata); // xss filter
                          //               $this->Front_model->insert_ProjectHistory($hdata);
                      }
                    }                  
                  }
                  //check email is invited for portfolio team member
                  $check_portTM = $this->Front_model->check_portTM($email);
                  if($check_portTM)
                  {
                    foreach($check_portTM as $cptm)
                    {
                      $idata = array(    'status' => 'accepted',
                                         'working_status' => 'active',
                                         'status_date' => date('Y-m-d H:i:s'),
                                         'status_notify' => 'yes',
                                         'status_notify_clear' => 'no',
                                    );
                            $idata = $this->security->xss_clean($idata); // xss filter
                            $this->Front_model->update_InvitePortfolioMember($idata,$email);
                    }
                  }
                  //check invited for meeting
                  $check_meetm = $this->Front_model->CheckMeetingInvitedMemberEmail($email);
                  if($check_meetm)
                  {
                    foreach($check_meetm as $meetm)
                    {
                      $getEvts = $this->Front_model->getDataByUniqueId($meetm->event_unique_key);
                      if($getEvts)
                      {
                        $check_portm = $this->Front_model->checkPortfolioMemberEmail($meetm->member,$meetm->portfolio_id);
                        if($check_portm == 0)
                        {
                          $data = array(
                                                  'portfolio_id' => $meetm->portfolio_id,
                                                  'sent_to' => $meetm->member,
                                                  'sent_from' => $meetm->sent_by,
                                                  'status' => 'accepted',
                                                  'working_status' => 'active',
                                                  'status_date' => date('Y-m-d H:i:s')
                                                );
                                  $data = $this->security->xss_clean($data); // xss filter
                                  $this->Front_model->insert_PortfolioMember($data);
                        }

                        foreach($getEvts as $evt)
                        {
                          $data = array(
                                        'event_id' => $evt->id,
                                        'event_unique_key' => $meetm->event_unique_key,
                                        'member' => $inserted_id,
                                        'status' => 'accepted',
                                        'status_date' => date('Y-m-d H:i:s'),
                                        'created_by' => $evt->student_id,
                                        'created_type' => $evt->created_type,
                                        'm_date' => date('Y-m-d H:i:s'),
                                                          );
                                    $data = $this->security->xss_clean($data); // xss filter
                                    $this->Front_model->insert_events_meeting($data);
                        }

                        // $updata = array(
                        // 'status' => 'accepted',
                        // 'status_date' => date('Y-m-d H:i:s'),
                        //                   );
                        // $updata = $this->security->xss_clean($updata); // xss filter
                        // $this->Front_model->update_events_meeting_invited_members($updata,$meetm->imid);
                      }
                    }                  
                  }

                  $email_to = $this->input->post('email_address');
                  $email_from = 'hello@decision168.com'; 
                  //$email_from = 'saramaazkhan123@gmail.com'; 
                  $email_name = 'Decision 168';

                  $this->load->library('email');  
                  $config=array(
                    'charset'=>'utf-8',
                    'wordwrap'=> TRUE,
                    'mailtype' => 'html'
                    );
                  $this->email->initialize($config);
                  $this->email->from($email_from, $email_name);
                  $this->email->set_header('Reply-To', $email_from."\r\n");
                  $this->email->set_header('Return-Path', $email_from."\r\n");
                  $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
                  $this->email->set_header('MIME-Version', '1.0' . "\r\n");
                  $this->email->to($email_to);
                  $this->email->set_mailtype('html');
                  $this->email->subject('Account Verification | Decision 168');
                  $this->email->message('
                   
            <!doctype html>
            <html lang="en-US">

            <head>
              <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
              <title>Account Verification</title>
              <meta name="description" content="Account Verification">
              <style type="text/css">
                  a:hover {text-decoration: underline !important;pointer:cursor !important;}
              </style>
            </head>

            <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
              <!--100% body table-->

              <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                  style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                  <tr>
                      <td>
                          <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                    <a href="'.base_url().'" title="Decision 168" target="_blank">
                                      <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                    </a>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td>
                                      <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                          style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                          <tr>
                                              <td style="padding:0 35px;">
                                                  <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Almost there...</h1>
                                                  <span
                                                      style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                  <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                  Hello '.$fname.',<br><br>
                                                      We are excited to get you going with the Decision 168 Accountability & Productivity Platform (D168). But first, you need to confirm your account.
                                                      <br><br>
                                                      Just click the button below to verify your account.
                                                  </p>
                                                  <a href="'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'"
                                                      style="background:#c7df19;text-decoration:none !important; font-weight:600; margin-top:35px; margin-bottom: 20px; color:#fff;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Verify Your Account</a>
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:center; margin:0;">
                                                      If that doesn\'t work, copy and paste the following link in your browser:
                                                      <br>
                                                      <a onMouseOver="this.style.pointer=cursor" href="'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'" style="color:#c7df19;text-decoration: none;">'.base_url('account-verification/'.$inserted_id.'/'.md5($email_to).'/'.$verification_code).'</a>
                                                      </p>
                                                      <br><br>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                      We are looking forward to welcoming you to the Decision 168 community.
                                                      <br><br>
                                                      Thanks,
                                                      <br>
                                                      The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                      </p>
                                                      <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                      <br>
                                                      <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                      <br>
                                                      <a onMouseOver="this.style.pointer=cursor" href="'.base_url().'" style="color:#c7df19;font-size:11px;text-decoration: none;">view it in your browser</a>
                                                      </p>
                                              </td>
                                          </tr>
                                          <tr>
                                              <td style="height:40px;">&nbsp;</td>
                                          </tr>
                                      </table>
                                  </td>
                              <tr>
                                  <td style="height:20px;">&nbsp;</td>
                              </tr>
                              <tr>
                                  <td style="text-align:center;">
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                  <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                  <br>
                                      <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                  </td>
                              </tr>
                              <tr>
                                  <td style="height:80px;">&nbsp;</td>
                              </tr>
                          </table>
                      </td>
                  </tr>
              </table>
              <!--/100% body table-->
            </body>

            </html>' 
                        );
                  if($this->email->send())
                  {
                    $this->session->set_flashdata('message', 'Verification Link has been sent on your Registered Email Address.');
                    $response['status'] = TRUE;
                    header('Content-type: application/json');
                    echo json_encode($response);
                  }else{
                    echo $this->email->print_debugger();
                  }
              }
              else
              {
                    $response['status'] = 'Error_Registration';
                    header('Content-type: application/json');
                    exit(json_encode($response));
              } 
            }
            else
            {
              $response['status'] = 'Limit_Error';
              header('Content-type: application/json');
              exit(json_encode($response));
            }
          }
          else
          {
            $response['errors'] = 'Verification Failed';
            $response['status'] = FALSE;
            header('Content-type: application/json');
            exit(json_encode($response));
          }
        }       
      }
    }
  }

  public function create_personal_account()
  {
      //delete_cookie('d168_selectedportfolio');
      setcookie("d168_personal_acc_id",$this->session->userdata('d168_id'),time()+ (10 * 365 * 24 * 60 * 60),'/');
      $this->session->unset_userdata('created_tl_port_id');
      $this->session->unset_userdata('created_tl_pid');
      $this->session->unset_userdata('d168_user_role_in_comp');
      $this->session->unset_userdata('d168_user_cor_id');
      $this->session->unset_userdata('d168_id');
      $this->session->sess_destroy();
  }

  public function switch_to_personal_account()
  {
      //delete_cookie('d168_selectedportfolio');
      //setcookie("d168_email","",time() - 3600,'/');
      $this->session->unset_userdata('created_tl_port_id');
      $this->session->unset_userdata('created_tl_pid');
      $this->session->unset_userdata('d168_user_role_in_comp');
      $this->session->unset_userdata('d168_user_cor_id');
      $this->session->unset_userdata('d168_id');
      $this->session->sess_destroy();
  }

  //////////corporate section////////////

  // request to preview files if view only selected in role

  public function file_preview_access_req() 
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $pid = $this->input->post('pid');
      $check_permission = $this->Front_model->check_file_preview_access($pid);

      if(empty($check_permission))
      {
        $data = array(
              'pid' => $pid,
              'req_by' => $this->session->userdata('d168_id'),
              'req_status' => 'sent',
              'req_notify' => 'yes',
              'req_notify_clear' => 'no',
              'req_date' => date('Y-m-d'),
          );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->insert_file_preview_access_req($data);
          $inserted_id = $this->db->insert_id();

          $getEmailID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $getProject = $this->Front_model->getProjectDetailID($pid);

          $email_to = $getEmailID->email_address;
              $email_from = 'hello@decision168.com'; 
              $email_name = 'Decision 168';

              $this->load->library('email');  
              $config=array(
                'charset'=>'utf-8',
                'wordwrap'=> TRUE,
                'mailtype' => 'html'
                );
              $this->email->initialize($config);
              $this->email->from($email_from, $email_name);
              $this->email->set_header('Reply-To', $email_from."\r\n");
              $this->email->set_header('Return-Path', $email_from."\r\n");
              $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
              $this->email->set_header('MIME-Version', '1.0' . "\r\n");
              $this->email->to($email_to);
              $this->email->set_mailtype('html');
              $this->email->subject('Preview Permission Request | Decision 168');
              $this->email->message('                 
                  <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Preview Permission Request</title>
            <meta name="description" content="Preview Permission Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Preview Permission Request...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($getEmailID->first_name).' '.ucfirst($getEmailID->last_name).' has requested to preview files for '.$getProject->pname.'. Just click the appropriate button below.
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('preview-permission-request/'.$inserted_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept</a>
                                                <a href="'.base_url('preview-permission-request/'.$inserted_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reject</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                  );
          $this->email->send();
      }
      elseif($check_permission)
      {
        if($check_permission->req_status == 'rejected')
        {
          $data = array(
              'req_status' => 'sent',
              'req_notify' => 'yes',
              'req_notify_clear' => 'no',
              'req_date' => date('Y-m-d'),
              'req_accept_date' => '',
              'res_notify' => '',
              'res_notify_clear' => '',
              'res_date' => '',
          );
          $data = $this->security->xss_clean($data); // xss filter
          $this->Front_model->update_file_preview_access_req($data, $check_permission->fpid);
          $inserted_id = $check_permission->fpid;

          $getEmailID = $this->Front_model->getStudentById($this->session->userdata('d168_id'));
          $getProject = $this->Front_model->getProjectDetailID($pid);

          $email_to = $getEmailID->email_address;
          $email_from = 'hello@decision168.com'; 
          $email_name = 'Decision 168';

          $this->load->library('email');  
          $config=array(
            'charset'=>'utf-8',
            'wordwrap'=> TRUE,
            'mailtype' => 'html'
            );
          $this->email->initialize($config);
          $this->email->from($email_from, $email_name);
          $this->email->set_header('Reply-To', $email_from."\r\n");
          $this->email->set_header('Return-Path', $email_from."\r\n");
          $this->email->set_header('X-Mailer', 'PHP/' . phpversion().'\r\n');
          $this->email->set_header('MIME-Version', '1.0' . "\r\n");
          $this->email->to($email_to);
          $this->email->set_mailtype('html');
          $this->email->subject('Preview Permission Request | Decision 168');
          $this->email->message('                 
              <!doctype html>
          <html lang="en-US">

          <head>
            <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
            <title>Preview Permission Request</title>
            <meta name="description" content="Preview Permission Request">
            <style type="text/css">
                a:hover {text-decoration: underline !important;pointer:cursor !important;}
            </style>
          </head>

          <body marginheight="0" topmargin="0" marginwidth="0" style="margin: 0px; background-color: #f2f3f8;" leftmargin="0">
            <!--100% body table-->

            <table cellspacing="0" border="0" cellpadding="0" width="100%" bgcolor="#f2f3f8"
                style="@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: Open Sans, sans-serif;">
                <tr>
                    <td>
                        <table style="background-color: #f2f3f8; max-width:670px;  margin:0 auto;" width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                  <a href="'.base_url().'" title="Decision 168" target="_blank">
                                    <img width="50%" src="'.base_url("assets/images/dark-logo-main.png").'" title="Decision 168" alt="Decision 168">
                                  </a>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td>
                                    <table width="95%" border="0" align="center" cellpadding="0" cellspacing="0"
                                        style="max-width:670px;background:#383838;border:4px solid #dfdddd;text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);">
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                        <tr>
                                            <td style="padding:0 35px;">
                                                <h1 style="color:#c7df19; font-weight:600; margin:0;font-size:33px;font-family:Rubik,sans-serif;">Preview Permission Request...</h1>
                                                <span
                                                    style="display:inline-block; vertical-align:middle; margin:29px 0 29px; border-bottom:2px solid #cecece; width:270px;"></span>
                                                <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                Hello,<br><br>
                                                   '.ucfirst($getEmailID->first_name).' '.ucfirst($getEmailID->last_name).' has requested to preview files for '.$getProject->pname.'. Just click the appropriate button below.
                                                    <br><br>
                                                </p>
                                                <a href="'.base_url('preview-permission-request/'.$inserted_id.'/'.'1').'"
                                                style="background:#c7df19;text-decoration:none !important; font-weight:600; margin:20px; color:#fff;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Accept</a>
                                                <a href="'.base_url('preview-permission-request/'.$inserted_id.'/'.'2').'"
                                                    style="text-decoration:none !important; font-weight:600; margin:20px; color:#c7df19;border:4px solid #c7df19;text-transform:uppercase; font-size:15px;padding:10px 30px;display:inline-block;border-radius:10px;">Reject</a> 
                                                    <br><br>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:left; margin:0;">
                                                    Thanks,
                                                    <br>
                                                    The <span style="color:#c7df19;font-weight: 600;">Decision 168</span> Team
                                                    </p>
                                                    <p style="color:#fff; font-size:15px;line-height:24px;text-align:right; margin:0;">
                                                    <br>
                                                    <img width="20%" src="'.base_url("assets/images/Decision-168.png").'" title="Decision 168" alt="Decision 168">
                                                    </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="height:40px;">&nbsp;</td>
                                        </tr>
                                    </table>
                                </td>
                            <tr>
                                <td style="height:20px;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="text-align:center;">
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">Please note: This e-mail was sent from an auto-notification system that cannot accept incoming e-mail. Do not reply to this message.</p>
                                <p style="color:rgba(69, 80, 86, 0.7411764705882353);font-size:11px;line-height:15px;margin:0;">You can’t unsubscribe from important emails about your account like this one.</p>
                                <br>
                                    <p style="font-size:14px; color:#6b6e70; line-height:18px; margin:0 0 0;">&copy; <strong>Copyright 2013 – '.date("Y").'  |  Decision 168, Inc  |  All Rights Reserved </strong></p>
                                </td>
                            </tr>
                            <tr>
                                <td style="height:80px;">&nbsp;</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <!--/100% body table-->
          </body>

          </html>' 
                                  );
          $this->email->send();
        }
      }

      $this->session->set_flashdata('message','Request Sent Successfully!');
      $response['status'] = TRUE;
      header('Content-type: application/json');
      echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function FilePreviewPermissionReqClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data2 = array(
                      'req_notify_clear' => 'yes',
                        );
      $data2 = $this->security->xss_clean($data2); // xss filter
      $this->Front_model->update_file_preview_access_req($data2,$id);
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

  public function FilePreviewPermissionNotificationModal_Modal()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $getDetail = $this->Front_model->get_file_preview_access($id);
      if($getDetail)
      {
        $data2 = array(
                  'req_notify_clear' => 'yes',
                    );
        $data2 = $this->security->xss_clean($data2); // xss filter
        $this->Front_model->update_file_preview_access_req($data2,$id);

        $getEmailID = $this->Front_model->getStudentById($getDetail->req_by);
        $getProject = $this->Front_model->getProjectDetailID($getDetail->pid);

        if(($getEmailID) && ($getProject))
        {
            echo '<div class="modal-header">
                    <h5 class="modal-title mt-0" id="FilePreviewPermissionNotificationModal">Preview Permission Request...</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                    <div class="card-body">
                        <p class="card-text"> <strong>'.ucfirst($getEmailID->first_name).' '.ucfirst($getEmailID->last_name).'</strong> has requested to preview files for <strong>'.$getProject->pname.' portfolio</strong>. Just click the appropriate button below.
                        </p>
                        <a href="'.base_url('preview-permission-request2/'.$id.'/'.'1').'" class="btn btn-d btn-sm me-1">Accept</a>
                        <a href="'.base_url('preview-permission-request2/'.$id.'/'.'2').'" class="btn bg-d btn-sm text-white">Reject</a>
                    </div>
                  </div>';
        }
      }        
    }
    else
    {
      redirect(base_url('login'));
    }
  }

  public function preview_permission_request()//accept or reject permission request through email id
  {
    $fpid = $this->uri->segment(2);
    $data['flag_num'] = $this->uri->segment(3);
    $getDetail = $this->Front_model->get_file_preview_access($fpid);
    if($getDetail)
    {
      if($data['flag_num'] == '1')
      {
        $fpdata2 = array(
                          'req_notify' => 'seen',
                          'req_notify_clear' => 'yes',
                          'req_status' => 'accepted',
                          'req_accept_date' => date('Y-m-d'),
                          'res_notify' => 'yes',
                          'res_notify_clear' => 'no',
                          'res_date' => date('Y-m-d'),
                            );
        $fpdata2 = $this->security->xss_clean($fpdata2); // xss filter
        $this->Front_model->update_file_preview_access_req($fpdata2,$fpid);

        $this->load->view('user/fpp_request_accept_reject',$data);
      }
      elseif($data['flag_num'] == '2')
      {
        $fpdata2 = array(
                          'req_notify' => 'seen',
                          'req_notify_clear' => 'yes',
                          'req_status' => 'rejected',
                          'req_accept_date' => date('Y-m-d'),
                          'res_notify' => 'yes',
                          'res_notify_clear' => 'no',
                          'res_date' => date('Y-m-d'),
                            );
        $fpdata2 = $this->security->xss_clean($fpdata2); // xss filter
        $this->Front_model->update_file_preview_access_req($fpdata2,$fpid);

        $this->load->view('user/fpp_request_accept_reject',$data);
      }
      else
      {
        $this->load->view('user/fpp_request_invalid');
      }
    }
    else
    {
      $this->load->view('user/fpp_request_invalid');
    }    
  }

  public function preview_permission_request2()//accept or reject permission request through site
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $fpid = $this->uri->segment(2);
      $data['flag_num'] = $this->uri->segment(3);
      $getDetail = $this->Front_model->get_file_preview_access($fpid);
      if($getDetail)
      {
        if($data['flag_num'] == '1')
        {
          $fpdata2 = array(
                            'req_notify' => 'seen',
                            'req_notify_clear' => 'yes',
                            'req_status' => 'accepted',
                            'req_accept_date' => date('Y-m-d'),
                            'res_notify' => 'yes',
                            'res_notify_clear' => 'no',
                            'res_date' => date('Y-m-d'),
                              );
          $fpdata2 = $this->security->xss_clean($fpdata2); // xss filter
          $this->Front_model->update_file_preview_access_req($fpdata2,$fpid);

          $this->load->view('user/fpp_request_accept_reject',$data);
          $this->session->set_flashdata('message', 'You\'ve accepted the request!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        elseif($data['flag_num'] == '2')
        {
          $fpdata2 = array(
                            'req_notify' => 'seen',
                            'req_notify_clear' => 'yes',
                            'req_status' => 'rejected',
                            'req_accept_date' => date('Y-m-d'),
                            'res_notify' => 'yes',
                            'res_notify_clear' => 'no',
                            'res_date' => date('Y-m-d'),
                              );
          $fpdata2 = $this->security->xss_clean($fpdata2); // xss filter
          $this->Front_model->update_file_preview_access_req($fpdata2,$fpid);

          $this->load->view('user/fpp_request_accept_reject',$data);
          $this->session->set_flashdata('message', 'You\'ve rejected the request!');
          redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
          $this->load->view('user/fpp_request_invalid');
        }
      }
      else
      {
        $this->load->view('user/fpp_request_invalid');
      } 
    }
    else
    {
      redirect(base_url('login'));
    }       
  }

  public function FilePreviewPermissionRespClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
      $id = $this->input->post('id');
      $data2 = array(
                      'res_notify_clear' => 'yes',
                        );
      $data2 = $this->security->xss_clean($data2); // xss filter
      $this->Front_model->update_file_preview_access_req($data2,$id);
        
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
    }
    else
    {
      redirect(base_url('login'));
    } 
  }
  
  // request to preview files if view only selected in role


   // Notes work start
   public function notesList()
   {
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
 
       if(isset($_COOKIE["d168_selectedportfolio"]))
       {
         $c_id = $_COOKIE["d168_selectedportfolio"];
         // $data['getp'] = $this->Front_model->getPortfolio3($c_id);
         $data['pdetail'] = $this->Front_model->ProjectDetail($c_id);
         $data['get_notes'] = $this->Front_model->getNotes($c_id);
         $data['getNotesMem'] = $this->Front_model->getNotesMem($c_id);
         $this->load->view('user/notes_list',$data);
       }
     }
     else
     {
       redirect(base_url('login'));
     }
   }
 
 
   public function store_note()
   {
 
     $this->form_validation->set_rules('text','Notes','trim|required');
     
     if ($this->form_validation->run() == FALSE)
     {
         //$errors = array();
         $errors = $this->form_validation->error_array();
         // Loop through $_POST and get the keys
         foreach ($errors as $key => $value)
         {
           // Add the error message for this field
           $errors[$key] = form_error($key);
         }
       
         $response['errors'] = array_filter($errors); // Some might be empty
         $response['status'] = FALSE;
         // You can use the Output class here too
         header('Content-type: application/json');
         exit(json_encode($response));
     }
     else
     {
 
     $text = $this->input->post('text');
 
     $words = [];
 preg_match_all('/\b[\w\d]+\b/', $text, $matches); // Extract all words containing alphanumeric characters
 
 if (isset($matches[0])) {
   $words = $matches[0]; // Get the matched words
 }
 
 $title = implode(' ', array_slice($words, 1, 3)); // Extract the first three words
 
     $data = array(
       'port_id' => $_COOKIE["d168_selectedportfolio"],
       'user_id' => $this->session->userdata('d168_id'),
       'title' => $title,
       'content' => $text,
     );
     $data = $this->security->xss_clean($data); // xss filter
     $this->Front_model->insert_note($data);
 
         $response['status'] = TRUE;
         // $response['title'] = $title;
         // You can use the Output class here too
         header('Content-type: application/json');
         //echo json_encode($response);
         exit(json_encode($response));
 
   }
 }
 
 public function store_duplicate_note()
   {
 
    //  $this->form_validation->set_rules('text','Notes','trim|required');
     
    //  if ($this->form_validation->run() == FALSE)
    //  {
    //      //$errors = array();
    //      $errors = $this->form_validation->error_array();
    //      // Loop through $_POST and get the keys
    //      foreach ($errors as $key => $value)
    //      {
    //        // Add the error message for this field
    //        $errors[$key] = form_error($key);
    //      }
       
    //      $response['errors'] = array_filter($errors); // Some might be empty
    //      $response['status'] = FALSE;
    //      // You can use the Output class here too
    //      header('Content-type: application/json');
    //      exit(json_encode($response));
    //  }
    //  else
    //  {
 
     $text = $this->input->post('text');
     $text2 = $this->input->post('title');
 
     $words = [];
 preg_match_all('/\b[\w\d]+\b/', $text, $matches); // Extract all words containing alphanumeric characters
 
 if (isset($matches[0])) {
   $words = $matches[0]; // Get the matched words
 }
 
 $title = implode(' ', array_slice($words, 1, 3)); // Extract the first three words
 
 $title = $text2.'[copy]';
     $data = array(
       'port_id' => $_COOKIE["d168_selectedportfolio"],
       'user_id' => $this->session->userdata('d168_id'),
       'title' => $title,
       'content' => $text,
     );
     $data = $this->security->xss_clean($data); // xss filter
     $this->Front_model->insert_note($data);
     $lastInsertedId = $this->db->insert_id();

 
         $response['status'] = TRUE;
         $response['id'] = $lastInsertedId;
         // $response['title'] = $title;
         // You can use the Output class here too
         header('Content-type: application/json');
         //echo json_encode($response);
         exit(json_encode($response));
 
  //  }
 }

 public function updateNote()
 {
 
   $this->form_validation->set_rules('text','Text','trim|required');
   
   if ($this->form_validation->run() == FALSE)
   {
       //$errors = array();
       $errors = $this->form_validation->error_array();
       // Loop through $_POST and get the keys
       foreach ($errors as $key => $value)
       {
         // Add the error message for this field
         $errors[$key] = form_error($key);
       }
     
       $response['errors'] = array_filter($errors); // Some might be empty
       $response['status'] = FALSE;
       // You can use the Output class here too
       header('Content-type: application/json');
       //echo json_encode($response);
       exit(json_encode($response));
   }
   else
   {
 
   $text = $this->input->post('text');
 
   // $title = implode(' ', array_slice(str_word_count($text, 2), 1, 3));
 
   $words = [];
   preg_match_all('/\b[\w\d]+\b/', $text, $matches); // Extract all words containing alphanumeric characters
   
   if (isset($matches[0])) {
     $words = $matches[0]; // Get the matched words
   }
   
   $title = implode(' ', array_slice($words, 1, 3)); // Extract the first three words
 
   // $title = $this->input->post('title');
   $id = $this->input->post('id');
   $data = array(
     'port_id' => $_COOKIE["d168_selectedportfolio"],
    //  'user_id' => $this->session->userdata('d168_id'),
     'title' => $title,
     'content' => $text,
   );
   $data = $this->security->xss_clean($data); // xss filter
   $this->Front_model->update_note($data,$id);
 
       $response['status'] = TRUE;
       // You can use the Output class here too
       header('Content-type: application/json');
       //echo json_encode($response);
       exit(json_encode($response));
 
 }
 }
 
 public function get_note_mem()
   {

    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
 
       if(isset($_COOKIE["d168_selectedportfolio"]))
       {
         $id = $this->input->post('id');
         $cid = $_COOKIE["d168_selectedportfolio"];
        //  $data = $this->Front_model->getNotesById($id); 
         $data = $this->Front_model->check_nm($cid,$id);
        // print_r($data);
         echo json_encode($data);
 
         
       }
     }
     else
     {
       redirect(base_url('login'));
     }

   }
 public function get_note()
   {
    // echo 'dasd';
    // die();
     if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
     {
 
       if(isset($_COOKIE["d168_selectedportfolio"]))
       {
         $id = $this->input->post('id');
         $data = $this->Front_model->getNotesById($id);        
         echo json_encode($data);
 
         
       }
     }
     else
     {
       redirect(base_url('login'));
     }
   }
 
   public function delete_note()
   {
         $id = $this->input->post('id');
         
         $data = $this->Front_model->deleteNote($id);        
         echo json_encode($data); 
   }
   public function delete_multiple_note()
   {
        $idList = $this->input->post('id[]');
        $data = $this->Front_model->deleteMultipleNote($idList);        
         echo json_encode($data); 
   }
 
   
   public function note_AddTeamMember()
{
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
          $nid = $this->input->post('total_note');
          $notesdetail = $this->Front_model->getNotesById2($nid);
          // print_r($notesdetail['port_id']);
          $noteArray = explode(',', $this->input->post('selected_note_mem'));//team member array

          if((!empty($noteArray[0])))
          {

           if(!empty($noteArray[0]))
            {
              foreach($noteArray as $n)
                  {

                  $check = $this->Front_model->check_NoteTeam($n,$nid);
                    if($check == 0)
                    {
                      
                      $data_note = array(
                          'nid' => $nid,
                          'portfolio_id' => $notesdetail->port_id,
                          'nmember' => trim($n),
                          'status' => 'send',
                          'ncreated_by' => $this->session->userdata('d168_id'),
                          'sent_date' => date('Y-m-d H:i:s'),
                          'sent_notify_clear' => 'no',
                          'access' => $this->input->post('changes'),
                            );
                      $data_note = $this->security->xss_clean($data_note); // xss filter
                      // 
                      $this->Front_model->insert_notemember($data_note);
                      $inserted_nm_id = $this->db->insert_id();

                      // $data = array(
                      //   'port_id' => $_COOKIE["d168_selectedportfolio"],
                      //   'user_id' => $this->session->userdata('d168_id'),
                      //   'title' => $title,
                      //   'content' => $text,
                      // );
                      // $data = $this->security->xss_clean($data); // xss filter
                      // $this->Front_model->insert_note($data);

//                       $getEmailID = $this->Front_model->getEmailID($n);

//                       $getnote_portfolio_name = "";
// $checknote_portfolio_name = $this->Front_model->getPortfolioName($notesdetail->port_id);
// if($checknote_portfolio_name)
// {
//   if($checknote_portfolio_name->portfolio_user == 'company')
//   { 
//     $getnote_portfolio_name = $checknote_portfolio_name->portfolio_name;
//   }
//   elseif($checknote_portfolio_name->portfolio_user == 'individual')
//   { 
//     $getnote_portfolio_name = $checknote_portfolio_name->portfolio_name.' '.$checknote_portfolio_name->portfolio_lname;
//   }
//   else
//   { 
//     $getnote_portfolio_name = $checknote_portfolio_name->portfolio_name;
//   }
// }

// $RequestEmailID = $getEmailID->email_address;



                      }
                  }
            }

            $this->session->set_flashdata('message','Member Added Successfully!');
            $response['status'] = TRUE;
            header('Content-type: application/json');
            echo json_encode($response);

          }
          else
            {
                    $response['status'] = 'Empty_NMember';
                    header('Content-type: application/json');
                    echo json_encode($response);
            }

          }
    else
    {
      redirect(base_url('login'));
    } 
  }


  public function NoteNotificationClearYes()
  {
    if(($this->session->userdata('d168_id')) || ($this->session->userdata('d168_id') != ""))
    {
    $nid = $this->input->post('id');
    $notecheck = $this->Front_model->getNoteMemberById($nid);
    if($notecheck)
    {
      if($notecheck->sent_notify_clear == 'no')
      {
      $data = array(
       'sent_notify_clear' => 'yes',
       'status_notify_clear' => 'yes',
      );
        $data = $this->security->xss_clean($data); // xss filter
        $this->Front_model->updateNoteMem($data,$nid);
        $response['status'] = TRUE;
        header('Content-type: application/json');
        echo json_encode($response);
      }
    }
    }
    else
    {
      redirect(base_url('login'));
    } 
  }

   // Notes work end

}
?>